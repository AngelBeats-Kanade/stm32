ARM GAS  /tmp/ccirtMvB.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_irda.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.IRDA_EndTxTransfer,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	IRDA_EndTxTransfer:
  23              	.LFB100:
  24              		.file 1 "Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c"
   1:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
   2:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ******************************************************************************
   3:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @file    stm32f1xx_hal_irda.c
   4:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @author  MCD Application Team
   5:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @version V1.1.1
   6:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @date    12-May-2017
   7:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief   IRDA HAL module driver.
   8:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *          This file provides firmware functions to manage the following 
   9:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *          functionalities of the IrDA SIR ENDEC block (IrDA):
  10:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           + Initialization and de-initialization functions
  11:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           + IO operation functions
  12:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           + Peripheral Control functions 
  13:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           + Peripheral State and Errors functions  
  14:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   @verbatim
  15:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
  16:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****                         ##### How to use this driver #####
  17:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
  18:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   [..]
  19:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     The IRDA HAL driver can be used as follows:
  20:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
  21:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Declare a IRDA_HandleTypeDef handle structure.
  22:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Initialize the IRDA low level resources by implementing the HAL_IRDA_MspInit() API:
  23:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (##) Enable the USARTx interface clock.
  24:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (##) IRDA pins configuration:
  25:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Enable the clock for the IRDA GPIOs.
  26:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the IRDA pins as alternate function pull-up.
  27:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_IRDA_Transmit_IT()
  28:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              and HAL_IRDA_Receive_IT() APIs):
  29:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the USARTx interrupt priority.
  30:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Enable the NVIC USART IRQ handle.
  31:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (##) DMA Configuration if you need to use DMA process (HAL_IRDA_Transmit_DMA()
  32:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              and HAL_IRDA_Receive_DMA() APIs):
  33:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  34:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Enable the DMAx interface clock.
ARM GAS  /tmp/ccirtMvB.s 			page 2


  35:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  36:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the DMA Tx/Rx channel.
  37:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Associate the initialized DMA handle to the IRDA DMA Tx/Rx handle.
  38:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  39:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the IRDAx interrupt priority and enable the NVIC USART IRQ handle
  40:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  41:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
  42:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Program the Baud Rate, Word Length, Parity, IrDA Mode, Prescaler 
  43:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         and Mode(Receiver/Transmitter) in the hirda Init structure.
  44:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
  45:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Initialize the IRDA registers by calling the HAL_IRDA_Init() API:
  46:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) This API configures also the low level Hardware GPIO, CLOCK, CORTEX...etc)
  47:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              by calling the customized HAL_IRDA_MspInit() API.
  48:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..] 
  49:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (@) The specific IRDA interrupts (Transmission complete interrupt, 
  50:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              RXNE interrupt and Error Interrupts) will be managed using the macros
  51:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              __HAL_IRDA_ENABLE_IT() and __HAL_IRDA_DISABLE_IT() inside the transmit and receive pro
  52:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]
  53:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         Three operation modes are available within this driver :
  54:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****  
  55:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      *** Polling mode IO operation ***
  56:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      =================================
  57:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]    
  58:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Send an amount of data in blocking mode using HAL_IRDA_Transmit() 
  59:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Receive an amount of data in blocking mode using HAL_IRDA_Receive()
  60:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        
  61:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      *** Interrupt mode IO operation ***
  62:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      ===================================
  63:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]    
  64:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Send an amount of data in non blocking mode using HAL_IRDA_Transmit_IT() 
  65:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can 
  66:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
  67:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Receive an amount of data in non blocking mode using HAL_IRDA_Receive_IT() 
  68:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can 
  69:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_RxCpltCallback          
  70:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can 
  71:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_ErrorCallback
  72:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
  73:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      *** DMA mode IO operation ***
  74:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      ==============================
  75:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..] 
  76:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_IRDA_Transmit_DMA() 
  77:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At transmission end of half transfer HAL_IRDA_TxHalfCpltCallback is executed and user ca
  78:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_TxHalfCpltCallback 
  79:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can 
  80:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
  81:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_IRDA_Receive_DMA() 
  82:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At reception end of half transfer HAL_IRDA_RxHalfCpltCallback is executed and user can 
  83:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_RxHalfCpltCallback 
  84:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can 
  85:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_RxCpltCallback
  86:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can 
  87:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_ErrorCallback
  88:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Pause the DMA Transfer using HAL_IRDA_DMAPause()
  89:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Resume the DMA Transfer using HAL_IRDA_DMAResume()
  90:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Stop the DMA Transfer using HAL_IRDA_DMAStop()
  91:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccirtMvB.s 			page 3


  92:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      *** IRDA HAL driver macros list ***
  93:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      ====================================
  94:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]
  95:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        Below the list of most used macros in IRDA HAL driver.
  96:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
  97:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_ENABLE: Enable the IRDA peripheral 
  98:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_DISABLE: Disable the IRDA peripheral
  99:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_GET_FLAG : Check whether the specified IRDA flag is set or not
 100:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_CLEAR_FLAG : Clear the specified IRDA pending flag
 101:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_ENABLE_IT: Enable the specified IRDA interrupt
 102:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_DISABLE_IT: Disable the specified IRDA interrupt
 103:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_GET_IT_SOURCE: Check whether the specified IRDA interrupt has occurred or not
 104:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 105:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]
 106:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (@) You can refer to the IRDA HAL driver header file for more useful macros
 107:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   @endverbatim
 108:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]
 109:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (@) Additionnal remark: If the parity is enabled, then the MSB bit of the data written
 110:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            in the data register is transmitted but is changed by the parity bit.
 111:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 112:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the possible IRDA frame formats are as listed in the following table:
 113:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     +-------------------------------------------------------------+
 114:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |   M bit |  PCE bit  |            IRDA frame                 |
 115:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |---------------------|---------------------------------------|
 116:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |    0    |    0      |    | SB | 8 bit data | 1 STB |          |
 117:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 118:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |    0    |    1      |    | SB | 7 bit data | PB | 1 STB |     |
 119:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 120:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |    1    |    0      |    | SB | 9 bit data | 1 STB |          |
 121:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 122:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |    1    |    1      |    | SB | 8 bit data | PB | 1 STB |     |
 123:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     +-------------------------------------------------------------+
 124:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ******************************************************************************
 125:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @attention
 126:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 127:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 128:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 129:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * Redistribution and use in source and binary forms, with or without modification,
 130:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * are permitted provided that the following conditions are met:
 131:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 132:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *      this list of conditions and the following disclaimer.
 133:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 134:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *      this list of conditions and the following disclaimer in the documentation
 135:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *      and/or other materials provided with the distribution.
 136:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 137:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *      may be used to endorse or promote products derived from this software
 138:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *      without specific prior written permission.
 139:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 140:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 141:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 142:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 143:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 144:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 145:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 146:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 147:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 148:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/ccirtMvB.s 			page 4


 149:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 150:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 151:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ******************************************************************************
 152:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 153:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 154:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Includes ------------------------------------------------------------------*/
 155:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** #include "stm32f1xx_hal.h"
 156:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 157:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @addtogroup STM32F1xx_HAL_Driver
 158:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 159:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 160:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 161:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA IRDA
 162:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief HAL IRDA module driver
 163:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 164:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 165:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** #ifdef HAL_IRDA_MODULE_ENABLED
 166:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 167:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Private typedef -----------------------------------------------------------*/
 168:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Private define ------------------------------------------------------------*/
 169:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @addtogroup IRDA_Private_Constants
 170:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 171:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 172:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 173:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @}
 174:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 175:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Private macro -------------------------------------------------------------*/
 176:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Private variables ---------------------------------------------------------*/
 177:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Private function prototypes -----------------------------------------------*/
 178:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @addtogroup IRDA_Private_Functions
 179:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 180:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 181:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_SetConfig (IRDA_HandleTypeDef *hirda);
 182:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda);
 183:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda);
 184:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda);
 185:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 186:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma);
 187:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 188:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma);
 189:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAError(DMA_HandleTypeDef *hdma);
 190:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 191:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 192:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 193:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 194:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 195:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, Flag
 196:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_EndTxTransfer(IRDA_HandleTypeDef *hirda);
 197:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda);
 198:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 199:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @}
 200:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 201:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Exported functions ---------------------------------------------------------*/
 202:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions IrDA Exported Functions
 203:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 204:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 205:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccirtMvB.s 			page 5


 206:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group1 IrDA Initialization and de-initialization functions 
 207:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *  @brief    Initialization and Configuration functions 
 208:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 209:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @verbatim
 210:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
 211:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             ##### Initialization and Configuration functions #####
 212:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
 213:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     [..]
 214:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy 
 215:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     in IrDA mode.
 216:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 217:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) BaudRate
 218:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) WordLength 
 219:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 220:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              in the data register is transmitted but is changed by the parity bit.
 221:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 222:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              please refer to Reference manual for possible IRDA frame formats.
 223:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) Prescaler: A pulse of width less than two and greater than one PSC period(s) may or ma
 224:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              not be rejected. The receiver set up time should be managed by software. The IrDA phys
 225:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              specification specifies a minimum of 10 ms delay between transmission and 
 226:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              reception (IrDA is a half duplex protocol).
 227:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) Mode: Receiver/transmitter modes
 228:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) IrDAMode: the IrDA can operate in the Normal mode or in the Low power mode.
 229:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     [..]
 230:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     The HAL_IRDA_Init() API follows IRDA configuration procedures (details for the procedures
 231:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     are available in reference manual).
 232:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 233:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @endverbatim
 234:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 235:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 236:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 237:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 238:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Initializes the IRDA mode according to the specified
 239:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         parameters in the IRDA_InitTypeDef and create the associated handle.
 240:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 241:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 242:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 243:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 244:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
 245:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 246:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 247:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda == NULL)
 248:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 249:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_ERROR;
 250:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 251:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 252:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the parameters */
 253:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
 254:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 255:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_RESET)
 256:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 257:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Allocate lock resource and initialize it */
 258:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->Lock = HAL_UNLOCKED;
 259:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 260:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_IRDA_MspInit(hirda);
 261:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 262:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
ARM GAS  /tmp/ccirtMvB.s 			page 6


 263:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_BUSY;
 264:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 265:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA peripheral */
 266:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_IRDA_DISABLE(hirda);
 267:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 268:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Set the IRDA communication parameters */
 269:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_SetConfig(hirda);
 270:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 271:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* In IrDA mode, the following bits must be kept cleared: 
 272:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
 273:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
 274:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_STOP | USART_CR2_CLKEN));
 275:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 276:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 277:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Enable the IRDA peripheral */
 278:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_IRDA_ENABLE(hirda);
 279:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 280:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Set the prescaler */
 281:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 282:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 283:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Configure the IrDA mode */
 284:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.IrDAMode);
 285:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 286:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
 287:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   SET_BIT(hirda->Instance->CR3, USART_CR3_IREN);
 288:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 289:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Initialize the IRDA state*/
 290:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 291:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState= HAL_IRDA_STATE_READY;
 292:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState= HAL_IRDA_STATE_READY;
 293:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 294:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 295:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 296:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 297:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 298:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DeInitializes the IRDA peripheral
 299:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 300:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 301:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 302:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 303:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DeInit(IRDA_HandleTypeDef *hirda)
 304:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 305:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 306:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda == NULL)
 307:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 308:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_ERROR;
 309:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 310:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 311:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the parameters */
 312:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
 313:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 314:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_BUSY;
 315:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 316:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the Peripheral */
 317:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_IRDA_DISABLE(hirda);
 318:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 319:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DeInit the low level hardware */
ARM GAS  /tmp/ccirtMvB.s 			page 7


 320:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_MspDeInit(hirda);
 321:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 322:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 323:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_RESET; 
 324:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_RESET;
 325:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 326:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Release Lock */
 327:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 328:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 329:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 330:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 331:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 332:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 333:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  IRDA MSP Init.
 334:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 335:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 336:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
 337:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 338:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_MspInit(IRDA_HandleTypeDef *hirda)
 339:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 340:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 341:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
 342:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 343:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_MspInit can be implemented in the user file
 344:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 345:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 346:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 347:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 348:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  IRDA MSP DeInit.
 349:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 350:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 351:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
 352:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 353:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_MspDeInit(IRDA_HandleTypeDef *hirda)
 354:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 355:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 356:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
 357:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 358:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_MspDeInit can be implemented in the user file
 359:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 360:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 361:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 362:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 363:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @}
 364:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 365:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 366:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group2 IO operation functions 
 367:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *  @brief   IRDA Transmit and Receive functions 
 368:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 369:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @verbatim
 370:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
 371:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****                          ##### IO operation functions #####
 372:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
 373:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   [..]
 374:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     This subsection provides a set of functions allowing to manage the IRDA data transfers.
 375:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 376:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
ARM GAS  /tmp/ccirtMvB.s 			page 8


 377:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 378:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     While receiving data, transmission should be avoided as the data to be transmitted
 379:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     could be corrupted.
 380:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 381:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) There are two modes of transfer:
 382:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) Blocking mode: The communication is performed in polling mode. 
 383:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              The HAL status of all data processing is returned by the same function 
 384:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              after finishing transfer.  
 385:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) No-Blocking mode: The communication is performed using Interrupts 
 386:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              or DMA, these APIs return the HAL status.
 387:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              The end of the data processing will be indicated through the 
 388:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              dedicated IRDA IRQ when using Interrupt mode or the DMA IRQ when 
 389:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              using DMA mode.
 390:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              The HAL_IRDA_TxCpltCallback(), HAL_IRDA_RxCpltCallback() user callbacks 
 391:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              will be executed respectively at the end of the transmit or Receive process
 392:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              The HAL_IRDA_ErrorCallback() user callback will be executed when a communication 
 393:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              error is detected
 394:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 395:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Blocking mode APIs are:
 396:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Transmit()
 397:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Receive()
 398:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
 399:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Non Blocking mode APIs with Interrupt are:
 400:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Transmit_IT()
 401:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Receive_IT()
 402:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_IRQHandler()
 403:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 404:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Non Blocking mode functions with DMA are:
 405:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Transmit_DMA()
 406:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Receive_DMA()
 407:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_DMAPause()
 408:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_DMAResume()
 409:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_DMAStop()
 410:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 411:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) A set of Transfer Complete Callbacks are provided in non Blocking mode:
 412:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_TxHalfCpltCallback()
 413:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_TxCpltCallback()
 414:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_RxHalfCpltCallback()
 415:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_RxCpltCallback()
 416:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_ErrorCallback()
 417:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 418:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @endverbatim
 419:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 420:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 421:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 422:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 423:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Sends an amount of data in blocking mode.
 424:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 425:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 426:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 427:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be sent
 428:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Timeout: Specify timeout value  
 429:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 430:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 431:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint3
 432:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 433:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
ARM GAS  /tmp/ccirtMvB.s 			page 9


 434:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t tickstart = 0U;
 435:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 436:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 437:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_READY)
 438:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 439:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U))
 440:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 441:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return  HAL_ERROR;
 442:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 443:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 444:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 445:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 446:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 447:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 448:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 449:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 450:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Init tickstart for timeout managment */
 451:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     tickstart = HAL_GetTick();
 452:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 453:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 454:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 455:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     while(hirda->TxXferCount > 0U)
 456:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 457:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->TxXferCount--;
 458:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 459:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 460:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 461:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 462:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 463:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 464:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         tmp = (uint16_t*) pData;
 465:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->Instance->DR = (*tmp & (uint16_t)0x01FF);
 466:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(hirda->Init.Parity == IRDA_PARITY_NONE)
 467:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 468:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=2U;
 469:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 470:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         else
 471:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 472:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=1U;
 473:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 474:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 475:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
 476:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 477:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 478:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 479:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 480:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 481:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->Instance->DR = (*pData++ & (uint8_t)0xFF);
 482:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 483:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 484:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 485:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 486:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     { 
 487:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_TIMEOUT;
 488:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 489:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 490:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* At end of Tx process, restore hirda->gState to Ready */
ARM GAS  /tmp/ccirtMvB.s 			page 10


 491:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_READY;
 492:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 493:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 494:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 495:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 496:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 497:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 498:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 499:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 500:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 501:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 502:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 503:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 504:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 505:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Receive an amount of data in blocking mode. 
 506:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 507:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 508:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 509:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be received
 510:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Timeout: Specify timeout value    
 511:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 512:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 513:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32
 514:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 515:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
 516:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t tickstart = 0U;
 517:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 518:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 519:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_READY) 
 520:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 521:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U))
 522:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 523:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return  HAL_ERROR;
 524:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 525:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 526:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 527:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 528:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 529:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 530:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 531:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 532:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Init tickstart for timeout managment */
 533:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     tickstart = HAL_GetTick();
 534:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 535:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 536:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
 537:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 538:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Check the remain data to be received */
 539:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     while(hirda->RxXferCount > 0U)
 540:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 541:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->RxXferCount--;
 542:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 543:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 544:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 545:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 546:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 547:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
ARM GAS  /tmp/ccirtMvB.s 			page 11


 548:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         tmp = (uint16_t*)pData;
 549:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(hirda->Init.Parity == IRDA_PARITY_NONE)
 550:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 551:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           *tmp = (uint16_t)(hirda->Instance->DR & (uint16_t)0x01FF);
 552:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=2U;
 553:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 554:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         else
 555:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 556:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           *tmp = (uint16_t)(hirda->Instance->DR & (uint16_t)0x00FF);
 557:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=1U;
 558:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 559:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       } 
 560:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
 561:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 562:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 563:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 564:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 565:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 566:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(hirda->Init.Parity == IRDA_PARITY_NONE)
 567:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 568:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           *pData++ = (uint8_t)(hirda->Instance->DR & (uint8_t)0x00FF);
 569:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 570:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         else
 571:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 572:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           *pData++ = (uint8_t)(hirda->Instance->DR & (uint8_t)0x007F);
 573:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 574:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 575:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 576:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 577:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* At end of Rx process, restore hirda->RxState to Ready */
 578:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 579:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 580:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 581:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 582:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 583:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 584:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 585:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 586:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 587:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 588:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 589:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 590:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 591:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 592:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Sends an amount of data in non blocking mode.
 593:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 594:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 595:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 596:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be sent
 597:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 598:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 599:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 600:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 601:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 602:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_READY)
 603:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 604:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U)) 
ARM GAS  /tmp/ccirtMvB.s 			page 12


 605:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 606:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
 607:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 608:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 609:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 610:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 611:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->pTxBuffPtr = pData;
 612:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 613:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 614:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 615:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 616:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 617:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 618:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 619:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 620:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 621:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Transmit data register empty Interrupt */
 622:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_TXE);
 623:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 624:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 625:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 626:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 627:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 628:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 629:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 630:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 631:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 632:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 633:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Receives an amount of data in non blocking mode. 
 634:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 635:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 636:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 637:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be received
 638:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 639:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 640:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 641:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 642:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 643:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_READY)
 644:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 645:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U))
 646:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 647:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
 648:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 649:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 650:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 651:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 652:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 653:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->pRxBuffPtr = pData;
 654:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 655:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
 656:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 657:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 658:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 659:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 660:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 661:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
ARM GAS  /tmp/ccirtMvB.s 			page 13


 662:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 663:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Parity Error Interrupt */
 664:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_PE);
 665:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 666:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
 667:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_ERR);
 668:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 669:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Data Register not empty Interrupt */
 670:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_RXNE);
 671:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 672:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 673:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 674:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 675:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 676:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 677:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 678:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 679:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 680:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 681:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Sends an amount of data in non blocking mode. 
 682:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 683:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 684:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 685:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be sent
 686:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 687:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 688:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 689:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 690:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 691:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 692:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 693:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_READY)
 694:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 695:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U))
 696:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 697:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
 698:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 699:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 700:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 701:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 702:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 703:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->pTxBuffPtr = pData;
 704:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 705:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 706:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 707:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 708:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 709:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 710:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA transfer complete callback */
 711:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferCpltCallback = IRDA_DMATransmitCplt;
 712:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 713:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA half transfer complete callback */
 714:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferHalfCpltCallback = IRDA_DMATransmitHalfCplt;
 715:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 716:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the DMA error callback */
 717:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferErrorCallback = IRDA_DMAError;
 718:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccirtMvB.s 			page 14


 719:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the DMA abort callback */
 720:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferAbortCallback = NULL;
 721:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 722:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA transmit DMA Channel */
 723:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     tmp = (uint32_t*)&pData;
 724:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_DMA_Start_IT(hirda->hdmatx, *(uint32_t*)tmp, (uint32_t)&hirda->Instance->DR, Size);
 725:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 726:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
 727:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_CLEAR_FLAG(hirda, IRDA_FLAG_TC);
 728:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 729:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 730:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 731:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 732:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
 733:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        in the USART CR3 register */
 734:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 735:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 736:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 737:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 738:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 739:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 740:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 741:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 742:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 743:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 744:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 745:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Receives an amount of data in non blocking mode. 
 746:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 747:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 748:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 749:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be received
 750:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   When the IRDA parity is enabled (PCE = 1) the data received contain the parity bit.
 751:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 752:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 753:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 754:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 755:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 756:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 757:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 758:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_READY) 
 759:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 760:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U))
 761:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 762:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
 763:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 764:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 765:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 766:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 767:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 768:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->pRxBuffPtr = pData;
 769:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 770:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 771:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE; 
 772:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 773:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 774:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA transfer complete callback */
 775:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferCpltCallback = IRDA_DMAReceiveCplt;
ARM GAS  /tmp/ccirtMvB.s 			page 15


 776:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 777:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA half transfer complete callback */
 778:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferHalfCpltCallback = IRDA_DMAReceiveHalfCplt;
 779:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 780:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the DMA error callback */
 781:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferErrorCallback = IRDA_DMAError;
 782:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 783:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the DMA abort callback */
 784:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferAbortCallback = NULL;
 785:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 786:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the DMA channel */
 787:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     tmp = (uint32_t*)&pData;
 788:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_DMA_Start_IT(hirda->hdmarx, (uint32_t)&hirda->Instance->DR, *(uint32_t*)tmp, Size);
 789:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 790:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the sec
 791:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_CLEAR_OREFLAG(hirda);
 792:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 793:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 794:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 795:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 796:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Parity Error Interrupt */
 797:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
 798:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 799:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
 800:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 801:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 802:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
 803:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     in the USART CR3 register */
 804:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 805:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 806:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 807:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 808:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 809:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 810:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 811:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 812:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 813:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 814:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 815:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief Pauses the DMA Transfer.
 816:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 817:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 818:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 819:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 820:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAPause(IRDA_HandleTypeDef *hirda)
 821:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 822:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 823:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 824:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Locked */
 825:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_LOCK(hirda);
 826:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 827:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
 828:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 829:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 830:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable the IRDA DMA Tx request */
 831:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 832:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
ARM GAS  /tmp/ccirtMvB.s 			page 16


 833:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 834:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
 835:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 836:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 837:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
 838:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
 839:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 840:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 841:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable the IRDA DMA Rx request */
 842:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 843:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 844:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 845:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Unlocked */
 846:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 847:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 848:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 849:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 850:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 851:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 852:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief Resumes the DMA Transfer.
 853:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 854:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 855:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 856:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 857:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAResume(IRDA_HandleTypeDef *hirda)
 858:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 859:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Locked */
 860:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_LOCK(hirda);
 861:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 862:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_BUSY_TX)
 863:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 864:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA DMA Tx request */
 865:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 866:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 867:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 868:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
 869:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 870:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
 871:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_CLEAR_OREFLAG(hirda);
 872:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 873:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
 874:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
 875:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 876:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 877:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA DMA Rx request */
 878:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 879:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 880:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 881:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Unlocked */
 882:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 883:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 884:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 885:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 886:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 887:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 888:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief Stops the DMA Transfer.
 889:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
ARM GAS  /tmp/ccirtMvB.s 			page 17


 890:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 891:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 892:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 893:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAStop(IRDA_HandleTypeDef *hirda)
 894:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 895:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 896:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* The Lock is not implemented on this API to allow the user application
 897:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   to call the HAL IRDA API under callbacks HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback():
 898:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
 899:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   and the correspond call back is executed HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback()
 900:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 901:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 902:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Tx request if ongoing */
 903:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
 904:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 905:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 906:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 907:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 908:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel */
 909:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
 910:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 911:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
 912:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 913:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
 914:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 915:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 916:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Rx request if ongoing */
 917:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
 918:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 919:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 920:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 921:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 922:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel */
 923:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
 924:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 925:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
 926:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 927:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
 928:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 929:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 930:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 931:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 932:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 933:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 934:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing transfers (blocking mode).
 935:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
 936:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
 937:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
 938:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
 939:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
 940:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
 941:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
 942:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
 943:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 944:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
 945:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Abort(IRDA_HandleTypeDef *hirda)
 946:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
ARM GAS  /tmp/ccirtMvB.s 			page 18


 947:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 948:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 949:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 950:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 951:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
 952:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
 953:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 954:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 955:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 956:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel: use blocking DMA Abort API (no callback) */
 957:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
 958:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 959:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
 960:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
 961:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
 962:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 963:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
 964:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 965:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 966:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 967:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
 968:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 969:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 970:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 971:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 972:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel: use blocking DMA Abort API (no callback) */
 973:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
 974:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 975:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
 976:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
 977:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
 978:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 979:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
 980:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 981:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 982:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 983:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset Tx and Rx transfer counters */
 984:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 985:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 986:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 987:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset ErrorCode */
 988:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 989:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 990:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->RxState and hirda->gState to Ready */
 991:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 992:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 993:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 994:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 995:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 996:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 997:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 998:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
 999:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1000:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1001:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1002:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1003:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
ARM GAS  /tmp/ccirtMvB.s 			page 19


1004:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1005:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1006:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1007:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1008:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
1009:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortTransmit(IRDA_HandleTypeDef *hirda)
1010:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1011:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1012:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1013:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1014:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1015:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1016:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1017:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1018:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1019:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */
1020:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
1021:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1022:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
1023:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1024:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
1025:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1026:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
1027:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1028:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1029:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1030:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset Tx transfer counter */
1031:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1032:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1033:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState to Ready */
1034:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
1035:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1036:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1037:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1038:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1039:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1040:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1041:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1042:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1043:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1044:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1045:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1046:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1047:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1048:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1049:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1050:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
1051:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortReceive(IRDA_HandleTypeDef *hirda)
1052:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1053:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1054:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1055:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1056:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1057:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1058:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1059:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1060:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
ARM GAS  /tmp/ccirtMvB.s 			page 20


1061:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1062:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */
1063:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
1064:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1065:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
1066:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1067:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
1068:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1069:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
1070:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1071:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1072:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1073:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset Rx transfer counter */
1074:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1075:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1076:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->RxState to Ready */
1077:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1078:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1079:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1080:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1081:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1082:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1083:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1084:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1085:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1086:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1087:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1088:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1089:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1090:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1091:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1092:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1093:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1094:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1095:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
1096:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Abort_IT(IRDA_HandleTypeDef *hirda)
1097:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1098:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
1099:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1100:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1101:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1102:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1103:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1104:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to IRDA Handle, DMA Abort complete callbacks sh
1105:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      before any call to DMA Abort functions */
1106:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Tx Handle is valid */
1107:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->hdmatx != NULL)
1108:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1109:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set DMA Abort Complete callback if IRDA DMA Tx request if enabled.
1110:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        Otherwise, set it to NULL */
1111:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1112:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1113:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = IRDA_DMATxAbortCallback;
1114:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1115:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
1116:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1117:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
ARM GAS  /tmp/ccirtMvB.s 			page 21


1118:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1119:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1120:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Rx Handle is valid */
1121:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->hdmarx != NULL)
1122:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1123:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set DMA Abort Complete callback if IRDA DMA Rx request if enabled.
1124:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        Otherwise, set it to NULL */
1125:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1126:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1127:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = IRDA_DMARxAbortCallback;
1128:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1129:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
1130:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1131:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
1132:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1133:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1134:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1135:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1136:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1137:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1138:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable DMA Tx at IRDA level */
1139:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1140:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1141:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use non blocking DMA Abort API (callback) */
1142:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
1143:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1144:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* IRDA Tx DMA Abort callback has already been initialised : 
1145:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1146:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1147:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Abort DMA TX */
1148:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmatx) != HAL_OK)
1149:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1150:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->hdmatx->XferAbortCallback = NULL;
1151:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1152:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
1153:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1154:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x00U;
1155:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1156:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1157:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1158:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1159:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1160:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1161:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1162:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1163:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1164:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use non blocking DMA Abort API (callback) */
1165:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
1166:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1167:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* IRDA Rx DMA Abort callback has already been initialised : 
1168:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1169:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1170:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Abort DMA RX */
1171:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1172:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1173:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->hdmarx->XferAbortCallback = NULL;
1174:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x01U;
ARM GAS  /tmp/ccirtMvB.s 			page 22


1175:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1176:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
1177:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1178:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x00U;
1179:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1180:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1181:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1182:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1183:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1184:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(AbortCplt == 0x01U)
1185:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1186:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Reset Tx and Rx transfer counters */
1187:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0x00U; 
1188:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
1189:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1190:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Reset ErrorCode */
1191:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1192:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1193:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Restore hirda->gState and hirda->RxState to Ready */
1194:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState  = HAL_IRDA_STATE_READY;
1195:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
1196:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1197:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1198:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_IRDA_AbortCpltCallback(hirda);
1199:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1200:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1201:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1202:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1203:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1204:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1205:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1206:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1207:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1208:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1209:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1210:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1211:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1212:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1213:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1214:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1215:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1216:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1217:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
1218:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortTransmit_IT(IRDA_HandleTypeDef *hirda)
1219:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1220:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1221:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1222:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1223:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1224:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1225:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1226:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1227:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1228:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */
1229:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
1230:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1231:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback : 
ARM GAS  /tmp/ccirtMvB.s 			page 23


1232:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1233:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = IRDA_DMATxOnlyAbortCallback;
1234:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1235:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Abort DMA TX */
1236:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmatx) != HAL_OK)
1237:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1238:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Call Directly hirda->hdmatx->XferAbortCallback function in case of error */
1239:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->hdmatx->XferAbortCallback(hirda->hdmatx);
1240:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1241:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1242:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
1243:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1244:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Reset Tx transfer counter */
1245:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->TxXferCount = 0x00U;
1246:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1247:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Restore hirda->gState to Ready */
1248:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->gState = HAL_IRDA_STATE_READY;
1249:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1250:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1251:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_IRDA_AbortTransmitCpltCallback(hirda);
1252:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1253:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1254:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
1255:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1256:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Reset Tx transfer counter */
1257:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0x00U;
1258:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1259:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Restore hirda->gState to Ready */
1260:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_READY;
1261:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1262:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1263:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_IRDA_AbortTransmitCpltCallback(hirda);
1264:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1265:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1266:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1267:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1268:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1269:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1270:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1271:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1272:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1273:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1274:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1275:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1276:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1277:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1278:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1279:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1280:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1281:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1282:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
1283:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortReceive_IT(IRDA_HandleTypeDef *hirda)
1284:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1285:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1286:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1287:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1288:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccirtMvB.s 			page 24


1289:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1290:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1291:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1292:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1293:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1294:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */
1295:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
1296:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1297:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback : 
1298:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1299:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = IRDA_DMARxOnlyAbortCallback;
1300:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1301:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Abort DMA RX */
1302:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1303:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1304:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Call Directly hirda->hdmarx->XferAbortCallback function in case of error */
1305:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
1306:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1307:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1308:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
1309:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1310:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Reset Rx transfer counter */
1311:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->RxXferCount = 0x00U;
1312:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1313:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Restore hirda->RxState to Ready */
1314:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->RxState = HAL_IRDA_STATE_READY;
1315:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1316:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1317:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_IRDA_AbortReceiveCpltCallback(hirda);
1318:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1319:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1320:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
1321:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1322:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Reset Rx transfer counter */
1323:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
1324:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1325:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Restore hirda->RxState to Ready */
1326:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
1327:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1328:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1329:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_IRDA_AbortReceiveCpltCallback(hirda);
1330:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1331:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1332:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1333:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1334:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1335:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1336:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  This function handles IRDA interrupt request.
1337:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1338:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1339:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1340:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1341:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)
1342:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1343:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t isrflags   = READ_REG(hirda->Instance->SR);
1344:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
1345:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t cr3its     = READ_REG(hirda->Instance->CR3);
ARM GAS  /tmp/ccirtMvB.s 			page 25


1346:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t errorflags = 0x00U;
1347:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t dmarequest = 0x00U;
1348:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1349:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* If no error occurs */
1350:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
1351:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(errorflags == RESET)
1352:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1353:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* IRDA in mode Receiver -----------------------------------------------*/
1354:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1355:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1356:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       IRDA_Receive_IT(hirda);
1357:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return;
1358:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1359:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1360:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1361:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* If some errors occur */
1362:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE 
1363:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1364:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* IRDA parity error interrupt occurred -------------------------------*/
1365:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
1366:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1367:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
1368:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1369:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1370:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* IRDA noise error interrupt occurred --------------------------------*/
1371:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1372:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1373:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
1374:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1375:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1376:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* IRDA frame error interrupt occurred --------------------------------*/
1377:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1378:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1379:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
1380:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1381:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1382:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* IRDA Over-Run interrupt occurred -----------------------------------*/
1383:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1384:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     { 
1385:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
1386:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1387:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Call IRDA Error Call back function if need be -----------------------*/ 
1388:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
1389:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1390:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* IRDA in mode Receiver ---------------------------------------------*/
1391:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1392:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1393:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         IRDA_Receive_IT(hirda);
1394:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1395:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1396:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1397:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          consider error as blocking */
1398:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
1399:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) || dmarequest)
1400:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1401:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Blocking error : transfer is aborted
1402:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            Set the IRDA state ready to be able to start again the process,
ARM GAS  /tmp/ccirtMvB.s 			page 26


1403:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1404:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         IRDA_EndRxTransfer(hirda);
1405:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1406:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Disable the IRDA DMA Rx request if enabled */
1407:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1408:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
1409:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1410:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1411:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           /* Abort the IRDA DMA Rx channel */
1412:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           if(hirda->hdmarx != NULL)
1413:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           {
1414:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             /* Set the IRDA DMA Abort callback : 
1415:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             will lead to call HAL_IRDA_ErrorCallback() at end of DMA abort procedure */
1416:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             hirda->hdmarx->XferAbortCallback = IRDA_DMAAbortOnError;
1417:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1418:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             if(HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1419:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             {
1420:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****               /* Call Directly XferAbortCallback function in case of error */
1421:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****               hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
1422:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             }
1423:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           }
1424:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           else
1425:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           {
1426:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             /* Call user error callback */
1427:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             HAL_IRDA_ErrorCallback(hirda);
1428:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           }
1429:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
1430:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         else
1431:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
1432:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           /* Call user error callback */
1433:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           HAL_IRDA_ErrorCallback(hirda);
1434:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
1435:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1436:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
1437:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1438:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Non Blocking error : transfer could go on. 
1439:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            Error is notified to user through user error callback */
1440:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         HAL_IRDA_ErrorCallback(hirda);
1441:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1442:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1443:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1444:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return;
1445:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   } /* End if some error occurs */
1446:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1447:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* IRDA in mode Transmitter ------------------------------------------------*/
1448:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
1449:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1450:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_Transmit_IT(hirda);
1451:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return;
1452:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1453:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1454:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* IRDA in mode Transmitter end --------------------------------------------*/
1455:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
1456:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1457:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndTransmit_IT(hirda);
1458:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return;
1459:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
ARM GAS  /tmp/ccirtMvB.s 			page 27


1460:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1461:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1462:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1463:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Tx Transfer complete callbacks.
1464:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: pointer to a IRDA_HandleTypeDef structure that contains
1465:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1466:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1467:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1468:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)
1469:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1470:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1471:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1472:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1473:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_TxCpltCallback can be implemented in the user file
1474:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */ 
1475:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1476:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1477:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1478:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Tx Half Transfer completed callbacks.
1479:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1480:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified USART module.
1481:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1482:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1483:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_TxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
1484:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1485:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1486:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1487:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1488:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_TxHalfCpltCallback can be implemented in the user file
1489:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1490:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1491:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1492:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1493:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Rx Transfer complete callbacks.
1494:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1495:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1496:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1497:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1498:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda)
1499:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1500:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1501:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1502:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1503:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_RxCpltCallback can be implemented in the user file
1504:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1505:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1506:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1507:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1508:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Rx Half Transfer complete callbacks.
1509:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1510:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1511:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1512:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1513:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_RxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
1514:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1515:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1516:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
ARM GAS  /tmp/ccirtMvB.s 			page 28


1517:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1518:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_RxHalfCpltCallback can be implemented in the user file
1519:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1520:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1521:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1522:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1523:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief IRDA error callbacks.
1524:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1525:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1526:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1527:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1528:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)
1529:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1530:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1531:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1532:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1533:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   the HAL_IRDA_ErrorCallback could be implemented in the user file
1534:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */ 
1535:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1536:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1537:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1538:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  IRDA Abort Complete callback.
1539:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1540:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1541:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1542:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_AbortCpltCallback(IRDA_HandleTypeDef *hirda)
1543:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1544:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1545:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1546:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1547:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1548:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_AbortCpltCallback can be implemented in the user file.
1549:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    */
1550:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1551:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1552:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1553:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  IRDA Abort Transmit Complete callback.
1554:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1555:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1556:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1557:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_AbortTransmitCpltCallback(IRDA_HandleTypeDef *hirda)
1558:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1559:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1560:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1561:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1562:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1563:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_AbortTransmitCpltCallback can be implemented in the user file.
1564:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    */
1565:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1566:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1567:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1568:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  IRDA Abort ReceiveComplete callback.
1569:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1570:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1571:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1572:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_AbortReceiveCpltCallback(IRDA_HandleTypeDef *hirda)
1573:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
ARM GAS  /tmp/ccirtMvB.s 			page 29


1574:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1575:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1576:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1577:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1578:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_AbortReceiveCpltCallback can be implemented in the user file.
1579:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    */
1580:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1581:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1582:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1583:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @}
1584:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1585:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1586:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group3 Peripheral State and Errors functions 
1587:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *  @brief   IRDA State and Errors functions 
1588:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
1589:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @verbatim   
1590:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
1591:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****                   ##### Peripheral State and Errors functions #####
1592:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================  
1593:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   [..]
1594:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     This subsection provides a set of functions allowing to return the State of IrDA 
1595:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     communication process and also return Peripheral Errors occurred during communication process
1596:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      (+) HAL_IRDA_GetState() API can be helpful to check in run-time the state of the IrDA peripher
1597:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      (+) HAL_IRDA_GetError() check in run-time errors that could be occurred during communication. 
1598:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      
1599:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @endverbatim
1600:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
1601:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1602:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1603:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1604:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Returns the IRDA state.
1605:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1606:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1607:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL state
1608:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1609:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_IRDA_StateTypeDef HAL_IRDA_GetState(IRDA_HandleTypeDef *hirda)
1610:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1611:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
1612:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   temp1 = hirda->gState;
1613:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   temp2 = hirda->RxState;
1614:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1615:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return (HAL_IRDA_StateTypeDef)(temp1 | temp2);
1616:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1617:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1618:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1619:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Return the IRDA error code
1620:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1621:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1622:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval IRDA Error Code
1623:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1624:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** uint32_t HAL_IRDA_GetError(IRDA_HandleTypeDef *hirda)
1625:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1626:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return hirda->ErrorCode;
1627:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1628:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1629:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1630:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @}
ARM GAS  /tmp/ccirtMvB.s 			page 30


1631:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1632:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1633:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1634:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA transmit process complete callback. 
1635:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
1636:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *               the configuration information for the specified DMA module.
1637:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1638:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1639:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma)
1640:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1641:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1642:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Normal mode */
1643:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
1644:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1645:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0U;
1646:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
1647:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
1648:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     in the IRDA CR3 register */
1649:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1650:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
1651:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Transmit Complete Interrupt */
1652:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_TC);
1653:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1654:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Circular mode */
1655:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
1656:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1657:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_IRDA_TxCpltCallback(hirda);
1658:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1659:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1660:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1661:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1662:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief DMA IRDA receive process half complete callback 
1663:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
1664:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified DMA module.
1665:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1666:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1667:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma)
1668:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1669:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1670:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1671:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_TxHalfCpltCallback(hirda); 
1672:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1673:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1674:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1675:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA receive process complete callback. 
1676:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma: DMA handle
1677:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1678:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1679:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma)   
1680:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1681:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1682:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Normal mode */
1683:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
1684:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1685:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0U;
1686:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1687:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
ARM GAS  /tmp/ccirtMvB.s 			page 31


1688:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
1689:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1690:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
1691:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
1692:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     in the IRDA CR3 register */
1693:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1694:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1695:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* At end of Rx process, restore hirda->RxState to Ready */
1696:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
1697:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1698:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_RxCpltCallback(hirda);
1699:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1700:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1701:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1702:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief DMA IRDA receive process half complete callback 
1703:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
1704:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified DMA module.
1705:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1706:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1707:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma)
1708:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1709:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1710:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_RxHalfCpltCallback(hirda); 
1711:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1712:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1713:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1714:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA communication error callback.
1715:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma: DMA handle
1716:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1717:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1718:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAError(DMA_HandleTypeDef *hdma)
1719:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1720:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
1721:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1722:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1723:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Tx request if ongoing */
1724:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
1725:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
1726:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1727:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0U;
1728:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
1729:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1730:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1731:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Rx request if ongoing */
1732:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
1733:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
1734:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1735:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0U;
1736:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
1737:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1738:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1739:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode |= HAL_IRDA_ERROR_DMA; 
1740:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1741:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_ErrorCallback(hirda);
1742:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1743:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1744:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
ARM GAS  /tmp/ccirtMvB.s 			page 32


1745:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  This function handles IRDA Communication Timeout.
1746:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1747:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1748:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Flag: specifies the IRDA flag to check.
1749:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Status: The new Flag status (SET or RESET).
1750:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Tickstart: Tick start value
1751:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Timeout: Timeout duration
1752:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1753:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1754:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, Flag
1755:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1756:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Wait until flag is set */
1757:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   while((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
1758:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1759:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Check for the Timeout */
1760:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(Timeout != HAL_MAX_DELAY)
1761:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1762:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
1763:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1764:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
1765:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
1766:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1767:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
1768:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->gState  = HAL_IRDA_STATE_READY;
1769:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->RxState = HAL_IRDA_STATE_READY;
1770:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
1771:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Process Unlocked */
1772:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         __HAL_UNLOCK(hirda);
1773:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
1774:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         return HAL_TIMEOUT;
1775:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1776:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1777:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1778:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1779:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1780:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1781:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1782:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  End ongoing Tx transfer on IRDA peripheral (following error detection or Transmit compl
1783:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: IRDA handle.
1784:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1785:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1786:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_EndTxTransfer(IRDA_HandleTypeDef *hirda)
1787:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
  25              		.loc 1 1787 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1788:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1789:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
  31              		.loc 1 1789 0
  32 0000 0268     		ldr	r2, [r0]
  33 0002 D368     		ldr	r3, [r2, #12]
  34 0004 23F0C003 		bic	r3, r3, #192
  35 0008 D360     		str	r3, [r2, #12]
1790:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccirtMvB.s 			page 33


1791:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* At end of Tx process, restore hirda->gState to Ready */
1792:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
  36              		.loc 1 1792 0
  37 000a 2023     		movs	r3, #32
  38 000c 80F83530 		strb	r3, [r0, #53]
  39 0010 7047     		bx	lr
  40              		.cfi_endproc
  41              	.LFE100:
  43              		.section	.text.IRDA_EndRxTransfer,"ax",%progbits
  44              		.align	1
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  48              		.fpu softvfp
  50              	IRDA_EndRxTransfer:
  51              	.LFB101:
1793:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1794:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1795:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1796:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  End ongoing Rx transfer on IRDA peripheral (following error detection or Reception comp
1797:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: IRDA handle.
1798:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1799:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1800:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda)
1801:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
  52              		.loc 1 1801 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57              	.LVL1:
1802:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1803:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  58              		.loc 1 1803 0
  59 0000 0268     		ldr	r2, [r0]
  60 0002 D368     		ldr	r3, [r2, #12]
  61 0004 23F49073 		bic	r3, r3, #288
  62 0008 D360     		str	r3, [r2, #12]
1804:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
  63              		.loc 1 1804 0
  64 000a 0268     		ldr	r2, [r0]
  65 000c 5369     		ldr	r3, [r2, #20]
  66 000e 23F00103 		bic	r3, r3, #1
  67 0012 5361     		str	r3, [r2, #20]
1805:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1806:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* At end of Rx process, restore hirda->RxState to Ready */
1807:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
  68              		.loc 1 1807 0
  69 0014 2023     		movs	r3, #32
  70 0016 80F83630 		strb	r3, [r0, #54]
  71 001a 7047     		bx	lr
  72              		.cfi_endproc
  73              	.LFE101:
  75              		.section	.text.IRDA_Transmit_IT,"ax",%progbits
  76              		.align	1
  77              		.syntax unified
  78              		.thumb
ARM GAS  /tmp/ccirtMvB.s 			page 34


  79              		.thumb_func
  80              		.fpu softvfp
  82              	IRDA_Transmit_IT:
  83              	.LFB107:
1808:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1809:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1810:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1811:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA communication abort callback, when initiated by HAL services on Error
1812:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
1813:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
1814:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1815:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1816:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma)
1817:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1818:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1819:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1820:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1821:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1822:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_ErrorCallback(hirda);
1823:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1824:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1825:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1826:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Tx communication abort callback, when initiated by user
1827:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
1828:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
1829:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         Abort still ongoing for Rx DMA Handle.
1830:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
1831:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1832:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1833:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
1834:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1835:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1836:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1837:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->hdmatx->XferAbortCallback = NULL;
1838:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1839:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check if an Abort process is still ongoing */
1840:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->hdmarx != NULL)
1841:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1842:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx->XferAbortCallback != NULL)
1843:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1844:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return;
1845:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1846:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1847:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1848:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
1849:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1850:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1851:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1852:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset ErrorCode */
1853:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1854:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1855:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState and hirda->RxState to Ready */
1856:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState  = HAL_IRDA_STATE_READY;
1857:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1858:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1859:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
1860:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortCpltCallback(hirda);
ARM GAS  /tmp/ccirtMvB.s 			page 35


1861:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1862:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1863:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1864:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Rx communication abort callback, when initiated by user
1865:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
1866:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
1867:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         Abort still ongoing for Tx DMA Handle.
1868:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
1869:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1870:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1871:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
1872:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1873:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1874:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1875:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->hdmarx->XferAbortCallback = NULL;
1876:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1877:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check if an Abort process is still ongoing */
1878:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->hdmatx != NULL)
1879:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1880:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx->XferAbortCallback != NULL)
1881:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1882:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return;
1883:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1884:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1885:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1886:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
1887:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1888:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1889:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1890:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset ErrorCode */
1891:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1892:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1893:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState and hirda->RxState to Ready */
1894:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState  = HAL_IRDA_STATE_READY;
1895:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1896:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1897:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
1898:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortCpltCallback(hirda);
1899:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1900:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1901:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1902:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Tx communication abort callback, when initiated by user by a call to
1903:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         HAL_IRDA_AbortTransmit_IT API (Abort only Tx transfer)
1904:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
1905:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         and leads to user Tx Abort Complete callback execution).
1906:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
1907:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1908:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1909:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
1910:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1911:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1912:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1913:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1914:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1915:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState to Ready */
1916:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
1917:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccirtMvB.s 			page 36


1918:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
1919:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortTransmitCpltCallback(hirda);
1920:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1921:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1922:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1923:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Rx communication abort callback, when initiated by user by a call to
1924:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         HAL_IRDA_AbortReceive_IT API (Abort only Rx transfer)
1925:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
1926:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         and leads to user Rx Abort Complete callback execution).
1927:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
1928:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1929:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1930:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
1931:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1932:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1933:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1934:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1935:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1936:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->RxState to Ready */
1937:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1938:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1939:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
1940:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortReceiveCpltCallback(hirda);
1941:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1942:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1943:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1944:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Send an amount of data in non blocking mode. 
1945:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: pointer to a IRDA_HandleTypeDef structure that contains
1946:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1947:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1948:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1949:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)
1950:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
  84              		.loc 1 1950 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.LVL2:
1951:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
1952:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1953:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is ongoing */
1954:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_BUSY_TX)
  90              		.loc 1 1954 0
  91 0000 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
  92 0004 DBB2     		uxtb	r3, r3
  93 0006 212B     		cmp	r3, #33
  94 0008 01D0     		beq	.L10
1955:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1956:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
1957:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1958:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       tmp = (uint16_t*) hirda->pTxBuffPtr;
1959:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
1960:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
1961:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1962:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pTxBuffPtr += 2U;
1963:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
ARM GAS  /tmp/ccirtMvB.s 			page 37


1964:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
1965:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1966:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pTxBuffPtr += 1U;
1967:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1968:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     } 
1969:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
1970:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1971:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->Instance->DR = (uint8_t)(*hirda->pTxBuffPtr++ & (uint8_t)0x00FF);
1972:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1973:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1974:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(--hirda->TxXferCount == 0U)
1975:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1976:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Transmit Data Register Empty Interrupt */
1977:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TXEIE);
1978:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1979:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Enable the IRDA Transmit Complete Interrupt */
1980:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
1981:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1982:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
1983:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1984:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
1985:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1986:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
  95              		.loc 1 1986 0
  96 000a 0220     		movs	r0, #2
  97              	.LVL3:
  98 000c 7047     		bx	lr
  99              	.LVL4:
 100              	.L10:
1956:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 101              		.loc 1 1956 0
 102 000e 8368     		ldr	r3, [r0, #8]
 103 0010 B3F5805F 		cmp	r3, #4096
 104 0014 17D0     		beq	.L11
1971:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 105              		.loc 1 1971 0
 106 0016 0268     		ldr	r2, [r0]
 107 0018 C369     		ldr	r3, [r0, #28]
 108 001a 591C     		adds	r1, r3, #1
 109 001c C161     		str	r1, [r0, #28]
 110 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 111 0020 5360     		str	r3, [r2, #4]
 112              	.L7:
1974:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 113              		.loc 1 1974 0
 114 0022 438C     		ldrh	r3, [r0, #34]
 115 0024 9BB2     		uxth	r3, r3
 116 0026 013B     		subs	r3, r3, #1
 117 0028 9BB2     		uxth	r3, r3
 118 002a 4384     		strh	r3, [r0, #34]	@ movhi
 119 002c DBB9     		cbnz	r3, .L9
1977:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 120              		.loc 1 1977 0
 121 002e 0268     		ldr	r2, [r0]
 122 0030 D368     		ldr	r3, [r2, #12]
 123 0032 23F08003 		bic	r3, r3, #128
 124 0036 D360     		str	r3, [r2, #12]
ARM GAS  /tmp/ccirtMvB.s 			page 38


1980:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 125              		.loc 1 1980 0
 126 0038 0268     		ldr	r2, [r0]
 127 003a D368     		ldr	r3, [r2, #12]
 128 003c 43F04003 		orr	r3, r3, #64
 129 0040 D360     		str	r3, [r2, #12]
1982:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 130              		.loc 1 1982 0
 131 0042 0020     		movs	r0, #0
 132              	.LVL5:
 133 0044 7047     		bx	lr
 134              	.LVL6:
 135              	.L11:
1958:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 136              		.loc 1 1958 0
 137 0046 C369     		ldr	r3, [r0, #28]
 138              	.LVL7:
1959:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
 139              		.loc 1 1959 0
 140 0048 0268     		ldr	r2, [r0]
 141 004a 1B88     		ldrh	r3, [r3]
 142              	.LVL8:
 143 004c C3F30803 		ubfx	r3, r3, #0, #9
 144 0050 5360     		str	r3, [r2, #4]
 145              	.LVL9:
1960:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 146              		.loc 1 1960 0
 147 0052 C368     		ldr	r3, [r0, #12]
 148 0054 1BB9     		cbnz	r3, .L6
1962:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 149              		.loc 1 1962 0
 150 0056 C369     		ldr	r3, [r0, #28]
 151 0058 0233     		adds	r3, r3, #2
 152 005a C361     		str	r3, [r0, #28]
 153 005c E1E7     		b	.L7
 154              	.L6:
1966:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 155              		.loc 1 1966 0
 156 005e C369     		ldr	r3, [r0, #28]
 157 0060 0133     		adds	r3, r3, #1
 158 0062 C361     		str	r3, [r0, #28]
 159 0064 DDE7     		b	.L7
 160              	.L9:
1982:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 161              		.loc 1 1982 0
 162 0066 0020     		movs	r0, #0
 163              	.LVL10:
1987:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1988:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 164              		.loc 1 1988 0
 165 0068 7047     		bx	lr
 166              		.cfi_endproc
 167              	.LFE107:
 169              		.section	.text.IRDA_SetConfig,"ax",%progbits
 170              		.align	1
 171              		.syntax unified
 172              		.thumb
ARM GAS  /tmp/ccirtMvB.s 			page 39


 173              		.thumb_func
 174              		.fpu softvfp
 176              	IRDA_SetConfig:
 177              	.LFB110:
1989:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1990:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1991:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Wraps up transmission in non blocking mode.
1992:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: pointer to a IRDA_HandleTypeDef structure that contains
1993:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1994:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1995:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1996:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)
1997:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1998:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA Transmit Complete Interrupt */    
1999:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
2000:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2001:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Tx process is ended, restore hirda->gState to Ready */
2002:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
2003:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_TxCpltCallback(hirda);
2004:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2005:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
2006:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
2007:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
2008:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
2009:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Receives an amount of data in non blocking mode. 
2010:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
2011:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
2012:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
2013:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
2014:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)
2015:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
2016:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
2017:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t  uhdata;
2018:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2019:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is ongoing */
2020:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_BUSY_RX) 
2021:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
2022:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     uhdata = (uint16_t) READ_REG(hirda->Instance->DR);
2023:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
2024:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
2025:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       tmp = (uint16_t*) hirda->pRxBuffPtr;
2026:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
2027:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
2028:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         *tmp = (uint16_t)(uhdata & (uint16_t)0x01FF);
2029:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 2U;
2030:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
2031:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
2032:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
2033:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         *tmp = (uint16_t)(uhdata & (uint16_t)0x00FF);
2034:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 1U;
2035:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
2036:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
2037:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
2038:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
2039:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
2040:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
2041:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         *hirda->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)0x00FF);
ARM GAS  /tmp/ccirtMvB.s 			page 40


2042:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
2043:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
2044:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
2045:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         *hirda->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)0x007F);
2046:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
2047:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
2048:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
2049:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(--hirda->RxXferCount == 0U)
2050:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
2051:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Data Register not empty Interrupt */
2052:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_RXNE);
2053:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
2054:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Parity Error Interrupt */
2055:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_PE);
2056:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       
2057:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
2058:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_ERR);
2059:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       
2060:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Rx process is completed, restore hirda->RxState to Ready */
2061:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->RxState = HAL_IRDA_STATE_READY;
2062:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_IRDA_RxCpltCallback(hirda);
2063:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
2064:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_OK;
2065:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
2066:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
2067:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
2068:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
2069:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
2070:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
2071:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
2072:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
2073:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
2074:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
2075:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Configures the IRDA peripheral. 
2076:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
2077:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
2078:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
2079:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
2080:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
2081:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 178              		.loc 1 2081 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              	.LVL11:
 183 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 184              	.LCFI0:
 185              		.cfi_def_cfa_offset 32
 186              		.cfi_offset 3, -32
 187              		.cfi_offset 4, -28
 188              		.cfi_offset 5, -24
 189              		.cfi_offset 6, -20
 190              		.cfi_offset 7, -16
 191              		.cfi_offset 8, -12
 192              		.cfi_offset 9, -8
 193              		.cfi_offset 14, -4
 194 0004 0546     		mov	r5, r0
ARM GAS  /tmp/ccirtMvB.s 			page 41


2082:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the parameters */
2083:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
2084:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_BAUDRATE(hirda->Init.BaudRate));  
2085:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_WORD_LENGTH(hirda->Init.WordLength));
2086:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_PARITY(hirda->Init.Parity));
2087:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_MODE(hirda->Init.Mode));
2088:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));
2089:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****  
2090:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART CR2 Configuration ------------------------*/
2091:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Clear STOP[13:12] bits */
2092:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR2, USART_CR2_STOP);
 195              		.loc 1 2092 0
 196 0006 0268     		ldr	r2, [r0]
 197 0008 1369     		ldr	r3, [r2, #16]
 198 000a 23F44053 		bic	r3, r3, #12288
 199 000e 1361     		str	r3, [r2, #16]
2093:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2094:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2095:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Clear M, PCE, PS, TE and RE bits */
2096:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART
 200              		.loc 1 2096 0
 201 0010 0268     		ldr	r2, [r0]
 202 0012 D368     		ldr	r3, [r2, #12]
 203 0014 23F4B053 		bic	r3, r3, #5632
 204 0018 23F00C03 		bic	r3, r3, #12
 205 001c D360     		str	r3, [r2, #12]
2097:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2098:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Configure the USART Word Length, Parity and mode: 
2099:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   Set the M bits according to hirda->Init.WordLength value 
2100:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   Set PCE and PS bits according to hirda->Init.Parity value
2101:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   Set TE and RE bits according to hirda->Init.Mode value */
2102:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Write to USART CR1 */
2103:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   SET_BIT(hirda->Instance->CR1, (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init
 206              		.loc 1 2103 0
 207 001e 0168     		ldr	r1, [r0]
 208 0020 CA68     		ldr	r2, [r1, #12]
 209 0022 8368     		ldr	r3, [r0, #8]
 210 0024 C068     		ldr	r0, [r0, #12]
 211              	.LVL12:
 212 0026 0343     		orrs	r3, r3, r0
 213 0028 2869     		ldr	r0, [r5, #16]
 214 002a 0343     		orrs	r3, r3, r0
 215 002c 1343     		orrs	r3, r3, r2
 216 002e CB60     		str	r3, [r1, #12]
2104:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2105:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2106:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Clear CTSE and RTSE bits */
2107:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_RTSE | USART_CR3_CTSE);
 217              		.loc 1 2107 0
 218 0030 2A68     		ldr	r2, [r5]
 219 0032 5369     		ldr	r3, [r2, #20]
 220 0034 23F44073 		bic	r3, r3, #768
 221 0038 5361     		str	r3, [r2, #20]
2108:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2109:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2110:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->Instance == USART1)
 222              		.loc 1 2110 0
ARM GAS  /tmp/ccirtMvB.s 			page 42


 223 003a 2A68     		ldr	r2, [r5]
 224 003c 5B4B     		ldr	r3, .L17
 225 003e 9A42     		cmp	r2, r3
 226 0040 59D0     		beq	.L16
2111:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
2112:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(HAL_RCC_GetPCLK2Freq(), hirda->Init.BaudRate));
2113:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
2114:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
2115:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
2116:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(HAL_RCC_GetPCLK1Freq(), hirda->Init.BaudRate));
 227              		.loc 1 2116 0
 228 0042 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 229              	.LVL13:
 230 0046 00EB8000 		add	r0, r0, r0, lsl #2
 231 004a 00EB8000 		add	r0, r0, r0, lsl #2
 232 004e 6C68     		ldr	r4, [r5, #4]
 233 0050 A400     		lsls	r4, r4, #2
 234 0052 B0FBF4F4 		udiv	r4, r0, r4
 235 0056 564F     		ldr	r7, .L17+4
 236 0058 A7FB0434 		umull	r3, r4, r7, r4
 237 005c 6409     		lsrs	r4, r4, #5
 238 005e 2601     		lsls	r6, r4, #4
 239 0060 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 240              	.LVL14:
 241 0064 00EB8000 		add	r0, r0, r0, lsl #2
 242 0068 00EB8000 		add	r0, r0, r0, lsl #2
 243 006c 6C68     		ldr	r4, [r5, #4]
 244 006e A400     		lsls	r4, r4, #2
 245 0070 B0FBF4F9 		udiv	r9, r0, r4
 246 0074 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 247              	.LVL15:
 248 0078 00EB8000 		add	r0, r0, r0, lsl #2
 249 007c 00EB8000 		add	r0, r0, r0, lsl #2
 250 0080 6C68     		ldr	r4, [r5, #4]
 251 0082 A400     		lsls	r4, r4, #2
 252 0084 B0FBF4F4 		udiv	r4, r0, r4
 253 0088 A7FB0434 		umull	r3, r4, r7, r4
 254 008c 6409     		lsrs	r4, r4, #5
 255 008e 4FF06408 		mov	r8, #100
 256 0092 08FB1494 		mls	r4, r8, r4, r9
 257 0096 2401     		lsls	r4, r4, #4
 258 0098 3234     		adds	r4, r4, #50
 259 009a A7FB0434 		umull	r3, r4, r7, r4
 260 009e 6409     		lsrs	r4, r4, #5
 261 00a0 04F0F004 		and	r4, r4, #240
 262 00a4 3444     		add	r4, r4, r6
 263 00a6 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 264              	.LVL16:
 265 00aa 00EB8000 		add	r0, r0, r0, lsl #2
 266 00ae 00EB8000 		add	r0, r0, r0, lsl #2
 267 00b2 6E68     		ldr	r6, [r5, #4]
 268 00b4 B600     		lsls	r6, r6, #2
 269 00b6 B0FBF6F6 		udiv	r6, r0, r6
 270 00ba FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 271              	.LVL17:
 272 00be 00EB8000 		add	r0, r0, r0, lsl #2
 273 00c2 00EB8000 		add	r0, r0, r0, lsl #2
ARM GAS  /tmp/ccirtMvB.s 			page 43


 274 00c6 6B68     		ldr	r3, [r5, #4]
 275 00c8 9B00     		lsls	r3, r3, #2
 276 00ca B0FBF3F0 		udiv	r0, r0, r3
 277 00ce A7FB0030 		umull	r3, r0, r7, r0
 278 00d2 4009     		lsrs	r0, r0, #5
 279 00d4 08FB1068 		mls	r8, r8, r0, r6
 280 00d8 4FEA0818 		lsl	r8, r8, #4
 281 00dc 08F13208 		add	r8, r8, #50
 282 00e0 A7FB0837 		umull	r3, r7, r7, r8
 283 00e4 C7F34317 		ubfx	r7, r7, #5, #4
 284 00e8 2744     		add	r7, r7, r4
 285 00ea 2B68     		ldr	r3, [r5]
 286 00ec 9C68     		ldr	r4, [r3, #8]
 287 00ee 2743     		orrs	r7, r7, r4
 288 00f0 9F60     		str	r7, [r3, #8]
 289 00f2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 290              	.LVL18:
 291              	.L16:
2112:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 292              		.loc 1 2112 0
 293 00f6 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 294              	.LVL19:
 295 00fa 00EB8000 		add	r0, r0, r0, lsl #2
 296 00fe 00EB8000 		add	r0, r0, r0, lsl #2
 297 0102 6C68     		ldr	r4, [r5, #4]
 298 0104 A400     		lsls	r4, r4, #2
 299 0106 B0FBF4F4 		udiv	r4, r0, r4
 300 010a 294F     		ldr	r7, .L17+4
 301 010c A7FB0434 		umull	r3, r4, r7, r4
 302 0110 6409     		lsrs	r4, r4, #5
 303 0112 2601     		lsls	r6, r4, #4
 304 0114 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 305              	.LVL20:
 306 0118 00EB8000 		add	r0, r0, r0, lsl #2
 307 011c 00EB8000 		add	r0, r0, r0, lsl #2
 308 0120 6C68     		ldr	r4, [r5, #4]
 309 0122 A400     		lsls	r4, r4, #2
 310 0124 B0FBF4F9 		udiv	r9, r0, r4
 311 0128 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 312              	.LVL21:
 313 012c 00EB8000 		add	r0, r0, r0, lsl #2
 314 0130 00EB8000 		add	r0, r0, r0, lsl #2
 315 0134 6C68     		ldr	r4, [r5, #4]
 316 0136 A400     		lsls	r4, r4, #2
 317 0138 B0FBF4F4 		udiv	r4, r0, r4
 318 013c A7FB0434 		umull	r3, r4, r7, r4
 319 0140 6409     		lsrs	r4, r4, #5
 320 0142 4FF06408 		mov	r8, #100
 321 0146 08FB1494 		mls	r4, r8, r4, r9
 322 014a 2401     		lsls	r4, r4, #4
 323 014c 3234     		adds	r4, r4, #50
 324 014e A7FB0434 		umull	r3, r4, r7, r4
 325 0152 6409     		lsrs	r4, r4, #5
 326 0154 04F0F004 		and	r4, r4, #240
 327 0158 3444     		add	r4, r4, r6
 328 015a FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 329              	.LVL22:
ARM GAS  /tmp/ccirtMvB.s 			page 44


 330 015e 00EB8000 		add	r0, r0, r0, lsl #2
 331 0162 00EB8000 		add	r0, r0, r0, lsl #2
 332 0166 6E68     		ldr	r6, [r5, #4]
 333 0168 B600     		lsls	r6, r6, #2
 334 016a B0FBF6F6 		udiv	r6, r0, r6
 335 016e FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 336              	.LVL23:
 337 0172 00EB8000 		add	r0, r0, r0, lsl #2
 338 0176 00EB8000 		add	r0, r0, r0, lsl #2
 339 017a 6B68     		ldr	r3, [r5, #4]
 340 017c 9B00     		lsls	r3, r3, #2
 341 017e B0FBF3F3 		udiv	r3, r0, r3
 342 0182 A7FB0323 		umull	r2, r3, r7, r3
 343 0186 5B09     		lsrs	r3, r3, #5
 344 0188 08FB1368 		mls	r8, r8, r3, r6
 345 018c 4FEA0818 		lsl	r8, r8, #4
 346 0190 08F13208 		add	r8, r8, #50
 347 0194 A7FB0837 		umull	r3, r7, r7, r8
 348 0198 C7F34317 		ubfx	r7, r7, #5, #4
 349 019c 2744     		add	r7, r7, r4
 350 019e 2B68     		ldr	r3, [r5]
 351 01a0 9C68     		ldr	r4, [r3, #8]
 352 01a2 2743     		orrs	r7, r7, r4
 353 01a4 9F60     		str	r7, [r3, #8]
 354 01a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 355              	.LVL24:
 356              	.L18:
 357 01aa 00BF     		.align	2
 358              	.L17:
 359 01ac 00380140 		.word	1073821696
 360 01b0 1F85EB51 		.word	1374389535
 361              		.cfi_endproc
 362              	.LFE110:
 364              		.section	.text.IRDA_WaitOnFlagUntilTimeout,"ax",%progbits
 365              		.align	1
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 369              		.fpu softvfp
 371              	IRDA_WaitOnFlagUntilTimeout:
 372              	.LFB99:
1755:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Wait until flag is set */
 373              		.loc 1 1755 0
 374              		.cfi_startproc
 375              		@ args = 4, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              	.LVL25:
 378 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 379              	.LCFI1:
 380              		.cfi_def_cfa_offset 24
 381              		.cfi_offset 4, -24
 382              		.cfi_offset 5, -20
 383              		.cfi_offset 6, -16
 384              		.cfi_offset 7, -12
 385              		.cfi_offset 8, -8
 386              		.cfi_offset 14, -4
 387 0004 0546     		mov	r5, r0
ARM GAS  /tmp/ccirtMvB.s 			page 45


 388 0006 0F46     		mov	r7, r1
 389 0008 1646     		mov	r6, r2
 390 000a 9846     		mov	r8, r3
 391 000c 069C     		ldr	r4, [sp, #24]
 392              	.LVL26:
 393              	.L21:
1757:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 394              		.loc 1 1757 0
 395 000e 2B68     		ldr	r3, [r5]
 396 0010 1B68     		ldr	r3, [r3]
 397 0012 37EA0303 		bics	r3, r7, r3
 398 0016 0CBF     		ite	eq
 399 0018 0123     		moveq	r3, #1
 400 001a 0023     		movne	r3, #0
 401 001c B342     		cmp	r3, r6
 402 001e 1ED1     		bne	.L26
1760:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 403              		.loc 1 1760 0
 404 0020 B4F1FF3F 		cmp	r4, #-1
 405 0024 F3D0     		beq	.L21
1762:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 406              		.loc 1 1762 0
 407 0026 2CB1     		cbz	r4, .L22
1762:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 408              		.loc 1 1762 0 is_stmt 0 discriminator 1
 409 0028 FFF7FEFF 		bl	HAL_GetTick
 410              	.LVL27:
 411 002c A0EB0800 		sub	r0, r0, r8
 412 0030 8442     		cmp	r4, r0
 413 0032 ECD2     		bcs	.L21
 414              	.L22:
1765:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 415              		.loc 1 1765 0 is_stmt 1
 416 0034 2A68     		ldr	r2, [r5]
 417 0036 D368     		ldr	r3, [r2, #12]
 418 0038 23F4D073 		bic	r3, r3, #416
 419 003c D360     		str	r3, [r2, #12]
1766:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
 420              		.loc 1 1766 0
 421 003e 2A68     		ldr	r2, [r5]
 422 0040 5369     		ldr	r3, [r2, #20]
 423 0042 23F00103 		bic	r3, r3, #1
 424 0046 5361     		str	r3, [r2, #20]
1768:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->RxState = HAL_IRDA_STATE_READY;
 425              		.loc 1 1768 0
 426 0048 2023     		movs	r3, #32
 427 004a 85F83530 		strb	r3, [r5, #53]
1769:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
 428              		.loc 1 1769 0
 429 004e 85F83630 		strb	r3, [r5, #54]
1772:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
 430              		.loc 1 1772 0
 431 0052 0023     		movs	r3, #0
 432 0054 85F83430 		strb	r3, [r5, #52]
1774:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 433              		.loc 1 1774 0
 434 0058 0320     		movs	r0, #3
ARM GAS  /tmp/ccirtMvB.s 			page 46


 435 005a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 436              	.LVL28:
 437              	.L26:
1778:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 438              		.loc 1 1778 0
 439 005e 0020     		movs	r0, #0
1779:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 440              		.loc 1 1779 0
 441 0060 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 442              		.cfi_endproc
 443              	.LFE99:
 445              		.section	.text.HAL_IRDA_MspInit,"ax",%progbits
 446              		.align	1
 447              		.weak	HAL_IRDA_MspInit
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 451              		.fpu softvfp
 453              	HAL_IRDA_MspInit:
 454              	.LFB66:
 339:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 455              		.loc 1 339 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              	.LVL29:
 461 0000 7047     		bx	lr
 462              		.cfi_endproc
 463              	.LFE66:
 465              		.section	.text.HAL_IRDA_Init,"ax",%progbits
 466              		.align	1
 467              		.global	HAL_IRDA_Init
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu softvfp
 473              	HAL_IRDA_Init:
 474              	.LFB64:
 245:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 475              		.loc 1 245 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              	.LVL30:
 247:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 480              		.loc 1 247 0
 481 0000 0028     		cmp	r0, #0
 482 0002 3FD0     		beq	.L31
 245:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 483              		.loc 1 245 0
 484 0004 10B5     		push	{r4, lr}
 485              	.LCFI2:
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 4, -8
 488              		.cfi_offset 14, -4
 489 0006 0446     		mov	r4, r0
ARM GAS  /tmp/ccirtMvB.s 			page 47


 255:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 490              		.loc 1 255 0
 491 0008 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 492 000c 002B     		cmp	r3, #0
 493 000e 34D0     		beq	.L36
 494              	.LVL31:
 495              	.L30:
 263:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 496              		.loc 1 263 0
 497 0010 2423     		movs	r3, #36
 498 0012 84F83530 		strb	r3, [r4, #53]
 266:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 499              		.loc 1 266 0
 500 0016 2268     		ldr	r2, [r4]
 501 0018 D368     		ldr	r3, [r2, #12]
 502 001a 23F40053 		bic	r3, r3, #8192
 503 001e D360     		str	r3, [r2, #12]
 269:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 504              		.loc 1 269 0
 505 0020 2046     		mov	r0, r4
 506 0022 FFF7FEFF 		bl	IRDA_SetConfig
 507              	.LVL32:
 274:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 508              		.loc 1 274 0
 509 0026 2268     		ldr	r2, [r4]
 510 0028 1369     		ldr	r3, [r2, #16]
 511 002a 23F4F043 		bic	r3, r3, #30720
 512 002e 1361     		str	r3, [r2, #16]
 275:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 513              		.loc 1 275 0
 514 0030 2268     		ldr	r2, [r4]
 515 0032 5369     		ldr	r3, [r2, #20]
 516 0034 23F02803 		bic	r3, r3, #40
 517 0038 5361     		str	r3, [r2, #20]
 278:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 518              		.loc 1 278 0
 519 003a 2268     		ldr	r2, [r4]
 520 003c D368     		ldr	r3, [r2, #12]
 521 003e 43F40053 		orr	r3, r3, #8192
 522 0042 D360     		str	r3, [r2, #12]
 281:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 523              		.loc 1 281 0
 524 0044 2268     		ldr	r2, [r4]
 525 0046 9369     		ldr	r3, [r2, #24]
 526 0048 23F0FF03 		bic	r3, r3, #255
 527 004c 217D     		ldrb	r1, [r4, #20]	@ zero_extendqisi2
 528 004e 0B43     		orrs	r3, r3, r1
 529 0050 9361     		str	r3, [r2, #24]
 284:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 530              		.loc 1 284 0
 531 0052 2268     		ldr	r2, [r4]
 532 0054 5369     		ldr	r3, [r2, #20]
 533 0056 23F00403 		bic	r3, r3, #4
 534 005a A169     		ldr	r1, [r4, #24]
 535 005c 0B43     		orrs	r3, r3, r1
 536 005e 5361     		str	r3, [r2, #20]
 287:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
ARM GAS  /tmp/ccirtMvB.s 			page 48


 537              		.loc 1 287 0
 538 0060 2268     		ldr	r2, [r4]
 539 0062 5369     		ldr	r3, [r2, #20]
 540 0064 43F00203 		orr	r3, r3, #2
 541 0068 5361     		str	r3, [r2, #20]
 290:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState= HAL_IRDA_STATE_READY;
 542              		.loc 1 290 0
 543 006a 0020     		movs	r0, #0
 544 006c A063     		str	r0, [r4, #56]
 291:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState= HAL_IRDA_STATE_READY;
 545              		.loc 1 291 0
 546 006e 2023     		movs	r3, #32
 547 0070 84F83530 		strb	r3, [r4, #53]
 292:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 548              		.loc 1 292 0
 549 0074 84F83630 		strb	r3, [r4, #54]
 294:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 550              		.loc 1 294 0
 551 0078 10BD     		pop	{r4, pc}
 552              	.LVL33:
 553              	.L36:
 258:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 554              		.loc 1 258 0
 555 007a 80F83430 		strb	r3, [r0, #52]
 260:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 556              		.loc 1 260 0
 557 007e FFF7FEFF 		bl	HAL_IRDA_MspInit
 558              	.LVL34:
 559 0082 C5E7     		b	.L30
 560              	.LVL35:
 561              	.L31:
 562              	.LCFI3:
 563              		.cfi_def_cfa_offset 0
 564              		.cfi_restore 4
 565              		.cfi_restore 14
 249:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 566              		.loc 1 249 0
 567 0084 0120     		movs	r0, #1
 568              	.LVL36:
 569 0086 7047     		bx	lr
 570              		.cfi_endproc
 571              	.LFE64:
 573              		.section	.text.HAL_IRDA_MspDeInit,"ax",%progbits
 574              		.align	1
 575              		.weak	HAL_IRDA_MspDeInit
 576              		.syntax unified
 577              		.thumb
 578              		.thumb_func
 579              		.fpu softvfp
 581              	HAL_IRDA_MspDeInit:
 582              	.LFB67:
 354:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 583              		.loc 1 354 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 0
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587              		@ link register save eliminated.
ARM GAS  /tmp/ccirtMvB.s 			page 49


 588              	.LVL37:
 589 0000 7047     		bx	lr
 590              		.cfi_endproc
 591              	.LFE67:
 593              		.section	.text.HAL_IRDA_DeInit,"ax",%progbits
 594              		.align	1
 595              		.global	HAL_IRDA_DeInit
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 599              		.fpu softvfp
 601              	HAL_IRDA_DeInit:
 602              	.LFB65:
 304:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 603              		.loc 1 304 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              	.LVL38:
 306:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 608              		.loc 1 306 0
 609 0000 A0B1     		cbz	r0, .L40
 304:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 610              		.loc 1 304 0
 611 0002 10B5     		push	{r4, lr}
 612              	.LCFI4:
 613              		.cfi_def_cfa_offset 8
 614              		.cfi_offset 4, -8
 615              		.cfi_offset 14, -4
 616 0004 0446     		mov	r4, r0
 314:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 617              		.loc 1 314 0
 618 0006 2423     		movs	r3, #36
 619 0008 80F83530 		strb	r3, [r0, #53]
 317:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 620              		.loc 1 317 0
 621 000c 0268     		ldr	r2, [r0]
 622 000e D368     		ldr	r3, [r2, #12]
 623 0010 23F40053 		bic	r3, r3, #8192
 624 0014 D360     		str	r3, [r2, #12]
 320:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 625              		.loc 1 320 0
 626 0016 FFF7FEFF 		bl	HAL_IRDA_MspDeInit
 627              	.LVL39:
 322:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_RESET; 
 628              		.loc 1 322 0
 629 001a 0020     		movs	r0, #0
 630 001c A063     		str	r0, [r4, #56]
 323:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_RESET;
 631              		.loc 1 323 0
 632 001e 84F83500 		strb	r0, [r4, #53]
 324:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 633              		.loc 1 324 0
 634 0022 84F83600 		strb	r0, [r4, #54]
 327:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 635              		.loc 1 327 0
 636 0026 84F83400 		strb	r0, [r4, #52]
ARM GAS  /tmp/ccirtMvB.s 			page 50


 329:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 637              		.loc 1 329 0
 638 002a 10BD     		pop	{r4, pc}
 639              	.LVL40:
 640              	.L40:
 641              	.LCFI5:
 642              		.cfi_def_cfa_offset 0
 643              		.cfi_restore 4
 644              		.cfi_restore 14
 308:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 645              		.loc 1 308 0
 646 002c 0120     		movs	r0, #1
 647              	.LVL41:
 648 002e 7047     		bx	lr
 649              		.cfi_endproc
 650              	.LFE65:
 652              		.section	.text.HAL_IRDA_Transmit,"ax",%progbits
 653              		.align	1
 654              		.global	HAL_IRDA_Transmit
 655              		.syntax unified
 656              		.thumb
 657              		.thumb_func
 658              		.fpu softvfp
 660              	HAL_IRDA_Transmit:
 661              	.LFB68:
 432:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
 662              		.loc 1 432 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666              	.LVL42:
 667 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 668              	.LCFI6:
 669              		.cfi_def_cfa_offset 24
 670              		.cfi_offset 4, -24
 671              		.cfi_offset 5, -20
 672              		.cfi_offset 6, -16
 673              		.cfi_offset 7, -12
 674              		.cfi_offset 8, -8
 675              		.cfi_offset 14, -4
 676 0004 82B0     		sub	sp, sp, #8
 677              	.LCFI7:
 678              		.cfi_def_cfa_offset 32
 679 0006 1E46     		mov	r6, r3
 680              	.LVL43:
 437:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 681              		.loc 1 437 0
 682 0008 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 683              	.LVL44:
 684 000c DBB2     		uxtb	r3, r3
 685 000e 202B     		cmp	r3, #32
 686 0010 04D0     		beq	.L60
 500:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 687              		.loc 1 500 0
 688 0012 0223     		movs	r3, #2
 689              	.LVL45:
 690              	.L46:
ARM GAS  /tmp/ccirtMvB.s 			page 51


 502:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 691              		.loc 1 502 0
 692 0014 1846     		mov	r0, r3
 693 0016 02B0     		add	sp, sp, #8
 694              	.LCFI8:
 695              		.cfi_remember_state
 696              		.cfi_def_cfa_offset 24
 697              		@ sp needed
 698 0018 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 699              	.LVL46:
 700              	.L60:
 701              	.LCFI9:
 702              		.cfi_restore_state
 703 001c 0446     		mov	r4, r0
 704 001e 0D46     		mov	r5, r1
 705 0020 9046     		mov	r8, r2
 439:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 706              		.loc 1 439 0
 707 0022 0029     		cmp	r1, #0
 708 0024 55D0     		beq	.L53
 439:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 709              		.loc 1 439 0 is_stmt 0 discriminator 1
 710 0026 002A     		cmp	r2, #0
 711 0028 55D0     		beq	.L54
 445:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 712              		.loc 1 445 0 is_stmt 1
 713 002a 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 714 002e 012B     		cmp	r3, #1
 715 0030 01D1     		bne	.L61
 716 0032 0223     		movs	r3, #2
 717 0034 EEE7     		b	.L46
 718              	.L61:
 445:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 719              		.loc 1 445 0 is_stmt 0 discriminator 2
 720 0036 0123     		movs	r3, #1
 721 0038 80F83430 		strb	r3, [r0, #52]
 447:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 722              		.loc 1 447 0 is_stmt 1 discriminator 2
 723 003c 0023     		movs	r3, #0
 724 003e 8363     		str	r3, [r0, #56]
 448:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 725              		.loc 1 448 0 discriminator 2
 726 0040 2123     		movs	r3, #33
 727 0042 80F83530 		strb	r3, [r0, #53]
 451:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 728              		.loc 1 451 0 discriminator 2
 729 0046 FFF7FEFF 		bl	HAL_GetTick
 730              	.LVL47:
 731 004a 0746     		mov	r7, r0
 732              	.LVL48:
 453:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 733              		.loc 1 453 0 discriminator 2
 734 004c A4F82080 		strh	r8, [r4, #32]	@ movhi
 454:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     while(hirda->TxXferCount > 0U)
 735              		.loc 1 454 0 discriminator 2
 736 0050 A4F82280 		strh	r8, [r4, #34]	@ movhi
 455:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
ARM GAS  /tmp/ccirtMvB.s 			page 52


 737              		.loc 1 455 0 discriminator 2
 738 0054 10E0     		b	.L47
 739              	.LVL49:
 740              	.L63:
 460:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 741              		.loc 1 460 0
 742 0056 0096     		str	r6, [sp]
 743 0058 3B46     		mov	r3, r7
 744 005a 0022     		movs	r2, #0
 745 005c 8021     		movs	r1, #128
 746 005e 2046     		mov	r0, r4
 747 0060 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 748              	.LVL50:
 749 0064 0028     		cmp	r0, #0
 750 0066 38D1     		bne	.L56
 751              	.LVL51:
 465:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(hirda->Init.Parity == IRDA_PARITY_NONE)
 752              		.loc 1 465 0
 753 0068 2268     		ldr	r2, [r4]
 754 006a 2B88     		ldrh	r3, [r5]
 755 006c C3F30803 		ubfx	r3, r3, #0, #9
 756 0070 5360     		str	r3, [r2, #4]
 466:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 757              		.loc 1 466 0
 758 0072 E368     		ldr	r3, [r4, #12]
 759 0074 CBB9     		cbnz	r3, .L49
 468:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 760              		.loc 1 468 0
 761 0076 0235     		adds	r5, r5, #2
 762              	.LVL52:
 763              	.L47:
 455:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 764              		.loc 1 455 0
 765 0078 638C     		ldrh	r3, [r4, #34]
 766 007a 9BB2     		uxth	r3, r3
 767 007c BBB1     		cbz	r3, .L62
 457:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 768              		.loc 1 457 0
 769 007e 638C     		ldrh	r3, [r4, #34]
 770 0080 9BB2     		uxth	r3, r3
 771 0082 013B     		subs	r3, r3, #1
 772 0084 9BB2     		uxth	r3, r3
 773 0086 6384     		strh	r3, [r4, #34]	@ movhi
 458:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 774              		.loc 1 458 0
 775 0088 A368     		ldr	r3, [r4, #8]
 776 008a B3F5805F 		cmp	r3, #4096
 777 008e E2D0     		beq	.L63
 477:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 778              		.loc 1 477 0
 779 0090 0096     		str	r6, [sp]
 780 0092 3B46     		mov	r3, r7
 781 0094 0022     		movs	r2, #0
 782 0096 8021     		movs	r1, #128
 783 0098 2046     		mov	r0, r4
 784 009a FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 785              	.LVL53:
ARM GAS  /tmp/ccirtMvB.s 			page 53


 786 009e F0B9     		cbnz	r0, .L57
 481:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 787              		.loc 1 481 0
 788 00a0 2368     		ldr	r3, [r4]
 789              	.LVL54:
 790 00a2 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 791 00a4 5A60     		str	r2, [r3, #4]
 792 00a6 0135     		adds	r5, r5, #1
 793              	.LVL55:
 794 00a8 E6E7     		b	.L47
 795              	.LVL56:
 796              	.L49:
 472:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 797              		.loc 1 472 0
 798 00aa 0135     		adds	r5, r5, #1
 799              	.LVL57:
 800 00ac E4E7     		b	.L47
 801              	.LVL58:
 802              	.L62:
 485:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     { 
 803              		.loc 1 485 0
 804 00ae 0096     		str	r6, [sp]
 805 00b0 3B46     		mov	r3, r7
 806 00b2 0022     		movs	r2, #0
 807 00b4 4021     		movs	r1, #64
 808 00b6 2046     		mov	r0, r4
 809 00b8 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 810              	.LVL59:
 811 00bc 0346     		mov	r3, r0
 812 00be 08B1     		cbz	r0, .L64
 487:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 813              		.loc 1 487 0
 814 00c0 0323     		movs	r3, #3
 815 00c2 A7E7     		b	.L46
 816              	.L64:
 491:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 817              		.loc 1 491 0
 818 00c4 2022     		movs	r2, #32
 819 00c6 84F83520 		strb	r2, [r4, #53]
 494:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 820              		.loc 1 494 0
 821 00ca 0022     		movs	r2, #0
 822 00cc 84F83420 		strb	r2, [r4, #52]
 496:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 823              		.loc 1 496 0
 824 00d0 A0E7     		b	.L46
 825              	.LVL60:
 826              	.L53:
 441:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 827              		.loc 1 441 0
 828 00d2 0123     		movs	r3, #1
 829 00d4 9EE7     		b	.L46
 830              	.L54:
 831 00d6 0123     		movs	r3, #1
 832 00d8 9CE7     		b	.L46
 833              	.LVL61:
 834              	.L56:
ARM GAS  /tmp/ccirtMvB.s 			page 54


 462:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 835              		.loc 1 462 0
 836 00da 0323     		movs	r3, #3
 837 00dc 9AE7     		b	.L46
 838              	.L57:
 479:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 839              		.loc 1 479 0
 840 00de 0323     		movs	r3, #3
 841 00e0 98E7     		b	.L46
 842              		.cfi_endproc
 843              	.LFE68:
 845              		.section	.text.HAL_IRDA_Receive,"ax",%progbits
 846              		.align	1
 847              		.global	HAL_IRDA_Receive
 848              		.syntax unified
 849              		.thumb
 850              		.thumb_func
 851              		.fpu softvfp
 853              	HAL_IRDA_Receive:
 854              	.LFB69:
 514:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
 855              		.loc 1 514 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              	.LVL62:
 860 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 861              	.LCFI10:
 862              		.cfi_def_cfa_offset 24
 863              		.cfi_offset 4, -24
 864              		.cfi_offset 5, -20
 865              		.cfi_offset 6, -16
 866              		.cfi_offset 7, -12
 867              		.cfi_offset 8, -8
 868              		.cfi_offset 14, -4
 869 0004 82B0     		sub	sp, sp, #8
 870              	.LCFI11:
 871              		.cfi_def_cfa_offset 32
 872 0006 1E46     		mov	r6, r3
 873              	.LVL63:
 519:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 874              		.loc 1 519 0
 875 0008 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 876              	.LVL64:
 877 000c DBB2     		uxtb	r3, r3
 878 000e 202B     		cmp	r3, #32
 879 0010 03D0     		beq	.L80
 587:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 880              		.loc 1 587 0
 881 0012 0220     		movs	r0, #2
 882              	.LVL65:
 883              	.L66:
 589:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 884              		.loc 1 589 0
 885 0014 02B0     		add	sp, sp, #8
 886              	.LCFI12:
 887              		.cfi_remember_state
ARM GAS  /tmp/ccirtMvB.s 			page 55


 888              		.cfi_def_cfa_offset 24
 889              		@ sp needed
 890 0016 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 891              	.LVL66:
 892              	.L80:
 893              	.LCFI13:
 894              		.cfi_restore_state
 895 001a 0446     		mov	r4, r0
 896 001c 0D46     		mov	r5, r1
 897 001e 9046     		mov	r8, r2
 521:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 898              		.loc 1 521 0
 899 0020 0029     		cmp	r1, #0
 900 0022 58D0     		beq	.L74
 521:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 901              		.loc 1 521 0 is_stmt 0 discriminator 1
 902 0024 002A     		cmp	r2, #0
 903 0026 58D0     		beq	.L75
 527:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 904              		.loc 1 527 0 is_stmt 1
 905 0028 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 906 002c 012B     		cmp	r3, #1
 907 002e 01D1     		bne	.L81
 908 0030 0220     		movs	r0, #2
 909              	.LVL67:
 910 0032 EFE7     		b	.L66
 911              	.LVL68:
 912              	.L81:
 527:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 913              		.loc 1 527 0 is_stmt 0 discriminator 2
 914 0034 0123     		movs	r3, #1
 915 0036 80F83430 		strb	r3, [r0, #52]
 529:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 916              		.loc 1 529 0 is_stmt 1 discriminator 2
 917 003a 0023     		movs	r3, #0
 918 003c 8363     		str	r3, [r0, #56]
 530:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 919              		.loc 1 530 0 discriminator 2
 920 003e 2223     		movs	r3, #34
 921 0040 80F83630 		strb	r3, [r0, #54]
 533:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 922              		.loc 1 533 0 discriminator 2
 923 0044 FFF7FEFF 		bl	HAL_GetTick
 924              	.LVL69:
 925 0048 0746     		mov	r7, r0
 926              	.LVL70:
 535:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
 927              		.loc 1 535 0 discriminator 2
 928 004a A4F82880 		strh	r8, [r4, #40]	@ movhi
 536:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 929              		.loc 1 536 0 discriminator 2
 930 004e A4F82A80 		strh	r8, [r4, #42]	@ movhi
 539:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 931              		.loc 1 539 0 discriminator 2
 932 0052 1DE0     		b	.L67
 933              	.LVL71:
 934              	.L83:
ARM GAS  /tmp/ccirtMvB.s 			page 56


 544:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 935              		.loc 1 544 0
 936 0054 0096     		str	r6, [sp]
 937 0056 3B46     		mov	r3, r7
 938 0058 0022     		movs	r2, #0
 939 005a 2021     		movs	r1, #32
 940 005c 2046     		mov	r0, r4
 941 005e FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 942              	.LVL72:
 943 0062 0028     		cmp	r0, #0
 944 0064 3BD1     		bne	.L77
 945              	.LVL73:
 549:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 946              		.loc 1 549 0
 947 0066 E368     		ldr	r3, [r4, #12]
 948 0068 33B9     		cbnz	r3, .L69
 551:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=2U;
 949              		.loc 1 551 0
 950 006a 2368     		ldr	r3, [r4]
 951 006c 5B68     		ldr	r3, [r3, #4]
 952 006e C3F30803 		ubfx	r3, r3, #0, #9
 953 0072 25F8023B 		strh	r3, [r5], #2	@ movhi
 954              	.LVL74:
 955 0076 0BE0     		b	.L67
 956              	.LVL75:
 957              	.L69:
 556:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=1U;
 958              		.loc 1 556 0
 959 0078 2368     		ldr	r3, [r4]
 960 007a 5B68     		ldr	r3, [r3, #4]
 961 007c DBB2     		uxtb	r3, r3
 962 007e 25F8013B 		strh	r3, [r5], #1	@ movhi
 963              	.LVL76:
 964 0082 05E0     		b	.L67
 965              	.LVL77:
 966              	.L71:
 572:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 967              		.loc 1 572 0
 968 0084 2368     		ldr	r3, [r4]
 969 0086 5B68     		ldr	r3, [r3, #4]
 970 0088 03F07F03 		and	r3, r3, #127
 971 008c 2B70     		strb	r3, [r5]
 972 008e 0135     		adds	r5, r5, #1
 973              	.LVL78:
 974              	.L67:
 539:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 975              		.loc 1 539 0
 976 0090 638D     		ldrh	r3, [r4, #42]
 977 0092 9BB2     		uxth	r3, r3
 978 0094 C3B1     		cbz	r3, .L82
 541:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 979              		.loc 1 541 0
 980 0096 638D     		ldrh	r3, [r4, #42]
 981 0098 9BB2     		uxth	r3, r3
 982 009a 013B     		subs	r3, r3, #1
 983 009c 9BB2     		uxth	r3, r3
 984 009e 6385     		strh	r3, [r4, #42]	@ movhi
ARM GAS  /tmp/ccirtMvB.s 			page 57


 542:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 985              		.loc 1 542 0
 986 00a0 A368     		ldr	r3, [r4, #8]
 987 00a2 B3F5805F 		cmp	r3, #4096
 988 00a6 D5D0     		beq	.L83
 562:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 989              		.loc 1 562 0
 990 00a8 0096     		str	r6, [sp]
 991 00aa 3B46     		mov	r3, r7
 992 00ac 0022     		movs	r2, #0
 993 00ae 2021     		movs	r1, #32
 994 00b0 2046     		mov	r0, r4
 995 00b2 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 996              	.LVL79:
 997 00b6 A0B9     		cbnz	r0, .L78
 566:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 998              		.loc 1 566 0
 999 00b8 E368     		ldr	r3, [r4, #12]
 1000 00ba 002B     		cmp	r3, #0
 1001 00bc E2D1     		bne	.L71
 1002              	.LVL80:
 568:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 1003              		.loc 1 568 0
 1004 00be 2368     		ldr	r3, [r4]
 1005 00c0 5B68     		ldr	r3, [r3, #4]
 1006 00c2 2B70     		strb	r3, [r5]
 1007 00c4 0135     		adds	r5, r5, #1
 1008              	.LVL81:
 1009 00c6 E3E7     		b	.L67
 1010              	.L82:
 578:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1011              		.loc 1 578 0
 1012 00c8 2023     		movs	r3, #32
 1013 00ca 84F83630 		strb	r3, [r4, #54]
 581:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1014              		.loc 1 581 0
 1015 00ce 0020     		movs	r0, #0
 1016 00d0 84F83400 		strb	r0, [r4, #52]
 583:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1017              		.loc 1 583 0
 1018 00d4 9EE7     		b	.L66
 1019              	.LVL82:
 1020              	.L74:
 523:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1021              		.loc 1 523 0
 1022 00d6 0120     		movs	r0, #1
 1023              	.LVL83:
 1024 00d8 9CE7     		b	.L66
 1025              	.LVL84:
 1026              	.L75:
 1027 00da 0120     		movs	r0, #1
 1028              	.LVL85:
 1029 00dc 9AE7     		b	.L66
 1030              	.LVL86:
 1031              	.L77:
 546:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 1032              		.loc 1 546 0
ARM GAS  /tmp/ccirtMvB.s 			page 58


 1033 00de 0320     		movs	r0, #3
 1034 00e0 98E7     		b	.L66
 1035              	.L78:
 564:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 1036              		.loc 1 564 0
 1037 00e2 0320     		movs	r0, #3
 1038 00e4 96E7     		b	.L66
 1039              		.cfi_endproc
 1040              	.LFE69:
 1042              		.section	.text.HAL_IRDA_Transmit_IT,"ax",%progbits
 1043              		.align	1
 1044              		.global	HAL_IRDA_Transmit_IT
 1045              		.syntax unified
 1046              		.thumb
 1047              		.thumb_func
 1048              		.fpu softvfp
 1050              	HAL_IRDA_Transmit_IT:
 1051              	.LFB70:
 600:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 1052              		.loc 1 600 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 0
 1055              		@ frame_needed = 0, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
 1057              	.LVL87:
 602:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1058              		.loc 1 602 0
 1059 0000 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1060 0004 DBB2     		uxtb	r3, r3
 1061 0006 202B     		cmp	r3, #32
 1062 0008 01D0     		beq	.L90
 628:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1063              		.loc 1 628 0
 1064 000a 0220     		movs	r0, #2
 1065              	.LVL88:
 1066 000c 7047     		bx	lr
 1067              	.LVL89:
 1068              	.L90:
 604:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1069              		.loc 1 604 0
 1070 000e A9B1     		cbz	r1, .L87
 604:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1071              		.loc 1 604 0 is_stmt 0 discriminator 1
 1072 0010 B2B1     		cbz	r2, .L88
 609:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1073              		.loc 1 609 0 is_stmt 1
 1074 0012 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1075 0016 012B     		cmp	r3, #1
 1076 0018 14D0     		beq	.L89
 611:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 1077              		.loc 1 611 0 discriminator 2
 1078 001a C161     		str	r1, [r0, #28]
 612:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 1079              		.loc 1 612 0 discriminator 2
 1080 001c 0284     		strh	r2, [r0, #32]	@ movhi
 613:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1081              		.loc 1 613 0 discriminator 2
ARM GAS  /tmp/ccirtMvB.s 			page 59


 1082 001e 4284     		strh	r2, [r0, #34]	@ movhi
 615:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 1083              		.loc 1 615 0 discriminator 2
 1084 0020 0023     		movs	r3, #0
 1085 0022 8363     		str	r3, [r0, #56]
 616:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1086              		.loc 1 616 0 discriminator 2
 1087 0024 2122     		movs	r2, #33
 1088              	.LVL90:
 1089 0026 80F83520 		strb	r2, [r0, #53]
 619:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1090              		.loc 1 619 0 discriminator 2
 1091 002a 80F83430 		strb	r3, [r0, #52]
 622:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1092              		.loc 1 622 0 discriminator 2
 1093 002e 0168     		ldr	r1, [r0]
 1094              	.LVL91:
 1095 0030 CA68     		ldr	r2, [r1, #12]
 1096 0032 42F08002 		orr	r2, r2, #128
 1097 0036 CA60     		str	r2, [r1, #12]
 1098              	.LVL92:
 624:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1099              		.loc 1 624 0 discriminator 2
 1100 0038 1846     		mov	r0, r3
 1101              	.LVL93:
 1102 003a 7047     		bx	lr
 1103              	.LVL94:
 1104              	.L87:
 606:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1105              		.loc 1 606 0
 1106 003c 0120     		movs	r0, #1
 1107              	.LVL95:
 1108 003e 7047     		bx	lr
 1109              	.LVL96:
 1110              	.L88:
 1111 0040 0120     		movs	r0, #1
 1112              	.LVL97:
 1113 0042 7047     		bx	lr
 1114              	.LVL98:
 1115              	.L89:
 609:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1116              		.loc 1 609 0
 1117 0044 0220     		movs	r0, #2
 1118              	.LVL99:
 630:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1119              		.loc 1 630 0
 1120 0046 7047     		bx	lr
 1121              		.cfi_endproc
 1122              	.LFE70:
 1124              		.section	.text.HAL_IRDA_Receive_IT,"ax",%progbits
 1125              		.align	1
 1126              		.global	HAL_IRDA_Receive_IT
 1127              		.syntax unified
 1128              		.thumb
 1129              		.thumb_func
 1130              		.fpu softvfp
 1132              	HAL_IRDA_Receive_IT:
ARM GAS  /tmp/ccirtMvB.s 			page 60


 1133              	.LFB71:
 641:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 1134              		.loc 1 641 0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 1138              		@ link register save eliminated.
 1139              	.LVL100:
 643:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1140              		.loc 1 643 0
 1141 0000 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 1142 0004 DBB2     		uxtb	r3, r3
 1143 0006 202B     		cmp	r3, #32
 1144 0008 01D0     		beq	.L97
 676:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1145              		.loc 1 676 0
 1146 000a 0220     		movs	r0, #2
 1147              	.LVL101:
 1148 000c 7047     		bx	lr
 1149              	.LVL102:
 1150              	.L97:
 645:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1151              		.loc 1 645 0
 1152 000e F9B1     		cbz	r1, .L94
 645:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1153              		.loc 1 645 0 is_stmt 0 discriminator 1
 1154 0010 02B3     		cbz	r2, .L95
 651:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1155              		.loc 1 651 0 is_stmt 1
 1156 0012 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1157 0016 012B     		cmp	r3, #1
 1158 0018 1ED0     		beq	.L96
 653:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 1159              		.loc 1 653 0 discriminator 2
 1160 001a 4162     		str	r1, [r0, #36]
 654:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
 1161              		.loc 1 654 0 discriminator 2
 1162 001c 0285     		strh	r2, [r0, #40]	@ movhi
 655:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1163              		.loc 1 655 0 discriminator 2
 1164 001e 4285     		strh	r2, [r0, #42]	@ movhi
 657:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1165              		.loc 1 657 0 discriminator 2
 1166 0020 0023     		movs	r3, #0
 1167 0022 8363     		str	r3, [r0, #56]
 658:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1168              		.loc 1 658 0 discriminator 2
 1169 0024 2222     		movs	r2, #34
 1170              	.LVL103:
 1171 0026 80F83620 		strb	r2, [r0, #54]
 661:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1172              		.loc 1 661 0 discriminator 2
 1173 002a 80F83430 		strb	r3, [r0, #52]
 664:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1174              		.loc 1 664 0 discriminator 2
 1175 002e 0168     		ldr	r1, [r0]
 1176              	.LVL104:
ARM GAS  /tmp/ccirtMvB.s 			page 61


 1177 0030 CA68     		ldr	r2, [r1, #12]
 1178 0032 42F48072 		orr	r2, r2, #256
 1179 0036 CA60     		str	r2, [r1, #12]
 1180              	.LVL105:
 667:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1181              		.loc 1 667 0 discriminator 2
 1182 0038 0168     		ldr	r1, [r0]
 1183 003a 4A69     		ldr	r2, [r1, #20]
 1184 003c 42F00102 		orr	r2, r2, #1
 1185 0040 4A61     		str	r2, [r1, #20]
 670:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1186              		.loc 1 670 0 discriminator 2
 1187 0042 0168     		ldr	r1, [r0]
 1188 0044 CA68     		ldr	r2, [r1, #12]
 1189 0046 42F02002 		orr	r2, r2, #32
 1190 004a CA60     		str	r2, [r1, #12]
 672:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1191              		.loc 1 672 0 discriminator 2
 1192 004c 1846     		mov	r0, r3
 1193              	.LVL106:
 1194 004e 7047     		bx	lr
 1195              	.LVL107:
 1196              	.L94:
 647:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1197              		.loc 1 647 0
 1198 0050 0120     		movs	r0, #1
 1199              	.LVL108:
 1200 0052 7047     		bx	lr
 1201              	.LVL109:
 1202              	.L95:
 1203 0054 0120     		movs	r0, #1
 1204              	.LVL110:
 1205 0056 7047     		bx	lr
 1206              	.LVL111:
 1207              	.L96:
 651:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1208              		.loc 1 651 0
 1209 0058 0220     		movs	r0, #2
 1210              	.LVL112:
 678:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1211              		.loc 1 678 0
 1212 005a 7047     		bx	lr
 1213              		.cfi_endproc
 1214              	.LFE71:
 1216              		.section	.text.HAL_IRDA_Transmit_DMA,"ax",%progbits
 1217              		.align	1
 1218              		.global	HAL_IRDA_Transmit_DMA
 1219              		.syntax unified
 1220              		.thumb
 1221              		.thumb_func
 1222              		.fpu softvfp
 1224              	HAL_IRDA_Transmit_DMA:
 1225              	.LFB72:
 689:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 1226              		.loc 1 689 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccirtMvB.s 			page 62


 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 1230              	.LVL113:
 1231 0000 38B5     		push	{r3, r4, r5, lr}
 1232              	.LCFI14:
 1233              		.cfi_def_cfa_offset 16
 1234              		.cfi_offset 3, -16
 1235              		.cfi_offset 4, -12
 1236              		.cfi_offset 5, -8
 1237              		.cfi_offset 14, -4
 693:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1238              		.loc 1 693 0
 1239 0002 90F83540 		ldrb	r4, [r0, #53]	@ zero_extendqisi2
 1240 0006 E4B2     		uxtb	r4, r4
 1241 0008 202C     		cmp	r4, #32
 1242 000a 01D0     		beq	.L105
 740:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1243              		.loc 1 740 0
 1244 000c 0220     		movs	r0, #2
 1245              	.LVL114:
 1246 000e 38BD     		pop	{r3, r4, r5, pc}
 1247              	.LVL115:
 1248              	.L105:
 695:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1249              		.loc 1 695 0
 1250 0010 0029     		cmp	r1, #0
 1251 0012 31D0     		beq	.L101
 695:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1252              		.loc 1 695 0 is_stmt 0 discriminator 1
 1253 0014 002A     		cmp	r2, #0
 1254 0016 31D0     		beq	.L102
 701:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1255              		.loc 1 701 0 is_stmt 1
 1256 0018 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1257 001c 012B     		cmp	r3, #1
 1258 001e 01D1     		bne	.L106
 1259 0020 0220     		movs	r0, #2
 1260              	.LVL116:
 742:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1261              		.loc 1 742 0
 1262 0022 38BD     		pop	{r3, r4, r5, pc}
 1263              	.LVL117:
 1264              	.L106:
 1265 0024 1346     		mov	r3, r2
 1266 0026 0446     		mov	r4, r0
 701:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1267              		.loc 1 701 0 discriminator 2
 1268 0028 0122     		movs	r2, #1
 1269              	.LVL118:
 1270 002a 80F83420 		strb	r2, [r0, #52]
 703:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 1271              		.loc 1 703 0 discriminator 2
 1272 002e C161     		str	r1, [r0, #28]
 704:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 1273              		.loc 1 704 0 discriminator 2
 1274 0030 0384     		strh	r3, [r0, #32]	@ movhi
 705:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1275              		.loc 1 705 0 discriminator 2
ARM GAS  /tmp/ccirtMvB.s 			page 63


 1276 0032 4384     		strh	r3, [r0, #34]	@ movhi
 707:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 1277              		.loc 1 707 0 discriminator 2
 1278 0034 0025     		movs	r5, #0
 1279 0036 8563     		str	r5, [r0, #56]
 708:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1280              		.loc 1 708 0 discriminator 2
 1281 0038 2122     		movs	r2, #33
 1282 003a 80F83520 		strb	r2, [r0, #53]
 711:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1283              		.loc 1 711 0 discriminator 2
 1284 003e C26A     		ldr	r2, [r0, #44]
 1285 0040 0F48     		ldr	r0, .L107
 1286              	.LVL119:
 1287 0042 9062     		str	r0, [r2, #40]
 714:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1288              		.loc 1 714 0 discriminator 2
 1289 0044 E26A     		ldr	r2, [r4, #44]
 1290 0046 0F48     		ldr	r0, .L107+4
 1291 0048 D062     		str	r0, [r2, #44]
 717:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1292              		.loc 1 717 0 discriminator 2
 1293 004a E26A     		ldr	r2, [r4, #44]
 1294 004c 0E48     		ldr	r0, .L107+8
 1295 004e 1063     		str	r0, [r2, #48]
 720:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1296              		.loc 1 720 0 discriminator 2
 1297 0050 E26A     		ldr	r2, [r4, #44]
 1298 0052 5563     		str	r5, [r2, #52]
 1299              	.LVL120:
 724:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1300              		.loc 1 724 0 discriminator 2
 1301 0054 2268     		ldr	r2, [r4]
 1302 0056 0432     		adds	r2, r2, #4
 1303 0058 E06A     		ldr	r0, [r4, #44]
 1304 005a FFF7FEFF 		bl	HAL_DMA_Start_IT
 1305              	.LVL121:
 727:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1306              		.loc 1 727 0 discriminator 2
 1307 005e 2368     		ldr	r3, [r4]
 1308 0060 6FF04002 		mvn	r2, #64
 1309 0064 1A60     		str	r2, [r3]
 730:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1310              		.loc 1 730 0 discriminator 2
 1311 0066 84F83450 		strb	r5, [r4, #52]
 734:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1312              		.loc 1 734 0 discriminator 2
 1313 006a 2268     		ldr	r2, [r4]
 1314 006c 5369     		ldr	r3, [r2, #20]
 1315 006e 43F08003 		orr	r3, r3, #128
 1316 0072 5361     		str	r3, [r2, #20]
 736:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1317              		.loc 1 736 0 discriminator 2
 1318 0074 2846     		mov	r0, r5
 1319 0076 38BD     		pop	{r3, r4, r5, pc}
 1320              	.LVL122:
 1321              	.L101:
ARM GAS  /tmp/ccirtMvB.s 			page 64


 697:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1322              		.loc 1 697 0
 1323 0078 0120     		movs	r0, #1
 1324              	.LVL123:
 1325 007a 38BD     		pop	{r3, r4, r5, pc}
 1326              	.LVL124:
 1327              	.L102:
 1328 007c 0120     		movs	r0, #1
 1329              	.LVL125:
 1330 007e 38BD     		pop	{r3, r4, r5, pc}
 1331              	.L108:
 1332              		.align	2
 1333              	.L107:
 1334 0080 00000000 		.word	IRDA_DMATransmitCplt
 1335 0084 00000000 		.word	IRDA_DMATransmitHalfCplt
 1336 0088 00000000 		.word	IRDA_DMAError
 1337              		.cfi_endproc
 1338              	.LFE72:
 1340              		.section	.text.HAL_IRDA_Receive_DMA,"ax",%progbits
 1341              		.align	1
 1342              		.global	HAL_IRDA_Receive_DMA
 1343              		.syntax unified
 1344              		.thumb
 1345              		.thumb_func
 1346              		.fpu softvfp
 1348              	HAL_IRDA_Receive_DMA:
 1349              	.LFB73:
 754:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 1350              		.loc 1 754 0
 1351              		.cfi_startproc
 1352              		@ args = 0, pretend = 0, frame = 8
 1353              		@ frame_needed = 0, uses_anonymous_args = 0
 1354              	.LVL126:
 1355 0000 30B5     		push	{r4, r5, lr}
 1356              	.LCFI15:
 1357              		.cfi_def_cfa_offset 12
 1358              		.cfi_offset 4, -12
 1359              		.cfi_offset 5, -8
 1360              		.cfi_offset 14, -4
 1361 0002 83B0     		sub	sp, sp, #12
 1362              	.LCFI16:
 1363              		.cfi_def_cfa_offset 24
 758:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1364              		.loc 1 758 0
 1365 0004 90F83640 		ldrb	r4, [r0, #54]	@ zero_extendqisi2
 1366 0008 E4B2     		uxtb	r4, r4
 1367 000a 202C     		cmp	r4, #32
 1368 000c 02D0     		beq	.L116
 810:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1369              		.loc 1 810 0
 1370 000e 0220     		movs	r0, #2
 1371              	.LVL127:
 1372              	.L110:
 812:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1373              		.loc 1 812 0
 1374 0010 03B0     		add	sp, sp, #12
 1375              	.LCFI17:
ARM GAS  /tmp/ccirtMvB.s 			page 65


 1376              		.cfi_remember_state
 1377              		.cfi_def_cfa_offset 12
 1378              		@ sp needed
 1379 0012 30BD     		pop	{r4, r5, pc}
 1380              	.LVL128:
 1381              	.L116:
 1382              	.LCFI18:
 1383              		.cfi_restore_state
 760:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1384              		.loc 1 760 0
 1385 0014 0029     		cmp	r1, #0
 1386 0016 3DD0     		beq	.L112
 760:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1387              		.loc 1 760 0 is_stmt 0 discriminator 1
 1388 0018 002A     		cmp	r2, #0
 1389 001a 3DD0     		beq	.L113
 766:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1390              		.loc 1 766 0 is_stmt 1
 1391 001c 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1392 0020 012B     		cmp	r3, #1
 1393 0022 01D1     		bne	.L117
 1394 0024 0220     		movs	r0, #2
 1395              	.LVL129:
 1396 0026 F3E7     		b	.L110
 1397              	.LVL130:
 1398              	.L117:
 1399 0028 1346     		mov	r3, r2
 1400 002a 0A46     		mov	r2, r1
 1401              	.LVL131:
 1402 002c 0446     		mov	r4, r0
 766:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1403              		.loc 1 766 0 is_stmt 0 discriminator 2
 1404 002e 0121     		movs	r1, #1
 1405              	.LVL132:
 1406 0030 80F83410 		strb	r1, [r0, #52]
 768:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 1407              		.loc 1 768 0 is_stmt 1 discriminator 2
 1408 0034 4262     		str	r2, [r0, #36]
 769:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1409              		.loc 1 769 0 discriminator 2
 1410 0036 0385     		strh	r3, [r0, #40]	@ movhi
 771:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1411              		.loc 1 771 0 discriminator 2
 1412 0038 0025     		movs	r5, #0
 1413 003a 8563     		str	r5, [r0, #56]
 772:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1414              		.loc 1 772 0 discriminator 2
 1415 003c 2221     		movs	r1, #34
 1416 003e 80F83610 		strb	r1, [r0, #54]
 775:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1417              		.loc 1 775 0 discriminator 2
 1418 0042 016B     		ldr	r1, [r0, #48]
 1419 0044 1548     		ldr	r0, .L118
 1420              	.LVL133:
 1421 0046 8862     		str	r0, [r1, #40]
 778:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1422              		.loc 1 778 0 discriminator 2
ARM GAS  /tmp/ccirtMvB.s 			page 66


 1423 0048 216B     		ldr	r1, [r4, #48]
 1424 004a 1548     		ldr	r0, .L118+4
 1425 004c C862     		str	r0, [r1, #44]
 781:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1426              		.loc 1 781 0 discriminator 2
 1427 004e 216B     		ldr	r1, [r4, #48]
 1428 0050 1448     		ldr	r0, .L118+8
 1429 0052 0863     		str	r0, [r1, #48]
 784:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1430              		.loc 1 784 0 discriminator 2
 1431 0054 216B     		ldr	r1, [r4, #48]
 1432 0056 4D63     		str	r5, [r1, #52]
 1433              	.LVL134:
 788:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1434              		.loc 1 788 0 discriminator 2
 1435 0058 2168     		ldr	r1, [r4]
 1436 005a 0431     		adds	r1, r1, #4
 1437 005c 206B     		ldr	r0, [r4, #48]
 1438 005e FFF7FEFF 		bl	HAL_DMA_Start_IT
 1439              	.LVL135:
 1440              	.LBB2:
 791:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1441              		.loc 1 791 0 discriminator 2
 1442 0062 0195     		str	r5, [sp, #4]
 1443 0064 2368     		ldr	r3, [r4]
 1444 0066 1A68     		ldr	r2, [r3]
 1445 0068 0192     		str	r2, [sp, #4]
 1446 006a 5A68     		ldr	r2, [r3, #4]
 1447 006c 0192     		str	r2, [sp, #4]
 1448 006e 019A     		ldr	r2, [sp, #4]
 1449              	.LBE2:
 794:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1450              		.loc 1 794 0 discriminator 2
 1451 0070 84F83450 		strb	r5, [r4, #52]
 797:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1452              		.loc 1 797 0 discriminator 2
 1453 0074 DA68     		ldr	r2, [r3, #12]
 1454 0076 42F48072 		orr	r2, r2, #256
 1455 007a DA60     		str	r2, [r3, #12]
 800:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1456              		.loc 1 800 0 discriminator 2
 1457 007c 2268     		ldr	r2, [r4]
 1458 007e 5369     		ldr	r3, [r2, #20]
 1459 0080 43F00103 		orr	r3, r3, #1
 1460 0084 5361     		str	r3, [r2, #20]
 804:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1461              		.loc 1 804 0 discriminator 2
 1462 0086 2268     		ldr	r2, [r4]
 1463 0088 5369     		ldr	r3, [r2, #20]
 1464 008a 43F04003 		orr	r3, r3, #64
 1465 008e 5361     		str	r3, [r2, #20]
 806:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1466              		.loc 1 806 0 discriminator 2
 1467 0090 2846     		mov	r0, r5
 1468 0092 BDE7     		b	.L110
 1469              	.LVL136:
 1470              	.L112:
ARM GAS  /tmp/ccirtMvB.s 			page 67


 762:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1471              		.loc 1 762 0
 1472 0094 0120     		movs	r0, #1
 1473              	.LVL137:
 1474 0096 BBE7     		b	.L110
 1475              	.LVL138:
 1476              	.L113:
 1477 0098 0120     		movs	r0, #1
 1478              	.LVL139:
 1479 009a B9E7     		b	.L110
 1480              	.L119:
 1481              		.align	2
 1482              	.L118:
 1483 009c 00000000 		.word	IRDA_DMAReceiveCplt
 1484 00a0 00000000 		.word	IRDA_DMAReceiveHalfCplt
 1485 00a4 00000000 		.word	IRDA_DMAError
 1486              		.cfi_endproc
 1487              	.LFE73:
 1489              		.section	.text.HAL_IRDA_DMAPause,"ax",%progbits
 1490              		.align	1
 1491              		.global	HAL_IRDA_DMAPause
 1492              		.syntax unified
 1493              		.thumb
 1494              		.thumb_func
 1495              		.fpu softvfp
 1497              	HAL_IRDA_DMAPause:
 1498              	.LFB74:
 821:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 1499              		.loc 1 821 0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 0
 1502              		@ frame_needed = 0, uses_anonymous_args = 0
 1503              		@ link register save eliminated.
 1504              	.LVL140:
 825:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1505              		.loc 1 825 0
 1506 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1507 0004 012B     		cmp	r3, #1
 1508 0006 31D0     		beq	.L124
 825:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1509              		.loc 1 825 0 is_stmt 0 discriminator 2
 1510 0008 0123     		movs	r3, #1
 1511 000a 80F83430 		strb	r3, [r0, #52]
 827:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 1512              		.loc 1 827 0 is_stmt 1 discriminator 2
 1513 000e 0168     		ldr	r1, [r0]
 1514 0010 4A69     		ldr	r2, [r1, #20]
 1515 0012 02F08002 		and	r2, r2, #128
 1516              	.LVL141:
 828:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1517              		.loc 1 828 0 discriminator 2
 1518 0016 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1519 001a DBB2     		uxtb	r3, r3
 1520 001c 212B     		cmp	r3, #33
 1521 001e 0DD0     		beq	.L125
 1522              	.L122:
 834:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
ARM GAS  /tmp/ccirtMvB.s 			page 68


 1523              		.loc 1 834 0
 1524 0020 0168     		ldr	r1, [r0]
 1525 0022 4A69     		ldr	r2, [r1, #20]
 1526              	.LVL142:
 1527 0024 02F04002 		and	r2, r2, #64
 1528              	.LVL143:
 835:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1529              		.loc 1 835 0
 1530 0028 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 1531 002c DBB2     		uxtb	r3, r3
 1532 002e 222B     		cmp	r3, #34
 1533 0030 0BD0     		beq	.L126
 1534              	.LVL144:
 1535              	.L123:
 846:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1536              		.loc 1 846 0
 1537 0032 0023     		movs	r3, #0
 1538 0034 80F83430 		strb	r3, [r0, #52]
 848:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 1539              		.loc 1 848 0
 1540 0038 1846     		mov	r0, r3
 1541              	.LVL145:
 1542 003a 7047     		bx	lr
 1543              	.LVL146:
 1544              	.L125:
 828:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1545              		.loc 1 828 0 discriminator 1
 1546 003c 002A     		cmp	r2, #0
 1547 003e EFD0     		beq	.L122
 831:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1548              		.loc 1 831 0
 1549 0040 4B69     		ldr	r3, [r1, #20]
 1550 0042 23F08003 		bic	r3, r3, #128
 1551 0046 4B61     		str	r3, [r1, #20]
 1552 0048 EAE7     		b	.L122
 1553              	.L126:
 835:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1554              		.loc 1 835 0 discriminator 1
 1555 004a 002A     		cmp	r2, #0
 1556 004c F1D0     		beq	.L123
 838:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1557              		.loc 1 838 0
 1558 004e CB68     		ldr	r3, [r1, #12]
 1559 0050 23F48073 		bic	r3, r3, #256
 1560 0054 CB60     		str	r3, [r1, #12]
 839:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1561              		.loc 1 839 0
 1562 0056 0268     		ldr	r2, [r0]
 1563              	.LVL147:
 1564 0058 5369     		ldr	r3, [r2, #20]
 1565 005a 23F00103 		bic	r3, r3, #1
 1566 005e 5361     		str	r3, [r2, #20]
 842:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1567              		.loc 1 842 0
 1568 0060 0268     		ldr	r2, [r0]
 1569 0062 5369     		ldr	r3, [r2, #20]
 1570 0064 23F04003 		bic	r3, r3, #64
ARM GAS  /tmp/ccirtMvB.s 			page 69


 1571 0068 5361     		str	r3, [r2, #20]
 1572 006a E2E7     		b	.L123
 1573              	.LVL148:
 1574              	.L124:
 825:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1575              		.loc 1 825 0
 1576 006c 0220     		movs	r0, #2
 1577              	.LVL149:
 849:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1578              		.loc 1 849 0
 1579 006e 7047     		bx	lr
 1580              		.cfi_endproc
 1581              	.LFE74:
 1583              		.section	.text.HAL_IRDA_DMAResume,"ax",%progbits
 1584              		.align	1
 1585              		.global	HAL_IRDA_DMAResume
 1586              		.syntax unified
 1587              		.thumb
 1588              		.thumb_func
 1589              		.fpu softvfp
 1591              	HAL_IRDA_DMAResume:
 1592              	.LFB75:
 858:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Locked */
 1593              		.loc 1 858 0
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 8
 1596              		@ frame_needed = 0, uses_anonymous_args = 0
 1597              		@ link register save eliminated.
 1598              	.LVL150:
 860:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1599              		.loc 1 860 0
 1600 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1601 0004 012B     		cmp	r3, #1
 1602 0006 34D0     		beq	.L131
 860:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1603              		.loc 1 860 0 is_stmt 0 discriminator 2
 1604 0008 0123     		movs	r3, #1
 1605 000a 80F83430 		strb	r3, [r0, #52]
 862:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1606              		.loc 1 862 0 is_stmt 1 discriminator 2
 1607 000e 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1608 0012 DBB2     		uxtb	r3, r3
 1609 0014 212B     		cmp	r3, #33
 1610 0016 09D0     		beq	.L137
 1611              	.L129:
 868:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1612              		.loc 1 868 0
 1613 0018 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 1614 001c DBB2     		uxtb	r3, r3
 1615 001e 222B     		cmp	r3, #34
 1616 0020 0AD0     		beq	.L138
 882:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1617              		.loc 1 882 0
 1618 0022 0023     		movs	r3, #0
 1619 0024 80F83430 		strb	r3, [r0, #52]
 884:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 1620              		.loc 1 884 0
ARM GAS  /tmp/ccirtMvB.s 			page 70


 1621 0028 1846     		mov	r0, r3
 1622              	.LVL151:
 885:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1623              		.loc 1 885 0
 1624 002a 7047     		bx	lr
 1625              	.LVL152:
 1626              	.L137:
 865:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1627              		.loc 1 865 0
 1628 002c 0268     		ldr	r2, [r0]
 1629 002e 5369     		ldr	r3, [r2, #20]
 1630 0030 43F08003 		orr	r3, r3, #128
 1631 0034 5361     		str	r3, [r2, #20]
 1632 0036 EFE7     		b	.L129
 1633              	.L138:
 858:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Locked */
 1634              		.loc 1 858 0
 1635 0038 82B0     		sub	sp, sp, #8
 1636              	.LCFI19:
 1637              		.cfi_def_cfa_offset 8
 1638              	.LBB3:
 871:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1639              		.loc 1 871 0
 1640 003a 0023     		movs	r3, #0
 1641 003c 0193     		str	r3, [sp, #4]
 1642 003e 0368     		ldr	r3, [r0]
 1643 0040 1A68     		ldr	r2, [r3]
 1644 0042 0192     		str	r2, [sp, #4]
 1645 0044 5A68     		ldr	r2, [r3, #4]
 1646 0046 0192     		str	r2, [sp, #4]
 1647 0048 019A     		ldr	r2, [sp, #4]
 1648              	.LBE3:
 874:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1649              		.loc 1 874 0
 1650 004a DA68     		ldr	r2, [r3, #12]
 1651 004c 42F48072 		orr	r2, r2, #256
 1652 0050 DA60     		str	r2, [r3, #12]
 875:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1653              		.loc 1 875 0
 1654 0052 0268     		ldr	r2, [r0]
 1655 0054 5369     		ldr	r3, [r2, #20]
 1656 0056 43F00103 		orr	r3, r3, #1
 1657 005a 5361     		str	r3, [r2, #20]
 878:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1658              		.loc 1 878 0
 1659 005c 0268     		ldr	r2, [r0]
 1660 005e 5369     		ldr	r3, [r2, #20]
 1661 0060 43F04003 		orr	r3, r3, #64
 1662 0064 5361     		str	r3, [r2, #20]
 882:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1663              		.loc 1 882 0
 1664 0066 0023     		movs	r3, #0
 1665 0068 80F83430 		strb	r3, [r0, #52]
 884:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 1666              		.loc 1 884 0
 1667 006c 1846     		mov	r0, r3
 1668              	.LVL153:
ARM GAS  /tmp/ccirtMvB.s 			page 71


 885:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1669              		.loc 1 885 0
 1670 006e 02B0     		add	sp, sp, #8
 1671              	.LCFI20:
 1672              		.cfi_def_cfa_offset 0
 1673              		@ sp needed
 1674 0070 7047     		bx	lr
 1675              	.LVL154:
 1676              	.L131:
 860:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1677              		.loc 1 860 0
 1678 0072 0220     		movs	r0, #2
 1679              	.LVL155:
 1680 0074 7047     		bx	lr
 1681              		.cfi_endproc
 1682              	.LFE75:
 1684              		.section	.text.HAL_IRDA_DMAStop,"ax",%progbits
 1685              		.align	1
 1686              		.global	HAL_IRDA_DMAStop
 1687              		.syntax unified
 1688              		.thumb
 1689              		.thumb_func
 1690              		.fpu softvfp
 1692              	HAL_IRDA_DMAStop:
 1693              	.LFB76:
 894:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 1694              		.loc 1 894 0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 0
 1697              		@ frame_needed = 0, uses_anonymous_args = 0
 1698              	.LVL156:
 1699 0000 10B5     		push	{r4, lr}
 1700              	.LCFI21:
 1701              		.cfi_def_cfa_offset 8
 1702              		.cfi_offset 4, -8
 1703              		.cfi_offset 14, -4
 1704 0002 0446     		mov	r4, r0
 1705              	.LVL157:
 903:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 1706              		.loc 1 903 0
 1707 0004 0168     		ldr	r1, [r0]
 1708 0006 4A69     		ldr	r2, [r1, #20]
 1709              	.LVL158:
 904:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1710              		.loc 1 904 0
 1711 0008 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1712 000c DBB2     		uxtb	r3, r3
 1713 000e 212B     		cmp	r3, #33
 1714 0010 0AD0     		beq	.L145
 1715              	.LVL159:
 1716              	.L140:
 917:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 1717              		.loc 1 917 0
 1718 0012 2168     		ldr	r1, [r4]
 1719 0014 4A69     		ldr	r2, [r1, #20]
 1720 0016 02F04002 		and	r2, r2, #64
 1721              	.LVL160:
ARM GAS  /tmp/ccirtMvB.s 			page 72


 918:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1722              		.loc 1 918 0
 1723 001a 94F83630 		ldrb	r3, [r4, #54]	@ zero_extendqisi2
 1724 001e DBB2     		uxtb	r3, r3
 1725 0020 222B     		cmp	r3, #34
 1726 0022 11D0     		beq	.L146
 1727              	.LVL161:
 1728              	.L142:
 931:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1729              		.loc 1 931 0
 1730 0024 0020     		movs	r0, #0
 1731 0026 10BD     		pop	{r4, pc}
 1732              	.LVL162:
 1733              	.L145:
 1734 0028 02F08002 		and	r2, r2, #128
 1735              	.LVL163:
 904:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1736              		.loc 1 904 0 discriminator 1
 1737 002c 002A     		cmp	r2, #0
 1738 002e F0D0     		beq	.L140
 906:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1739              		.loc 1 906 0
 1740 0030 4B69     		ldr	r3, [r1, #20]
 1741 0032 23F08003 		bic	r3, r3, #128
 1742 0036 4B61     		str	r3, [r1, #20]
 909:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1743              		.loc 1 909 0
 1744 0038 C06A     		ldr	r0, [r0, #44]
 1745              	.LVL164:
 1746 003a 08B1     		cbz	r0, .L141
 911:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1747              		.loc 1 911 0
 1748 003c FFF7FEFF 		bl	HAL_DMA_Abort
 1749              	.LVL165:
 1750              	.L141:
 913:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1751              		.loc 1 913 0
 1752 0040 2046     		mov	r0, r4
 1753 0042 FFF7FEFF 		bl	IRDA_EndTxTransfer
 1754              	.LVL166:
 1755 0046 E4E7     		b	.L140
 1756              	.LVL167:
 1757              	.L146:
 918:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1758              		.loc 1 918 0 discriminator 1
 1759 0048 002A     		cmp	r2, #0
 1760 004a EBD0     		beq	.L142
 920:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1761              		.loc 1 920 0
 1762 004c 4B69     		ldr	r3, [r1, #20]
 1763 004e 23F04003 		bic	r3, r3, #64
 1764 0052 4B61     		str	r3, [r1, #20]
 923:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1765              		.loc 1 923 0
 1766 0054 206B     		ldr	r0, [r4, #48]
 1767 0056 08B1     		cbz	r0, .L143
 925:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
ARM GAS  /tmp/ccirtMvB.s 			page 73


 1768              		.loc 1 925 0
 1769 0058 FFF7FEFF 		bl	HAL_DMA_Abort
 1770              	.LVL168:
 1771              	.L143:
 927:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1772              		.loc 1 927 0
 1773 005c 2046     		mov	r0, r4
 1774 005e FFF7FEFF 		bl	IRDA_EndRxTransfer
 1775              	.LVL169:
 1776 0062 DFE7     		b	.L142
 1777              		.cfi_endproc
 1778              	.LFE76:
 1780              		.section	.text.HAL_IRDA_Abort,"ax",%progbits
 1781              		.align	1
 1782              		.global	HAL_IRDA_Abort
 1783              		.syntax unified
 1784              		.thumb
 1785              		.thumb_func
 1786              		.fpu softvfp
 1788              	HAL_IRDA_Abort:
 1789              	.LFB77:
 946:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1790              		.loc 1 946 0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 0
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
 1794              	.LVL170:
 1795 0000 10B5     		push	{r4, lr}
 1796              	.LCFI22:
 1797              		.cfi_def_cfa_offset 8
 1798              		.cfi_offset 4, -8
 1799              		.cfi_offset 14, -4
 1800 0002 0446     		mov	r4, r0
 948:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1801              		.loc 1 948 0
 1802 0004 0268     		ldr	r2, [r0]
 1803 0006 D368     		ldr	r3, [r2, #12]
 1804 0008 23F4F073 		bic	r3, r3, #480
 1805 000c D360     		str	r3, [r2, #12]
 949:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1806              		.loc 1 949 0
 1807 000e 0268     		ldr	r2, [r0]
 1808 0010 5369     		ldr	r3, [r2, #20]
 1809 0012 23F00103 		bic	r3, r3, #1
 1810 0016 5361     		str	r3, [r2, #20]
 952:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1811              		.loc 1 952 0
 1812 0018 0368     		ldr	r3, [r0]
 1813 001a 5A69     		ldr	r2, [r3, #20]
 1814 001c 12F0800F 		tst	r2, #128
 1815 0020 0AD0     		beq	.L148
 954:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1816              		.loc 1 954 0
 1817 0022 5A69     		ldr	r2, [r3, #20]
 1818 0024 22F08002 		bic	r2, r2, #128
 1819 0028 5A61     		str	r2, [r3, #20]
 957:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
ARM GAS  /tmp/ccirtMvB.s 			page 74


 1820              		.loc 1 957 0
 1821 002a C36A     		ldr	r3, [r0, #44]
 1822 002c 23B1     		cbz	r3, .L148
 961:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1823              		.loc 1 961 0
 1824 002e 0022     		movs	r2, #0
 1825 0030 5A63     		str	r2, [r3, #52]
 963:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1826              		.loc 1 963 0
 1827 0032 C06A     		ldr	r0, [r0, #44]
 1828              	.LVL171:
 1829 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1830              	.LVL172:
 1831              	.L148:
 968:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1832              		.loc 1 968 0
 1833 0038 2368     		ldr	r3, [r4]
 1834 003a 5A69     		ldr	r2, [r3, #20]
 1835 003c 12F0400F 		tst	r2, #64
 1836 0040 0AD0     		beq	.L149
 970:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1837              		.loc 1 970 0
 1838 0042 5A69     		ldr	r2, [r3, #20]
 1839 0044 22F04002 		bic	r2, r2, #64
 1840 0048 5A61     		str	r2, [r3, #20]
 973:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1841              		.loc 1 973 0
 1842 004a 236B     		ldr	r3, [r4, #48]
 1843 004c 23B1     		cbz	r3, .L149
 977:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1844              		.loc 1 977 0
 1845 004e 0022     		movs	r2, #0
 1846 0050 5A63     		str	r2, [r3, #52]
 979:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1847              		.loc 1 979 0
 1848 0052 206B     		ldr	r0, [r4, #48]
 1849 0054 FFF7FEFF 		bl	HAL_DMA_Abort
 1850              	.LVL173:
 1851              	.L149:
 984:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 1852              		.loc 1 984 0
 1853 0058 0020     		movs	r0, #0
 1854 005a 6084     		strh	r0, [r4, #34]	@ movhi
 985:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1855              		.loc 1 985 0
 1856 005c 6085     		strh	r0, [r4, #42]	@ movhi
 988:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1857              		.loc 1 988 0
 1858 005e A063     		str	r0, [r4, #56]
 991:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 1859              		.loc 1 991 0
 1860 0060 2023     		movs	r3, #32
 1861 0062 84F83630 		strb	r3, [r4, #54]
 992:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1862              		.loc 1 992 0
 1863 0066 84F83530 		strb	r3, [r4, #53]
 995:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccirtMvB.s 			page 75


 1864              		.loc 1 995 0
 1865 006a 10BD     		pop	{r4, pc}
 1866              		.cfi_endproc
 1867              	.LFE77:
 1869              		.section	.text.HAL_IRDA_AbortTransmit,"ax",%progbits
 1870              		.align	1
 1871              		.global	HAL_IRDA_AbortTransmit
 1872              		.syntax unified
 1873              		.thumb
 1874              		.thumb_func
 1875              		.fpu softvfp
 1877              	HAL_IRDA_AbortTransmit:
 1878              	.LFB78:
1010:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 1879              		.loc 1 1010 0
 1880              		.cfi_startproc
 1881              		@ args = 0, pretend = 0, frame = 0
 1882              		@ frame_needed = 0, uses_anonymous_args = 0
 1883              	.LVL174:
 1884 0000 10B5     		push	{r4, lr}
 1885              	.LCFI23:
 1886              		.cfi_def_cfa_offset 8
 1887              		.cfi_offset 4, -8
 1888              		.cfi_offset 14, -4
 1889 0002 0446     		mov	r4, r0
1012:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1890              		.loc 1 1012 0
 1891 0004 0268     		ldr	r2, [r0]
 1892 0006 D368     		ldr	r3, [r2, #12]
 1893 0008 23F0C003 		bic	r3, r3, #192
 1894 000c D360     		str	r3, [r2, #12]
1015:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1895              		.loc 1 1015 0
 1896 000e 0368     		ldr	r3, [r0]
 1897 0010 5A69     		ldr	r2, [r3, #20]
 1898 0012 12F0800F 		tst	r2, #128
 1899 0016 0AD0     		beq	.L152
1017:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1900              		.loc 1 1017 0
 1901 0018 5A69     		ldr	r2, [r3, #20]
 1902 001a 22F08002 		bic	r2, r2, #128
 1903 001e 5A61     		str	r2, [r3, #20]
1020:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1904              		.loc 1 1020 0
 1905 0020 C36A     		ldr	r3, [r0, #44]
 1906 0022 23B1     		cbz	r3, .L152
1024:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1907              		.loc 1 1024 0
 1908 0024 0022     		movs	r2, #0
 1909 0026 5A63     		str	r2, [r3, #52]
1026:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1910              		.loc 1 1026 0
 1911 0028 C06A     		ldr	r0, [r0, #44]
 1912              	.LVL175:
 1913 002a FFF7FEFF 		bl	HAL_DMA_Abort
 1914              	.LVL176:
 1915              	.L152:
ARM GAS  /tmp/ccirtMvB.s 			page 76


1031:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1916              		.loc 1 1031 0
 1917 002e 0020     		movs	r0, #0
 1918 0030 6084     		strh	r0, [r4, #34]	@ movhi
1034:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1919              		.loc 1 1034 0
 1920 0032 2023     		movs	r3, #32
 1921 0034 84F83530 		strb	r3, [r4, #53]
1037:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1922              		.loc 1 1037 0
 1923 0038 10BD     		pop	{r4, pc}
 1924              		.cfi_endproc
 1925              	.LFE78:
 1927              		.section	.text.HAL_IRDA_AbortReceive,"ax",%progbits
 1928              		.align	1
 1929              		.global	HAL_IRDA_AbortReceive
 1930              		.syntax unified
 1931              		.thumb
 1932              		.thumb_func
 1933              		.fpu softvfp
 1935              	HAL_IRDA_AbortReceive:
 1936              	.LFB79:
1052:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1937              		.loc 1 1052 0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 0
 1940              		@ frame_needed = 0, uses_anonymous_args = 0
 1941              	.LVL177:
 1942 0000 10B5     		push	{r4, lr}
 1943              	.LCFI24:
 1944              		.cfi_def_cfa_offset 8
 1945              		.cfi_offset 4, -8
 1946              		.cfi_offset 14, -4
 1947 0002 0446     		mov	r4, r0
1054:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1948              		.loc 1 1054 0
 1949 0004 0268     		ldr	r2, [r0]
 1950 0006 D368     		ldr	r3, [r2, #12]
 1951 0008 23F49073 		bic	r3, r3, #288
 1952 000c D360     		str	r3, [r2, #12]
1055:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1953              		.loc 1 1055 0
 1954 000e 0268     		ldr	r2, [r0]
 1955 0010 5369     		ldr	r3, [r2, #20]
 1956 0012 23F00103 		bic	r3, r3, #1
 1957 0016 5361     		str	r3, [r2, #20]
1058:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1958              		.loc 1 1058 0
 1959 0018 0368     		ldr	r3, [r0]
 1960 001a 5A69     		ldr	r2, [r3, #20]
 1961 001c 12F0400F 		tst	r2, #64
 1962 0020 0AD0     		beq	.L155
1060:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1963              		.loc 1 1060 0
 1964 0022 5A69     		ldr	r2, [r3, #20]
 1965 0024 22F04002 		bic	r2, r2, #64
 1966 0028 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/ccirtMvB.s 			page 77


1063:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1967              		.loc 1 1063 0
 1968 002a 036B     		ldr	r3, [r0, #48]
 1969 002c 23B1     		cbz	r3, .L155
1067:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1970              		.loc 1 1067 0
 1971 002e 0022     		movs	r2, #0
 1972 0030 5A63     		str	r2, [r3, #52]
1069:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1973              		.loc 1 1069 0
 1974 0032 006B     		ldr	r0, [r0, #48]
 1975              	.LVL178:
 1976 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1977              	.LVL179:
 1978              	.L155:
1074:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1979              		.loc 1 1074 0
 1980 0038 0020     		movs	r0, #0
 1981 003a 6085     		strh	r0, [r4, #42]	@ movhi
1077:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1982              		.loc 1 1077 0
 1983 003c 2023     		movs	r3, #32
 1984 003e 84F83630 		strb	r3, [r4, #54]
1080:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1985              		.loc 1 1080 0
 1986 0042 10BD     		pop	{r4, pc}
 1987              		.cfi_endproc
 1988              	.LFE79:
 1990              		.section	.text.HAL_IRDA_TxCpltCallback,"ax",%progbits
 1991              		.align	1
 1992              		.weak	HAL_IRDA_TxCpltCallback
 1993              		.syntax unified
 1994              		.thumb
 1995              		.thumb_func
 1996              		.fpu softvfp
 1998              	HAL_IRDA_TxCpltCallback:
 1999              	.LFB84:
1469:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2000              		.loc 1 1469 0
 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 0
 2003              		@ frame_needed = 0, uses_anonymous_args = 0
 2004              		@ link register save eliminated.
 2005              	.LVL180:
 2006 0000 7047     		bx	lr
 2007              		.cfi_endproc
 2008              	.LFE84:
 2010              		.section	.text.IRDA_DMATransmitCplt,"ax",%progbits
 2011              		.align	1
 2012              		.syntax unified
 2013              		.thumb
 2014              		.thumb_func
 2015              		.fpu softvfp
 2017              	IRDA_DMATransmitCplt:
 2018              	.LFB94:
1640:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2019              		.loc 1 1640 0
ARM GAS  /tmp/ccirtMvB.s 			page 78


 2020              		.cfi_startproc
 2021              		@ args = 0, pretend = 0, frame = 0
 2022              		@ frame_needed = 0, uses_anonymous_args = 0
 2023              	.LVL181:
1640:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2024              		.loc 1 1640 0
 2025 0000 08B5     		push	{r3, lr}
 2026              	.LCFI25:
 2027              		.cfi_def_cfa_offset 8
 2028              		.cfi_offset 3, -8
 2029              		.cfi_offset 14, -4
1641:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Normal mode */
 2030              		.loc 1 1641 0
 2031 0002 436A     		ldr	r3, [r0, #36]
 2032              	.LVL182:
1643:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2033              		.loc 1 1643 0
 2034 0004 0268     		ldr	r2, [r0]
 2035 0006 1268     		ldr	r2, [r2]
 2036 0008 12F0200F 		tst	r2, #32
 2037 000c 0CD1     		bne	.L159
1645:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 2038              		.loc 1 1645 0
 2039 000e 0022     		movs	r2, #0
 2040 0010 5A84     		strh	r2, [r3, #34]	@ movhi
1649:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 2041              		.loc 1 1649 0
 2042 0012 1968     		ldr	r1, [r3]
 2043 0014 4A69     		ldr	r2, [r1, #20]
 2044 0016 22F08002 		bic	r2, r2, #128
 2045 001a 4A61     		str	r2, [r1, #20]
1652:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2046              		.loc 1 1652 0
 2047 001c 1A68     		ldr	r2, [r3]
 2048 001e D368     		ldr	r3, [r2, #12]
 2049              	.LVL183:
 2050 0020 43F04003 		orr	r3, r3, #64
 2051 0024 D360     		str	r3, [r2, #12]
 2052 0026 08BD     		pop	{r3, pc}
 2053              	.LVL184:
 2054              	.L159:
1657:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2055              		.loc 1 1657 0
 2056 0028 1846     		mov	r0, r3
 2057              	.LVL185:
 2058 002a FFF7FEFF 		bl	HAL_IRDA_TxCpltCallback
 2059              	.LVL186:
 2060 002e 08BD     		pop	{r3, pc}
 2061              		.cfi_endproc
 2062              	.LFE94:
 2064              		.section	.text.IRDA_EndTransmit_IT,"ax",%progbits
 2065              		.align	1
 2066              		.syntax unified
 2067              		.thumb
 2068              		.thumb_func
 2069              		.fpu softvfp
 2071              	IRDA_EndTransmit_IT:
ARM GAS  /tmp/ccirtMvB.s 			page 79


 2072              	.LFB108:
1997:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA Transmit Complete Interrupt */    
 2073              		.loc 1 1997 0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 0
 2076              		@ frame_needed = 0, uses_anonymous_args = 0
 2077              	.LVL187:
 2078 0000 08B5     		push	{r3, lr}
 2079              	.LCFI26:
 2080              		.cfi_def_cfa_offset 8
 2081              		.cfi_offset 3, -8
 2082              		.cfi_offset 14, -4
1999:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 2083              		.loc 1 1999 0
 2084 0002 0168     		ldr	r1, [r0]
 2085 0004 CB68     		ldr	r3, [r1, #12]
 2086 0006 23F04003 		bic	r3, r3, #64
 2087 000a CB60     		str	r3, [r1, #12]
2002:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_TxCpltCallback(hirda);
 2088              		.loc 1 2002 0
 2089 000c 2023     		movs	r3, #32
 2090 000e 80F83530 		strb	r3, [r0, #53]
2003:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 2091              		.loc 1 2003 0
 2092 0012 FFF7FEFF 		bl	HAL_IRDA_TxCpltCallback
 2093              	.LVL188:
2006:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2094              		.loc 1 2006 0
 2095 0016 0020     		movs	r0, #0
 2096 0018 08BD     		pop	{r3, pc}
 2097              		.cfi_endproc
 2098              	.LFE108:
 2100              		.section	.text.HAL_IRDA_TxHalfCpltCallback,"ax",%progbits
 2101              		.align	1
 2102              		.weak	HAL_IRDA_TxHalfCpltCallback
 2103              		.syntax unified
 2104              		.thumb
 2105              		.thumb_func
 2106              		.fpu softvfp
 2108              	HAL_IRDA_TxHalfCpltCallback:
 2109              	.LFB85:
1484:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2110              		.loc 1 1484 0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 0
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 2114              		@ link register save eliminated.
 2115              	.LVL189:
 2116 0000 7047     		bx	lr
 2117              		.cfi_endproc
 2118              	.LFE85:
 2120              		.section	.text.IRDA_DMATransmitHalfCplt,"ax",%progbits
 2121              		.align	1
 2122              		.syntax unified
 2123              		.thumb
 2124              		.thumb_func
 2125              		.fpu softvfp
ARM GAS  /tmp/ccirtMvB.s 			page 80


 2127              	IRDA_DMATransmitHalfCplt:
 2128              	.LFB95:
1668:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2129              		.loc 1 1668 0
 2130              		.cfi_startproc
 2131              		@ args = 0, pretend = 0, frame = 0
 2132              		@ frame_needed = 0, uses_anonymous_args = 0
 2133              	.LVL190:
1668:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2134              		.loc 1 1668 0
 2135 0000 08B5     		push	{r3, lr}
 2136              	.LCFI27:
 2137              		.cfi_def_cfa_offset 8
 2138              		.cfi_offset 3, -8
 2139              		.cfi_offset 14, -4
 2140              	.LVL191:
1671:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2141              		.loc 1 1671 0
 2142 0002 406A     		ldr	r0, [r0, #36]
 2143              	.LVL192:
 2144 0004 FFF7FEFF 		bl	HAL_IRDA_TxHalfCpltCallback
 2145              	.LVL193:
 2146 0008 08BD     		pop	{r3, pc}
 2147              		.cfi_endproc
 2148              	.LFE95:
 2150              		.section	.text.HAL_IRDA_RxCpltCallback,"ax",%progbits
 2151              		.align	1
 2152              		.weak	HAL_IRDA_RxCpltCallback
 2153              		.syntax unified
 2154              		.thumb
 2155              		.thumb_func
 2156              		.fpu softvfp
 2158              	HAL_IRDA_RxCpltCallback:
 2159              	.LFB86:
1499:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2160              		.loc 1 1499 0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 0
 2163              		@ frame_needed = 0, uses_anonymous_args = 0
 2164              		@ link register save eliminated.
 2165              	.LVL194:
 2166 0000 7047     		bx	lr
 2167              		.cfi_endproc
 2168              	.LFE86:
 2170              		.section	.text.IRDA_DMAReceiveCplt,"ax",%progbits
 2171              		.align	1
 2172              		.syntax unified
 2173              		.thumb
 2174              		.thumb_func
 2175              		.fpu softvfp
 2177              	IRDA_DMAReceiveCplt:
 2178              	.LFB96:
1680:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2179              		.loc 1 1680 0
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 0
 2182              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccirtMvB.s 			page 81


 2183              	.LVL195:
1680:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2184              		.loc 1 1680 0
 2185 0000 08B5     		push	{r3, lr}
 2186              	.LCFI28:
 2187              		.cfi_def_cfa_offset 8
 2188              		.cfi_offset 3, -8
 2189              		.cfi_offset 14, -4
1681:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Normal mode */
 2190              		.loc 1 1681 0
 2191 0002 436A     		ldr	r3, [r0, #36]
 2192              	.LVL196:
1683:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2193              		.loc 1 1683 0
 2194 0004 0268     		ldr	r2, [r0]
 2195 0006 1268     		ldr	r2, [r2]
 2196 0008 12F0200F 		tst	r2, #32
 2197 000c 13D1     		bne	.L169
1685:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2198              		.loc 1 1685 0
 2199 000e 0022     		movs	r2, #0
 2200 0010 5A85     		strh	r2, [r3, #42]	@ movhi
1688:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2201              		.loc 1 1688 0
 2202 0012 1968     		ldr	r1, [r3]
 2203 0014 CA68     		ldr	r2, [r1, #12]
 2204 0016 22F48072 		bic	r2, r2, #256
 2205 001a CA60     		str	r2, [r1, #12]
1689:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 2206              		.loc 1 1689 0
 2207 001c 1968     		ldr	r1, [r3]
 2208 001e 4A69     		ldr	r2, [r1, #20]
 2209 0020 22F00102 		bic	r2, r2, #1
 2210 0024 4A61     		str	r2, [r1, #20]
1693:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2211              		.loc 1 1693 0
 2212 0026 1968     		ldr	r1, [r3]
 2213 0028 4A69     		ldr	r2, [r1, #20]
 2214 002a 22F04002 		bic	r2, r2, #64
 2215 002e 4A61     		str	r2, [r1, #20]
1696:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2216              		.loc 1 1696 0
 2217 0030 2022     		movs	r2, #32
 2218 0032 83F83620 		strb	r2, [r3, #54]
 2219              	.L169:
1698:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2220              		.loc 1 1698 0
 2221 0036 1846     		mov	r0, r3
 2222              	.LVL197:
 2223 0038 FFF7FEFF 		bl	HAL_IRDA_RxCpltCallback
 2224              	.LVL198:
 2225 003c 08BD     		pop	{r3, pc}
 2226              		.cfi_endproc
 2227              	.LFE96:
 2229              		.section	.text.IRDA_Receive_IT,"ax",%progbits
 2230              		.align	1
 2231              		.syntax unified
ARM GAS  /tmp/ccirtMvB.s 			page 82


 2232              		.thumb
 2233              		.thumb_func
 2234              		.fpu softvfp
 2236              	IRDA_Receive_IT:
 2237              	.LFB109:
2015:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
 2238              		.loc 1 2015 0
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 0
 2241              		@ frame_needed = 0, uses_anonymous_args = 0
 2242              	.LVL199:
 2243 0000 08B5     		push	{r3, lr}
 2244              	.LCFI29:
 2245              		.cfi_def_cfa_offset 8
 2246              		.cfi_offset 3, -8
 2247              		.cfi_offset 14, -4
2020:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2248              		.loc 1 2020 0
 2249 0002 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 2250 0006 DBB2     		uxtb	r3, r3
 2251 0008 222B     		cmp	r3, #34
 2252 000a 01D0     		beq	.L180
2070:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2253              		.loc 1 2070 0
 2254 000c 0220     		movs	r0, #2
 2255              	.LVL200:
 2256 000e 08BD     		pop	{r3, pc}
 2257              	.LVL201:
 2258              	.L180:
2022:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 2259              		.loc 1 2022 0
 2260 0010 0368     		ldr	r3, [r0]
 2261 0012 5B68     		ldr	r3, [r3, #4]
 2262 0014 99B2     		uxth	r1, r3
 2263              	.LVL202:
2023:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2264              		.loc 1 2023 0
 2265 0016 8268     		ldr	r2, [r0, #8]
 2266 0018 B2F5805F 		cmp	r2, #4096
 2267 001c 0DD0     		beq	.L181
2039:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2268              		.loc 1 2039 0
 2269 001e C268     		ldr	r2, [r0, #12]
 2270 0020 DAB9     		cbnz	r2, .L176
2041:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2271              		.loc 1 2041 0
 2272 0022 426A     		ldr	r2, [r0, #36]
 2273 0024 511C     		adds	r1, r2, #1
 2274              	.LVL203:
 2275 0026 4162     		str	r1, [r0, #36]
 2276 0028 1370     		strb	r3, [r2]
 2277              	.LVL204:
 2278              	.L175:
2049:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2279              		.loc 1 2049 0
 2280 002a 438D     		ldrh	r3, [r0, #42]
 2281 002c 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccirtMvB.s 			page 83


 2282 002e 013B     		subs	r3, r3, #1
 2283 0030 9BB2     		uxth	r3, r3
 2284 0032 4385     		strh	r3, [r0, #42]	@ movhi
 2285 0034 C3B1     		cbz	r3, .L182
2066:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2286              		.loc 1 2066 0
 2287 0036 0020     		movs	r0, #0
 2288              	.LVL205:
2072:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2289              		.loc 1 2072 0
 2290 0038 08BD     		pop	{r3, pc}
 2291              	.LVL206:
 2292              	.L181:
2025:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
 2293              		.loc 1 2025 0
 2294 003a 426A     		ldr	r2, [r0, #36]
 2295              	.LVL207:
2026:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2296              		.loc 1 2026 0
 2297 003c C368     		ldr	r3, [r0, #12]
 2298 003e 33B9     		cbnz	r3, .L174
2028:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 2U;
 2299              		.loc 1 2028 0
 2300 0040 C1F30801 		ubfx	r1, r1, #0, #9
 2301              	.LVL208:
 2302 0044 1180     		strh	r1, [r2]	@ movhi
2029:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2303              		.loc 1 2029 0
 2304 0046 436A     		ldr	r3, [r0, #36]
 2305 0048 0233     		adds	r3, r3, #2
 2306 004a 4362     		str	r3, [r0, #36]
 2307 004c EDE7     		b	.L175
 2308              	.LVL209:
 2309              	.L174:
2033:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 1U;
 2310              		.loc 1 2033 0
 2311 004e C9B2     		uxtb	r1, r1
 2312              	.LVL210:
 2313 0050 1180     		strh	r1, [r2]	@ movhi
2034:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2314              		.loc 1 2034 0
 2315 0052 436A     		ldr	r3, [r0, #36]
 2316 0054 0133     		adds	r3, r3, #1
 2317 0056 4362     		str	r3, [r0, #36]
 2318 0058 E7E7     		b	.L175
 2319              	.LVL211:
 2320              	.L176:
2045:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2321              		.loc 1 2045 0
 2322 005a 426A     		ldr	r2, [r0, #36]
 2323 005c 511C     		adds	r1, r2, #1
 2324              	.LVL212:
 2325 005e 4162     		str	r1, [r0, #36]
 2326 0060 03F07F03 		and	r3, r3, #127
 2327              	.LVL213:
 2328 0064 1370     		strb	r3, [r2]
 2329 0066 E0E7     		b	.L175
ARM GAS  /tmp/ccirtMvB.s 			page 84


 2330              	.L182:
2052:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2331              		.loc 1 2052 0
 2332 0068 0268     		ldr	r2, [r0]
 2333 006a D368     		ldr	r3, [r2, #12]
 2334 006c 23F02003 		bic	r3, r3, #32
 2335 0070 D360     		str	r3, [r2, #12]
2055:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       
 2336              		.loc 1 2055 0
 2337 0072 0268     		ldr	r2, [r0]
 2338 0074 D368     		ldr	r3, [r2, #12]
 2339 0076 23F48073 		bic	r3, r3, #256
 2340 007a D360     		str	r3, [r2, #12]
2058:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       
 2341              		.loc 1 2058 0
 2342 007c 0268     		ldr	r2, [r0]
 2343 007e 5369     		ldr	r3, [r2, #20]
 2344 0080 23F00103 		bic	r3, r3, #1
 2345 0084 5361     		str	r3, [r2, #20]
2061:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_IRDA_RxCpltCallback(hirda);
 2346              		.loc 1 2061 0
 2347 0086 2023     		movs	r3, #32
 2348 0088 80F83630 		strb	r3, [r0, #54]
2062:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2349              		.loc 1 2062 0
 2350 008c FFF7FEFF 		bl	HAL_IRDA_RxCpltCallback
 2351              	.LVL214:
2064:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2352              		.loc 1 2064 0
 2353 0090 0020     		movs	r0, #0
 2354 0092 08BD     		pop	{r3, pc}
 2355              		.cfi_endproc
 2356              	.LFE109:
 2358              		.section	.text.HAL_IRDA_RxHalfCpltCallback,"ax",%progbits
 2359              		.align	1
 2360              		.weak	HAL_IRDA_RxHalfCpltCallback
 2361              		.syntax unified
 2362              		.thumb
 2363              		.thumb_func
 2364              		.fpu softvfp
 2366              	HAL_IRDA_RxHalfCpltCallback:
 2367              	.LFB87:
1514:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2368              		.loc 1 1514 0
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 0
 2371              		@ frame_needed = 0, uses_anonymous_args = 0
 2372              		@ link register save eliminated.
 2373              	.LVL215:
 2374 0000 7047     		bx	lr
 2375              		.cfi_endproc
 2376              	.LFE87:
 2378              		.section	.text.IRDA_DMAReceiveHalfCplt,"ax",%progbits
 2379              		.align	1
 2380              		.syntax unified
 2381              		.thumb
 2382              		.thumb_func
ARM GAS  /tmp/ccirtMvB.s 			page 85


 2383              		.fpu softvfp
 2385              	IRDA_DMAReceiveHalfCplt:
 2386              	.LFB97:
1708:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2387              		.loc 1 1708 0
 2388              		.cfi_startproc
 2389              		@ args = 0, pretend = 0, frame = 0
 2390              		@ frame_needed = 0, uses_anonymous_args = 0
 2391              	.LVL216:
1708:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2392              		.loc 1 1708 0
 2393 0000 08B5     		push	{r3, lr}
 2394              	.LCFI30:
 2395              		.cfi_def_cfa_offset 8
 2396              		.cfi_offset 3, -8
 2397              		.cfi_offset 14, -4
 2398              	.LVL217:
1710:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2399              		.loc 1 1710 0
 2400 0002 406A     		ldr	r0, [r0, #36]
 2401              	.LVL218:
 2402 0004 FFF7FEFF 		bl	HAL_IRDA_RxHalfCpltCallback
 2403              	.LVL219:
 2404 0008 08BD     		pop	{r3, pc}
 2405              		.cfi_endproc
 2406              	.LFE97:
 2408              		.section	.text.HAL_IRDA_ErrorCallback,"ax",%progbits
 2409              		.align	1
 2410              		.weak	HAL_IRDA_ErrorCallback
 2411              		.syntax unified
 2412              		.thumb
 2413              		.thumb_func
 2414              		.fpu softvfp
 2416              	HAL_IRDA_ErrorCallback:
 2417              	.LFB88:
1529:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2418              		.loc 1 1529 0
 2419              		.cfi_startproc
 2420              		@ args = 0, pretend = 0, frame = 0
 2421              		@ frame_needed = 0, uses_anonymous_args = 0
 2422              		@ link register save eliminated.
 2423              	.LVL220:
 2424 0000 7047     		bx	lr
 2425              		.cfi_endproc
 2426              	.LFE88:
 2428              		.section	.text.IRDA_DMAError,"ax",%progbits
 2429              		.align	1
 2430              		.syntax unified
 2431              		.thumb
 2432              		.thumb_func
 2433              		.fpu softvfp
 2435              	IRDA_DMAError:
 2436              	.LFB98:
1719:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 2437              		.loc 1 1719 0
 2438              		.cfi_startproc
 2439              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccirtMvB.s 			page 86


 2440              		@ frame_needed = 0, uses_anonymous_args = 0
 2441              	.LVL221:
1719:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 2442              		.loc 1 1719 0
 2443 0000 10B5     		push	{r4, lr}
 2444              	.LCFI31:
 2445              		.cfi_def_cfa_offset 8
 2446              		.cfi_offset 4, -8
 2447              		.cfi_offset 14, -4
 2448              	.LVL222:
1721:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 2449              		.loc 1 1721 0
 2450 0002 446A     		ldr	r4, [r0, #36]
 2451              	.LVL223:
1724:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 2452              		.loc 1 1724 0
 2453 0004 2368     		ldr	r3, [r4]
 2454 0006 5A69     		ldr	r2, [r3, #20]
 2455              	.LVL224:
1725:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2456              		.loc 1 1725 0
 2457 0008 94F83530 		ldrb	r3, [r4, #53]	@ zero_extendqisi2
 2458 000c DBB2     		uxtb	r3, r3
 2459 000e 212B     		cmp	r3, #33
 2460 0010 10D0     		beq	.L191
 2461              	.LVL225:
 2462              	.L188:
1732:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 2463              		.loc 1 1732 0
 2464 0012 2368     		ldr	r3, [r4]
 2465 0014 5A69     		ldr	r2, [r3, #20]
 2466 0016 02F04002 		and	r2, r2, #64
 2467              	.LVL226:
1733:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2468              		.loc 1 1733 0
 2469 001a 94F83630 		ldrb	r3, [r4, #54]	@ zero_extendqisi2
 2470 001e DBB2     		uxtb	r3, r3
 2471 0020 222B     		cmp	r3, #34
 2472 0022 11D0     		beq	.L192
 2473              	.LVL227:
 2474              	.L189:
1739:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 2475              		.loc 1 1739 0
 2476 0024 A36B     		ldr	r3, [r4, #56]
 2477 0026 43F01003 		orr	r3, r3, #16
 2478 002a A363     		str	r3, [r4, #56]
1741:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2479              		.loc 1 1741 0
 2480 002c 2046     		mov	r0, r4
 2481 002e FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 2482              	.LVL228:
 2483 0032 10BD     		pop	{r4, pc}
 2484              	.LVL229:
 2485              	.L191:
 2486 0034 02F08002 		and	r2, r2, #128
 2487              	.LVL230:
1725:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
ARM GAS  /tmp/ccirtMvB.s 			page 87


 2488              		.loc 1 1725 0 discriminator 1
 2489 0038 002A     		cmp	r2, #0
 2490 003a EAD0     		beq	.L188
1727:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
 2491              		.loc 1 1727 0
 2492 003c 0023     		movs	r3, #0
 2493 003e 6384     		strh	r3, [r4, #34]	@ movhi
1728:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2494              		.loc 1 1728 0
 2495 0040 2046     		mov	r0, r4
 2496              	.LVL231:
 2497 0042 FFF7FEFF 		bl	IRDA_EndTxTransfer
 2498              	.LVL232:
 2499 0046 E4E7     		b	.L188
 2500              	.LVL233:
 2501              	.L192:
1733:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2502              		.loc 1 1733 0 discriminator 1
 2503 0048 002A     		cmp	r2, #0
 2504 004a EBD0     		beq	.L189
1735:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
 2505              		.loc 1 1735 0
 2506 004c 0023     		movs	r3, #0
 2507 004e 6385     		strh	r3, [r4, #42]	@ movhi
1736:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2508              		.loc 1 1736 0
 2509 0050 2046     		mov	r0, r4
 2510 0052 FFF7FEFF 		bl	IRDA_EndRxTransfer
 2511              	.LVL234:
 2512 0056 E5E7     		b	.L189
 2513              		.cfi_endproc
 2514              	.LFE98:
 2516              		.section	.text.HAL_IRDA_IRQHandler,"ax",%progbits
 2517              		.align	1
 2518              		.global	HAL_IRDA_IRQHandler
 2519              		.syntax unified
 2520              		.thumb
 2521              		.thumb_func
 2522              		.fpu softvfp
 2524              	HAL_IRDA_IRQHandler:
 2525              	.LFB83:
1342:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t isrflags   = READ_REG(hirda->Instance->SR);
 2526              		.loc 1 1342 0
 2527              		.cfi_startproc
 2528              		@ args = 0, pretend = 0, frame = 0
 2529              		@ frame_needed = 0, uses_anonymous_args = 0
 2530              	.LVL235:
 2531 0000 10B5     		push	{r4, lr}
 2532              	.LCFI32:
 2533              		.cfi_def_cfa_offset 8
 2534              		.cfi_offset 4, -8
 2535              		.cfi_offset 14, -4
 2536 0002 0446     		mov	r4, r0
1343:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 2537              		.loc 1 1343 0
 2538 0004 0268     		ldr	r2, [r0]
 2539 0006 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccirtMvB.s 			page 88


 2540              	.LVL236:
1344:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t cr3its     = READ_REG(hirda->Instance->CR3);
 2541              		.loc 1 1344 0
 2542 0008 D168     		ldr	r1, [r2, #12]
 2543              	.LVL237:
1345:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t errorflags = 0x00U;
 2544              		.loc 1 1345 0
 2545 000a 5269     		ldr	r2, [r2, #20]
 2546              	.LVL238:
1351:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2547              		.loc 1 1351 0
 2548 000c 13F00F00 		ands	r0, r3, #15
 2549              	.LVL239:
 2550 0010 05D1     		bne	.L194
1354:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2551              		.loc 1 1354 0
 2552 0012 13F0200F 		tst	r3, #32
 2553 0016 02D0     		beq	.L194
1354:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2554              		.loc 1 1354 0 is_stmt 0 discriminator 1
 2555 0018 11F0200F 		tst	r1, #32
 2556 001c 53D1     		bne	.L209
 2557              	.L194:
1362:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2558              		.loc 1 1362 0 is_stmt 1
 2559 001e 0028     		cmp	r0, #0
 2560 0020 67D0     		beq	.L196
1362:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2561              		.loc 1 1362 0 is_stmt 0 discriminator 1
 2562 0022 12F00102 		ands	r2, r2, #1
 2563              	.LVL240:
 2564 0026 02D1     		bne	.L197
1362:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2565              		.loc 1 1362 0 discriminator 2
 2566 0028 11F4907F 		tst	r1, #288
 2567 002c 61D0     		beq	.L196
 2568              	.L197:
1365:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2569              		.loc 1 1365 0 is_stmt 1
 2570 002e 13F0010F 		tst	r3, #1
 2571 0032 06D0     		beq	.L198
1365:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2572              		.loc 1 1365 0 is_stmt 0 discriminator 1
 2573 0034 11F4807F 		tst	r1, #256
 2574 0038 03D0     		beq	.L198
1367:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2575              		.loc 1 1367 0 is_stmt 1
 2576 003a A06B     		ldr	r0, [r4, #56]
 2577              	.LVL241:
 2578 003c 40F00100 		orr	r0, r0, #1
 2579 0040 A063     		str	r0, [r4, #56]
 2580              	.L198:
1371:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2581              		.loc 1 1371 0
 2582 0042 13F0040F 		tst	r3, #4
 2583 0046 04D0     		beq	.L199
1371:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
ARM GAS  /tmp/ccirtMvB.s 			page 89


 2584              		.loc 1 1371 0 is_stmt 0 discriminator 1
 2585 0048 1AB1     		cbz	r2, .L199
1373:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2586              		.loc 1 1373 0 is_stmt 1
 2587 004a A06B     		ldr	r0, [r4, #56]
 2588 004c 40F00200 		orr	r0, r0, #2
 2589 0050 A063     		str	r0, [r4, #56]
 2590              	.L199:
1377:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2591              		.loc 1 1377 0
 2592 0052 13F0020F 		tst	r3, #2
 2593 0056 04D0     		beq	.L200
1377:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2594              		.loc 1 1377 0 is_stmt 0 discriminator 1
 2595 0058 1AB1     		cbz	r2, .L200
1379:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2596              		.loc 1 1379 0 is_stmt 1
 2597 005a A06B     		ldr	r0, [r4, #56]
 2598 005c 40F00400 		orr	r0, r0, #4
 2599 0060 A063     		str	r0, [r4, #56]
 2600              	.L200:
1383:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     { 
 2601              		.loc 1 1383 0
 2602 0062 13F0080F 		tst	r3, #8
 2603 0066 04D0     		beq	.L201
1383:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     { 
 2604              		.loc 1 1383 0 is_stmt 0 discriminator 1
 2605 0068 1AB1     		cbz	r2, .L201
1385:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2606              		.loc 1 1385 0 is_stmt 1
 2607 006a A26B     		ldr	r2, [r4, #56]
 2608 006c 42F00802 		orr	r2, r2, #8
 2609 0070 A263     		str	r2, [r4, #56]
 2610              	.L201:
1388:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2611              		.loc 1 1388 0
 2612 0072 A26B     		ldr	r2, [r4, #56]
 2613 0074 002A     		cmp	r2, #0
 2614 0076 48D0     		beq	.L193
1391:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2615              		.loc 1 1391 0
 2616 0078 13F0200F 		tst	r3, #32
 2617 007c 02D0     		beq	.L202
1391:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2618              		.loc 1 1391 0 is_stmt 0 discriminator 1
 2619 007e 11F0200F 		tst	r1, #32
 2620 0082 24D1     		bne	.L210
 2621              	.LVL242:
 2622              	.L202:
1398:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) || dmarequest)
 2623              		.loc 1 1398 0 is_stmt 1
 2624 0084 2368     		ldr	r3, [r4]
 2625 0086 5B69     		ldr	r3, [r3, #20]
 2626 0088 03F04003 		and	r3, r3, #64
 2627              	.LVL243:
1399:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2628              		.loc 1 1399 0
ARM GAS  /tmp/ccirtMvB.s 			page 90


 2629 008c A26B     		ldr	r2, [r4, #56]
 2630 008e 12F0080F 		tst	r2, #8
 2631 0092 00D1     		bne	.L203
1399:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2632              		.loc 1 1399 0 is_stmt 0 discriminator 1
 2633 0094 3BB3     		cbz	r3, .L204
 2634              	.L203:
1404:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2635              		.loc 1 1404 0 is_stmt 1
 2636 0096 2046     		mov	r0, r4
 2637 0098 FFF7FEFF 		bl	IRDA_EndRxTransfer
 2638              	.LVL244:
1407:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 2639              		.loc 1 1407 0
 2640 009c 2368     		ldr	r3, [r4]
 2641 009e 5A69     		ldr	r2, [r3, #20]
 2642 00a0 12F0400F 		tst	r2, #64
 2643 00a4 1BD0     		beq	.L205
1409:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2644              		.loc 1 1409 0
 2645 00a6 5A69     		ldr	r2, [r3, #20]
 2646 00a8 22F04002 		bic	r2, r2, #64
 2647 00ac 5A61     		str	r2, [r3, #20]
1412:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           {
 2648              		.loc 1 1412 0
 2649 00ae 236B     		ldr	r3, [r4, #48]
 2650 00b0 8BB1     		cbz	r3, .L206
1416:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2651              		.loc 1 1416 0
 2652 00b2 1A4A     		ldr	r2, .L213
 2653 00b4 5A63     		str	r2, [r3, #52]
1418:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             {
 2654              		.loc 1 1418 0
 2655 00b6 206B     		ldr	r0, [r4, #48]
 2656 00b8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2657              	.LVL245:
 2658 00bc 28B3     		cbz	r0, .L193
1421:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             }
 2659              		.loc 1 1421 0
 2660 00be 206B     		ldr	r0, [r4, #48]
 2661 00c0 436B     		ldr	r3, [r0, #52]
 2662 00c2 9847     		blx	r3
 2663              	.LVL246:
 2664 00c4 10BD     		pop	{r4, pc}
 2665              	.LVL247:
 2666              	.L209:
1356:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return;
 2667              		.loc 1 1356 0
 2668 00c6 2046     		mov	r0, r4
 2669              	.LVL248:
 2670 00c8 FFF7FEFF 		bl	IRDA_Receive_IT
 2671              	.LVL249:
1357:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2672              		.loc 1 1357 0
 2673 00cc 10BD     		pop	{r4, pc}
 2674              	.LVL250:
 2675              	.L210:
ARM GAS  /tmp/ccirtMvB.s 			page 91


1393:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2676              		.loc 1 1393 0
 2677 00ce 2046     		mov	r0, r4
 2678 00d0 FFF7FEFF 		bl	IRDA_Receive_IT
 2679              	.LVL251:
 2680 00d4 D6E7     		b	.L202
 2681              	.LVL252:
 2682              	.L206:
1427:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           }
 2683              		.loc 1 1427 0
 2684 00d6 2046     		mov	r0, r4
 2685 00d8 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 2686              	.LVL253:
 2687 00dc 10BD     		pop	{r4, pc}
 2688              	.LVL254:
 2689              	.L205:
1433:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 2690              		.loc 1 1433 0
 2691 00de 2046     		mov	r0, r4
 2692 00e0 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 2693              	.LVL255:
 2694 00e4 10BD     		pop	{r4, pc}
 2695              	.LVL256:
 2696              	.L204:
1440:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 2697              		.loc 1 1440 0
 2698 00e6 2046     		mov	r0, r4
 2699 00e8 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 2700              	.LVL257:
1441:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2701              		.loc 1 1441 0
 2702 00ec 0023     		movs	r3, #0
 2703 00ee A363     		str	r3, [r4, #56]
 2704 00f0 10BD     		pop	{r4, pc}
 2705              	.LVL258:
 2706              	.L196:
1448:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2707              		.loc 1 1448 0
 2708 00f2 13F0800F 		tst	r3, #128
 2709 00f6 02D0     		beq	.L207
1448:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2710              		.loc 1 1448 0 is_stmt 0 discriminator 1
 2711 00f8 11F0800F 		tst	r1, #128
 2712 00fc 06D1     		bne	.L211
 2713              	.L207:
1455:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2714              		.loc 1 1455 0 is_stmt 1
 2715 00fe 13F0400F 		tst	r3, #64
 2716 0102 02D0     		beq	.L193
1455:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2717              		.loc 1 1455 0 is_stmt 0 discriminator 1
 2718 0104 11F0400F 		tst	r1, #64
 2719 0108 04D1     		bne	.L212
 2720              	.LVL259:
 2721              	.L193:
 2722 010a 10BD     		pop	{r4, pc}
 2723              	.LVL260:
ARM GAS  /tmp/ccirtMvB.s 			page 92


 2724              	.L211:
1450:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return;
 2725              		.loc 1 1450 0 is_stmt 1
 2726 010c 2046     		mov	r0, r4
 2727              	.LVL261:
 2728 010e FFF7FEFF 		bl	IRDA_Transmit_IT
 2729              	.LVL262:
1451:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2730              		.loc 1 1451 0
 2731 0112 10BD     		pop	{r4, pc}
 2732              	.LVL263:
 2733              	.L212:
1457:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return;
 2734              		.loc 1 1457 0
 2735 0114 2046     		mov	r0, r4
 2736              	.LVL264:
 2737 0116 FFF7FEFF 		bl	IRDA_EndTransmit_IT
 2738              	.LVL265:
1458:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2739              		.loc 1 1458 0
 2740 011a F6E7     		b	.L193
 2741              	.L214:
 2742              		.align	2
 2743              	.L213:
 2744 011c 00000000 		.word	IRDA_DMAAbortOnError
 2745              		.cfi_endproc
 2746              	.LFE83:
 2748              		.section	.text.IRDA_DMAAbortOnError,"ax",%progbits
 2749              		.align	1
 2750              		.syntax unified
 2751              		.thumb
 2752              		.thumb_func
 2753              		.fpu softvfp
 2755              	IRDA_DMAAbortOnError:
 2756              	.LFB102:
1817:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2757              		.loc 1 1817 0
 2758              		.cfi_startproc
 2759              		@ args = 0, pretend = 0, frame = 0
 2760              		@ frame_needed = 0, uses_anonymous_args = 0
 2761              	.LVL266:
 2762 0000 08B5     		push	{r3, lr}
 2763              	.LCFI33:
 2764              		.cfi_def_cfa_offset 8
 2765              		.cfi_offset 3, -8
 2766              		.cfi_offset 14, -4
1818:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 2767              		.loc 1 1818 0
 2768 0002 406A     		ldr	r0, [r0, #36]
 2769              	.LVL267:
1819:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 2770              		.loc 1 1819 0
 2771 0004 0023     		movs	r3, #0
 2772 0006 4385     		strh	r3, [r0, #42]	@ movhi
1820:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2773              		.loc 1 1820 0
 2774 0008 4384     		strh	r3, [r0, #34]	@ movhi
ARM GAS  /tmp/ccirtMvB.s 			page 93


1822:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2775              		.loc 1 1822 0
 2776 000a FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 2777              	.LVL268:
 2778 000e 08BD     		pop	{r3, pc}
 2779              		.cfi_endproc
 2780              	.LFE102:
 2782              		.section	.text.HAL_IRDA_AbortCpltCallback,"ax",%progbits
 2783              		.align	1
 2784              		.weak	HAL_IRDA_AbortCpltCallback
 2785              		.syntax unified
 2786              		.thumb
 2787              		.thumb_func
 2788              		.fpu softvfp
 2790              	HAL_IRDA_AbortCpltCallback:
 2791              	.LFB89:
1543:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2792              		.loc 1 1543 0
 2793              		.cfi_startproc
 2794              		@ args = 0, pretend = 0, frame = 0
 2795              		@ frame_needed = 0, uses_anonymous_args = 0
 2796              		@ link register save eliminated.
 2797              	.LVL269:
 2798 0000 7047     		bx	lr
 2799              		.cfi_endproc
 2800              	.LFE89:
 2802              		.section	.text.HAL_IRDA_Abort_IT,"ax",%progbits
 2803              		.align	1
 2804              		.global	HAL_IRDA_Abort_IT
 2805              		.syntax unified
 2806              		.thumb
 2807              		.thumb_func
 2808              		.fpu softvfp
 2810              	HAL_IRDA_Abort_IT:
 2811              	.LFB80:
1097:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
 2812              		.loc 1 1097 0
 2813              		.cfi_startproc
 2814              		@ args = 0, pretend = 0, frame = 0
 2815              		@ frame_needed = 0, uses_anonymous_args = 0
 2816              	.LVL270:
1097:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
 2817              		.loc 1 1097 0
 2818 0000 10B5     		push	{r4, lr}
 2819              	.LCFI34:
 2820              		.cfi_def_cfa_offset 8
 2821              		.cfi_offset 4, -8
 2822              		.cfi_offset 14, -4
 2823 0002 0446     		mov	r4, r0
 2824              	.LVL271:
1101:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2825              		.loc 1 1101 0
 2826 0004 0268     		ldr	r2, [r0]
 2827 0006 D368     		ldr	r3, [r2, #12]
 2828 0008 23F4F073 		bic	r3, r3, #480
 2829 000c D360     		str	r3, [r2, #12]
1102:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccirtMvB.s 			page 94


 2830              		.loc 1 1102 0
 2831 000e 0268     		ldr	r2, [r0]
 2832 0010 5369     		ldr	r3, [r2, #20]
 2833 0012 23F00103 		bic	r3, r3, #1
 2834 0016 5361     		str	r3, [r2, #20]
1107:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2835              		.loc 1 1107 0
 2836 0018 C36A     		ldr	r3, [r0, #44]
 2837 001a 33B1     		cbz	r3, .L219
1111:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2838              		.loc 1 1111 0
 2839 001c 0268     		ldr	r2, [r0]
 2840 001e 5269     		ldr	r2, [r2, #20]
 2841 0020 12F0800F 		tst	r2, #128
 2842 0024 1DD0     		beq	.L220
1113:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2843              		.loc 1 1113 0
 2844 0026 264A     		ldr	r2, .L232
 2845 0028 5A63     		str	r2, [r3, #52]
 2846              	.L219:
1121:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2847              		.loc 1 1121 0
 2848 002a 236B     		ldr	r3, [r4, #48]
 2849 002c 33B1     		cbz	r3, .L221
1125:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2850              		.loc 1 1125 0
 2851 002e 2268     		ldr	r2, [r4]
 2852 0030 5269     		ldr	r2, [r2, #20]
 2853 0032 12F0400F 		tst	r2, #64
 2854 0036 17D0     		beq	.L222
1127:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2855              		.loc 1 1127 0
 2856 0038 224A     		ldr	r2, .L232+4
 2857 003a 5A63     		str	r2, [r3, #52]
 2858              	.L221:
1136:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2859              		.loc 1 1136 0
 2860 003c 2368     		ldr	r3, [r4]
 2861 003e 5A69     		ldr	r2, [r3, #20]
 2862 0040 12F0800F 		tst	r2, #128
 2863 0044 13D0     		beq	.L226
1139:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2864              		.loc 1 1139 0
 2865 0046 5A69     		ldr	r2, [r3, #20]
 2866 0048 22F08002 		bic	r2, r2, #128
 2867 004c 5A61     		str	r2, [r3, #20]
1142:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2868              		.loc 1 1142 0
 2869 004e E06A     		ldr	r0, [r4, #44]
 2870              	.LVL272:
 2871 0050 18B3     		cbz	r0, .L227
1148:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2872              		.loc 1 1148 0
 2873 0052 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2874              	.LVL273:
 2875 0056 10B3     		cbz	r0, .L228
1150:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
ARM GAS  /tmp/ccirtMvB.s 			page 95


 2876              		.loc 1 1150 0
 2877 0058 E36A     		ldr	r3, [r4, #44]
 2878 005a 0022     		movs	r2, #0
 2879 005c 5A63     		str	r2, [r3, #52]
1098:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2880              		.loc 1 1098 0
 2881 005e 0122     		movs	r2, #1
 2882 0060 06E0     		b	.L223
 2883              	.LVL274:
 2884              	.L220:
1117:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2885              		.loc 1 1117 0
 2886 0062 0022     		movs	r2, #0
 2887 0064 5A63     		str	r2, [r3, #52]
 2888 0066 E0E7     		b	.L219
 2889              	.L222:
1131:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2890              		.loc 1 1131 0
 2891 0068 0022     		movs	r2, #0
 2892 006a 5A63     		str	r2, [r3, #52]
 2893 006c E6E7     		b	.L221
 2894              	.L226:
1098:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2895              		.loc 1 1098 0
 2896 006e 0122     		movs	r2, #1
 2897              	.LVL275:
 2898              	.L223:
1160:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2899              		.loc 1 1160 0
 2900 0070 2368     		ldr	r3, [r4]
 2901 0072 5969     		ldr	r1, [r3, #20]
 2902 0074 11F0400F 		tst	r1, #64
 2903 0078 0CD0     		beq	.L224
1162:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2904              		.loc 1 1162 0
 2905 007a 5969     		ldr	r1, [r3, #20]
 2906 007c 21F04001 		bic	r1, r1, #64
 2907 0080 5961     		str	r1, [r3, #20]
1165:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2908              		.loc 1 1165 0
 2909 0082 206B     		ldr	r0, [r4, #48]
 2910 0084 30B1     		cbz	r0, .L224
1171:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2911              		.loc 1 1171 0
 2912 0086 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2913              	.LVL276:
 2914 008a 50B1     		cbz	r0, .L229
1173:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x01U;
 2915              		.loc 1 1173 0
 2916 008c 236B     		ldr	r3, [r4, #48]
 2917 008e 0022     		movs	r2, #0
 2918 0090 5A63     		str	r2, [r3, #52]
 2919              	.LVL277:
1174:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2920              		.loc 1 1174 0
 2921 0092 0122     		movs	r2, #1
 2922              	.LVL278:
ARM GAS  /tmp/ccirtMvB.s 			page 96


 2923              	.L224:
1184:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2924              		.loc 1 1184 0
 2925 0094 3AB9     		cbnz	r2, .L231
 2926              	.LVL279:
 2927              	.L225:
1202:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2928              		.loc 1 1202 0
 2929 0096 0020     		movs	r0, #0
 2930 0098 10BD     		pop	{r4, pc}
 2931              	.LVL280:
 2932              	.L227:
1098:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2933              		.loc 1 1098 0
 2934 009a 0122     		movs	r2, #1
 2935 009c E8E7     		b	.L223
 2936              	.L228:
1154:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2937              		.loc 1 1154 0
 2938 009e 0022     		movs	r2, #0
 2939 00a0 E6E7     		b	.L223
 2940              	.LVL281:
 2941              	.L229:
1178:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2942              		.loc 1 1178 0
 2943 00a2 0022     		movs	r2, #0
 2944 00a4 F6E7     		b	.L224
 2945              	.LVL282:
 2946              	.L231:
1187:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
 2947              		.loc 1 1187 0
 2948 00a6 0023     		movs	r3, #0
 2949 00a8 6384     		strh	r3, [r4, #34]	@ movhi
1188:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2950              		.loc 1 1188 0
 2951 00aa 6385     		strh	r3, [r4, #42]	@ movhi
1191:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2952              		.loc 1 1191 0
 2953 00ac A363     		str	r3, [r4, #56]
1194:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 2954              		.loc 1 1194 0
 2955 00ae 2023     		movs	r3, #32
 2956 00b0 84F83530 		strb	r3, [r4, #53]
1195:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2957              		.loc 1 1195 0
 2958 00b4 84F83630 		strb	r3, [r4, #54]
1198:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2959              		.loc 1 1198 0
 2960 00b8 2046     		mov	r0, r4
 2961 00ba FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 2962              	.LVL283:
 2963 00be EAE7     		b	.L225
 2964              	.L233:
 2965              		.align	2
 2966              	.L232:
 2967 00c0 00000000 		.word	IRDA_DMATxAbortCallback
 2968 00c4 00000000 		.word	IRDA_DMARxAbortCallback
ARM GAS  /tmp/ccirtMvB.s 			page 97


 2969              		.cfi_endproc
 2970              	.LFE80:
 2972              		.section	.text.IRDA_DMARxAbortCallback,"ax",%progbits
 2973              		.align	1
 2974              		.syntax unified
 2975              		.thumb
 2976              		.thumb_func
 2977              		.fpu softvfp
 2979              	IRDA_DMARxAbortCallback:
 2980              	.LFB104:
1872:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2981              		.loc 1 1872 0
 2982              		.cfi_startproc
 2983              		@ args = 0, pretend = 0, frame = 0
 2984              		@ frame_needed = 0, uses_anonymous_args = 0
 2985              	.LVL284:
 2986 0000 08B5     		push	{r3, lr}
 2987              	.LCFI35:
 2988              		.cfi_def_cfa_offset 8
 2989              		.cfi_offset 3, -8
 2990              		.cfi_offset 14, -4
1873:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 2991              		.loc 1 1873 0
 2992 0002 406A     		ldr	r0, [r0, #36]
 2993              	.LVL285:
1875:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2994              		.loc 1 1875 0
 2995 0004 036B     		ldr	r3, [r0, #48]
 2996 0006 0022     		movs	r2, #0
 2997 0008 5A63     		str	r2, [r3, #52]
1878:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2998              		.loc 1 1878 0
 2999 000a C36A     		ldr	r3, [r0, #44]
 3000 000c 13B1     		cbz	r3, .L235
1880:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 3001              		.loc 1 1880 0
 3002 000e 5B6B     		ldr	r3, [r3, #52]
 3003 0010 03B1     		cbz	r3, .L235
 3004              	.LVL286:
 3005              	.L234:
 3006 0012 08BD     		pop	{r3, pc}
 3007              	.LVL287:
 3008              	.L235:
1887:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3009              		.loc 1 1887 0
 3010 0014 0023     		movs	r3, #0
 3011 0016 4384     		strh	r3, [r0, #34]	@ movhi
1888:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3012              		.loc 1 1888 0
 3013 0018 4385     		strh	r3, [r0, #42]	@ movhi
1891:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3014              		.loc 1 1891 0
 3015 001a 8363     		str	r3, [r0, #56]
1894:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 3016              		.loc 1 1894 0
 3017 001c 2023     		movs	r3, #32
 3018 001e 80F83530 		strb	r3, [r0, #53]
ARM GAS  /tmp/ccirtMvB.s 			page 98


1895:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3019              		.loc 1 1895 0
 3020 0022 80F83630 		strb	r3, [r0, #54]
1898:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 3021              		.loc 1 1898 0
 3022 0026 FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 3023              	.LVL288:
 3024 002a F2E7     		b	.L234
 3025              		.cfi_endproc
 3026              	.LFE104:
 3028              		.section	.text.IRDA_DMATxAbortCallback,"ax",%progbits
 3029              		.align	1
 3030              		.syntax unified
 3031              		.thumb
 3032              		.thumb_func
 3033              		.fpu softvfp
 3035              	IRDA_DMATxAbortCallback:
 3036              	.LFB103:
1834:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3037              		.loc 1 1834 0
 3038              		.cfi_startproc
 3039              		@ args = 0, pretend = 0, frame = 0
 3040              		@ frame_needed = 0, uses_anonymous_args = 0
 3041              	.LVL289:
 3042 0000 08B5     		push	{r3, lr}
 3043              	.LCFI36:
 3044              		.cfi_def_cfa_offset 8
 3045              		.cfi_offset 3, -8
 3046              		.cfi_offset 14, -4
1835:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 3047              		.loc 1 1835 0
 3048 0002 406A     		ldr	r0, [r0, #36]
 3049              	.LVL290:
1837:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3050              		.loc 1 1837 0
 3051 0004 C36A     		ldr	r3, [r0, #44]
 3052 0006 0022     		movs	r2, #0
 3053 0008 5A63     		str	r2, [r3, #52]
1840:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 3054              		.loc 1 1840 0
 3055 000a 036B     		ldr	r3, [r0, #48]
 3056 000c 13B1     		cbz	r3, .L239
1842:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 3057              		.loc 1 1842 0
 3058 000e 5B6B     		ldr	r3, [r3, #52]
 3059 0010 03B1     		cbz	r3, .L239
 3060              	.LVL291:
 3061              	.L238:
 3062 0012 08BD     		pop	{r3, pc}
 3063              	.LVL292:
 3064              	.L239:
1849:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3065              		.loc 1 1849 0
 3066 0014 0023     		movs	r3, #0
 3067 0016 4384     		strh	r3, [r0, #34]	@ movhi
1850:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3068              		.loc 1 1850 0
ARM GAS  /tmp/ccirtMvB.s 			page 99


 3069 0018 4385     		strh	r3, [r0, #42]	@ movhi
1853:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3070              		.loc 1 1853 0
 3071 001a 8363     		str	r3, [r0, #56]
1856:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 3072              		.loc 1 1856 0
 3073 001c 2023     		movs	r3, #32
 3074 001e 80F83530 		strb	r3, [r0, #53]
1857:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3075              		.loc 1 1857 0
 3076 0022 80F83630 		strb	r3, [r0, #54]
1860:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 3077              		.loc 1 1860 0
 3078 0026 FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 3079              	.LVL293:
 3080 002a F2E7     		b	.L238
 3081              		.cfi_endproc
 3082              	.LFE103:
 3084              		.section	.text.HAL_IRDA_AbortTransmitCpltCallback,"ax",%progbits
 3085              		.align	1
 3086              		.weak	HAL_IRDA_AbortTransmitCpltCallback
 3087              		.syntax unified
 3088              		.thumb
 3089              		.thumb_func
 3090              		.fpu softvfp
 3092              	HAL_IRDA_AbortTransmitCpltCallback:
 3093              	.LFB90:
1558:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 3094              		.loc 1 1558 0
 3095              		.cfi_startproc
 3096              		@ args = 0, pretend = 0, frame = 0
 3097              		@ frame_needed = 0, uses_anonymous_args = 0
 3098              		@ link register save eliminated.
 3099              	.LVL294:
 3100 0000 7047     		bx	lr
 3101              		.cfi_endproc
 3102              	.LFE90:
 3104              		.section	.text.HAL_IRDA_AbortTransmit_IT,"ax",%progbits
 3105              		.align	1
 3106              		.global	HAL_IRDA_AbortTransmit_IT
 3107              		.syntax unified
 3108              		.thumb
 3109              		.thumb_func
 3110              		.fpu softvfp
 3112              	HAL_IRDA_AbortTransmit_IT:
 3113              	.LFB81:
1219:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 3114              		.loc 1 1219 0
 3115              		.cfi_startproc
 3116              		@ args = 0, pretend = 0, frame = 0
 3117              		@ frame_needed = 0, uses_anonymous_args = 0
 3118              	.LVL295:
1219:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 3119              		.loc 1 1219 0
 3120 0000 10B5     		push	{r4, lr}
 3121              	.LCFI37:
 3122              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccirtMvB.s 			page 100


 3123              		.cfi_offset 4, -8
 3124              		.cfi_offset 14, -4
 3125 0002 0446     		mov	r4, r0
1221:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3126              		.loc 1 1221 0
 3127 0004 0268     		ldr	r2, [r0]
 3128 0006 D368     		ldr	r3, [r2, #12]
 3129 0008 23F0C003 		bic	r3, r3, #192
 3130 000c D360     		str	r3, [r2, #12]
1224:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 3131              		.loc 1 1224 0
 3132 000e 0368     		ldr	r3, [r0]
 3133 0010 5A69     		ldr	r2, [r3, #20]
 3134 0012 12F0800F 		tst	r2, #128
 3135 0016 19D0     		beq	.L244
1226:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3136              		.loc 1 1226 0
 3137 0018 5A69     		ldr	r2, [r3, #20]
 3138 001a 22F08002 		bic	r2, r2, #128
 3139 001e 5A61     		str	r2, [r3, #20]
1229:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 3140              		.loc 1 1229 0
 3141 0020 C36A     		ldr	r3, [r0, #44]
 3142 0022 5BB1     		cbz	r3, .L245
1233:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3143              		.loc 1 1233 0
 3144 0024 0D4A     		ldr	r2, .L249
 3145 0026 5A63     		str	r2, [r3, #52]
1236:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 3146              		.loc 1 1236 0
 3147 0028 C06A     		ldr	r0, [r0, #44]
 3148              	.LVL296:
 3149 002a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3150              	.LVL297:
 3151 002e 08B9     		cbnz	r0, .L248
 3152              	.L246:
1267:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3153              		.loc 1 1267 0
 3154 0030 0020     		movs	r0, #0
 3155 0032 10BD     		pop	{r4, pc}
 3156              	.LVL298:
 3157              	.L248:
1239:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 3158              		.loc 1 1239 0
 3159 0034 E06A     		ldr	r0, [r4, #44]
 3160 0036 436B     		ldr	r3, [r0, #52]
 3161 0038 9847     		blx	r3
 3162              	.LVL299:
 3163 003a F9E7     		b	.L246
 3164              	.LVL300:
 3165              	.L245:
1245:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3166              		.loc 1 1245 0
 3167 003c 0023     		movs	r3, #0
 3168 003e 4384     		strh	r3, [r0, #34]	@ movhi
1248:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3169              		.loc 1 1248 0
ARM GAS  /tmp/ccirtMvB.s 			page 101


 3170 0040 2023     		movs	r3, #32
 3171 0042 80F83530 		strb	r3, [r0, #53]
1251:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 3172              		.loc 1 1251 0
 3173 0046 FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
 3174              	.LVL301:
 3175 004a F1E7     		b	.L246
 3176              	.LVL302:
 3177              	.L244:
1257:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3178              		.loc 1 1257 0
 3179 004c 0023     		movs	r3, #0
 3180 004e 4384     		strh	r3, [r0, #34]	@ movhi
1260:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3181              		.loc 1 1260 0
 3182 0050 2023     		movs	r3, #32
 3183 0052 80F83530 		strb	r3, [r0, #53]
1263:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 3184              		.loc 1 1263 0
 3185 0056 FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
 3186              	.LVL303:
 3187 005a E9E7     		b	.L246
 3188              	.L250:
 3189              		.align	2
 3190              	.L249:
 3191 005c 00000000 		.word	IRDA_DMATxOnlyAbortCallback
 3192              		.cfi_endproc
 3193              	.LFE81:
 3195              		.section	.text.IRDA_DMATxOnlyAbortCallback,"ax",%progbits
 3196              		.align	1
 3197              		.syntax unified
 3198              		.thumb
 3199              		.thumb_func
 3200              		.fpu softvfp
 3202              	IRDA_DMATxOnlyAbortCallback:
 3203              	.LFB105:
1910:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3204              		.loc 1 1910 0
 3205              		.cfi_startproc
 3206              		@ args = 0, pretend = 0, frame = 0
 3207              		@ frame_needed = 0, uses_anonymous_args = 0
 3208              	.LVL304:
 3209 0000 08B5     		push	{r3, lr}
 3210              	.LCFI38:
 3211              		.cfi_def_cfa_offset 8
 3212              		.cfi_offset 3, -8
 3213              		.cfi_offset 14, -4
1911:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3214              		.loc 1 1911 0
 3215 0002 406A     		ldr	r0, [r0, #36]
 3216              	.LVL305:
1913:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3217              		.loc 1 1913 0
 3218 0004 0023     		movs	r3, #0
 3219 0006 4384     		strh	r3, [r0, #34]	@ movhi
1916:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3220              		.loc 1 1916 0
ARM GAS  /tmp/ccirtMvB.s 			page 102


 3221 0008 2023     		movs	r3, #32
 3222 000a 80F83530 		strb	r3, [r0, #53]
1919:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 3223              		.loc 1 1919 0
 3224 000e FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
 3225              	.LVL306:
 3226 0012 08BD     		pop	{r3, pc}
 3227              		.cfi_endproc
 3228              	.LFE105:
 3230              		.section	.text.HAL_IRDA_AbortReceiveCpltCallback,"ax",%progbits
 3231              		.align	1
 3232              		.weak	HAL_IRDA_AbortReceiveCpltCallback
 3233              		.syntax unified
 3234              		.thumb
 3235              		.thumb_func
 3236              		.fpu softvfp
 3238              	HAL_IRDA_AbortReceiveCpltCallback:
 3239              	.LFB91:
1573:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 3240              		.loc 1 1573 0
 3241              		.cfi_startproc
 3242              		@ args = 0, pretend = 0, frame = 0
 3243              		@ frame_needed = 0, uses_anonymous_args = 0
 3244              		@ link register save eliminated.
 3245              	.LVL307:
 3246 0000 7047     		bx	lr
 3247              		.cfi_endproc
 3248              	.LFE91:
 3250              		.section	.text.HAL_IRDA_AbortReceive_IT,"ax",%progbits
 3251              		.align	1
 3252              		.global	HAL_IRDA_AbortReceive_IT
 3253              		.syntax unified
 3254              		.thumb
 3255              		.thumb_func
 3256              		.fpu softvfp
 3258              	HAL_IRDA_AbortReceive_IT:
 3259              	.LFB82:
1284:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3260              		.loc 1 1284 0
 3261              		.cfi_startproc
 3262              		@ args = 0, pretend = 0, frame = 0
 3263              		@ frame_needed = 0, uses_anonymous_args = 0
 3264              	.LVL308:
1284:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3265              		.loc 1 1284 0
 3266 0000 10B5     		push	{r4, lr}
 3267              	.LCFI39:
 3268              		.cfi_def_cfa_offset 8
 3269              		.cfi_offset 4, -8
 3270              		.cfi_offset 14, -4
 3271 0002 0446     		mov	r4, r0
1286:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 3272              		.loc 1 1286 0
 3273 0004 0268     		ldr	r2, [r0]
 3274 0006 D368     		ldr	r3, [r2, #12]
 3275 0008 23F49073 		bic	r3, r3, #288
 3276 000c D360     		str	r3, [r2, #12]
ARM GAS  /tmp/ccirtMvB.s 			page 103


1287:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3277              		.loc 1 1287 0
 3278 000e 0268     		ldr	r2, [r0]
 3279 0010 5369     		ldr	r3, [r2, #20]
 3280 0012 23F00103 		bic	r3, r3, #1
 3281 0016 5361     		str	r3, [r2, #20]
1290:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 3282              		.loc 1 1290 0
 3283 0018 0368     		ldr	r3, [r0]
 3284 001a 5A69     		ldr	r2, [r3, #20]
 3285 001c 12F0400F 		tst	r2, #64
 3286 0020 19D0     		beq	.L255
1292:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3287              		.loc 1 1292 0
 3288 0022 5A69     		ldr	r2, [r3, #20]
 3289 0024 22F04002 		bic	r2, r2, #64
 3290 0028 5A61     		str	r2, [r3, #20]
1295:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 3291              		.loc 1 1295 0
 3292 002a 036B     		ldr	r3, [r0, #48]
 3293 002c 5BB1     		cbz	r3, .L256
1299:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3294              		.loc 1 1299 0
 3295 002e 0E4A     		ldr	r2, .L260
 3296 0030 5A63     		str	r2, [r3, #52]
1302:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 3297              		.loc 1 1302 0
 3298 0032 006B     		ldr	r0, [r0, #48]
 3299              	.LVL309:
 3300 0034 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3301              	.LVL310:
 3302 0038 08B9     		cbnz	r0, .L259
 3303              	.L257:
1333:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3304              		.loc 1 1333 0
 3305 003a 0020     		movs	r0, #0
 3306 003c 10BD     		pop	{r4, pc}
 3307              	.LVL311:
 3308              	.L259:
1305:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 3309              		.loc 1 1305 0
 3310 003e 206B     		ldr	r0, [r4, #48]
 3311 0040 436B     		ldr	r3, [r0, #52]
 3312 0042 9847     		blx	r3
 3313              	.LVL312:
 3314 0044 F9E7     		b	.L257
 3315              	.LVL313:
 3316              	.L256:
1311:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3317              		.loc 1 1311 0
 3318 0046 0023     		movs	r3, #0
 3319 0048 4385     		strh	r3, [r0, #42]	@ movhi
1314:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3320              		.loc 1 1314 0
 3321 004a 2023     		movs	r3, #32
 3322 004c 80F83630 		strb	r3, [r0, #54]
1317:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
ARM GAS  /tmp/ccirtMvB.s 			page 104


 3323              		.loc 1 1317 0
 3324 0050 FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
 3325              	.LVL314:
 3326 0054 F1E7     		b	.L257
 3327              	.LVL315:
 3328              	.L255:
1323:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3329              		.loc 1 1323 0
 3330 0056 0023     		movs	r3, #0
 3331 0058 4385     		strh	r3, [r0, #42]	@ movhi
1326:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3332              		.loc 1 1326 0
 3333 005a 2023     		movs	r3, #32
 3334 005c 80F83630 		strb	r3, [r0, #54]
1329:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 3335              		.loc 1 1329 0
 3336 0060 FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
 3337              	.LVL316:
 3338 0064 E9E7     		b	.L257
 3339              	.L261:
 3340 0066 00BF     		.align	2
 3341              	.L260:
 3342 0068 00000000 		.word	IRDA_DMARxOnlyAbortCallback
 3343              		.cfi_endproc
 3344              	.LFE82:
 3346              		.section	.text.IRDA_DMARxOnlyAbortCallback,"ax",%progbits
 3347              		.align	1
 3348              		.syntax unified
 3349              		.thumb
 3350              		.thumb_func
 3351              		.fpu softvfp
 3353              	IRDA_DMARxOnlyAbortCallback:
 3354              	.LFB106:
1931:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3355              		.loc 1 1931 0
 3356              		.cfi_startproc
 3357              		@ args = 0, pretend = 0, frame = 0
 3358              		@ frame_needed = 0, uses_anonymous_args = 0
 3359              	.LVL317:
 3360 0000 08B5     		push	{r3, lr}
 3361              	.LCFI40:
 3362              		.cfi_def_cfa_offset 8
 3363              		.cfi_offset 3, -8
 3364              		.cfi_offset 14, -4
1932:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3365              		.loc 1 1932 0
 3366 0002 406A     		ldr	r0, [r0, #36]
 3367              	.LVL318:
1934:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3368              		.loc 1 1934 0
 3369 0004 0023     		movs	r3, #0
 3370 0006 4385     		strh	r3, [r0, #42]	@ movhi
1937:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3371              		.loc 1 1937 0
 3372 0008 2023     		movs	r3, #32
 3373 000a 80F83630 		strb	r3, [r0, #54]
1940:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
ARM GAS  /tmp/ccirtMvB.s 			page 105


 3374              		.loc 1 1940 0
 3375 000e FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
 3376              	.LVL319:
 3377 0012 08BD     		pop	{r3, pc}
 3378              		.cfi_endproc
 3379              	.LFE106:
 3381              		.section	.text.HAL_IRDA_GetState,"ax",%progbits
 3382              		.align	1
 3383              		.global	HAL_IRDA_GetState
 3384              		.syntax unified
 3385              		.thumb
 3386              		.thumb_func
 3387              		.fpu softvfp
 3389              	HAL_IRDA_GetState:
 3390              	.LFB92:
1610:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 3391              		.loc 1 1610 0
 3392              		.cfi_startproc
 3393              		@ args = 0, pretend = 0, frame = 0
 3394              		@ frame_needed = 0, uses_anonymous_args = 0
 3395              		@ link register save eliminated.
 3396              	.LVL320:
1612:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   temp2 = hirda->RxState;
 3397              		.loc 1 1612 0
 3398 0000 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 3399              	.LVL321:
1613:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 3400              		.loc 1 1613 0
 3401 0004 90F83600 		ldrb	r0, [r0, #54]	@ zero_extendqisi2
 3402              	.LVL322:
1616:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3403              		.loc 1 1616 0
 3404 0008 1843     		orrs	r0, r0, r3
 3405              	.LVL323:
 3406 000a 7047     		bx	lr
 3407              		.cfi_endproc
 3408              	.LFE92:
 3410              		.section	.text.HAL_IRDA_GetError,"ax",%progbits
 3411              		.align	1
 3412              		.global	HAL_IRDA_GetError
 3413              		.syntax unified
 3414              		.thumb
 3415              		.thumb_func
 3416              		.fpu softvfp
 3418              	HAL_IRDA_GetError:
 3419              	.LFB93:
1625:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return hirda->ErrorCode;
 3420              		.loc 1 1625 0
 3421              		.cfi_startproc
 3422              		@ args = 0, pretend = 0, frame = 0
 3423              		@ frame_needed = 0, uses_anonymous_args = 0
 3424              		@ link register save eliminated.
 3425              	.LVL324:
1626:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 3426              		.loc 1 1626 0
 3427 0000 806B     		ldr	r0, [r0, #56]
 3428              	.LVL325:
ARM GAS  /tmp/ccirtMvB.s 			page 106


1627:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3429              		.loc 1 1627 0
 3430 0002 7047     		bx	lr
 3431              		.cfi_endproc
 3432              	.LFE93:
 3434              		.text
 3435              	.Letext0:
 3436              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3437              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3438              		.file 4 "Libraries/CMSIS/Include/core_cm3.h"
 3439              		.file 5 "Libraries/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 3440              		.file 6 "Libraries/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 3441              		.file 7 "Libraries/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 3442              		.file 8 "/usr/include/newlib/sys/lock.h"
 3443              		.file 9 "/usr/include/newlib/sys/_types.h"
 3444              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3445              		.file 11 "/usr/include/newlib/sys/reent.h"
 3446              		.file 12 "Libraries/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 3447              		.file 13 "Libraries/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 3448              		.file 14 "Libraries/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_irda.h"
 3449              		.file 15 "Libraries/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 3450              		.file 16 "Libraries/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccirtMvB.s 			page 107


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_irda.c
     /tmp/ccirtMvB.s:16     .text.IRDA_EndTxTransfer:0000000000000000 $t
     /tmp/ccirtMvB.s:22     .text.IRDA_EndTxTransfer:0000000000000000 IRDA_EndTxTransfer
     /tmp/ccirtMvB.s:44     .text.IRDA_EndRxTransfer:0000000000000000 $t
     /tmp/ccirtMvB.s:50     .text.IRDA_EndRxTransfer:0000000000000000 IRDA_EndRxTransfer
     /tmp/ccirtMvB.s:76     .text.IRDA_Transmit_IT:0000000000000000 $t
     /tmp/ccirtMvB.s:82     .text.IRDA_Transmit_IT:0000000000000000 IRDA_Transmit_IT
     /tmp/ccirtMvB.s:170    .text.IRDA_SetConfig:0000000000000000 $t
     /tmp/ccirtMvB.s:176    .text.IRDA_SetConfig:0000000000000000 IRDA_SetConfig
     /tmp/ccirtMvB.s:359    .text.IRDA_SetConfig:00000000000001ac $d
     /tmp/ccirtMvB.s:365    .text.IRDA_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccirtMvB.s:371    .text.IRDA_WaitOnFlagUntilTimeout:0000000000000000 IRDA_WaitOnFlagUntilTimeout
     /tmp/ccirtMvB.s:446    .text.HAL_IRDA_MspInit:0000000000000000 $t
     /tmp/ccirtMvB.s:453    .text.HAL_IRDA_MspInit:0000000000000000 HAL_IRDA_MspInit
     /tmp/ccirtMvB.s:466    .text.HAL_IRDA_Init:0000000000000000 $t
     /tmp/ccirtMvB.s:473    .text.HAL_IRDA_Init:0000000000000000 HAL_IRDA_Init
     /tmp/ccirtMvB.s:574    .text.HAL_IRDA_MspDeInit:0000000000000000 $t
     /tmp/ccirtMvB.s:581    .text.HAL_IRDA_MspDeInit:0000000000000000 HAL_IRDA_MspDeInit
     /tmp/ccirtMvB.s:594    .text.HAL_IRDA_DeInit:0000000000000000 $t
     /tmp/ccirtMvB.s:601    .text.HAL_IRDA_DeInit:0000000000000000 HAL_IRDA_DeInit
     /tmp/ccirtMvB.s:653    .text.HAL_IRDA_Transmit:0000000000000000 $t
     /tmp/ccirtMvB.s:660    .text.HAL_IRDA_Transmit:0000000000000000 HAL_IRDA_Transmit
     /tmp/ccirtMvB.s:846    .text.HAL_IRDA_Receive:0000000000000000 $t
     /tmp/ccirtMvB.s:853    .text.HAL_IRDA_Receive:0000000000000000 HAL_IRDA_Receive
     /tmp/ccirtMvB.s:1043   .text.HAL_IRDA_Transmit_IT:0000000000000000 $t
     /tmp/ccirtMvB.s:1050   .text.HAL_IRDA_Transmit_IT:0000000000000000 HAL_IRDA_Transmit_IT
     /tmp/ccirtMvB.s:1125   .text.HAL_IRDA_Receive_IT:0000000000000000 $t
     /tmp/ccirtMvB.s:1132   .text.HAL_IRDA_Receive_IT:0000000000000000 HAL_IRDA_Receive_IT
     /tmp/ccirtMvB.s:1217   .text.HAL_IRDA_Transmit_DMA:0000000000000000 $t
     /tmp/ccirtMvB.s:1224   .text.HAL_IRDA_Transmit_DMA:0000000000000000 HAL_IRDA_Transmit_DMA
     /tmp/ccirtMvB.s:1334   .text.HAL_IRDA_Transmit_DMA:0000000000000080 $d
     /tmp/ccirtMvB.s:2017   .text.IRDA_DMATransmitCplt:0000000000000000 IRDA_DMATransmitCplt
     /tmp/ccirtMvB.s:2127   .text.IRDA_DMATransmitHalfCplt:0000000000000000 IRDA_DMATransmitHalfCplt
     /tmp/ccirtMvB.s:2435   .text.IRDA_DMAError:0000000000000000 IRDA_DMAError
     /tmp/ccirtMvB.s:1341   .text.HAL_IRDA_Receive_DMA:0000000000000000 $t
     /tmp/ccirtMvB.s:1348   .text.HAL_IRDA_Receive_DMA:0000000000000000 HAL_IRDA_Receive_DMA
     /tmp/ccirtMvB.s:1483   .text.HAL_IRDA_Receive_DMA:000000000000009c $d
     /tmp/ccirtMvB.s:2177   .text.IRDA_DMAReceiveCplt:0000000000000000 IRDA_DMAReceiveCplt
     /tmp/ccirtMvB.s:2385   .text.IRDA_DMAReceiveHalfCplt:0000000000000000 IRDA_DMAReceiveHalfCplt
     /tmp/ccirtMvB.s:1490   .text.HAL_IRDA_DMAPause:0000000000000000 $t
     /tmp/ccirtMvB.s:1497   .text.HAL_IRDA_DMAPause:0000000000000000 HAL_IRDA_DMAPause
     /tmp/ccirtMvB.s:1584   .text.HAL_IRDA_DMAResume:0000000000000000 $t
     /tmp/ccirtMvB.s:1591   .text.HAL_IRDA_DMAResume:0000000000000000 HAL_IRDA_DMAResume
     /tmp/ccirtMvB.s:1685   .text.HAL_IRDA_DMAStop:0000000000000000 $t
     /tmp/ccirtMvB.s:1692   .text.HAL_IRDA_DMAStop:0000000000000000 HAL_IRDA_DMAStop
     /tmp/ccirtMvB.s:1781   .text.HAL_IRDA_Abort:0000000000000000 $t
     /tmp/ccirtMvB.s:1788   .text.HAL_IRDA_Abort:0000000000000000 HAL_IRDA_Abort
     /tmp/ccirtMvB.s:1870   .text.HAL_IRDA_AbortTransmit:0000000000000000 $t
     /tmp/ccirtMvB.s:1877   .text.HAL_IRDA_AbortTransmit:0000000000000000 HAL_IRDA_AbortTransmit
     /tmp/ccirtMvB.s:1928   .text.HAL_IRDA_AbortReceive:0000000000000000 $t
     /tmp/ccirtMvB.s:1935   .text.HAL_IRDA_AbortReceive:0000000000000000 HAL_IRDA_AbortReceive
     /tmp/ccirtMvB.s:1991   .text.HAL_IRDA_TxCpltCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:1998   .text.HAL_IRDA_TxCpltCallback:0000000000000000 HAL_IRDA_TxCpltCallback
     /tmp/ccirtMvB.s:2011   .text.IRDA_DMATransmitCplt:0000000000000000 $t
     /tmp/ccirtMvB.s:2065   .text.IRDA_EndTransmit_IT:0000000000000000 $t
     /tmp/ccirtMvB.s:2071   .text.IRDA_EndTransmit_IT:0000000000000000 IRDA_EndTransmit_IT
ARM GAS  /tmp/ccirtMvB.s 			page 108


     /tmp/ccirtMvB.s:2101   .text.HAL_IRDA_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:2108   .text.HAL_IRDA_TxHalfCpltCallback:0000000000000000 HAL_IRDA_TxHalfCpltCallback
     /tmp/ccirtMvB.s:2121   .text.IRDA_DMATransmitHalfCplt:0000000000000000 $t
     /tmp/ccirtMvB.s:2151   .text.HAL_IRDA_RxCpltCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:2158   .text.HAL_IRDA_RxCpltCallback:0000000000000000 HAL_IRDA_RxCpltCallback
     /tmp/ccirtMvB.s:2171   .text.IRDA_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccirtMvB.s:2230   .text.IRDA_Receive_IT:0000000000000000 $t
     /tmp/ccirtMvB.s:2236   .text.IRDA_Receive_IT:0000000000000000 IRDA_Receive_IT
     /tmp/ccirtMvB.s:2359   .text.HAL_IRDA_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:2366   .text.HAL_IRDA_RxHalfCpltCallback:0000000000000000 HAL_IRDA_RxHalfCpltCallback
     /tmp/ccirtMvB.s:2379   .text.IRDA_DMAReceiveHalfCplt:0000000000000000 $t
     /tmp/ccirtMvB.s:2409   .text.HAL_IRDA_ErrorCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:2416   .text.HAL_IRDA_ErrorCallback:0000000000000000 HAL_IRDA_ErrorCallback
     /tmp/ccirtMvB.s:2429   .text.IRDA_DMAError:0000000000000000 $t
     /tmp/ccirtMvB.s:2517   .text.HAL_IRDA_IRQHandler:0000000000000000 $t
     /tmp/ccirtMvB.s:2524   .text.HAL_IRDA_IRQHandler:0000000000000000 HAL_IRDA_IRQHandler
     /tmp/ccirtMvB.s:2744   .text.HAL_IRDA_IRQHandler:000000000000011c $d
     /tmp/ccirtMvB.s:2755   .text.IRDA_DMAAbortOnError:0000000000000000 IRDA_DMAAbortOnError
     /tmp/ccirtMvB.s:2749   .text.IRDA_DMAAbortOnError:0000000000000000 $t
     /tmp/ccirtMvB.s:2783   .text.HAL_IRDA_AbortCpltCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:2790   .text.HAL_IRDA_AbortCpltCallback:0000000000000000 HAL_IRDA_AbortCpltCallback
     /tmp/ccirtMvB.s:2803   .text.HAL_IRDA_Abort_IT:0000000000000000 $t
     /tmp/ccirtMvB.s:2810   .text.HAL_IRDA_Abort_IT:0000000000000000 HAL_IRDA_Abort_IT
     /tmp/ccirtMvB.s:2967   .text.HAL_IRDA_Abort_IT:00000000000000c0 $d
     /tmp/ccirtMvB.s:3035   .text.IRDA_DMATxAbortCallback:0000000000000000 IRDA_DMATxAbortCallback
     /tmp/ccirtMvB.s:2979   .text.IRDA_DMARxAbortCallback:0000000000000000 IRDA_DMARxAbortCallback
     /tmp/ccirtMvB.s:2973   .text.IRDA_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:3029   .text.IRDA_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:3085   .text.HAL_IRDA_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:3092   .text.HAL_IRDA_AbortTransmitCpltCallback:0000000000000000 HAL_IRDA_AbortTransmitCpltCallback
     /tmp/ccirtMvB.s:3105   .text.HAL_IRDA_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccirtMvB.s:3112   .text.HAL_IRDA_AbortTransmit_IT:0000000000000000 HAL_IRDA_AbortTransmit_IT
     /tmp/ccirtMvB.s:3191   .text.HAL_IRDA_AbortTransmit_IT:000000000000005c $d
     /tmp/ccirtMvB.s:3202   .text.IRDA_DMATxOnlyAbortCallback:0000000000000000 IRDA_DMATxOnlyAbortCallback
     /tmp/ccirtMvB.s:3196   .text.IRDA_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:3231   .text.HAL_IRDA_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:3238   .text.HAL_IRDA_AbortReceiveCpltCallback:0000000000000000 HAL_IRDA_AbortReceiveCpltCallback
     /tmp/ccirtMvB.s:3251   .text.HAL_IRDA_AbortReceive_IT:0000000000000000 $t
     /tmp/ccirtMvB.s:3258   .text.HAL_IRDA_AbortReceive_IT:0000000000000000 HAL_IRDA_AbortReceive_IT
     /tmp/ccirtMvB.s:3342   .text.HAL_IRDA_AbortReceive_IT:0000000000000068 $d
     /tmp/ccirtMvB.s:3353   .text.IRDA_DMARxOnlyAbortCallback:0000000000000000 IRDA_DMARxOnlyAbortCallback
     /tmp/ccirtMvB.s:3347   .text.IRDA_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccirtMvB.s:3382   .text.HAL_IRDA_GetState:0000000000000000 $t
     /tmp/ccirtMvB.s:3389   .text.HAL_IRDA_GetState:0000000000000000 HAL_IRDA_GetState
     /tmp/ccirtMvB.s:3411   .text.HAL_IRDA_GetError:0000000000000000 $t
     /tmp/ccirtMvB.s:3418   .text.HAL_IRDA_GetError:0000000000000000 HAL_IRDA_GetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetPCLK2Freq
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
