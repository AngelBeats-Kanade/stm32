ARM GAS  /tmp/ccsPssV3.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_wwdg.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_WWDG_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_WWDG_MspInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_WWDG_MspInit:
  24              	.LFB65:
  25              		.file 1 "Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c"
   1:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
   2:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ******************************************************************************
   3:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @file    stm32f1xx_hal_wwdg.c
   4:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @author  MCD Application Team
   5:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @version V1.1.1
   6:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @date    12-May-2017
   7:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief   WWDG HAL module driver.
   8:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *          This file provides firmware functions to manage the following 
   9:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *          functionalities of the Window Watchdog (WWDG) peripheral:
  10:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *           + Initialization and de-initialization functions
  11:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *           + IO operation functions
  12:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *           + Peripheral State functions
  13:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   @verbatim
  14:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
  15:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****                       ##### WWDG specific features #####
  16:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
  17:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   [..] 
  18:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     Once enabled the WWDG generates a system reset on expiry of a programmed
  19:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     time period, unless the program refreshes the counter (downcounter) 
  20:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     before reaching 0x3F value (i.e. a reset is generated when the counter
  21:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     value rolls over from 0x40 to 0x3F). 
  22:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****        
  23:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) An MCU reset is also generated if the counter value is refreshed
  24:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         before the counter has reached the refresh window value. This 
  25:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         implies that the counter must be refreshed in a limited window.
  26:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Once enabled the WWDG cannot be disabled except by a system reset.
  27:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
  28:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         reset occurs.               
  29:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) The WWDG counter input clock is derived from the APB clock divided 
  30:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         by a programmable prescaler.
  31:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) WWDG clock (Hz) = PCLK1 / (4096 * Prescaler)
  32:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) WWDG timeout (mS) = 1000 * Counter / WWDG clock
  33:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) WWDG Counter refresh is allowed between the following limits :
ARM GAS  /tmp/ccsPssV3.s 			page 2


  34:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         (++) min time (mS) = 1000 * (Counter _ Window) / WWDG clock
  35:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         (++) max time (mS) = 1000 * (Counter _ 0x40) / WWDG clock
  36:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     
  37:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Min-max timeout value at 36 MHz(PCLK1): 910 us / 58.25 ms 
  38:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  39:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) The Early Wakeup Interrupt (EWI) can be used if specific safety 
  40:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         operations or data logging must be performed before the actual reset is
  41:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         generated. When the downcounter reaches the value 0x40, an EWI interrupt
  42:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         is generated and the corresponding interrupt service routine (ISR) can 
  43:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         be used to trigger specific actions (such as communications or data 
  44:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         logging), before resetting the device.
  45:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         In some applications, the EWI interrupt can be used to manage a software
  46:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         system check and/or system recovery/graceful degradation, without 
  47:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         generating a WWDG reset. In this case, the corresponding interrupt 
  48:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         service routine (ISR) should reload the WWDG counter to avoid the WWDG 
  49:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         reset, then trigger the required actions.
  50:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         Note:When the EWI interrupt cannot be served, e.g. due to a system lock 
  51:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         in a higher priority task, the WWDG reset will eventually be generated.
  52:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  53:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Debug mode : When the microcontroller enters debug mode (core halted),
  54:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         the WWDG counter either continues to work normally or stops, depending 
  55:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         on DBG_WWDG_STOP configuration bit in DBG module, accessible through
  56:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         __HAL_DBGMCU_FREEZE_WWDG() and __HAL_DBGMCU_UNFREEZE_WWDG() macros
  57:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  58:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****                      ##### How to use this driver #####
  59:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
  60:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   [..]
  61:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Enable WWDG APB1 clock using __HAL_RCC_WWDG_CLK_ENABLE().
  62:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  63:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Set the WWDG prescaler, refresh window, counter value and Early Wakeup 
  64:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         Interrupt mode using using HAL_WWDG_Init() function.
  65:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         This enables WWDG peripheral and the downcounter starts downcounting 
  66:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         from given counter value.
  67:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         Init function can be called again to modify all watchdog parameters, 
  68:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         however if EWI mode has been set once, it can't be clear until next 
  69:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         reset.
  70:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  71:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) The application program must refresh the WWDG counter at regular
  72:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         intervals during normal operation to prevent an MCU reset using
  73:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         HAL_WWDG_Refresh() function. This operation must occur only when
  74:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         the counter is lower than the window value already programmed.
  75:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  76:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) if Early Wakeup Interrupt mode is enable an interrupt is generated when 
  77:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         the counter reaches 0x40. User can add his own code in weak function 
  78:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         HAL_WWDG_EarlyWakeupCallback().
  79:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  80:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****      *** WWDG HAL driver macros list ***
  81:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****      ==================================
  82:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****      [..]
  83:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****        Below the list of most used macros in WWDG HAL driver.
  84:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  85:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       (+) __HAL_WWDG_GET_IT_SOURCE: Check the selected WWDG's interrupt source.
  86:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       (+) __HAL_WWDG_GET_FLAG: Get the selected WWDG's flag status.
  87:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       (+) __HAL_WWDG_CLEAR_FLAG: Clear the WWDG's pending flags.
  88:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  89:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   @endverbatim
  90:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ******************************************************************************
ARM GAS  /tmp/ccsPssV3.s 			page 3


  91:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @attention
  92:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *
  93:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  94:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *
  95:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * Redistribution and use in source and binary forms, with or without modification,
  96:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * are permitted provided that the following conditions are met:
  97:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  98:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *      this list of conditions and the following disclaimer.
  99:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 100:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *      this list of conditions and the following disclaimer in the documentation
 101:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *      and/or other materials provided with the distribution.
 102:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 103:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *      may be used to endorse or promote products derived from this software
 104:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *      without specific prior written permission.
 105:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *
 106:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 107:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 108:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 109:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 110:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 111:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 112:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 113:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 114:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 115:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 116:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *
 117:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ******************************************************************************
 118:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 119:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 120:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Includes ------------------------------------------------------------------*/
 121:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** #include "stm32f1xx_hal.h"
 122:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 123:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /** @addtogroup STM32F1xx_HAL_Driver
 124:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @{
 125:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 126:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 127:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** #ifdef HAL_WWDG_MODULE_ENABLED
 128:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /** @defgroup WWDG WWDG
 129:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief WWDG HAL module driver.
 130:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @{
 131:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 132:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 133:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Private typedef -----------------------------------------------------------*/
 134:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Private define ------------------------------------------------------------*/
 135:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Private macro -------------------------------------------------------------*/
 136:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Private variables ---------------------------------------------------------*/
 137:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Private function prototypes -----------------------------------------------*/
 138:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Exported functions --------------------------------------------------------*/
 139:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 140:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions WWDG Exported Functions
 141:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @{
 142:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 143:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 144:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions_Group1 Initialization and Configuration functions
 145:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *  @brief    Initialization and Configuration functions.
 146:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *
 147:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** @verbatim
ARM GAS  /tmp/ccsPssV3.s 			page 4


 148:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
 149:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****           ##### Initialization and Configuration functions #####
 150:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
 151:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   [..]  
 152:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     This section provides functions allowing to:
 153:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       (+) Initialize and start the WWDG according to the specified parameters
 154:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****           in the WWDG_InitTypeDef of associated handle.
 155:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       (+) Initialize the WWDG MSP.
 156:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 157:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** @endverbatim
 158:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @{
 159:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 160:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 161:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 162:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief  Initialize the WWDG according to the specified.
 163:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         parameters in the WWDG_InitTypeDef of  associated handle.
 164:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 165:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 166:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @retval HAL status
 167:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 168:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
 169:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** {
 170:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
 171:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   if(hwwdg == NULL)
 172:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   {
 173:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     return HAL_ERROR;
 174:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   }
 175:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 176:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check the parameters */
 177:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   assert_param(IS_WWDG_ALL_INSTANCE(hwwdg->Instance));
 178:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(hwwdg->Init.Prescaler));
 179:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
 180:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
 181:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));
 182:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 183:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Init the low level hardware */
 184:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   HAL_WWDG_MspInit(hwwdg);
 185:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 186:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Set WWDG Counter */
 187:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 188:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 189:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Set WWDG Prescaler and Window */
 190:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window
 191:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 192:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Return function status */
 193:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   return HAL_OK;
 194:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** }
 195:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 196:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 197:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief  Initialize the WWDG MSP.
 198:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 199:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 200:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @note   When rewriting this function in user file, mechanism may be added
 201:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         to avoid multiple initialize when HAL_WWDG_Init function is called
 202:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         again to change parameters.
 203:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @retval None
 204:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
ARM GAS  /tmp/ccsPssV3.s 			page 5


 205:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** __weak void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg)
 206:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** {
  26              		.loc 1 206 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE65:
  36              		.section	.text.HAL_WWDG_Init,"ax",%progbits
  37              		.align	1
  38              		.global	HAL_WWDG_Init
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	HAL_WWDG_Init:
  45              	.LFB64:
 169:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
  46              		.loc 1 169 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              	.LVL1:
 171:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   {
  51              		.loc 1 171 0
  52 0000 88B1     		cbz	r0, .L4
 169:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
  53              		.loc 1 169 0
  54 0002 10B5     		push	{r4, lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 4, -8
  58              		.cfi_offset 14, -4
  59 0004 0446     		mov	r4, r0
 184:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  60              		.loc 1 184 0
  61 0006 FFF7FEFF 		bl	HAL_WWDG_MspInit
  62              	.LVL2:
 187:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  63              		.loc 1 187 0
  64 000a 2268     		ldr	r2, [r4]
  65 000c E368     		ldr	r3, [r4, #12]
  66 000e 43F08003 		orr	r3, r3, #128
  67 0012 1360     		str	r3, [r2]
 190:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  68              		.loc 1 190 0
  69 0014 2268     		ldr	r2, [r4]
  70 0016 2369     		ldr	r3, [r4, #16]
  71 0018 6168     		ldr	r1, [r4, #4]
  72 001a 0B43     		orrs	r3, r3, r1
  73 001c A168     		ldr	r1, [r4, #8]
  74 001e 0B43     		orrs	r3, r3, r1
  75 0020 5360     		str	r3, [r2, #4]
 193:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** }
ARM GAS  /tmp/ccsPssV3.s 			page 6


  76              		.loc 1 193 0
  77 0022 0020     		movs	r0, #0
  78 0024 10BD     		pop	{r4, pc}
  79              	.LVL3:
  80              	.L4:
  81              	.LCFI1:
  82              		.cfi_def_cfa_offset 0
  83              		.cfi_restore 4
  84              		.cfi_restore 14
 173:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   }
  85              		.loc 1 173 0
  86 0026 0120     		movs	r0, #1
  87              	.LVL4:
  88 0028 7047     		bx	lr
  89              		.cfi_endproc
  90              	.LFE64:
  92              		.section	.text.HAL_WWDG_Refresh,"ax",%progbits
  93              		.align	1
  94              		.global	HAL_WWDG_Refresh
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.fpu softvfp
 100              	HAL_WWDG_Refresh:
 101              	.LFB66:
 207:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Prevent unused argument(s) compilation warning */
 208:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   UNUSED(hwwdg);
 209:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 210:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 211:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****            the HAL_WWDG_MspInit could be implemented in the user file
 212:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****    */
 213:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** }
 214:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 215:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 216:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @}
 217:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 218:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 219:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions_Group2 IO operation functions
 220:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****  *  @brief    IO operation functions 
 221:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****  *
 222:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** @verbatim
 223:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
 224:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****                       ##### IO operation functions #####
 225:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================  
 226:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   [..]
 227:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     This section provides functions allowing to:
 228:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Refresh the WWDG.
 229:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Handle WWDG interrupt request and associated function callback.
 230:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 231:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** @endverbatim
 232:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @{
 233:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 234:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 235:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 236:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief  Refresh the WWDG.
 237:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 238:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
ARM GAS  /tmp/ccsPssV3.s 			page 7


 239:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @retval HAL status
 240:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 241:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
 242:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** {
 102              		.loc 1 242 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 107              	.LVL5:
 243:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Write to WWDG CR the WWDG Counter value to refresh with */
 244:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 108              		.loc 1 244 0
 109 0000 0368     		ldr	r3, [r0]
 110 0002 C268     		ldr	r2, [r0, #12]
 111 0004 1A60     		str	r2, [r3]
 245:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 246:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Return function status */
 247:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   return HAL_OK;
 248:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** }
 112              		.loc 1 248 0
 113 0006 0020     		movs	r0, #0
 114              	.LVL6:
 115 0008 7047     		bx	lr
 116              		.cfi_endproc
 117              	.LFE66:
 119              		.section	.text.HAL_WWDG_EarlyWakeupCallback,"ax",%progbits
 120              		.align	1
 121              		.weak	HAL_WWDG_EarlyWakeupCallback
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu softvfp
 127              	HAL_WWDG_EarlyWakeupCallback:
 128              	.LFB68:
 249:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 250:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 251:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief  Handle WWDG interrupt request.
 252:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @note   The Early Wakeup Interrupt (EWI) can be used if specific safety operations
 253:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         or data logging must be performed before the actual reset is generated.
 254:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         The EWI interrupt is enabled by calling HAL_WWDG_Init function with 
 255:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         EWIMode set to WWDG_EWI_ENABLE.
 256:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         When the downcounter reaches the value 0x40, and EWI interrupt is
 257:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         generated and the corresponding Interrupt Service Routine (ISR) can
 258:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         be used to trigger specific actions (such as communications or data
 259:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         logging), before resetting the device.
 260:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 261:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 262:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @retval None
 263:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 264:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
 265:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** {
 266:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 267:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   if(__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 268:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   {
 269:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     /* Check if WWDG Early Wakeup Interrupt occurred */
 270:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     if(__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
ARM GAS  /tmp/ccsPssV3.s 			page 8


 271:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     {
 272:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       /* Clear the WWDG Early Wakeup flag */
 273:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 274:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 275:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       /* Early Wakeup callback */ 
 276:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       HAL_WWDG_EarlyWakeupCallback(hwwdg);
 277:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     }
 278:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   }
 279:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** }
 280:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 281:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 282:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief  WWDG Early Wakeup callback.
 283:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @param  hwwdg : pointer to a WWDG_HandleTypeDef structure that contains
 284:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 285:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @retval None
 286:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 287:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** __weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef* hwwdg)
 288:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** {
 129              		.loc 1 288 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134              	.LVL7:
 135 0000 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE68:
 139              		.section	.text.HAL_WWDG_IRQHandler,"ax",%progbits
 140              		.align	1
 141              		.global	HAL_WWDG_IRQHandler
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu softvfp
 147              	HAL_WWDG_IRQHandler:
 148              	.LFB67:
 265:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 149              		.loc 1 265 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              	.LVL8:
 265:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 154              		.loc 1 265 0
 155 0000 08B5     		push	{r3, lr}
 156              	.LCFI2:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 3, -8
 159              		.cfi_offset 14, -4
 267:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   {
 160              		.loc 1 267 0
 161 0002 0368     		ldr	r3, [r0]
 162 0004 5A68     		ldr	r2, [r3, #4]
 163 0006 12F4007F 		tst	r2, #512
 164 000a 03D0     		beq	.L11
 270:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     {
 165              		.loc 1 270 0
ARM GAS  /tmp/ccsPssV3.s 			page 9


 166 000c 9A68     		ldr	r2, [r3, #8]
 167 000e 12F0010F 		tst	r2, #1
 168 0012 00D1     		bne	.L14
 169              	.LVL9:
 170              	.L11:
 171 0014 08BD     		pop	{r3, pc}
 172              	.LVL10:
 173              	.L14:
 273:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 174              		.loc 1 273 0
 175 0016 6FF00102 		mvn	r2, #1
 176 001a 9A60     		str	r2, [r3, #8]
 276:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     }
 177              		.loc 1 276 0
 178 001c FFF7FEFF 		bl	HAL_WWDG_EarlyWakeupCallback
 179              	.LVL11:
 279:Libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 180              		.loc 1 279 0
 181 0020 F8E7     		b	.L11
 182              		.cfi_endproc
 183              	.LFE67:
 185              		.text
 186              	.Letext0:
 187              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 188              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 189              		.file 4 "Libraries/CMSIS/Include/core_cm3.h"
 190              		.file 5 "Libraries/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 191              		.file 6 "Libraries/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 192              		.file 7 "/usr/include/newlib/sys/lock.h"
 193              		.file 8 "/usr/include/newlib/sys/_types.h"
 194              		.file 9 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 195              		.file 10 "/usr/include/newlib/sys/reent.h"
 196              		.file 11 "Libraries/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 197              		.file 12 "Libraries/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 198              		.file 13 "Libraries/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_wwdg.h"
ARM GAS  /tmp/ccsPssV3.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_wwdg.c
     /tmp/ccsPssV3.s:16     .text.HAL_WWDG_MspInit:0000000000000000 $t
     /tmp/ccsPssV3.s:23     .text.HAL_WWDG_MspInit:0000000000000000 HAL_WWDG_MspInit
     /tmp/ccsPssV3.s:37     .text.HAL_WWDG_Init:0000000000000000 $t
     /tmp/ccsPssV3.s:44     .text.HAL_WWDG_Init:0000000000000000 HAL_WWDG_Init
     /tmp/ccsPssV3.s:93     .text.HAL_WWDG_Refresh:0000000000000000 $t
     /tmp/ccsPssV3.s:100    .text.HAL_WWDG_Refresh:0000000000000000 HAL_WWDG_Refresh
     /tmp/ccsPssV3.s:120    .text.HAL_WWDG_EarlyWakeupCallback:0000000000000000 $t
     /tmp/ccsPssV3.s:127    .text.HAL_WWDG_EarlyWakeupCallback:0000000000000000 HAL_WWDG_EarlyWakeupCallback
     /tmp/ccsPssV3.s:140    .text.HAL_WWDG_IRQHandler:0000000000000000 $t
     /tmp/ccsPssV3.s:147    .text.HAL_WWDG_IRQHandler:0000000000000000 HAL_WWDG_IRQHandler
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
