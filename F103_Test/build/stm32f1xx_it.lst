ARM GAS  /tmp/ccTCfTls.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB68:
  26              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****  ******************************************************************************
   4:Src/stm32f1xx_it.c ****  * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****  * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****  ******************************************************************************
   7:Src/stm32f1xx_it.c ****  * @attention
   8:Src/stm32f1xx_it.c ****  *
   9:Src/stm32f1xx_it.c ****  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/stm32f1xx_it.c ****  * All rights reserved.</center></h2>
  11:Src/stm32f1xx_it.c ****  *
  12:Src/stm32f1xx_it.c ****  * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/stm32f1xx_it.c ****  * the "License"; You may not use this file except in compliance with the
  14:Src/stm32f1xx_it.c ****  * License. You may obtain a copy of the License at:
  15:Src/stm32f1xx_it.c ****  *                        opensource.org/licenses/BSD-3-Clause
  16:Src/stm32f1xx_it.c ****  *
  17:Src/stm32f1xx_it.c ****  ******************************************************************************
  18:Src/stm32f1xx_it.c ****  */
  19:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f1xx_it.c **** 
  21:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f1xx_it.c **** #include "main.h"
  23:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32f1xx_it.c **** 
  28:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32f1xx_it.c **** 
  31:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  32:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccTCfTls.s 			page 2


  33:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32f1xx_it.c **** 
  36:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32f1xx_it.c **** 
  51:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_dac_ch2;
  60:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim3;
  61:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  62:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim1;
  63:Src/stm32f1xx_it.c **** extern uint32_t CNT;
  64:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  65:Src/stm32f1xx_it.c **** 
  66:Src/stm32f1xx_it.c **** /******************************************************************************/
  67:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
  68:Src/stm32f1xx_it.c **** /******************************************************************************/
  69:Src/stm32f1xx_it.c **** /**
  70:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  71:Src/stm32f1xx_it.c ****   */
  72:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  73:Src/stm32f1xx_it.c **** {
  27              		.loc 1 73 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  74:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  75:Src/stm32f1xx_it.c **** 
  76:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  77:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  78:Src/stm32f1xx_it.c **** 
  79:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  80:Src/stm32f1xx_it.c **** }
  32              		.loc 1 80 1 view .LVU1
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE68:
ARM GAS  /tmp/ccTCfTls.s 			page 3


  37              		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	1
  39              		.global	HardFault_Handler
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	HardFault_Handler:
  46              	.LFB69:
  81:Src/stm32f1xx_it.c **** 
  82:Src/stm32f1xx_it.c **** /**
  83:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  84:Src/stm32f1xx_it.c ****   */
  85:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  86:Src/stm32f1xx_it.c **** {
  47              		.loc 1 86 1 view -0
  48              		.cfi_startproc
  49              		@ Volatile: function does not return.
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.L3:
  87:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  88:Src/stm32f1xx_it.c **** 
  89:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  90:Src/stm32f1xx_it.c ****   while (1)
  54              		.loc 1 90 3 discriminator 1 view .LVU3
  91:Src/stm32f1xx_it.c ****   {
  92:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  93:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  94:Src/stm32f1xx_it.c ****   }
  55              		.loc 1 94 3 discriminator 1 view .LVU4
  90:Src/stm32f1xx_it.c ****   {
  56              		.loc 1 90 9 discriminator 1 view .LVU5
  57 0000 FEE7     		b	.L3
  58              		.cfi_endproc
  59              	.LFE69:
  61              		.section	.text.MemManage_Handler,"ax",%progbits
  62              		.align	1
  63              		.global	MemManage_Handler
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu softvfp
  69              	MemManage_Handler:
  70              	.LFB70:
  95:Src/stm32f1xx_it.c **** }
  96:Src/stm32f1xx_it.c **** 
  97:Src/stm32f1xx_it.c **** /**
  98:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
  99:Src/stm32f1xx_it.c ****   */
 100:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 101:Src/stm32f1xx_it.c **** {
  71              		.loc 1 101 1 view -0
  72              		.cfi_startproc
  73              		@ Volatile: function does not return.
  74              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccTCfTls.s 			page 4


  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  77              	.L5:
 102:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 103:Src/stm32f1xx_it.c **** 
 104:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 105:Src/stm32f1xx_it.c ****   while (1)
  78              		.loc 1 105 3 discriminator 1 view .LVU7
 106:Src/stm32f1xx_it.c ****   {
 107:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 108:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 109:Src/stm32f1xx_it.c ****   }
  79              		.loc 1 109 3 discriminator 1 view .LVU8
 105:Src/stm32f1xx_it.c ****   {
  80              		.loc 1 105 9 discriminator 1 view .LVU9
  81 0000 FEE7     		b	.L5
  82              		.cfi_endproc
  83              	.LFE70:
  85              		.section	.text.BusFault_Handler,"ax",%progbits
  86              		.align	1
  87              		.global	BusFault_Handler
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  91              		.fpu softvfp
  93              	BusFault_Handler:
  94              	.LFB71:
 110:Src/stm32f1xx_it.c **** }
 111:Src/stm32f1xx_it.c **** 
 112:Src/stm32f1xx_it.c **** /**
 113:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 114:Src/stm32f1xx_it.c ****   */
 115:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 116:Src/stm32f1xx_it.c **** {
  95              		.loc 1 116 1 view -0
  96              		.cfi_startproc
  97              		@ Volatile: function does not return.
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.L7:
 117:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 118:Src/stm32f1xx_it.c **** 
 119:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 120:Src/stm32f1xx_it.c ****   while (1)
 102              		.loc 1 120 3 discriminator 1 view .LVU11
 121:Src/stm32f1xx_it.c ****   {
 122:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 123:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 124:Src/stm32f1xx_it.c ****   }
 103              		.loc 1 124 3 discriminator 1 view .LVU12
 120:Src/stm32f1xx_it.c ****   {
 104              		.loc 1 120 9 discriminator 1 view .LVU13
 105 0000 FEE7     		b	.L7
 106              		.cfi_endproc
 107              	.LFE71:
 109              		.section	.text.UsageFault_Handler,"ax",%progbits
ARM GAS  /tmp/ccTCfTls.s 			page 5


 110              		.align	1
 111              		.global	UsageFault_Handler
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu softvfp
 117              	UsageFault_Handler:
 118              	.LFB72:
 125:Src/stm32f1xx_it.c **** }
 126:Src/stm32f1xx_it.c **** 
 127:Src/stm32f1xx_it.c **** /**
 128:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 129:Src/stm32f1xx_it.c ****   */
 130:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 131:Src/stm32f1xx_it.c **** {
 119              		.loc 1 131 1 view -0
 120              		.cfi_startproc
 121              		@ Volatile: function does not return.
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              	.L9:
 132:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 133:Src/stm32f1xx_it.c **** 
 134:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 135:Src/stm32f1xx_it.c ****   while (1)
 126              		.loc 1 135 3 discriminator 1 view .LVU15
 136:Src/stm32f1xx_it.c ****   {
 137:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 138:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 139:Src/stm32f1xx_it.c ****   }
 127              		.loc 1 139 3 discriminator 1 view .LVU16
 135:Src/stm32f1xx_it.c ****   {
 128              		.loc 1 135 9 discriminator 1 view .LVU17
 129 0000 FEE7     		b	.L9
 130              		.cfi_endproc
 131              	.LFE72:
 133              		.section	.text.SVC_Handler,"ax",%progbits
 134              		.align	1
 135              		.global	SVC_Handler
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 139              		.fpu softvfp
 141              	SVC_Handler:
 142              	.LFB73:
 140:Src/stm32f1xx_it.c **** }
 141:Src/stm32f1xx_it.c **** 
 142:Src/stm32f1xx_it.c **** /**
 143:Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 144:Src/stm32f1xx_it.c ****   */
 145:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 146:Src/stm32f1xx_it.c **** {
 143              		.loc 1 146 1 view -0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccTCfTls.s 			page 6


 147              		@ link register save eliminated.
 147:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 148:Src/stm32f1xx_it.c **** 
 149:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 150:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 151:Src/stm32f1xx_it.c **** 
 152:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 153:Src/stm32f1xx_it.c **** }
 148              		.loc 1 153 1 view .LVU19
 149 0000 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE73:
 153              		.section	.text.DebugMon_Handler,"ax",%progbits
 154              		.align	1
 155              		.global	DebugMon_Handler
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu softvfp
 161              	DebugMon_Handler:
 162              	.LFB74:
 154:Src/stm32f1xx_it.c **** 
 155:Src/stm32f1xx_it.c **** /**
 156:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 157:Src/stm32f1xx_it.c ****   */
 158:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 159:Src/stm32f1xx_it.c **** {
 163              		.loc 1 159 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 160:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 161:Src/stm32f1xx_it.c **** 
 162:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 163:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 164:Src/stm32f1xx_it.c **** 
 165:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 166:Src/stm32f1xx_it.c **** }
 168              		.loc 1 166 1 view .LVU21
 169 0000 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE74:
 173              		.section	.text.PendSV_Handler,"ax",%progbits
 174              		.align	1
 175              		.global	PendSV_Handler
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	PendSV_Handler:
 182              	.LFB75:
 167:Src/stm32f1xx_it.c **** 
 168:Src/stm32f1xx_it.c **** /**
 169:Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 170:Src/stm32f1xx_it.c ****   */
 171:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
ARM GAS  /tmp/ccTCfTls.s 			page 7


 172:Src/stm32f1xx_it.c **** {
 183              		.loc 1 172 1 view -0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 173:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 174:Src/stm32f1xx_it.c **** 
 175:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 176:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 177:Src/stm32f1xx_it.c **** 
 178:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 179:Src/stm32f1xx_it.c **** }
 188              		.loc 1 179 1 view .LVU23
 189 0000 7047     		bx	lr
 190              		.cfi_endproc
 191              	.LFE75:
 193              		.section	.text.SysTick_Handler,"ax",%progbits
 194              		.align	1
 195              		.global	SysTick_Handler
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu softvfp
 201              	SysTick_Handler:
 202              	.LFB76:
 180:Src/stm32f1xx_it.c **** 
 181:Src/stm32f1xx_it.c **** /**
 182:Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 183:Src/stm32f1xx_it.c ****   */
 184:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 185:Src/stm32f1xx_it.c **** {
 203              		.loc 1 185 1 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 08B5     		push	{r3, lr}
 208              	.LCFI0:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 3, -8
 211              		.cfi_offset 14, -4
 186:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 187:Src/stm32f1xx_it.c **** 
 188:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 189:Src/stm32f1xx_it.c ****   HAL_IncTick();
 212              		.loc 1 189 3 view .LVU25
 213 0002 FFF7FEFF 		bl	HAL_IncTick
 214              	.LVL0:
 190:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 191:Src/stm32f1xx_it.c **** 
 192:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 193:Src/stm32f1xx_it.c **** }
 215              		.loc 1 193 1 is_stmt 0 view .LVU26
 216 0006 08BD     		pop	{r3, pc}
 217              		.cfi_endproc
 218              	.LFE76:
 220              		.section	.text.TIM3_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccTCfTls.s 			page 8


 221              		.align	1
 222              		.global	TIM3_IRQHandler
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 226              		.fpu softvfp
 228              	TIM3_IRQHandler:
 229              	.LFB77:
 194:Src/stm32f1xx_it.c **** 
 195:Src/stm32f1xx_it.c **** /******************************************************************************/
 196:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 197:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 198:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 199:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 200:Src/stm32f1xx_it.c **** /******************************************************************************/
 201:Src/stm32f1xx_it.c **** 
 202:Src/stm32f1xx_it.c **** /**
 203:Src/stm32f1xx_it.c ****   * @brief This function handles TIM3 global interrupt.
 204:Src/stm32f1xx_it.c ****   */
 205:Src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 206:Src/stm32f1xx_it.c **** {
 230              		.loc 1 206 1 is_stmt 1 view -0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234 0000 08B5     		push	{r3, lr}
 235              	.LCFI1:
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 3, -8
 238              		.cfi_offset 14, -4
 207:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 0 */
 208:Src/stm32f1xx_it.c **** 
 209:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 0 */
 210:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim3);
 239              		.loc 1 210 3 view .LVU28
 240 0002 0248     		ldr	r0, .L17
 241 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 242              	.LVL1:
 211:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 1 */
 212:Src/stm32f1xx_it.c **** 
 213:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 1 */
 214:Src/stm32f1xx_it.c **** }
 243              		.loc 1 214 1 is_stmt 0 view .LVU29
 244 0008 08BD     		pop	{r3, pc}
 245              	.L18:
 246 000a 00BF     		.align	2
 247              	.L17:
 248 000c 00000000 		.word	htim3
 249              		.cfi_endproc
 250              	.LFE77:
 252              		.section	.text.DMA2_Channel4_5_IRQHandler,"ax",%progbits
 253              		.align	1
 254              		.global	DMA2_Channel4_5_IRQHandler
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu softvfp
ARM GAS  /tmp/ccTCfTls.s 			page 9


 260              	DMA2_Channel4_5_IRQHandler:
 261              	.LFB78:
 215:Src/stm32f1xx_it.c **** 
 216:Src/stm32f1xx_it.c **** /**
 217:Src/stm32f1xx_it.c ****   * @brief This function handles DMA2 channel4 and channel5 global interrupts.
 218:Src/stm32f1xx_it.c ****   */
 219:Src/stm32f1xx_it.c **** void DMA2_Channel4_5_IRQHandler(void)
 220:Src/stm32f1xx_it.c **** {
 262              		.loc 1 220 1 is_stmt 1 view -0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266 0000 08B5     		push	{r3, lr}
 267              	.LCFI2:
 268              		.cfi_def_cfa_offset 8
 269              		.cfi_offset 3, -8
 270              		.cfi_offset 14, -4
 221:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */
 222:Src/stm32f1xx_it.c **** 
 223:Src/stm32f1xx_it.c ****   /* USER CODE END DMA2_Channel4_5_IRQn 0 */
 224:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_dac_ch2);
 271              		.loc 1 224 3 view .LVU31
 272 0002 0248     		ldr	r0, .L21
 273 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 274              	.LVL2:
 225:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */
 226:Src/stm32f1xx_it.c **** 
 227:Src/stm32f1xx_it.c ****   /* USER CODE END DMA2_Channel4_5_IRQn 1 */
 228:Src/stm32f1xx_it.c **** }
 275              		.loc 1 228 1 is_stmt 0 view .LVU32
 276 0008 08BD     		pop	{r3, pc}
 277              	.L22:
 278 000a 00BF     		.align	2
 279              	.L21:
 280 000c 00000000 		.word	hdma_dac_ch2
 281              		.cfi_endproc
 282              	.LFE78:
 284              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 285              		.align	1
 286              		.global	HAL_TIM_PeriodElapsedCallback
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu softvfp
 292              	HAL_TIM_PeriodElapsedCallback:
 293              	.LVL3:
 294              	.LFB79:
 229:Src/stm32f1xx_it.c **** 
 230:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 1 */
 231:Src/stm32f1xx_it.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 232:Src/stm32f1xx_it.c **** {
 295              		.loc 1 232 1 is_stmt 1 view -0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              		.loc 1 232 1 is_stmt 0 view .LVU34
 300 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccTCfTls.s 			page 10


 301              	.LCFI3:
 302              		.cfi_def_cfa_offset 16
 303              		.cfi_offset 3, -16
 304              		.cfi_offset 4, -12
 305              		.cfi_offset 5, -8
 306              		.cfi_offset 14, -4
 233:Src/stm32f1xx_it.c ****   HAL_TIM_Base_Stop(&htim1);
 307              		.loc 1 233 3 is_stmt 1 view .LVU35
 308 0002 0B4D     		ldr	r5, .L25
 309 0004 2846     		mov	r0, r5
 310              	.LVL4:
 311              		.loc 1 233 3 is_stmt 0 view .LVU36
 312 0006 FFF7FEFF 		bl	HAL_TIM_Base_Stop
 313              	.LVL5:
 234:Src/stm32f1xx_it.c ****   HAL_TIM_Base_Stop(&htim3);
 314              		.loc 1 234 3 is_stmt 1 view .LVU37
 315 000a 0A4C     		ldr	r4, .L25+4
 316 000c 2046     		mov	r0, r4
 317 000e FFF7FEFF 		bl	HAL_TIM_Base_Stop
 318              	.LVL6:
 235:Src/stm32f1xx_it.c ****   CNT = __HAL_TIM_GET_COUNTER(&htim1);
 319              		.loc 1 235 3 view .LVU38
 320              		.loc 1 235 9 is_stmt 0 view .LVU39
 321 0012 2A68     		ldr	r2, [r5]
 322 0014 516A     		ldr	r1, [r2, #36]
 323              		.loc 1 235 7 view .LVU40
 324 0016 084B     		ldr	r3, .L25+8
 325 0018 1960     		str	r1, [r3]
 236:Src/stm32f1xx_it.c ****   __HAL_TIM_SET_COUNTER(&htim1, 0);
 326              		.loc 1 236 3 is_stmt 1 view .LVU41
 327 001a 0023     		movs	r3, #0
 328 001c 5362     		str	r3, [r2, #36]
 237:Src/stm32f1xx_it.c ****   __HAL_TIM_SET_COUNTER(&htim3, 0);
 329              		.loc 1 237 3 view .LVU42
 330 001e 2268     		ldr	r2, [r4]
 331 0020 5362     		str	r3, [r2, #36]
 238:Src/stm32f1xx_it.c ****   HAL_TIM_Base_Start(&htim1);
 332              		.loc 1 238 3 view .LVU43
 333 0022 2846     		mov	r0, r5
 334 0024 FFF7FEFF 		bl	HAL_TIM_Base_Start
 335              	.LVL7:
 239:Src/stm32f1xx_it.c ****   HAL_TIM_Base_Start(&htim3);
 336              		.loc 1 239 3 view .LVU44
 337 0028 2046     		mov	r0, r4
 338 002a FFF7FEFF 		bl	HAL_TIM_Base_Start
 339              	.LVL8:
 240:Src/stm32f1xx_it.c **** }
 340              		.loc 1 240 1 is_stmt 0 view .LVU45
 341 002e 38BD     		pop	{r3, r4, r5, pc}
 342              	.L26:
 343              		.align	2
 344              	.L25:
 345 0030 00000000 		.word	htim1
 346 0034 00000000 		.word	htim3
 347 0038 00000000 		.word	CNT
 348              		.cfi_endproc
 349              	.LFE79:
ARM GAS  /tmp/ccTCfTls.s 			page 11


 351              		.text
 352              	.Letext0:
 353              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 354              		.file 3 "Drivers/CMSIS/Include/core_cm3.h"
 355              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 356              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 357              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 358              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 359              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 360              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 361              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 362              		.file 11 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 363              		.file 12 "/usr/include/newlib/sys/_types.h"
 364              		.file 13 "/usr/include/newlib/sys/reent.h"
 365              		.file 14 "/usr/include/newlib/sys/lock.h"
 366              		.file 15 "Inc/bsp_debug_usart.h"
 367              		.file 16 "Inc/fonts.h"
 368              		.file 17 "Inc/bsp_ili9341_lcd.h"
 369              		.file 18 "/usr/include/newlib/stdlib.h"
ARM GAS  /tmp/ccTCfTls.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccTCfTls.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccTCfTls.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccTCfTls.s:38     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccTCfTls.s:45     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccTCfTls.s:62     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccTCfTls.s:69     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccTCfTls.s:86     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccTCfTls.s:93     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccTCfTls.s:110    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccTCfTls.s:117    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccTCfTls.s:134    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccTCfTls.s:141    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccTCfTls.s:154    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccTCfTls.s:161    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccTCfTls.s:174    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccTCfTls.s:181    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccTCfTls.s:194    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccTCfTls.s:201    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccTCfTls.s:221    .text.TIM3_IRQHandler:0000000000000000 $t
     /tmp/ccTCfTls.s:228    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
     /tmp/ccTCfTls.s:248    .text.TIM3_IRQHandler:000000000000000c $d
     /tmp/ccTCfTls.s:253    .text.DMA2_Channel4_5_IRQHandler:0000000000000000 $t
     /tmp/ccTCfTls.s:260    .text.DMA2_Channel4_5_IRQHandler:0000000000000000 DMA2_Channel4_5_IRQHandler
     /tmp/ccTCfTls.s:280    .text.DMA2_Channel4_5_IRQHandler:000000000000000c $d
     /tmp/ccTCfTls.s:285    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccTCfTls.s:292    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccTCfTls.s:345    .text.HAL_TIM_PeriodElapsedCallback:0000000000000030 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_TIM_IRQHandler
htim3
HAL_DMA_IRQHandler
hdma_dac_ch2
HAL_TIM_Base_Stop
HAL_TIM_Base_Start
htim1
CNT
