ARM GAS  /tmp/ccpp6UA4.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_rtc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
  17              		.align	1
  18              		.weak	HAL_RTC_MspInit
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	HAL_RTC_MspInit:
  25              	.LFB143:
  26              		.file 1 "Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c"
   1:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
   2:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
   3:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @file    stm32h7xx_hal_rtc.c
   4:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @author  MCD Application Team
   5:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following
   7:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   8:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Initialization/de-initialization
   9:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Calendar (Time and Date) configuration
  10:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  11:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + WakeUp Timer configuration
  12:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + TimeStamp configuration
  13:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Tampers configuration
  14:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Backup Data Registers configuration
  15:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection
  16:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Interrupts and flags management
  17:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
  18:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   @verbatim
  19:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  20:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ##### RTC Operating Condition #####
  21:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  22:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The real-time clock (RTC) and the RTC backup registers can be powered
  23:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        from the VBAT voltage when the main VDD supply is powered off.
  24:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        To retain the content of the RTC backup registers and supply the RTC
  25:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        when VDD is turned off, VBAT pin can be connected to an optional
  26:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  27:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  28:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  29:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  30:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register
  31:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        to their reset values.
  32:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        A backup domain reset is generated when one of the following events occurs:
ARM GAS  /tmp/ccpp6UA4.s 			page 2


  33:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the
  34:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR).
  35:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.
  36:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Tamper detection event resets all data backup registers.
  37:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  38:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  39:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  40:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data
  41:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write
  42:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        accesses.
  43:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  44:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  45:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Call the function HAL_RCCEx_PeriphCLKConfig with RCC_PERIPHCLK_RTC for
  46:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         PeriphClockSelection and select RTCClockSelection (LSE, LSI or HSEdiv32)
  47:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() macro.
  48:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  49:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ##### How to use RTC Driver #####
  50:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  51:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  52:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Enable the RTC domain access (see description in the section above).
  53:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour
  54:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  55:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  56:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Time and Date configuration ***
  57:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ===================================
  58:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  59:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime()
  60:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  61:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions.
  62:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  63:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Alarm configuration ***
  64:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ===========================
  65:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  66:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function.
  67:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             You can also configure the RTC Alarm with interrupt mode using the
  68:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             HAL_RTC_SetAlarm_IT() function.
  69:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  70:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  71:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  72:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  73:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate
  74:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        function.
  75:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B),
  76:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
  77:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and Standby low power
  78:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        modes.
  79:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending
  80:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm
  81:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        or the RTC wakeup events.
  82:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the
  83:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
  84:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        Wakeup from STOP and Standby modes is possible only when the RTC clock source
  85:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        is LSE or LSI.
  86:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  87:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Callback registration ***
  88:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   =============================================
  89:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccpp6UA4.s 			page 3


  90:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   The compilation define  USE_RTC_REGISTER_CALLBACKS when set to 1
  91:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   allows the user to configure dynamically the driver callbacks.
  92:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Use Function @ref HAL_RTC_RegisterCallback() to register an interrupt callback.
  93:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  94:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Function @ref HAL_RTC_RegisterCallback() allows to register following callbacks:
  95:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
  96:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
  97:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
  98:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
  99:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 100:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 101:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 102:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 103:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 104:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 105:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   and a pointer to the user callback function.
 106:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 107:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Use function @ref HAL_RTC_UnRegisterCallback() to reset a callback to the default
 108:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   weak function.
 109:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   @ref HAL_RTC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 110:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   and the Callback ID.
 111:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   This function allows to reset following callbacks:
 112:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 113:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 114:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 115:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 116:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 117:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 118:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 119:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 120:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 121:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 122:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   By default, after the @ref HAL_RTC_Init() and when the state is HAL_RTC_STATE_RESET,
 123:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   all callbacks are set to the corresponding weak functions :
 124:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   examples @ref AlarmAEventCallback(), @ref WakeUpTimerEventCallback().
 125:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Exception done for MspInit and MspDeInit callbacks that are reset to the legacy weak function
 126:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   in the @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit() only when these callbacks are null
 127:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   (not registered beforehand).
 128:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   If not, MspInit or MspDeInit are not null, @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit()
 129:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 130:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 131:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Callbacks can be registered/unregistered in HAL_RTC_STATE_READY state only.
 132:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 133:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   in HAL_RTC_STATE_READY or HAL_RTC_STATE_RESET state,
 134:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 135:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   In that case first register the MspInit/MspDeInit user callbacks
 136:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   using @ref HAL_RTC_RegisterCallback() before calling @ref HAL_RTC_DeInit()
 137:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   or @ref HAL_RTC_Init() function.
 138:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 139:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
 140:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
 141:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   are set to the corresponding weak functions.
 142:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    @endverbatim
 143:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 144:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
 145:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @attention
 146:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
ARM GAS  /tmp/ccpp6UA4.s 			page 4


 147:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 148:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * All rights reserved.</center></h2>
 149:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
 150:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 151:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * the "License"; You may not use this file except in compliance with the
 152:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * License. You may obtain a copy of the License at:
 153:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 154:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
 155:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
 156:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 157:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 158:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 159:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #include "stm32h7xx_hal.h"
 160:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 161:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup STM32H7xx_HAL_Driver
 162:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 163:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 164:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 165:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @defgroup RTC RTC
 166:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief RTC HAL module driver
 167:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 168:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 169:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 170:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 171:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 172:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 173:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 174:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 175:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 176:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 177:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Exported functions --------------------------------------------------------*/
 178:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 179:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions RTC Exported Functions
 180:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 181:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 182:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 183:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group1 Initialization and de-initialization functions
 184:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions
 185:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
 186:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
 187:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 188:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 189:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 190:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the
 191:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable
 192:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode,
 193:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 194:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
 195:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 196:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 15-bit synchronous prescaler.
 197:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the
 198:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 199:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 200:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 201:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter
 202:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped
 203:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is
ARM GAS  /tmp/ccpp6UA4.s 			page 5


 204:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 205:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar
 206:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes
 207:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then
 208:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means
 209:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the
 210:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function
 211:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 212:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 213:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
 214:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 215:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 216:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 217:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 218:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Initialize the RTC according to the specified parameters
 219:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         in the RTC_InitTypeDef structure.
 220:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc: RTC handle
 221:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 222:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 223:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 224:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 225:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 226:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 227:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check RTC handler */
 228:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(hrtc != NULL)
 229:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 230:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = HAL_OK;
 231:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 232:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Check the parameters */
 233:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 234:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 235:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 236:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 237:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 238:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 239:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 240:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 241:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 242:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 243:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(hrtc->State == HAL_RTC_STATE_RESET)
 244:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 245:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Allocate lock resource and initialize it */
 246:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Lock = HAL_UNLOCKED;
 247:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 248:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak Alar
 249:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak Alar
 250:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak Time
 251:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak Wake
 252:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamp
 253:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamp
 254:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;     /* Legacy weak Tamp
 255:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 256:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspInitCallback == NULL)
 257:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 258:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 259:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 260:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Init the low level hardware */
ARM GAS  /tmp/ccpp6UA4.s 			page 6


 261:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspInitCallback(hrtc);
 262:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 263:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspDeInitCallback == NULL)
 264:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 265:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 266:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 267:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 268:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #else
 269:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(hrtc->State == HAL_RTC_STATE_RESET)
 270:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 271:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Allocate lock resource and initialize it */
 272:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Lock = HAL_UNLOCKED;
 273:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 274:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Initialize RTC MSP */
 275:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_MspInit(hrtc);
 276:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 277:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 278:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 279:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set RTC state */
 280:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_BUSY;
 281:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 282:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the write protection for RTC registers */
 283:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 284:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 285:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set Initialization mode */
 286:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(RTC_EnterInitMode(hrtc) != HAL_OK)
 287:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 288:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 289:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 290:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 291:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC state */
 292:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
 293:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 294:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status = HAL_ERROR;
 295:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 296:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
 297:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 298:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear RTC_CR FMT, OSEL and POL Bits */
 299:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR &= (~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 300:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC_CR FMT, OSEL and POL Bits to specified values */
 301:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity)
 302:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 303:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Configure the RTC PRER */
 304:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->PRER  = (hrtc->Init.SynchPrediv);
 305:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 306:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 307:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Exit Initialization mode */
 308:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ISR &= (~RTC_ISR_INIT);
 309:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 310:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear RTC_OR ALARMOUTTYPE and OUT_RMP Bits */
 311:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->OR &= (~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP));
 312:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC_OR ALARMOUTTYPE and OUT_RMP Bits to specified values */
 313:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 314:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 315:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 316:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 317:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccpp6UA4.s 			page 7


 318:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC state */
 319:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_READY;
 320:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 321:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 322:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 323:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* return status */
 324:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 325:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 326:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 327:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 328:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  DeInitialize the RTC peripheral.
 329:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param hrtc RTC handle
 330:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.
 331:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 332:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 333:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 334:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 335:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 336:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t          tickstart;
 337:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 338:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check RTC handler */
 339:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(hrtc != NULL)
 340:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 341:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = HAL_OK;
 342:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 343:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Check the parameters */
 344:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 345:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 346:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set RTC state */
 347:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_BUSY;
 348:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 349:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the write protection for RTC registers */
 350:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 351:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 352:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set Initialization mode */
 353:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(RTC_EnterInitMode(hrtc) != HAL_OK)
 354:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 355:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 356:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 357:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 358:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC state */
 359:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
 360:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 361:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = HAL_ERROR;
 362:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 363:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
 364:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 365:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset TR, DR and CR registers */
 366:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->TR = 0x00000000u;
 367:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 368:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset All CR bits except CR[2:0] */
 369:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR &= RTC_CR_WUCKSEL;
 370:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 371:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       tickstart = HAL_GetTick();
 372:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 373:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Wait till WUTWF flag is set and if Time out is reached exit */
 374:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == 0u)
ARM GAS  /tmp/ccpp6UA4.s 			page 8


 375:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 376:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 377:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         {
 378:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           /* Enable the write protection for RTC registers */
 379:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 380:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 381:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           /* Set RTC state */
 382:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           hrtc->State = HAL_RTC_STATE_TIMEOUT;
 383:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 384:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           status = HAL_TIMEOUT;
 385:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         }
 386:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 387:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 388:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 389:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(status == HAL_OK)
 390:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 391:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset all RTC CR register bits */
 392:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR &= 0x00000000u;
 393:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset other RTC registers */
 394:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->WUTR = RTC_WUTR_WUT;
 395:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 396:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMAR = 0x00000000u;
 397:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMBR = 0x00000000u;
 398:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->SHIFTR = 0x00000000u;
 399:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CALR = 0x00000000u;
 400:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMASSR = 0x00000000u;
 401:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMBSSR = 0x00000000u;
 402:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 403:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset Tamper configuration register */
 404:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->TAMPCR = 0x00000000u;
 405:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 406:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset Option register */
 407:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->OR = 0x00000000u;
 408:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 409:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset ISR register and exit initialization mode */
 410:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ISR = 0x00000000u;
 411:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 412:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 413:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0u)
 414:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 415:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 416:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         {
 417:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           /* Enable the write protection for RTC registers */
 418:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 419:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 420:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           hrtc->State = HAL_RTC_STATE_ERROR;
 421:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 422:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           status = HAL_ERROR;
 423:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         }
 424:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 425:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 426:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 427:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(status == HAL_OK)
 428:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 429:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 430:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 431:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccpp6UA4.s 			page 9


 432:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 433:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspDeInitCallback == NULL)
 434:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 435:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 436:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 437:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 438:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* DeInit the low level hardware: CLOCK, NVIC.*/
 439:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspDeInitCallback(hrtc);
 440:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 441:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #else
 442:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* De-Initialize RTC MSP */
 443:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_MspDeInit(hrtc);
 444:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 445:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 446:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_RESET;
 447:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 448:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Release Lock */
 449:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_UNLOCK(hrtc);
 450:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 451:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 452:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 453:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* return status */
 454:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 455:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 456:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 457:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 458:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 459:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Register a User RTC Callback
 460:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         To be used instead of the weak predefined callback
 461:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 462:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be registered
 463:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 464:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 465:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 466:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 467:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 468:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 469:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 470:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 471:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID                Msp Init callback ID
 472:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
 473:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  pCallback pointer to the Callback function
 474:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 475:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 476:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_RegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Callb
 477:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 478:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 479:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 480:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(pCallback == NULL)
 481:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 482:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     return HAL_ERROR;
 483:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 484:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 485:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process locked */
 486:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 487:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 488:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(HAL_RTC_STATE_READY == hrtc->State)
ARM GAS  /tmp/ccpp6UA4.s 			page 10


 489:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 490:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 491:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 492:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_ALARM_A_EVENT_CB_ID :
 493:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback = pCallback;
 494:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 495:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 496:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_ALARM_B_EVENT_CB_ID :
 497:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback = pCallback;
 498:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 499:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 500:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 501:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->TimeStampEventCallback = pCallback;
 502:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 503:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 504:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 505:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->WakeUpTimerEventCallback = pCallback;
 506:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 507:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 508:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_TAMPER1_EVENT_CB_ID :
 509:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper1EventCallback = pCallback;
 510:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 511:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 512:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_TAMPER2_EVENT_CB_ID :
 513:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper2EventCallback = pCallback;
 514:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 515:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 516:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_TAMPER3_EVENT_CB_ID :
 517:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper3EventCallback = pCallback;
 518:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 519:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 520:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    case HAL_RTC_MSPINIT_CB_ID :
 521:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspInitCallback = pCallback;
 522:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 523:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 524:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    case HAL_RTC_MSPDEINIT_CB_ID :
 525:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspDeInitCallback = pCallback;
 526:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 527:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 528:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     default :
 529:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****      /* Return error status */
 530:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status =  HAL_ERROR;
 531:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 532:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 533:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 534:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else if(HAL_RTC_STATE_RESET == hrtc->State)
 535:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 536:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 537:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 538:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_MSPINIT_CB_ID :
 539:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspInitCallback = pCallback;
 540:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 541:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 542:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    case HAL_RTC_MSPDEINIT_CB_ID :
 543:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspDeInitCallback = pCallback;
 544:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 545:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccpp6UA4.s 			page 11


 546:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     default :
 547:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****      /* Return error status */
 548:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status =  HAL_ERROR;
 549:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 550:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 551:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 552:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 553:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 554:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Return error status */
 555:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status =  HAL_ERROR;
 556:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 557:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 558:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Release Lock */
 559:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 560:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 561:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 562:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 563:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 564:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 565:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Unregister an RTC Callback
 566:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         RTC callabck is redirected to the weak predefined callback
 567:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 568:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be unregistered
 569:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 570:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 571:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 572:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 573:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 574:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 575:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 576:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 577:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID Msp Init callback ID
 578:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID Msp DeInit callback ID
 579:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 580:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 581:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_UnRegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Cal
 582:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 583:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 584:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 585:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process locked */
 586:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 587:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 588:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(HAL_RTC_STATE_READY == hrtc->State)
 589:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 590:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 591:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 592:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_ALARM_A_EVENT_CB_ID :
 593:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback = HAL_RTC_AlarmAEventCallback;         /* Legacy weak AlarmAEventCa
 594:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 595:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 596:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_ALARM_B_EVENT_CB_ID :
 597:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback = HAL_RTCEx_AlarmBEventCallback;          /* Legacy weak AlarmBEven
 598:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 599:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 600:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 601:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->TimeStampEventCallback = HAL_RTCEx_TimeStampEventCallback;    /* Legacy weak TimeStampE
 602:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
ARM GAS  /tmp/ccpp6UA4.s 			page 12


 603:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 604:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 605:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->WakeUpTimerEventCallback = HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTim
 606:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 607:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 608:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_TAMPER1_EVENT_CB_ID :
 609:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper1EventCallback = HAL_RTCEx_Tamper1EventCallback;         /* Legacy weak Tamper1Ev
 610:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 611:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 612:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_TAMPER2_EVENT_CB_ID :
 613:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper2EventCallback = HAL_RTCEx_Tamper2EventCallback;         /* Legacy weak Tamper2Ev
 614:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 615:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 616:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_TAMPER3_EVENT_CB_ID :
 617:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper3EventCallback = HAL_RTCEx_Tamper3EventCallback;         /* Legacy weak Tamper3Ev
 618:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 619:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 620:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_MSPINIT_CB_ID :
 621:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspInitCallback = HAL_RTC_MspInit;
 622:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 623:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 624:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_MSPDEINIT_CB_ID :
 625:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 626:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 627:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 628:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     default :
 629:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****      /* Return error status */
 630:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status =  HAL_ERROR;
 631:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 632:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 633:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 634:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else if(HAL_RTC_STATE_RESET == hrtc->State)
 635:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 636:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 637:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 638:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_MSPINIT_CB_ID :
 639:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspInitCallback = HAL_RTC_MspInit;
 640:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 641:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 642:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     case HAL_RTC_MSPDEINIT_CB_ID :
 643:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 644:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 645:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 646:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     default :
 647:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****      /* Return error status */
 648:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status =  HAL_ERROR;
 649:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       break;
 650:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 651:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 652:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 653:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 654:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Return error status */
 655:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status =  HAL_ERROR;
 656:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 657:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 658:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Release Lock */
 659:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
ARM GAS  /tmp/ccpp6UA4.s 			page 13


 660:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 661:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 662:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 663:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 664:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 665:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Initialize the RTC MSP.
 666:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param hrtc RTC handle
 667:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
 668:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 669:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
 670:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
  27              		.loc 1 670 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE143:
  37              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
  38              		.align	1
  39              		.weak	HAL_RTC_MspDeInit
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu fpv5-d16
  45              	HAL_RTC_MspDeInit:
  46              	.LFB144:
 671:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 672:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
 673:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 674:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 675:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 676:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
 677:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 678:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 679:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 680:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  DeInitialize the RTC MSP.
 681:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param hrtc RTC handle
 682:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
 683:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 684:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
 685:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
  47              		.loc 1 685 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.LVL1:
  53 0000 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE144:
  57              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
  58              		.align	1
  59              		.global	HAL_RTC_DeactivateAlarm
  60              		.syntax unified
ARM GAS  /tmp/ccpp6UA4.s 			page 14


  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv5-d16
  65              	HAL_RTC_DeactivateAlarm:
  66              	.LFB151:
 686:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 687:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
 688:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 689:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 690:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 691:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
 692:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 693:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 694:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 695:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
 696:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 697:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 698:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group2 RTC Time and Date functions
 699:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 700:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
 701:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
 702:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 703:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 704:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 705:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 706:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 707:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 708:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
 709:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 710:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 711:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 712:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 713:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set RTC current time.
 714:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param hrtc RTC handle
 715:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param sTime Pointer to Time structure
 716:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param Format Specifies the format of the entered parameters.
 717:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 718:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 719:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 720:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 721:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 722:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 723:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 724:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 725:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 726:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  /* Check the parameters */
 727:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 728:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 729:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 730:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 731:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
 732:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 733:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 734:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 735:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 736:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 737:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
ARM GAS  /tmp/ccpp6UA4.s 			page 15


 738:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0u)
 739:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 740:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sTime->Hours));
 741:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 742:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 743:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
 744:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 745:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00u;
 746:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 747:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 748:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 749:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 750:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 751:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 752:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 753:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 754:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 755:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 756:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 757:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 758:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0u)
 759:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 760:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 761:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 762:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 763:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
 764:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 765:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00u;
 766:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 767:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 768:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 769:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 770:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 771:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 772:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sTime->Seconds)                       | \
 773:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 774:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 775:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 776:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 777:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 778:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 779:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Set Initialization mode */
 780:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 781:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 782:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 783:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 784:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 785:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set RTC state */
 786:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 787:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 788:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Process Unlocked */
 789:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 790:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 791:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     return HAL_ERROR;
 792:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 793:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 794:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
ARM GAS  /tmp/ccpp6UA4.s 			page 16


 795:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the RTC_TR register */
 796:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 797:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 798:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear the bits to be configured */
 799:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 801:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the RTC_CR register */
 802:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 803:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 804:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Exit Initialization mode */
 805:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (~RTC_ISR_INIT);
 806:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 807:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 808:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0u)
 809:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 810:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 811:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 812:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 813:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 814:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 815:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 816:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 817:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
 818:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 819:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 820:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_ERROR;
 821:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 822:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 823:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 824:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 825:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 826:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 827:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    hrtc->State = HAL_RTC_STATE_READY;
 828:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 829:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    __HAL_UNLOCK(hrtc);
 830:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 831:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    return HAL_OK;
 832:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 833:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 834:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 835:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 836:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get RTC current time.
 837:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 838:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure with Hours, Minutes and Seconds fields returned
 839:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                with input format (BIN or BCD), also SubSeconds field returning the
 840:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
 841:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                factor to be used for second fraction ratio computation.
 842:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 843:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 844:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 845:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 846:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 847:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 848:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 849:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 850:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
 851:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
ARM GAS  /tmp/ccpp6UA4.s 			page 17


 852:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
 853:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
 854:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 855:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 856:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 857:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 858:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 859:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 860:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
 861:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 862:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 863:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    /* Get subseconds structure field from the corresponding register*/
 864:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 865:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 866:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 867:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 868:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 869:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the TR register */
 870:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 871:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 872:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 873:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 874:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 875:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 876:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 877:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 878:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the input parameters format */
 879:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 880:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 881:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 882:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 883:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 884:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 885:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 886:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 887:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 888:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 889:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 890:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 891:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set RTC current date.
 892:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 893:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 894:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
 895:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 896:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 897:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 898:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 899:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 900:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 901:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 902:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
 903:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 904:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  /* Check the parameters */
 905:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 906:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 907:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  /* Process Locked */
 908:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  __HAL_LOCK(hrtc);
ARM GAS  /tmp/ccpp6UA4.s 			page 18


 909:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 910:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 911:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 912:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 913:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 914:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 915:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 916:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 917:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 918:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 919:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 920:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 921:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 922:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 923:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
 924:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 925:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 926:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 927:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 928:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 929:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 930:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 931:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 932:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 933:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 934:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE (RTC_Bcd2ToByte(sDate->Date)));
 935:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 936:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year)  << RTC_DR_YU_Pos) | \
 937:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 938:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t) sDate->Date)                    | \
 939:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 940:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 941:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 942:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 943:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 944:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 945:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Set Initialization mode */
 946:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 947:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 948:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 949:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 950:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 951:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set RTC state*/
 952:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 953:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 954:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Process Unlocked */
 955:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 956:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 957:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     return HAL_ERROR;
 958:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 959:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 960:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 961:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the RTC_DR register */
 962:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 963:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 964:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Exit Initialization mode */
 965:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (~RTC_ISR_INIT);
ARM GAS  /tmp/ccpp6UA4.s 			page 19


 966:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 967:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 968:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0u)
 969:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 970:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 971:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 972:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 973:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 974:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 975:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 976:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 977:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
 978:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 979:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 980:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_ERROR;
 981:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 982:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 983:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 984:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 985:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 986:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 987:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
 988:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 989:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Process Unlocked */
 990:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 991:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 992:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     return HAL_OK;
 993:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 994:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 995:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 996:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 997:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get RTC current date.
 998:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 999:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
1000:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1001:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1002:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format
1003:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
1004:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
1005:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
1006:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
1007:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1008:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1009:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
1010:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
1011:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
1012:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1013:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1014:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1015:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1016:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the DR register */
1017:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
1018:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1019:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
1020:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Year  = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
1021:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
1022:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Date  = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
ARM GAS  /tmp/ccpp6UA4.s 			page 20


1023:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
1024:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1025:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the input parameters format */
1026:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1027:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1028:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
1029:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
1030:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
1031:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
1032:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1033:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
1034:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1035:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1036:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1037:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1038:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1039:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1040:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group3 RTC Alarm functions
1041:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
1042:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1043:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1044:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1045:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
1046:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1047:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1048:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
1049:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1050:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1051:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1052:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1053:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1054:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm.
1055:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1056:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1057:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1058:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1059:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1060:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1061:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1062:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1063:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
1064:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
1065:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1066:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1067:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1068:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1069:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1070:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1071:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1072:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1073:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1074:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1075:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1076:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1077:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1078:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1079:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccpp6UA4.s 			page 21


1080:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1081:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1082:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1083:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1084:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0u)
1085:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1086:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1087:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1088:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1089:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1090:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1091:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00u;
1092:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1093:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1094:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1095:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1096:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1097:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1098:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1099:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1100:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1101:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1102:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1103:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1104:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1105:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1106:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
1107:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1108:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
1109:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)                 | \
1110:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
1111:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
1112:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1113:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1114:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1115:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1116:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0u)
1117:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1118:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1119:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1120:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1121:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1122:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1123:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00u;
1124:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1125:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1126:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1127:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1128:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1129:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1130:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1131:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1132:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1133:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1134:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1135:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1136:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
ARM GAS  /tmp/ccpp6UA4.s 			page 22


1137:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1138:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1139:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
1140:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1141:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds)                        | \
1142:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)   | \
1143:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
1144:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmDateWeekDaySel)                      | \
1145:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmMask));
1146:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1147:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1148:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1149:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
1150:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1151:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1152:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1153:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1154:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm register */
1155:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
1156:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1157:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1158:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1159:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1160:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1161:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
1162:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1163:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1164:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1165:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0u)
1166:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1167:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
1168:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1169:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1170:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1171:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1172:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1173:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1174:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1175:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1176:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1177:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1178:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1179:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1180:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1181:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
1182:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1183:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
1184:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1185:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
1186:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1187:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1188:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1189:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1190:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
1191:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1192:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1193:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
ARM GAS  /tmp/ccpp6UA4.s 			page 23


1194:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1195:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1196:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1197:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0u)
1198:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1199:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
1200:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1201:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1202:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1203:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1204:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1205:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1206:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1207:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1208:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1209:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1210:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1211:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1212:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1213:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
1214:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1215:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
1216:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1217:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
1218:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1219:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1220:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1221:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1222:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1223:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1224:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1225:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1226:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1227:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1228:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1229:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
1230:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1231:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1232:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1233:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm with Interrupt.
1234:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1235:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1236:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1237:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1238:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1239:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1240:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1241:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
1242:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
1243:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1244:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1245:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
1246:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
1247:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1248:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1249:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1250:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccpp6UA4.s 			page 24


1251:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1252:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1253:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1254:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1255:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1256:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1257:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1258:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1259:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1260:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1261:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1262:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1263:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1264:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1265:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1266:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0u)
1267:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1268:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1269:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1270:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1271:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1272:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1273:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00u;
1274:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1275:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1276:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1277:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1278:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1279:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1280:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1281:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1282:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1283:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1284:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1285:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1286:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1287:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
1288:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1289:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
1290:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)                 | \
1291:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
1292:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
1293:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1294:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1295:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1296:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1297:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0u)
1298:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1299:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1300:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1301:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1302:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1303:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1304:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00u;
1305:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1306:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1307:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccpp6UA4.s 			page 25


1308:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1309:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1310:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1311:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1312:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1313:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1314:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1315:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1316:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1317:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1318:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1319:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
1320:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1321:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds)                        | \
1322:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)   | \
1323:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
1324:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmDateWeekDaySel)                      | \
1325:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmMask));
1326:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1327:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1328:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
1329:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1330:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1331:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1332:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1333:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm register */
1334:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
1335:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1336:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1337:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1338:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1339:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm A */
1340:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1341:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1342:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1343:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1344:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0u)
1345:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1346:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
1347:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1348:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1349:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1350:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1351:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1352:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1353:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1354:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1355:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1356:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1357:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1358:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1359:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1360:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
1361:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1362:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
1363:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1364:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
ARM GAS  /tmp/ccpp6UA4.s 			page 26


1365:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1366:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
1367:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1368:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1369:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1370:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1371:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
1372:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1373:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm B */
1374:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
1375:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1376:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1377:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1378:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0u)
1379:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1380:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
1381:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1382:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1383:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1384:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1385:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1386:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1387:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1388:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1389:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1390:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1391:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1392:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1393:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1394:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
1395:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1396:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
1397:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1398:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
1399:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1400:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
1401:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1402:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1403:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if !defined(DUAL_CORE)
1404:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1405:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****      __HAL_RTC_ALARM_EXTI_ENABLE_IT();
1406:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif
1407:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1408:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
1409:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /*  Enable the write protection for RTC registers */
1410:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1411:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1412:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1413:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1414:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1415:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1416:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1417:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
1418:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1419:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1420:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1421:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Deactivate the specified RTC Alarm.
ARM GAS  /tmp/ccpp6UA4.s 			page 27


1422:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1423:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1424:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1425:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1426:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
1427:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1428:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1429:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1430:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
  67              		.loc 1 1430 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL2:
  72              		.loc 1 1430 0
  73 0000 38B5     		push	{r3, r4, r5, lr}
  74              	.LCFI0:
  75              		.cfi_def_cfa_offset 16
  76              		.cfi_offset 3, -16
  77              		.cfi_offset 4, -12
  78              		.cfi_offset 5, -8
  79              		.cfi_offset 14, -4
1431:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1432:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1433:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1434:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1435:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1436:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1437:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
  80              		.loc 1 1437 0
  81 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
  82 0006 012B     		cmp	r3, #1
  83 0008 5DD0     		beq	.L11
  84 000a 0446     		mov	r4, r0
  85              		.loc 1 1437 0 is_stmt 0 discriminator 2
  86 000c 0123     		movs	r3, #1
  87 000e 80F82030 		strb	r3, [r0, #32]
1438:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1439:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
  88              		.loc 1 1439 0 is_stmt 1 discriminator 2
  89 0012 0223     		movs	r3, #2
  90 0014 80F82130 		strb	r3, [r0, #33]
1440:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1441:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1442:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  91              		.loc 1 1442 0 discriminator 2
  92 0018 0368     		ldr	r3, [r0]
  93 001a CA22     		movs	r2, #202
  94 001c 5A62     		str	r2, [r3, #36]
  95 001e 0368     		ldr	r3, [r0]
  96 0020 5322     		movs	r2, #83
  97 0022 5A62     		str	r2, [r3, #36]
1443:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1444:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
  98              		.loc 1 1444 0 discriminator 2
  99 0024 B1F5807F 		cmp	r1, #256
 100 0028 21D0     		beq	.L13
ARM GAS  /tmp/ccpp6UA4.s 			page 28


1445:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1446:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmA */
1447:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1448:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1449:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1450:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
1451:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1452:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1453:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1454:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1455:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0u)
1456:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1457:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
1458:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1459:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1460:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1461:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1462:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1463:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1464:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1465:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1466:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1467:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1468:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1469:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1470:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1471:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1472:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1473:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmB */
1474:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 101              		.loc 1 1474 0
 102 002a 0268     		ldr	r2, [r0]
 103 002c 9368     		ldr	r3, [r2, #8]
 104 002e 23F40073 		bic	r3, r3, #512
 105 0032 9360     		str	r3, [r2, #8]
1475:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1476:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1477:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 106              		.loc 1 1477 0
 107 0034 0268     		ldr	r2, [r0]
 108 0036 9368     		ldr	r3, [r2, #8]
 109 0038 23F40053 		bic	r3, r3, #8192
 110 003c 9360     		str	r3, [r2, #8]
1478:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1479:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 111              		.loc 1 1479 0
 112 003e FFF7FEFF 		bl	HAL_GetTick
 113              	.LVL3:
 114 0042 0546     		mov	r5, r0
 115              	.LVL4:
 116              	.L9:
1480:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1481:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1482:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0u)
 117              		.loc 1 1482 0
 118 0044 2368     		ldr	r3, [r4]
 119 0046 DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/ccpp6UA4.s 			page 29


 120 0048 13F0020F 		tst	r3, #2
 121 004c 31D1     		bne	.L8
1483:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1484:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 122              		.loc 1 1484 0
 123 004e FFF7FEFF 		bl	HAL_GetTick
 124              	.LVL5:
 125 0052 401B     		subs	r0, r0, r5
 126 0054 B0F57A7F 		cmp	r0, #1000
 127 0058 F4D9     		bls	.L9
1485:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1486:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1487:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 128              		.loc 1 1487 0
 129 005a 2368     		ldr	r3, [r4]
 130 005c FF22     		movs	r2, #255
 131 005e 5A62     		str	r2, [r3, #36]
1488:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1489:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 132              		.loc 1 1489 0
 133 0060 0320     		movs	r0, #3
 134 0062 84F82100 		strb	r0, [r4, #33]
1490:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1491:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1492:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 135              		.loc 1 1492 0
 136 0066 0023     		movs	r3, #0
 137 0068 84F82030 		strb	r3, [r4, #32]
1493:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1494:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 138              		.loc 1 1494 0
 139 006c 38BD     		pop	{r3, r4, r5, pc}
 140              	.LVL6:
 141              	.L13:
1447:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 142              		.loc 1 1447 0
 143 006e 0268     		ldr	r2, [r0]
 144 0070 9368     		ldr	r3, [r2, #8]
 145 0072 23F48073 		bic	r3, r3, #256
 146 0076 9360     		str	r3, [r2, #8]
1450:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 147              		.loc 1 1450 0
 148 0078 0268     		ldr	r2, [r0]
 149 007a 9368     		ldr	r3, [r2, #8]
 150 007c 23F48053 		bic	r3, r3, #4096
 151 0080 9360     		str	r3, [r2, #8]
1452:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 152              		.loc 1 1452 0
 153 0082 FFF7FEFF 		bl	HAL_GetTick
 154              	.LVL7:
 155 0086 0546     		mov	r5, r0
 156              	.LVL8:
 157              	.L6:
1455:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 158              		.loc 1 1455 0
 159 0088 2368     		ldr	r3, [r4]
 160 008a DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/ccpp6UA4.s 			page 30


 161 008c 13F0010F 		tst	r3, #1
 162 0090 0FD1     		bne	.L8
1457:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 163              		.loc 1 1457 0
 164 0092 FFF7FEFF 		bl	HAL_GetTick
 165              	.LVL9:
 166 0096 401B     		subs	r0, r0, r5
 167 0098 B0F57A7F 		cmp	r0, #1000
 168 009c F4D9     		bls	.L6
1460:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 169              		.loc 1 1460 0
 170 009e 2368     		ldr	r3, [r4]
 171 00a0 FF22     		movs	r2, #255
 172 00a2 5A62     		str	r2, [r3, #36]
1462:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 173              		.loc 1 1462 0
 174 00a4 0320     		movs	r0, #3
 175 00a6 84F82100 		strb	r0, [r4, #33]
1465:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 176              		.loc 1 1465 0
 177 00aa 0023     		movs	r3, #0
 178 00ac 84F82030 		strb	r3, [r4, #32]
1467:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 179              		.loc 1 1467 0
 180 00b0 38BD     		pop	{r3, r4, r5, pc}
 181              	.LVL10:
 182              	.L8:
1495:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1496:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1497:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1498:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1499:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 183              		.loc 1 1499 0
 184 00b2 2368     		ldr	r3, [r4]
 185 00b4 FF22     		movs	r2, #255
 186 00b6 5A62     		str	r2, [r3, #36]
1500:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1501:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 187              		.loc 1 1501 0
 188 00b8 0123     		movs	r3, #1
 189 00ba 84F82130 		strb	r3, [r4, #33]
1502:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1503:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1504:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 190              		.loc 1 1504 0
 191 00be 0020     		movs	r0, #0
 192 00c0 84F82000 		strb	r0, [r4, #32]
1505:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1506:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 193              		.loc 1 1506 0
 194 00c4 38BD     		pop	{r3, r4, r5, pc}
 195              	.LVL11:
 196              	.L11:
1437:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 197              		.loc 1 1437 0
 198 00c6 0220     		movs	r0, #2
 199              	.LVL12:
ARM GAS  /tmp/ccpp6UA4.s 			page 31


1507:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 200              		.loc 1 1507 0
 201 00c8 38BD     		pop	{r3, r4, r5, pc}
 202              		.cfi_endproc
 203              	.LFE151:
 205              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 206              		.align	1
 207              		.weak	HAL_RTC_AlarmAEventCallback
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu fpv5-d16
 213              	HAL_RTC_AlarmAEventCallback:
 214              	.LFB154:
1508:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1509:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1510:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1511:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1512:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1513:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1514:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1515:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
1516:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB
1517:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1518:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1519:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1520:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1521:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1522:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1523:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1524:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
1525:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1526:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1527:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1528:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1529:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1530:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1531:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1532:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
1533:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1534:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmA */
1535:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
1536:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1537:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
1538:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
1539:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1540:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Fill the structure with the read parameters */
1541:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_A
1542:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_A
1543:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
1544:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_T
1545:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
1546:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_A
1547:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
1548:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
1549:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1550:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
ARM GAS  /tmp/ccpp6UA4.s 			page 32


1551:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1552:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
1553:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1554:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
1555:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
1556:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1557:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1558:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMBR_HT  | RTC_ALRMBR_HU))  >> RTC_A
1559:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_A
1560:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMBR_ST  | RTC_ALRMBR_SU));
1561:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMBR_PM)                     >> RTC_T
1562:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
1563:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU))   >> RTC_A
1564:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMBR_WDSEL);
1565:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
1566:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1567:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1568:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1569:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1570:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
1571:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
1572:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
1573:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
1574:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1575:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1576:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
1577:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1578:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1579:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1580:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Handle Alarm interrupt request.
1581:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1582:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
1583:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1584:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
1585:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
1586:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1587:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1588:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(DUAL_CORE)
1589:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (HAL_GetCurrentCPUID() == CM7_CPUID)
1590:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1591:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
1592:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1593:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1594:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1595:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
1596:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1597:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
1598:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
1599:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif
1600:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1601:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the AlarmA interrupt source enable status */
1602:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0u)
1603:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1604:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Get the pending status of the AlarmA Interrupt */
1605:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0u)
1606:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1607:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear the AlarmA interrupt pending bit */
ARM GAS  /tmp/ccpp6UA4.s 			page 33


1608:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1609:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1610:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* AlarmA callback */
1611:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1612:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback(hrtc);
1613:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #else
1614:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
1615:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
1616:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1617:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1618:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1619:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the AlarmB interrupt source enable status */
1620:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0u)
1621:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1622:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Get the pending status of the AlarmB Interrupt */
1623:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0u)
1624:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1625:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear the AlarmB interrupt pending bit */
1626:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
1627:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1628:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* AlarmB callback */
1629:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1630:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback(hrtc);
1631:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #else
1632:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
1633:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
1634:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1635:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1636:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1637:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1638:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1639:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1640:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1641:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1642:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Alarm A callback.
1643:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1644:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
1645:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1646:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1647:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 215              		.loc 1 1647 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 220              	.LVL13:
 221 0000 7047     		bx	lr
 222              		.cfi_endproc
 223              	.LFE154:
 225              		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 226              		.align	1
 227              		.global	HAL_RTC_AlarmIRQHandler
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu fpv5-d16
 233              	HAL_RTC_AlarmIRQHandler:
ARM GAS  /tmp/ccpp6UA4.s 			page 34


 234              	.LFB153:
1585:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 235              		.loc 1 1585 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              	.LVL14:
1585:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 240              		.loc 1 1585 0
 241 0000 10B5     		push	{r4, lr}
 242              	.LCFI1:
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 4, -8
 245              		.cfi_offset 14, -4
 246 0002 0446     		mov	r4, r0
1598:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif
 247              		.loc 1 1598 0
 248 0004 4FF40032 		mov	r2, #131072
 249 0008 144B     		ldr	r3, .L21
 250 000a 9A60     		str	r2, [r3, #8]
1602:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 251              		.loc 1 1602 0
 252 000c 0368     		ldr	r3, [r0]
 253 000e 9A68     		ldr	r2, [r3, #8]
 254 0010 12F4805F 		tst	r2, #4096
 255 0014 03D0     		beq	.L16
1605:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 256              		.loc 1 1605 0
 257 0016 DA68     		ldr	r2, [r3, #12]
 258 0018 12F4807F 		tst	r2, #256
 259 001c 0CD1     		bne	.L19
 260              	.LVL15:
 261              	.L16:
1620:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 262              		.loc 1 1620 0
 263 001e 2368     		ldr	r3, [r4]
 264 0020 9A68     		ldr	r2, [r3, #8]
 265 0022 12F4005F 		tst	r2, #8192
 266 0026 03D0     		beq	.L17
1623:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 267              		.loc 1 1623 0
 268 0028 DA68     		ldr	r2, [r3, #12]
 269 002a 12F4007F 		tst	r2, #512
 270 002e 0BD1     		bne	.L20
 271              	.L17:
1638:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 272              		.loc 1 1638 0
 273 0030 0123     		movs	r3, #1
 274 0032 84F82130 		strb	r3, [r4, #33]
 275 0036 10BD     		pop	{r4, pc}
 276              	.LVL16:
 277              	.L19:
1608:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 278              		.loc 1 1608 0
 279 0038 DA68     		ldr	r2, [r3, #12]
 280 003a D2B2     		uxtb	r2, r2
 281 003c 62F4C072 		orn	r2, r2, #384
ARM GAS  /tmp/ccpp6UA4.s 			page 35


 282 0040 DA60     		str	r2, [r3, #12]
1614:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 283              		.loc 1 1614 0
 284 0042 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
 285              	.LVL17:
 286 0046 EAE7     		b	.L16
 287              	.L20:
1626:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 288              		.loc 1 1626 0
 289 0048 DA68     		ldr	r2, [r3, #12]
 290 004a D2B2     		uxtb	r2, r2
 291 004c 62F42072 		orn	r2, r2, #640
 292 0050 DA60     		str	r2, [r3, #12]
1632:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 293              		.loc 1 1632 0
 294 0052 2046     		mov	r0, r4
 295 0054 FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
 296              	.LVL18:
 297 0058 EAE7     		b	.L17
 298              	.L22:
 299 005a 00BF     		.align	2
 300              	.L21:
 301 005c 80000058 		.word	1476395136
 302              		.cfi_endproc
 303              	.LFE153:
 305              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 306              		.align	1
 307              		.global	HAL_RTC_PollForAlarmAEvent
 308              		.syntax unified
 309              		.thumb
 310              		.thumb_func
 311              		.fpu fpv5-d16
 313              	HAL_RTC_PollForAlarmAEvent:
 314              	.LFB155:
1648:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1649:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
1650:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1651:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1652:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1653:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
1654:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1655:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1656:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1657:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Handle AlarmA Polling request.
1658:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1659:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1660:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1661:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1662:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1663:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 315              		.loc 1 1663 0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 0
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 319              	.LVL19:
 320 0000 70B5     		push	{r4, r5, r6, lr}
 321              	.LCFI2:
ARM GAS  /tmp/ccpp6UA4.s 			page 36


 322              		.cfi_def_cfa_offset 16
 323              		.cfi_offset 4, -16
 324              		.cfi_offset 5, -12
 325              		.cfi_offset 6, -8
 326              		.cfi_offset 14, -4
 327 0002 0446     		mov	r4, r0
 328 0004 0D46     		mov	r5, r1
1664:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1665:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart = HAL_GetTick();
 329              		.loc 1 1665 0
 330 0006 FFF7FEFF 		bl	HAL_GetTick
 331              	.LVL20:
 332 000a 0646     		mov	r6, r0
 333              	.LVL21:
 334              	.L25:
1666:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1667:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == 0u)
 335              		.loc 1 1667 0
 336 000c 2368     		ldr	r3, [r4]
 337 000e DA68     		ldr	r2, [r3, #12]
 338 0010 12F4807F 		tst	r2, #256
 339 0014 0DD1     		bne	.L30
1668:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1669:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 340              		.loc 1 1669 0
 341 0016 B5F1FF3F 		cmp	r5, #-1
 342 001a F7D0     		beq	.L25
1670:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1671:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 343              		.loc 1 1671 0
 344 001c FFF7FEFF 		bl	HAL_GetTick
 345              	.LVL22:
 346 0020 801B     		subs	r0, r0, r6
 347 0022 8542     		cmp	r5, r0
 348 0024 01D3     		bcc	.L26
 349              		.loc 1 1671 0 is_stmt 0 discriminator 1
 350 0026 002D     		cmp	r5, #0
 351 0028 F0D1     		bne	.L25
 352              	.L26:
1672:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1673:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 353              		.loc 1 1673 0 is_stmt 1
 354 002a 0320     		movs	r0, #3
 355 002c 84F82100 		strb	r0, [r4, #33]
1674:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 356              		.loc 1 1674 0
 357 0030 70BD     		pop	{r4, r5, r6, pc}
 358              	.LVL23:
 359              	.L30:
1675:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1676:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1677:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1678:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1679:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1680:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 360              		.loc 1 1680 0
 361 0032 DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/ccpp6UA4.s 			page 37


 362 0034 D2B2     		uxtb	r2, r2
 363 0036 62F4C072 		orn	r2, r2, #384
 364 003a DA60     		str	r2, [r3, #12]
1681:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1682:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1683:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 365              		.loc 1 1683 0
 366 003c 0123     		movs	r3, #1
 367 003e 84F82130 		strb	r3, [r4, #33]
1684:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1685:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 368              		.loc 1 1685 0
 369 0042 0020     		movs	r0, #0
1686:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 370              		.loc 1 1686 0
 371 0044 70BD     		pop	{r4, r5, r6, pc}
 372              		.cfi_endproc
 373              	.LFE155:
 375              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 376              		.align	1
 377              		.global	HAL_RTC_WaitForSynchro
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 381              		.fpu fpv5-d16
 383              	HAL_RTC_WaitForSynchro:
 384              	.LFB156:
1687:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1688:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1689:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1690:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1691:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1692:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group4 Peripheral Control functions
1693:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   Peripheral Control functions
1694:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1695:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1696:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1697:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1698:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1699:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     [..]
1700:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     This subsection provides functions allowing to
1701:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1702:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1703:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1704:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1705:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1706:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1707:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1708:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Wait until the RTC Time and Date registers (RTC_TR and RTC_DR) are
1709:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1710:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the
1711:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1712:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar
1713:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes
1714:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         the software must first clear the RSF flag.
1715:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading
1716:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been
ARM GAS  /tmp/ccpp6UA4.s 			page 38


1717:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.
1718:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1719:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1720:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1721:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
1722:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 385              		.loc 1 1722 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              	.LVL24:
 390 0000 38B5     		push	{r3, r4, r5, lr}
 391              	.LCFI3:
 392              		.cfi_def_cfa_offset 16
 393              		.cfi_offset 3, -16
 394              		.cfi_offset 4, -12
 395              		.cfi_offset 5, -8
 396              		.cfi_offset 14, -4
 397 0002 0446     		mov	r4, r0
1723:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1724:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1725:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear RSF flag */
1726:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 398              		.loc 1 1726 0
 399 0004 0268     		ldr	r2, [r0]
 400 0006 D368     		ldr	r3, [r2, #12]
 401 0008 23F0A003 		bic	r3, r3, #160
 402 000c D360     		str	r3, [r2, #12]
1727:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1728:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tickstart = HAL_GetTick();
 403              		.loc 1 1728 0
 404 000e FFF7FEFF 		bl	HAL_GetTick
 405              	.LVL25:
 406 0012 0546     		mov	r5, r0
 407              	.LVL26:
 408              	.L32:
1729:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1730:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1731:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0u)
 409              		.loc 1 1731 0
 410 0014 2368     		ldr	r3, [r4]
 411 0016 DB68     		ldr	r3, [r3, #12]
 412 0018 13F0200F 		tst	r3, #32
 413 001c 07D1     		bne	.L37
1732:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1733:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 414              		.loc 1 1733 0
 415 001e FFF7FEFF 		bl	HAL_GetTick
 416              	.LVL27:
 417 0022 401B     		subs	r0, r0, r5
 418 0024 B0F57A7F 		cmp	r0, #1000
 419 0028 F4D9     		bls	.L32
1734:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1735:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       return HAL_TIMEOUT;
 420              		.loc 1 1735 0
 421 002a 0320     		movs	r0, #3
1736:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
ARM GAS  /tmp/ccpp6UA4.s 			page 39


1737:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1738:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1739:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
1740:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 422              		.loc 1 1740 0
 423 002c 38BD     		pop	{r3, r4, r5, pc}
 424              	.LVL28:
 425              	.L37:
1739:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 426              		.loc 1 1739 0
 427 002e 0020     		movs	r0, #0
 428 0030 38BD     		pop	{r3, r4, r5, pc}
 429              		.cfi_endproc
 430              	.LFE156:
 432              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 433              		.align	1
 434              		.global	HAL_RTC_GetState
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu fpv5-d16
 440              	HAL_RTC_GetState:
 441              	.LFB157:
1741:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1742:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1743:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1744:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1745:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1746:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group5 Peripheral State functions
1747:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   Peripheral State functions
1748:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1749:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1750:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1751:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1752:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1753:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     [..]
1754:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     This subsection provides functions allowing to
1755:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       (+) Get RTC state
1756:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1757:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1758:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1759:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1760:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1761:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Return the RTC handle state.
1762:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1763:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL state
1764:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1765:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
1766:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 442              		.loc 1 1766 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447              	.LVL29:
1767:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Return RTC handle state */
1768:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return hrtc->State;
ARM GAS  /tmp/ccpp6UA4.s 			page 40


 448              		.loc 1 1768 0
 449 0000 90F82100 		ldrb	r0, [r0, #33]	@ zero_extendqisi2
 450              	.LVL30:
1769:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 451              		.loc 1 1769 0
 452 0004 7047     		bx	lr
 453              		.cfi_endproc
 454              	.LFE157:
 456              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 457              		.align	1
 458              		.global	RTC_EnterInitMode
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv5-d16
 464              	RTC_EnterInitMode:
 465              	.LFB158:
1770:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1771:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1772:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1773:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1774:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1775:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1776:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1777:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1778:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1779:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @defgroup RTC_Private_Functions RTC Private functions
1780:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1781:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1782:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1783:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Enter the RTC Initialization mode.
1784:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1785:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1786:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1787:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1788:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1789:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
1790:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 466              		.loc 1 1790 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              	.LVL31:
 471 0000 38B5     		push	{r3, r4, r5, lr}
 472              	.LCFI4:
 473              		.cfi_def_cfa_offset 16
 474              		.cfi_offset 3, -16
 475              		.cfi_offset 4, -12
 476              		.cfi_offset 5, -8
 477              		.cfi_offset 14, -4
1791:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart ;
1792:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1793:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1794:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0u)
 478              		.loc 1 1794 0
 479 0002 0368     		ldr	r3, [r0]
 480 0004 DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/ccpp6UA4.s 			page 41


 481 0006 12F0400F 		tst	r2, #64
 482 000a 01D0     		beq	.L46
1795:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1796:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the Initialization mode */
1797:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
1798:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1799:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1800:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1801:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0u)
1802:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1803:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
1804:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1805:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1806:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1807:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1808:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1809:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1810:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 483              		.loc 1 1810 0
 484 000c 0020     		movs	r0, #0
 485              	.LVL32:
 486 000e 38BD     		pop	{r3, r4, r5, pc}
 487              	.LVL33:
 488              	.L46:
 489 0010 0446     		mov	r4, r0
1797:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 490              		.loc 1 1797 0
 491 0012 4FF0FF32 		mov	r2, #-1
 492 0016 DA60     		str	r2, [r3, #12]
1799:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 493              		.loc 1 1799 0
 494 0018 FFF7FEFF 		bl	HAL_GetTick
 495              	.LVL34:
 496 001c 0546     		mov	r5, r0
 497              	.LVL35:
 498              	.L41:
1801:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 499              		.loc 1 1801 0
 500 001e 2368     		ldr	r3, [r4]
 501 0020 DB68     		ldr	r3, [r3, #12]
 502 0022 13F0400F 		tst	r3, #64
 503 0026 07D1     		bne	.L47
1803:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 504              		.loc 1 1803 0
 505 0028 FFF7FEFF 		bl	HAL_GetTick
 506              	.LVL36:
 507 002c 401B     		subs	r0, r0, r5
 508 002e B0F57A7F 		cmp	r0, #1000
 509 0032 F4D9     		bls	.L41
1805:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 510              		.loc 1 1805 0
 511 0034 0320     		movs	r0, #3
1811:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 512              		.loc 1 1811 0
 513 0036 38BD     		pop	{r3, r4, r5, pc}
 514              	.LVL37:
 515              	.L47:
ARM GAS  /tmp/ccpp6UA4.s 			page 42


1810:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 516              		.loc 1 1810 0
 517 0038 0020     		movs	r0, #0
 518 003a 38BD     		pop	{r3, r4, r5, pc}
 519              		.cfi_endproc
 520              	.LFE158:
 522              		.section	.text.HAL_RTC_Init,"ax",%progbits
 523              		.align	1
 524              		.global	HAL_RTC_Init
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 528              		.fpu fpv5-d16
 530              	HAL_RTC_Init:
 531              	.LFB141:
 224:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 532              		.loc 1 224 0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 0
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 536              	.LVL38:
 228:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 537              		.loc 1 228 0
 538 0000 0028     		cmp	r0, #0
 539 0002 51D0     		beq	.L52
 224:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 540              		.loc 1 224 0
 541 0004 38B5     		push	{r3, r4, r5, lr}
 542              	.LCFI5:
 543              		.cfi_def_cfa_offset 16
 544              		.cfi_offset 3, -16
 545              		.cfi_offset 4, -12
 546              		.cfi_offset 5, -8
 547              		.cfi_offset 14, -4
 548 0006 0446     		mov	r4, r0
 549              	.LVL39:
 269:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 550              		.loc 1 269 0
 551 0008 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 552 000c 002B     		cmp	r3, #0
 553 000e 3ED0     		beq	.L57
 554              	.LVL40:
 555              	.L50:
 280:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 556              		.loc 1 280 0
 557 0010 0223     		movs	r3, #2
 558 0012 84F82130 		strb	r3, [r4, #33]
 283:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 559              		.loc 1 283 0
 560 0016 2368     		ldr	r3, [r4]
 561 0018 CA22     		movs	r2, #202
 562 001a 5A62     		str	r2, [r3, #36]
 563 001c 2368     		ldr	r3, [r4]
 564 001e 5322     		movs	r2, #83
 565 0020 5A62     		str	r2, [r3, #36]
 286:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 566              		.loc 1 286 0
ARM GAS  /tmp/ccpp6UA4.s 			page 43


 567 0022 2046     		mov	r0, r4
 568 0024 FFF7FEFF 		bl	RTC_EnterInitMode
 569              	.LVL41:
 570 0028 0246     		mov	r2, r0
 571 002a 0028     		cmp	r0, #0
 572 002c 34D1     		bne	.L58
 299:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC_CR FMT, OSEL and POL Bits to specified values */
 573              		.loc 1 299 0
 574 002e 2168     		ldr	r1, [r4]
 575 0030 8868     		ldr	r0, [r1, #8]
 576 0032 1F4B     		ldr	r3, .L59
 577 0034 0340     		ands	r3, r3, r0
 578 0036 8B60     		str	r3, [r1, #8]
 301:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 579              		.loc 1 301 0
 580 0038 2068     		ldr	r0, [r4]
 581 003a 8168     		ldr	r1, [r0, #8]
 582 003c 6368     		ldr	r3, [r4, #4]
 583 003e 2569     		ldr	r5, [r4, #16]
 584 0040 2B43     		orrs	r3, r3, r5
 585 0042 A569     		ldr	r5, [r4, #24]
 586 0044 2B43     		orrs	r3, r3, r5
 587 0046 0B43     		orrs	r3, r3, r1
 588 0048 8360     		str	r3, [r0, #8]
 304:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 589              		.loc 1 304 0
 590 004a 2368     		ldr	r3, [r4]
 591 004c E168     		ldr	r1, [r4, #12]
 592 004e 1961     		str	r1, [r3, #16]
 305:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 593              		.loc 1 305 0
 594 0050 2168     		ldr	r1, [r4]
 595 0052 0B69     		ldr	r3, [r1, #16]
 596 0054 A068     		ldr	r0, [r4, #8]
 597 0056 43EA0043 		orr	r3, r3, r0, lsl #16
 598 005a 0B61     		str	r3, [r1, #16]
 308:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 599              		.loc 1 308 0
 600 005c 2168     		ldr	r1, [r4]
 601 005e CB68     		ldr	r3, [r1, #12]
 602 0060 23F08003 		bic	r3, r3, #128
 603 0064 CB60     		str	r3, [r1, #12]
 311:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC_OR ALARMOUTTYPE and OUT_RMP Bits to specified values */
 604              		.loc 1 311 0
 605 0066 2168     		ldr	r1, [r4]
 606 0068 CB6C     		ldr	r3, [r1, #76]
 607 006a 23F00303 		bic	r3, r3, #3
 608 006e CB64     		str	r3, [r1, #76]
 313:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 609              		.loc 1 313 0
 610 0070 2068     		ldr	r0, [r4]
 611 0072 C36C     		ldr	r3, [r0, #76]
 612 0074 E169     		ldr	r1, [r4, #28]
 613 0076 6569     		ldr	r5, [r4, #20]
 614 0078 2943     		orrs	r1, r1, r5
 615 007a 0B43     		orrs	r3, r3, r1
 616 007c C364     		str	r3, [r0, #76]
ARM GAS  /tmp/ccpp6UA4.s 			page 44


 316:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 617              		.loc 1 316 0
 618 007e 2368     		ldr	r3, [r4]
 619 0080 FF21     		movs	r1, #255
 620 0082 5962     		str	r1, [r3, #36]
 319:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 621              		.loc 1 319 0
 622 0084 0123     		movs	r3, #1
 623 0086 84F82130 		strb	r3, [r4, #33]
 624              	.LVL42:
 625              	.L49:
 325:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 626              		.loc 1 325 0
 627 008a 1046     		mov	r0, r2
 628 008c 38BD     		pop	{r3, r4, r5, pc}
 629              	.LVL43:
 630              	.L57:
 272:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 631              		.loc 1 272 0
 632 008e 80F82030 		strb	r3, [r0, #32]
 275:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 633              		.loc 1 275 0
 634 0092 FFF7FEFF 		bl	HAL_RTC_MspInit
 635              	.LVL44:
 636 0096 BBE7     		b	.L50
 637              	.L58:
 289:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 638              		.loc 1 289 0
 639 0098 2368     		ldr	r3, [r4]
 640 009a FF22     		movs	r2, #255
 641 009c 5A62     		str	r2, [r3, #36]
 292:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 642              		.loc 1 292 0
 643 009e 0423     		movs	r3, #4
 644 00a0 84F82130 		strb	r3, [r4, #33]
 645              	.LVL45:
 294:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 646              		.loc 1 294 0
 647 00a4 0122     		movs	r2, #1
 648 00a6 F0E7     		b	.L49
 649              	.LVL46:
 650              	.L52:
 651              	.LCFI6:
 652              		.cfi_def_cfa_offset 0
 653              		.cfi_restore 3
 654              		.cfi_restore 4
 655              		.cfi_restore 5
 656              		.cfi_restore 14
 225:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 657              		.loc 1 225 0
 658 00a8 0122     		movs	r2, #1
 659              	.LVL47:
 325:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 660              		.loc 1 325 0
 661 00aa 1046     		mov	r0, r2
 662              	.LVL48:
 663 00ac 7047     		bx	lr
ARM GAS  /tmp/ccpp6UA4.s 			page 45


 664              	.L60:
 665 00ae 00BF     		.align	2
 666              	.L59:
 667 00b0 BFFF8FFF 		.word	-7340097
 668              		.cfi_endproc
 669              	.LFE141:
 671              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 672              		.align	1
 673              		.global	HAL_RTC_DeInit
 674              		.syntax unified
 675              		.thumb
 676              		.thumb_func
 677              		.fpu fpv5-d16
 679              	HAL_RTC_DeInit:
 680              	.LFB142:
 334:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 681              		.loc 1 334 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              	.LVL49:
 686 0000 70B5     		push	{r4, r5, r6, lr}
 687              	.LCFI7:
 688              		.cfi_def_cfa_offset 16
 689              		.cfi_offset 4, -16
 690              		.cfi_offset 5, -12
 691              		.cfi_offset 6, -8
 692              		.cfi_offset 14, -4
 693              	.LVL50:
 339:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 694              		.loc 1 339 0
 695 0002 0028     		cmp	r0, #0
 696 0004 75D0     		beq	.L69
 697 0006 0446     		mov	r4, r0
 698              	.LVL51:
 347:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 699              		.loc 1 347 0
 700 0008 0223     		movs	r3, #2
 701 000a 80F82130 		strb	r3, [r0, #33]
 350:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 702              		.loc 1 350 0
 703 000e 0368     		ldr	r3, [r0]
 704 0010 CA22     		movs	r2, #202
 705 0012 5A62     		str	r2, [r3, #36]
 706 0014 0368     		ldr	r3, [r0]
 707 0016 5322     		movs	r2, #83
 708 0018 5A62     		str	r2, [r3, #36]
 353:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 709              		.loc 1 353 0
 710 001a FFF7FEFF 		bl	RTC_EnterInitMode
 711              	.LVL52:
 712 001e 0646     		mov	r6, r0
 713 0020 0028     		cmp	r0, #0
 714 0022 2CD0     		beq	.L63
 356:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 715              		.loc 1 356 0
 716 0024 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccpp6UA4.s 			page 46


 717 0026 FF22     		movs	r2, #255
 718 0028 5A62     		str	r2, [r3, #36]
 359:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 719              		.loc 1 359 0
 720 002a 0423     		movs	r3, #4
 721 002c 84F82130 		strb	r3, [r4, #33]
 722              	.LVL53:
 361:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 723              		.loc 1 361 0
 724 0030 0126     		movs	r6, #1
 725              	.LVL54:
 726              	.L64:
 389:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 727              		.loc 1 389 0
 728 0032 0EBB     		cbnz	r6, .L68
 392:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset other RTC registers */
 729              		.loc 1 392 0
 730 0034 2268     		ldr	r2, [r4]
 731 0036 9368     		ldr	r3, [r2, #8]
 732 0038 0023     		movs	r3, #0
 733 003a 9360     		str	r3, [r2, #8]
 394:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 734              		.loc 1 394 0
 735 003c 2268     		ldr	r2, [r4]
 736 003e 4FF6FF71 		movw	r1, #65535
 737 0042 5161     		str	r1, [r2, #20]
 395:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMAR = 0x00000000u;
 738              		.loc 1 395 0
 739 0044 2268     		ldr	r2, [r4]
 740 0046 2C49     		ldr	r1, .L73
 741 0048 1161     		str	r1, [r2, #16]
 396:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMBR = 0x00000000u;
 742              		.loc 1 396 0
 743 004a 2268     		ldr	r2, [r4]
 744 004c D361     		str	r3, [r2, #28]
 397:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->SHIFTR = 0x00000000u;
 745              		.loc 1 397 0
 746 004e 2268     		ldr	r2, [r4]
 747 0050 1362     		str	r3, [r2, #32]
 398:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CALR = 0x00000000u;
 748              		.loc 1 398 0
 749 0052 2268     		ldr	r2, [r4]
 750 0054 D362     		str	r3, [r2, #44]
 399:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMASSR = 0x00000000u;
 751              		.loc 1 399 0
 752 0056 2268     		ldr	r2, [r4]
 753 0058 D363     		str	r3, [r2, #60]
 400:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->ALRMBSSR = 0x00000000u;
 754              		.loc 1 400 0
 755 005a 2268     		ldr	r2, [r4]
 756 005c 5364     		str	r3, [r2, #68]
 401:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 757              		.loc 1 401 0
 758 005e 2268     		ldr	r2, [r4]
 759 0060 9364     		str	r3, [r2, #72]
 404:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 760              		.loc 1 404 0
ARM GAS  /tmp/ccpp6UA4.s 			page 47


 761 0062 2268     		ldr	r2, [r4]
 762 0064 1364     		str	r3, [r2, #64]
 407:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 763              		.loc 1 407 0
 764 0066 2268     		ldr	r2, [r4]
 765 0068 D364     		str	r3, [r2, #76]
 410:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 766              		.loc 1 410 0
 767 006a 2268     		ldr	r2, [r4]
 768 006c D360     		str	r3, [r2, #12]
 413:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 769              		.loc 1 413 0
 770 006e 2368     		ldr	r3, [r4]
 771 0070 9B68     		ldr	r3, [r3, #8]
 772 0072 13F0200F 		tst	r3, #32
 773 0076 23D0     		beq	.L71
 774              	.LVL55:
 775              	.L68:
 427:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 776              		.loc 1 427 0
 777 0078 7EB3     		cbz	r6, .L72
 778              	.LVL56:
 779              	.L62:
 455:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 780              		.loc 1 455 0
 781 007a 3046     		mov	r0, r6
 782 007c 70BD     		pop	{r4, r5, r6, pc}
 783              	.LVL57:
 784              	.L63:
 366:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 785              		.loc 1 366 0
 786 007e 2368     		ldr	r3, [r4]
 787 0080 0022     		movs	r2, #0
 788 0082 1A60     		str	r2, [r3]
 367:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset All CR bits except CR[2:0] */
 789              		.loc 1 367 0
 790 0084 2368     		ldr	r3, [r4]
 791 0086 42F20112 		movw	r2, #8449
 792 008a 5A60     		str	r2, [r3, #4]
 369:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 793              		.loc 1 369 0
 794 008c 2268     		ldr	r2, [r4]
 795 008e 9368     		ldr	r3, [r2, #8]
 796 0090 03F00703 		and	r3, r3, #7
 797 0094 9360     		str	r3, [r2, #8]
 371:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 798              		.loc 1 371 0
 799 0096 FFF7FEFF 		bl	HAL_GetTick
 800              	.LVL58:
 801 009a 0546     		mov	r5, r0
 802              	.LVL59:
 803              	.L66:
 374:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 804              		.loc 1 374 0
 805 009c 2368     		ldr	r3, [r4]
 806 009e DB68     		ldr	r3, [r3, #12]
 807 00a0 13F0040F 		tst	r3, #4
ARM GAS  /tmp/ccpp6UA4.s 			page 48


 808 00a4 C5D1     		bne	.L64
 376:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         {
 809              		.loc 1 376 0
 810 00a6 FFF7FEFF 		bl	HAL_GetTick
 811              	.LVL60:
 812 00aa 401B     		subs	r0, r0, r5
 813 00ac B0F57A7F 		cmp	r0, #1000
 814 00b0 F4D9     		bls	.L66
 379:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 815              		.loc 1 379 0
 816 00b2 2368     		ldr	r3, [r4]
 817 00b4 FF22     		movs	r2, #255
 818 00b6 5A62     		str	r2, [r3, #36]
 382:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 819              		.loc 1 382 0
 820 00b8 0326     		movs	r6, #3
 821              	.LVL61:
 822 00ba 84F82160 		strb	r6, [r4, #33]
 823              	.LVL62:
 824 00be EDE7     		b	.L66
 825              	.LVL63:
 826              	.L71:
 415:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         {
 827              		.loc 1 415 0
 828 00c0 2046     		mov	r0, r4
 829 00c2 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 830              	.LVL64:
 831 00c6 0028     		cmp	r0, #0
 832 00c8 D6D0     		beq	.L68
 418:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 833              		.loc 1 418 0
 834 00ca 2368     		ldr	r3, [r4]
 835 00cc FF22     		movs	r2, #255
 836 00ce 5A62     		str	r2, [r3, #36]
 420:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 837              		.loc 1 420 0
 838 00d0 0423     		movs	r3, #4
 839 00d2 84F82130 		strb	r3, [r4, #33]
 840              	.LVL65:
 422:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         }
 841              		.loc 1 422 0
 842 00d6 0126     		movs	r6, #1
 843 00d8 CEE7     		b	.L68
 844              	.LVL66:
 845              	.L72:
 430:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 846              		.loc 1 430 0
 847 00da 2368     		ldr	r3, [r4]
 848 00dc FF22     		movs	r2, #255
 849 00de 5A62     		str	r2, [r3, #36]
 443:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 850              		.loc 1 443 0
 851 00e0 2046     		mov	r0, r4
 852 00e2 FFF7FEFF 		bl	HAL_RTC_MspDeInit
 853              	.LVL67:
 446:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 854              		.loc 1 446 0
ARM GAS  /tmp/ccpp6UA4.s 			page 49


 855 00e6 0023     		movs	r3, #0
 856 00e8 84F82130 		strb	r3, [r4, #33]
 449:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 857              		.loc 1 449 0
 858 00ec 84F82030 		strb	r3, [r4, #32]
 859 00f0 C3E7     		b	.L62
 860              	.LVL68:
 861              	.L69:
 335:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t          tickstart;
 862              		.loc 1 335 0
 863 00f2 0126     		movs	r6, #1
 864 00f4 C1E7     		b	.L62
 865              	.L74:
 866 00f6 00BF     		.align	2
 867              	.L73:
 868 00f8 FF007F00 		.word	8323327
 869              		.cfi_endproc
 870              	.LFE142:
 872              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 873              		.align	1
 874              		.global	RTC_ByteToBcd2
 875              		.syntax unified
 876              		.thumb
 877              		.thumb_func
 878              		.fpu fpv5-d16
 880              	RTC_ByteToBcd2:
 881              	.LFB159:
1812:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1813:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1814:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1815:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Convert a 2 digit decimal to BCD format.
1816:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Value Byte to be converted
1817:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval Converted byte
1818:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1819:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
1820:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 882              		.loc 1 1820 0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 0
 885              		@ frame_needed = 0, uses_anonymous_args = 0
 886              		@ link register save eliminated.
 887              	.LVL69:
1821:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t bcdhigh = 0u;
 888              		.loc 1 1821 0
 889 0000 0023     		movs	r3, #0
1822:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint8_t Param = Value;
1823:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1824:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while(Param >= 10u)
 890              		.loc 1 1824 0
 891 0002 02E0     		b	.L76
 892              	.LVL70:
 893              	.L77:
1825:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1826:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     bcdhigh++;
 894              		.loc 1 1826 0
 895 0004 0133     		adds	r3, r3, #1
 896              	.LVL71:
ARM GAS  /tmp/ccpp6UA4.s 			page 50


1827:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     Param -= 10u;
 897              		.loc 1 1827 0
 898 0006 0A38     		subs	r0, r0, #10
 899              	.LVL72:
 900 0008 C0B2     		uxtb	r0, r0
 901              	.LVL73:
 902              	.L76:
1824:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 903              		.loc 1 1824 0
 904 000a 0928     		cmp	r0, #9
 905 000c FAD8     		bhi	.L77
1828:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1829:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1830:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return  ((uint8_t)(bcdhigh << 4u) | Param);
 906              		.loc 1 1830 0
 907 000e 1B01     		lsls	r3, r3, #4
 908              	.LVL74:
 909 0010 DBB2     		uxtb	r3, r3
1831:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 910              		.loc 1 1831 0
 911 0012 1843     		orrs	r0, r0, r3
 912              	.LVL75:
 913 0014 7047     		bx	lr
 914              		.cfi_endproc
 915              	.LFE159:
 917              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 918              		.align	1
 919              		.global	HAL_RTC_SetTime
 920              		.syntax unified
 921              		.thumb
 922              		.thumb_func
 923              		.fpu fpv5-d16
 925              	HAL_RTC_SetTime:
 926              	.LFB145:
 723:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 927              		.loc 1 723 0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 931              	.LVL76:
 932 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 933              	.LCFI8:
 934              		.cfi_def_cfa_offset 24
 935              		.cfi_offset 3, -24
 936              		.cfi_offset 4, -20
 937              		.cfi_offset 5, -16
 938              		.cfi_offset 6, -12
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 732:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 941              		.loc 1 732 0
 942 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 943 0006 012B     		cmp	r3, #1
 944 0008 7DD0     		beq	.L86
 945 000a 0E46     		mov	r6, r1
 946 000c 0446     		mov	r4, r0
 732:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccpp6UA4.s 			page 51


 947              		.loc 1 732 0 is_stmt 0 discriminator 2
 948 000e 0123     		movs	r3, #1
 949 0010 80F82030 		strb	r3, [r0, #32]
 734:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 950              		.loc 1 734 0 is_stmt 1 discriminator 2
 951 0014 0223     		movs	r3, #2
 952 0016 80F82130 		strb	r3, [r0, #33]
 736:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 953              		.loc 1 736 0 discriminator 2
 954 001a 002A     		cmp	r2, #0
 955 001c 46D1     		bne	.L80
 738:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 956              		.loc 1 738 0
 957 001e 0368     		ldr	r3, [r0]
 958 0020 9B68     		ldr	r3, [r3, #8]
 959 0022 13F0400F 		tst	r3, #64
 960 0026 01D1     		bne	.L81
 745:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 961              		.loc 1 745 0
 962 0028 0023     		movs	r3, #0
 963 002a CB70     		strb	r3, [r1, #3]
 964              	.L81:
 751:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 965              		.loc 1 751 0
 966 002c 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 967              	.LVL77:
 968 002e FFF7FEFF 		bl	RTC_ByteToBcd2
 969              	.LVL78:
 970 0032 0504     		lsls	r5, r0, #16
 752:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 971              		.loc 1 752 0
 972 0034 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 973 0036 FFF7FEFF 		bl	RTC_ByteToBcd2
 974              	.LVL79:
 751:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 975              		.loc 1 751 0
 976 003a 45EA0025 		orr	r5, r5, r0, lsl #8
 753:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 977              		.loc 1 753 0
 978 003e B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 979 0040 FFF7FEFF 		bl	RTC_ByteToBcd2
 980              	.LVL80:
 752:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 981              		.loc 1 752 0
 982 0044 0543     		orrs	r5, r5, r0
 754:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 983              		.loc 1 754 0
 984 0046 F078     		ldrb	r0, [r6, #3]	@ zero_extendqisi2
 751:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                         ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 985              		.loc 1 751 0
 986 0048 45EA8055 		orr	r5, r5, r0, lsl #22
 987              	.LVL81:
 988              	.L82:
 777:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 989              		.loc 1 777 0
 990 004c 2368     		ldr	r3, [r4]
 991 004e CA22     		movs	r2, #202
ARM GAS  /tmp/ccpp6UA4.s 			page 52


 992 0050 5A62     		str	r2, [r3, #36]
 993 0052 2368     		ldr	r3, [r4]
 994 0054 5322     		movs	r2, #83
 995 0056 5A62     		str	r2, [r3, #36]
 780:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 996              		.loc 1 780 0
 997 0058 2046     		mov	r0, r4
 998 005a FFF7FEFF 		bl	RTC_EnterInitMode
 999              	.LVL82:
 1000 005e 0746     		mov	r7, r0
 1001 0060 0028     		cmp	r0, #0
 1002 0062 35D1     		bne	.L88
 796:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1003              		.loc 1 796 0
 1004 0064 2268     		ldr	r2, [r4]
 1005 0066 294B     		ldr	r3, .L90
 1006 0068 2B40     		ands	r3, r3, r5
 1007 006a 1360     		str	r3, [r2]
 799:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1008              		.loc 1 799 0
 1009 006c 2268     		ldr	r2, [r4]
 1010 006e 9368     		ldr	r3, [r2, #8]
 1011 0070 23F48023 		bic	r3, r3, #262144
 1012 0074 9360     		str	r3, [r2, #8]
 802:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1013              		.loc 1 802 0
 1014 0076 2168     		ldr	r1, [r4]
 1015 0078 8B68     		ldr	r3, [r1, #8]
 1016 007a F268     		ldr	r2, [r6, #12]
 1017 007c 3069     		ldr	r0, [r6, #16]
 1018 007e 0243     		orrs	r2, r2, r0
 1019 0080 1343     		orrs	r3, r3, r2
 1020 0082 8B60     		str	r3, [r1, #8]
 805:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1021              		.loc 1 805 0
 1022 0084 2268     		ldr	r2, [r4]
 1023 0086 D368     		ldr	r3, [r2, #12]
 1024 0088 23F08003 		bic	r3, r3, #128
 1025 008c D360     		str	r3, [r2, #12]
 808:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1026              		.loc 1 808 0
 1027 008e 2368     		ldr	r3, [r4]
 1028 0090 9B68     		ldr	r3, [r3, #8]
 1029 0092 13F0200F 		tst	r3, #32
 1030 0096 26D0     		beq	.L89
 1031              	.L85:
 825:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1032              		.loc 1 825 0
 1033 0098 2368     		ldr	r3, [r4]
 1034 009a FF22     		movs	r2, #255
 1035 009c 5A62     		str	r2, [r3, #36]
 827:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1036              		.loc 1 827 0
 1037 009e 0123     		movs	r3, #1
 1038 00a0 84F82130 		strb	r3, [r4, #33]
 829:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1039              		.loc 1 829 0
ARM GAS  /tmp/ccpp6UA4.s 			page 53


 1040 00a4 0023     		movs	r3, #0
 1041 00a6 84F82030 		strb	r3, [r4, #32]
 831:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1042              		.loc 1 831 0
 1043 00aa 2DE0     		b	.L79
 1044              	.LVL83:
 1045              	.L80:
 758:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1046              		.loc 1 758 0
 1047 00ac 0368     		ldr	r3, [r0]
 1048 00ae 9B68     		ldr	r3, [r3, #8]
 1049 00b0 13F0400F 		tst	r3, #64
 1050 00b4 01D1     		bne	.L83
 765:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 1051              		.loc 1 765 0
 1052 00b6 0023     		movs	r3, #0
 1053 00b8 CB70     		strb	r3, [r1, #3]
 1054              	.L83:
 770:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 1055              		.loc 1 770 0
 1056 00ba 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 1057              	.LVL84:
 771:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sTime->Seconds)                       | \
 1058              		.loc 1 771 0
 1059 00bc 7578     		ldrb	r5, [r6, #1]	@ zero_extendqisi2
 1060 00be 2D02     		lsls	r5, r5, #8
 770:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 1061              		.loc 1 770 0
 1062 00c0 45EA0045 		orr	r5, r5, r0, lsl #16
 772:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 1063              		.loc 1 772 0
 1064 00c4 B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 771:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sTime->Seconds)                       | \
 1065              		.loc 1 771 0
 1066 00c6 0543     		orrs	r5, r5, r0
 773:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1067              		.loc 1 773 0
 1068 00c8 F078     		ldrb	r0, [r6, #3]	@ zero_extendqisi2
 770:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 1069              		.loc 1 770 0
 1070 00ca 45EA8055 		orr	r5, r5, r0, lsl #22
 1071              	.LVL85:
 1072 00ce BDE7     		b	.L82
 1073              	.LVL86:
 1074              	.L88:
 783:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1075              		.loc 1 783 0
 1076 00d0 2368     		ldr	r3, [r4]
 1077 00d2 FF22     		movs	r2, #255
 1078 00d4 5A62     		str	r2, [r3, #36]
 786:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1079              		.loc 1 786 0
 1080 00d6 0423     		movs	r3, #4
 1081 00d8 84F82130 		strb	r3, [r4, #33]
 789:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1082              		.loc 1 789 0
 1083 00dc 0023     		movs	r3, #0
ARM GAS  /tmp/ccpp6UA4.s 			page 54


 1084 00de 84F82030 		strb	r3, [r4, #32]
 791:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1085              		.loc 1 791 0
 1086 00e2 0127     		movs	r7, #1
 1087 00e4 10E0     		b	.L79
 1088              	.L89:
 810:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1089              		.loc 1 810 0
 1090 00e6 2046     		mov	r0, r4
 1091 00e8 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1092              	.LVL87:
 1093 00ec 0028     		cmp	r0, #0
 1094 00ee D3D0     		beq	.L85
 813:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1095              		.loc 1 813 0
 1096 00f0 2368     		ldr	r3, [r4]
 1097 00f2 FF22     		movs	r2, #255
 1098 00f4 5A62     		str	r2, [r3, #36]
 815:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1099              		.loc 1 815 0
 1100 00f6 0423     		movs	r3, #4
 1101 00f8 84F82130 		strb	r3, [r4, #33]
 818:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1102              		.loc 1 818 0
 1103 00fc 0023     		movs	r3, #0
 1104 00fe 84F82030 		strb	r3, [r4, #32]
 820:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 1105              		.loc 1 820 0
 1106 0102 0127     		movs	r7, #1
 1107 0104 00E0     		b	.L79
 1108              	.LVL88:
 1109              	.L86:
 732:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1110              		.loc 1 732 0
 1111 0106 0227     		movs	r7, #2
 1112              	.LVL89:
 1113              	.L79:
 833:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1114              		.loc 1 833 0
 1115 0108 3846     		mov	r0, r7
 1116 010a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1117              	.L91:
 1118              		.align	2
 1119              	.L90:
 1120 010c 7F7F7F00 		.word	8355711
 1121              		.cfi_endproc
 1122              	.LFE145:
 1124              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 1125              		.align	1
 1126              		.global	HAL_RTC_SetDate
 1127              		.syntax unified
 1128              		.thumb
 1129              		.thumb_func
 1130              		.fpu fpv5-d16
 1132              	HAL_RTC_SetDate:
 1133              	.LFB147:
 901:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
ARM GAS  /tmp/ccpp6UA4.s 			page 55


 1134              		.loc 1 901 0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 1138              	.LVL90:
 1139 0000 70B5     		push	{r4, r5, r6, lr}
 1140              	.LCFI9:
 1141              		.cfi_def_cfa_offset 16
 1142              		.cfi_offset 4, -16
 1143              		.cfi_offset 5, -12
 1144              		.cfi_offset 6, -8
 1145              		.cfi_offset 14, -4
 908:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1146              		.loc 1 908 0
 1147 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1148 0006 012B     		cmp	r3, #1
 1149 0008 6BD0     		beq	.L99
 908:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1150              		.loc 1 908 0 is_stmt 0 discriminator 2
 1151 000a 0123     		movs	r3, #1
 1152 000c 80F82030 		strb	r3, [r0, #32]
 910:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1153              		.loc 1 910 0 is_stmt 1 discriminator 2
 1154 0010 0223     		movs	r3, #2
 1155 0012 80F82130 		strb	r3, [r0, #33]
 912:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1156              		.loc 1 912 0 discriminator 2
 1157 0016 3AB9     		cbnz	r2, .L94
 912:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1158              		.loc 1 912 0 is_stmt 0 discriminator 1
 1159 0018 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1160 001a 13F0100F 		tst	r3, #16
 1161 001e 03D0     		beq	.L94
 914:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1162              		.loc 1 914 0 is_stmt 1
 1163 0020 03F0EF03 		and	r3, r3, #239
 1164 0024 0A33     		adds	r3, r3, #10
 1165 0026 4B70     		strb	r3, [r1, #1]
 1166              	.L94:
 1167 0028 0E46     		mov	r6, r1
 1168 002a 0446     		mov	r4, r0
 919:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1169              		.loc 1 919 0
 1170 002c 002A     		cmp	r2, #0
 1171 002e 32D1     		bne	.L95
 925:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1172              		.loc 1 925 0
 1173 0030 C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 1174              	.LVL91:
 1175 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 1176              	.LVL92:
 1177 0036 0504     		lsls	r5, r0, #16
 926:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 1178              		.loc 1 926 0
 1179 0038 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1180 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 1181              	.LVL93:
ARM GAS  /tmp/ccpp6UA4.s 			page 56


 925:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1182              		.loc 1 925 0
 1183 003e 45EA0025 		orr	r5, r5, r0, lsl #8
 927:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 1184              		.loc 1 927 0
 1185 0042 B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 1186 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 1187              	.LVL94:
 926:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 1188              		.loc 1 926 0
 1189 0048 0543     		orrs	r5, r5, r0
 928:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1190              		.loc 1 928 0
 1191 004a 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 925:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1192              		.loc 1 925 0
 1193 004c 45EA4035 		orr	r5, r5, r0, lsl #13
 1194              	.LVL95:
 1195              	.L96:
 943:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1196              		.loc 1 943 0
 1197 0050 2368     		ldr	r3, [r4]
 1198 0052 CA22     		movs	r2, #202
 1199 0054 5A62     		str	r2, [r3, #36]
 1200 0056 2368     		ldr	r3, [r4]
 1201 0058 5322     		movs	r2, #83
 1202 005a 5A62     		str	r2, [r3, #36]
 946:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1203              		.loc 1 946 0
 1204 005c 2046     		mov	r0, r4
 1205 005e FFF7FEFF 		bl	RTC_EnterInitMode
 1206              	.LVL96:
 1207 0062 0646     		mov	r6, r0
 1208              	.LVL97:
 1209 0064 10BB     		cbnz	r0, .L101
 962:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1210              		.loc 1 962 0
 1211 0066 2268     		ldr	r2, [r4]
 1212 0068 1F4B     		ldr	r3, .L103
 1213 006a 2B40     		ands	r3, r3, r5
 1214 006c 5360     		str	r3, [r2, #4]
 965:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1215              		.loc 1 965 0
 1216 006e 2268     		ldr	r2, [r4]
 1217 0070 D368     		ldr	r3, [r2, #12]
 1218 0072 23F08003 		bic	r3, r3, #128
 1219 0076 D360     		str	r3, [r2, #12]
 968:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1220              		.loc 1 968 0
 1221 0078 2368     		ldr	r3, [r4]
 1222 007a 9B68     		ldr	r3, [r3, #8]
 1223 007c 13F0200F 		tst	r3, #32
 1224 0080 1FD0     		beq	.L102
 1225              	.L98:
 985:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1226              		.loc 1 985 0
 1227 0082 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccpp6UA4.s 			page 57


 1228 0084 FF22     		movs	r2, #255
 1229 0086 5A62     		str	r2, [r3, #36]
 987:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1230              		.loc 1 987 0
 1231 0088 0123     		movs	r3, #1
 1232 008a 84F82130 		strb	r3, [r4, #33]
 990:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1233              		.loc 1 990 0
 1234 008e 0023     		movs	r3, #0
 1235 0090 84F82030 		strb	r3, [r4, #32]
 992:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1236              		.loc 1 992 0
 1237 0094 26E0     		b	.L93
 1238              	.LVL98:
 1239              	.L95:
 936:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 1240              		.loc 1 936 0
 1241 0096 C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 1242              	.LVL99:
 937:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t) sDate->Date)                    | \
 1243              		.loc 1 937 0
 1244 0098 4D78     		ldrb	r5, [r1, #1]	@ zero_extendqisi2
 1245 009a 2D02     		lsls	r5, r5, #8
 936:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 1246              		.loc 1 936 0
 1247 009c 45EA0045 		orr	r5, r5, r0, lsl #16
 938:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 1248              		.loc 1 938 0
 1249 00a0 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
 937:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t) sDate->Date)                    | \
 1250              		.loc 1 937 0
 1251 00a2 0543     		orrs	r5, r5, r0
 939:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1252              		.loc 1 939 0
 1253 00a4 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 936:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 1254              		.loc 1 936 0
 1255 00a6 45EA4035 		orr	r5, r5, r0, lsl #13
 1256              	.LVL100:
 1257 00aa D1E7     		b	.L96
 1258              	.LVL101:
 1259              	.L101:
 949:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1260              		.loc 1 949 0
 1261 00ac 2368     		ldr	r3, [r4]
 1262 00ae FF22     		movs	r2, #255
 1263 00b0 5A62     		str	r2, [r3, #36]
 952:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1264              		.loc 1 952 0
 1265 00b2 0423     		movs	r3, #4
 1266 00b4 84F82130 		strb	r3, [r4, #33]
 955:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1267              		.loc 1 955 0
 1268 00b8 0023     		movs	r3, #0
 1269 00ba 84F82030 		strb	r3, [r4, #32]
 957:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1270              		.loc 1 957 0
ARM GAS  /tmp/ccpp6UA4.s 			page 58


 1271 00be 0126     		movs	r6, #1
 1272 00c0 10E0     		b	.L93
 1273              	.L102:
 970:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1274              		.loc 1 970 0
 1275 00c2 2046     		mov	r0, r4
 1276 00c4 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1277              	.LVL102:
 1278 00c8 0028     		cmp	r0, #0
 1279 00ca DAD0     		beq	.L98
 973:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1280              		.loc 1 973 0
 1281 00cc 2368     		ldr	r3, [r4]
 1282 00ce FF22     		movs	r2, #255
 1283 00d0 5A62     		str	r2, [r3, #36]
 975:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1284              		.loc 1 975 0
 1285 00d2 0423     		movs	r3, #4
 1286 00d4 84F82130 		strb	r3, [r4, #33]
 978:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1287              		.loc 1 978 0
 1288 00d8 0023     		movs	r3, #0
 1289 00da 84F82030 		strb	r3, [r4, #32]
 980:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 1290              		.loc 1 980 0
 1291 00de 0126     		movs	r6, #1
 1292 00e0 00E0     		b	.L93
 1293              	.LVL103:
 1294              	.L99:
 908:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1295              		.loc 1 908 0
 1296 00e2 0226     		movs	r6, #2
 1297              	.LVL104:
 1298              	.L93:
 994:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1299              		.loc 1 994 0
 1300 00e4 3046     		mov	r0, r6
 1301 00e6 70BD     		pop	{r4, r5, r6, pc}
 1302              	.L104:
 1303              		.align	2
 1304              	.L103:
 1305 00e8 3FFFFF00 		.word	16777023
 1306              		.cfi_endproc
 1307              	.LFE147:
 1309              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1310              		.align	1
 1311              		.global	HAL_RTC_SetAlarm
 1312              		.syntax unified
 1313              		.thumb
 1314              		.thumb_func
 1315              		.fpu fpv5-d16
 1317              	HAL_RTC_SetAlarm:
 1318              	.LFB149:
1064:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
 1319              		.loc 1 1064 0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccpp6UA4.s 			page 59


 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              	.LVL105:
 1324 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1325              	.LCFI10:
 1326              		.cfi_def_cfa_offset 24
 1327              		.cfi_offset 3, -24
 1328              		.cfi_offset 4, -20
 1329              		.cfi_offset 5, -16
 1330              		.cfi_offset 6, -12
 1331              		.cfi_offset 7, -8
 1332              		.cfi_offset 14, -4
1078:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1333              		.loc 1 1078 0
 1334 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1335 0006 012B     		cmp	r3, #1
 1336 0008 00F0B180 		beq	.L117
 1337 000c 0D46     		mov	r5, r1
 1338 000e 0446     		mov	r4, r0
1078:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1339              		.loc 1 1078 0 is_stmt 0 discriminator 2
 1340 0010 0123     		movs	r3, #1
 1341 0012 80F82030 		strb	r3, [r0, #32]
1080:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1342              		.loc 1 1080 0 is_stmt 1 discriminator 2
 1343 0016 0223     		movs	r3, #2
 1344 0018 80F82130 		strb	r3, [r0, #33]
1082:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1345              		.loc 1 1082 0 discriminator 2
 1346 001c 002A     		cmp	r2, #0
 1347 001e 4FD1     		bne	.L107
1084:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1348              		.loc 1 1084 0
 1349 0020 0368     		ldr	r3, [r0]
 1350 0022 9B68     		ldr	r3, [r3, #8]
 1351 0024 13F0400F 		tst	r3, #64
 1352 0028 01D1     		bne	.L108
1091:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1353              		.loc 1 1091 0
 1354 002a 0023     		movs	r3, #0
 1355 002c CB70     		strb	r3, [r1, #3]
 1356              	.L108:
1097:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1357              		.loc 1 1097 0
 1358 002e EE69     		ldr	r6, [r5, #28]
1106:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1359              		.loc 1 1106 0
 1360 0030 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1361              	.LVL106:
 1362 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 1363              	.LVL107:
 1364 0036 0704     		lsls	r7, r0, #16
1107:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 1365              		.loc 1 1107 0
 1366 0038 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1367 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 1368              	.LVL108:
1106:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
ARM GAS  /tmp/ccpp6UA4.s 			page 60


 1369              		.loc 1 1106 0
 1370 003e 47EA0027 		orr	r7, r7, r0, lsl #8
1108:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)                 | \
 1371              		.loc 1 1108 0
 1372 0042 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1373 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 1374              	.LVL109:
1107:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 1375              		.loc 1 1107 0
 1376 0048 0743     		orrs	r7, r7, r0
1109:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
 1377              		.loc 1 1109 0
 1378 004a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
1108:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)                 | \
 1379              		.loc 1 1108 0
 1380 004c 47EA8057 		orr	r7, r7, r0, lsl #22
1110:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1381              		.loc 1 1110 0
 1382 0050 95F82000 		ldrb	r0, [r5, #32]	@ zero_extendqisi2
 1383 0054 FFF7FEFF 		bl	RTC_ByteToBcd2
 1384              	.LVL110:
1109:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
 1385              		.loc 1 1109 0
 1386 0058 47EA0060 		orr	r0, r7, r0, lsl #24
1110:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1387              		.loc 1 1110 0
 1388 005c 0643     		orrs	r6, r6, r0
1112:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1389              		.loc 1 1112 0
 1390 005e 6B69     		ldr	r3, [r5, #20]
1106:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1391              		.loc 1 1106 0
 1392 0060 1E43     		orrs	r6, r6, r3
 1393              	.LVL111:
 1394              	.L109:
1149:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1395              		.loc 1 1149 0
 1396 0062 6F68     		ldr	r7, [r5, #4]
 1397 0064 AB69     		ldr	r3, [r5, #24]
 1398 0066 1F43     		orrs	r7, r7, r3
 1399              	.LVL112:
1152:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1400              		.loc 1 1152 0
 1401 0068 2368     		ldr	r3, [r4]
 1402 006a CA22     		movs	r2, #202
 1403 006c 5A62     		str	r2, [r3, #36]
 1404 006e 2368     		ldr	r3, [r4]
 1405 0070 5322     		movs	r2, #83
 1406 0072 5A62     		str	r2, [r3, #36]
1155:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1407              		.loc 1 1155 0
 1408 0074 6B6A     		ldr	r3, [r5, #36]
 1409 0076 B3F5807F 		cmp	r3, #256
 1410 007a 3BD0     		beq	.L119
1190:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1411              		.loc 1 1190 0
 1412 007c 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccpp6UA4.s 			page 61


 1413 007e 9368     		ldr	r3, [r2, #8]
 1414 0080 23F40073 		bic	r3, r3, #512
 1415 0084 9360     		str	r3, [r2, #8]
1193:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1416              		.loc 1 1193 0
 1417 0086 2268     		ldr	r2, [r4]
 1418 0088 9368     		ldr	r3, [r2, #8]
 1419 008a 23F40053 		bic	r3, r3, #8192
 1420 008e 9360     		str	r3, [r2, #8]
1195:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 1421              		.loc 1 1195 0
 1422 0090 FFF7FEFF 		bl	HAL_GetTick
 1423              	.LVL113:
 1424 0094 0546     		mov	r5, r0
 1425              	.LVL114:
 1426              	.L115:
1197:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1427              		.loc 1 1197 0
 1428 0096 2368     		ldr	r3, [r4]
 1429 0098 DA68     		ldr	r2, [r3, #12]
 1430 009a 12F0020F 		tst	r2, #2
 1431 009e 54D1     		bne	.L120
1199:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1432              		.loc 1 1199 0
 1433 00a0 FFF7FEFF 		bl	HAL_GetTick
 1434              	.LVL115:
 1435 00a4 401B     		subs	r0, r0, r5
 1436 00a6 B0F57A7F 		cmp	r0, #1000
 1437 00aa F4D9     		bls	.L115
1202:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1438              		.loc 1 1202 0
 1439 00ac 2368     		ldr	r3, [r4]
 1440 00ae FF22     		movs	r2, #255
 1441 00b0 5A62     		str	r2, [r3, #36]
1204:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1442              		.loc 1 1204 0
 1443 00b2 0320     		movs	r0, #3
 1444 00b4 84F82100 		strb	r0, [r4, #33]
1207:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1445              		.loc 1 1207 0
 1446 00b8 0023     		movs	r3, #0
 1447 00ba 84F82030 		strb	r3, [r4, #32]
1209:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 1448              		.loc 1 1209 0
 1449 00be F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1450              	.LVL116:
 1451              	.L107:
1116:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1452              		.loc 1 1116 0
 1453 00c0 0368     		ldr	r3, [r0]
 1454 00c2 9B68     		ldr	r3, [r3, #8]
 1455 00c4 13F0400F 		tst	r3, #64
 1456 00c8 01D1     		bne	.L110
1123:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1457              		.loc 1 1123 0
 1458 00ca 0023     		movs	r3, #0
 1459 00cc CB70     		strb	r3, [r1, #3]
ARM GAS  /tmp/ccpp6UA4.s 			page 62


 1460              	.L110:
1130:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1461              		.loc 1 1130 0
 1462 00ce EE69     		ldr	r6, [r5, #28]
1139:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1463              		.loc 1 1139 0
 1464 00d0 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 1465              	.LVL117:
1140:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds)                        | \
 1466              		.loc 1 1140 0
 1467 00d2 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1468 00d4 1B02     		lsls	r3, r3, #8
1139:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1469              		.loc 1 1139 0
 1470 00d6 43EA0243 		orr	r3, r3, r2, lsl #16
1141:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)   | \
 1471              		.loc 1 1141 0
 1472 00da AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2
1140:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds)                        | \
 1473              		.loc 1 1140 0
 1474 00dc 1343     		orrs	r3, r3, r2
1142:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
 1475              		.loc 1 1142 0
 1476 00de EA78     		ldrb	r2, [r5, #3]	@ zero_extendqisi2
1141:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)   | \
 1477              		.loc 1 1141 0
 1478 00e0 43EA8253 		orr	r3, r3, r2, lsl #22
1143:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmDateWeekDaySel)                      | \
 1479              		.loc 1 1143 0
 1480 00e4 95F82020 		ldrb	r2, [r5, #32]	@ zero_extendqisi2
1142:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
 1481              		.loc 1 1142 0
 1482 00e8 43EA0263 		orr	r3, r3, r2, lsl #24
1143:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmDateWeekDaySel)                      | \
 1483              		.loc 1 1143 0
 1484 00ec 1E43     		orrs	r6, r6, r3
1145:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1485              		.loc 1 1145 0
 1486 00ee 6B69     		ldr	r3, [r5, #20]
1139:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1487              		.loc 1 1139 0
 1488 00f0 1E43     		orrs	r6, r6, r3
 1489              	.LVL118:
 1490 00f2 B6E7     		b	.L109
 1491              	.LVL119:
 1492              	.L119:
1158:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1493              		.loc 1 1158 0
 1494 00f4 2268     		ldr	r2, [r4]
 1495 00f6 9368     		ldr	r3, [r2, #8]
 1496 00f8 23F48073 		bic	r3, r3, #256
 1497 00fc 9360     		str	r3, [r2, #8]
1161:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1498              		.loc 1 1161 0
 1499 00fe 2268     		ldr	r2, [r4]
 1500 0100 9368     		ldr	r3, [r2, #8]
 1501 0102 23F48053 		bic	r3, r3, #4096
ARM GAS  /tmp/ccpp6UA4.s 			page 63


 1502 0106 9360     		str	r3, [r2, #8]
1163:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 1503              		.loc 1 1163 0
 1504 0108 FFF7FEFF 		bl	HAL_GetTick
 1505              	.LVL120:
 1506 010c 0546     		mov	r5, r0
 1507              	.LVL121:
 1508              	.L112:
1165:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1509              		.loc 1 1165 0
 1510 010e 2368     		ldr	r3, [r4]
 1511 0110 DA68     		ldr	r2, [r3, #12]
 1512 0112 12F0010F 		tst	r2, #1
 1513 0116 0FD1     		bne	.L121
1167:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1514              		.loc 1 1167 0
 1515 0118 FFF7FEFF 		bl	HAL_GetTick
 1516              	.LVL122:
 1517 011c 401B     		subs	r0, r0, r5
 1518 011e B0F57A7F 		cmp	r0, #1000
 1519 0122 F4D9     		bls	.L112
1170:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1520              		.loc 1 1170 0
 1521 0124 2368     		ldr	r3, [r4]
 1522 0126 FF22     		movs	r2, #255
 1523 0128 5A62     		str	r2, [r3, #36]
1172:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1524              		.loc 1 1172 0
 1525 012a 0320     		movs	r0, #3
 1526 012c 84F82100 		strb	r0, [r4, #33]
1175:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1527              		.loc 1 1175 0
 1528 0130 0023     		movs	r3, #0
 1529 0132 84F82030 		strb	r3, [r4, #32]
1177:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 1530              		.loc 1 1177 0
 1531 0136 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1532              	.LVL123:
 1533              	.L121:
1181:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 1534              		.loc 1 1181 0
 1535 0138 DE61     		str	r6, [r3, #28]
1183:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1536              		.loc 1 1183 0
 1537 013a 2368     		ldr	r3, [r4]
 1538 013c 5F64     		str	r7, [r3, #68]
1185:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1539              		.loc 1 1185 0
 1540 013e 2268     		ldr	r2, [r4]
 1541 0140 9368     		ldr	r3, [r2, #8]
 1542 0142 43F48073 		orr	r3, r3, #256
 1543 0146 9360     		str	r3, [r2, #8]
 1544 0148 07E0     		b	.L114
 1545              	.L120:
1213:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 1546              		.loc 1 1213 0
 1547 014a 1E62     		str	r6, [r3, #32]
ARM GAS  /tmp/ccpp6UA4.s 			page 64


1215:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1548              		.loc 1 1215 0
 1549 014c 2368     		ldr	r3, [r4]
 1550 014e 9F64     		str	r7, [r3, #72]
1217:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1551              		.loc 1 1217 0
 1552 0150 2268     		ldr	r2, [r4]
 1553 0152 9368     		ldr	r3, [r2, #8]
 1554 0154 43F40073 		orr	r3, r3, #512
 1555 0158 9360     		str	r3, [r2, #8]
 1556              	.L114:
1221:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1557              		.loc 1 1221 0
 1558 015a 2368     		ldr	r3, [r4]
 1559 015c FF22     		movs	r2, #255
 1560 015e 5A62     		str	r2, [r3, #36]
1224:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1561              		.loc 1 1224 0
 1562 0160 0123     		movs	r3, #1
 1563 0162 84F82130 		strb	r3, [r4, #33]
1227:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1564              		.loc 1 1227 0
 1565 0166 0020     		movs	r0, #0
 1566 0168 84F82000 		strb	r0, [r4, #32]
1229:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 1567              		.loc 1 1229 0
 1568 016c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1569              	.LVL124:
 1570              	.L117:
1078:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1571              		.loc 1 1078 0
 1572 016e 0220     		movs	r0, #2
 1573              	.LVL125:
1230:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1574              		.loc 1 1230 0
 1575 0170 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1576              		.cfi_endproc
 1577              	.LFE149:
 1579              		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1580              		.align	1
 1581              		.global	HAL_RTC_SetAlarm_IT
 1582              		.syntax unified
 1583              		.thumb
 1584              		.thumb_func
 1585              		.fpu fpv5-d16
 1587              	HAL_RTC_SetAlarm_IT:
 1588              	.LFB150:
1246:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
 1589              		.loc 1 1246 0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 0
 1592              		@ frame_needed = 0, uses_anonymous_args = 0
 1593              	.LVL126:
 1594 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1595              	.LCFI11:
 1596              		.cfi_def_cfa_offset 24
 1597              		.cfi_offset 3, -24
ARM GAS  /tmp/ccpp6UA4.s 			page 65


 1598              		.cfi_offset 4, -20
 1599              		.cfi_offset 5, -16
 1600              		.cfi_offset 6, -12
 1601              		.cfi_offset 7, -8
 1602              		.cfi_offset 14, -4
1260:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1603              		.loc 1 1260 0
 1604 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1605 0006 012B     		cmp	r3, #1
 1606 0008 00F0C880 		beq	.L134
 1607 000c 0D46     		mov	r5, r1
 1608 000e 0446     		mov	r4, r0
1260:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1609              		.loc 1 1260 0 is_stmt 0 discriminator 2
 1610 0010 0123     		movs	r3, #1
 1611 0012 80F82030 		strb	r3, [r0, #32]
1262:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1612              		.loc 1 1262 0 is_stmt 1 discriminator 2
 1613 0016 0223     		movs	r3, #2
 1614 0018 80F82130 		strb	r3, [r0, #33]
1264:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1615              		.loc 1 1264 0 discriminator 2
 1616 001c 002A     		cmp	r2, #0
 1617 001e 50D1     		bne	.L124
1266:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1618              		.loc 1 1266 0
 1619 0020 0368     		ldr	r3, [r0]
 1620 0022 9B68     		ldr	r3, [r3, #8]
 1621 0024 13F0400F 		tst	r3, #64
 1622 0028 01D1     		bne	.L125
1273:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1623              		.loc 1 1273 0
 1624 002a 0023     		movs	r3, #0
 1625 002c CB70     		strb	r3, [r1, #3]
 1626              	.L125:
1279:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1627              		.loc 1 1279 0
 1628 002e EE69     		ldr	r6, [r5, #28]
1287:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1629              		.loc 1 1287 0
 1630 0030 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1631              	.LVL127:
 1632 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 1633              	.LVL128:
 1634 0036 0704     		lsls	r7, r0, #16
1288:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 1635              		.loc 1 1288 0
 1636 0038 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1637 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 1638              	.LVL129:
1287:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1639              		.loc 1 1287 0
 1640 003e 47EA0027 		orr	r7, r7, r0, lsl #8
1289:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)                 | \
 1641              		.loc 1 1289 0
 1642 0042 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1643 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
ARM GAS  /tmp/ccpp6UA4.s 			page 66


 1644              	.LVL130:
1288:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 1645              		.loc 1 1288 0
 1646 0048 0743     		orrs	r7, r7, r0
1290:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
 1647              		.loc 1 1290 0
 1648 004a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
1289:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)                 | \
 1649              		.loc 1 1289 0
 1650 004c 47EA8057 		orr	r7, r7, r0, lsl #22
1291:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1651              		.loc 1 1291 0
 1652 0050 95F82000 		ldrb	r0, [r5, #32]	@ zero_extendqisi2
 1653 0054 FFF7FEFF 		bl	RTC_ByteToBcd2
 1654              	.LVL131:
1290:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
 1655              		.loc 1 1290 0
 1656 0058 47EA0060 		orr	r0, r7, r0, lsl #24
1291:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1657              		.loc 1 1291 0
 1658 005c 0643     		orrs	r6, r6, r0
1293:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1659              		.loc 1 1293 0
 1660 005e 6B69     		ldr	r3, [r5, #20]
1287:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1661              		.loc 1 1287 0
 1662 0060 1E43     		orrs	r6, r6, r3
 1663              	.LVL132:
 1664              	.L126:
1328:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1665              		.loc 1 1328 0
 1666 0062 6F68     		ldr	r7, [r5, #4]
 1667 0064 AB69     		ldr	r3, [r5, #24]
 1668 0066 1F43     		orrs	r7, r7, r3
 1669              	.LVL133:
1331:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1670              		.loc 1 1331 0
 1671 0068 2368     		ldr	r3, [r4]
 1672 006a CA22     		movs	r2, #202
 1673 006c 5A62     		str	r2, [r3, #36]
 1674 006e 2368     		ldr	r3, [r4]
 1675 0070 5322     		movs	r2, #83
 1676 0072 5A62     		str	r2, [r3, #36]
1334:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1677              		.loc 1 1334 0
 1678 0074 6B6A     		ldr	r3, [r5, #36]
 1679 0076 B3F5807F 		cmp	r3, #256
 1680 007a 3CD0     		beq	.L136
1371:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1681              		.loc 1 1371 0
 1682 007c 2268     		ldr	r2, [r4]
 1683 007e 9368     		ldr	r3, [r2, #8]
 1684 0080 23F40073 		bic	r3, r3, #512
 1685 0084 9360     		str	r3, [r2, #8]
1374:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1686              		.loc 1 1374 0
 1687 0086 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccpp6UA4.s 			page 67


 1688 0088 D368     		ldr	r3, [r2, #12]
 1689 008a DBB2     		uxtb	r3, r3
 1690 008c 63F42073 		orn	r3, r3, #640
 1691 0090 D360     		str	r3, [r2, #12]
1376:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 1692              		.loc 1 1376 0
 1693 0092 FFF7FEFF 		bl	HAL_GetTick
 1694              	.LVL134:
 1695 0096 0546     		mov	r5, r0
 1696              	.LVL135:
 1697              	.L132:
1378:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1698              		.loc 1 1378 0
 1699 0098 2368     		ldr	r3, [r4]
 1700 009a DA68     		ldr	r2, [r3, #12]
 1701 009c 12F0020F 		tst	r2, #2
 1702 00a0 5AD1     		bne	.L137
1380:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1703              		.loc 1 1380 0
 1704 00a2 FFF7FEFF 		bl	HAL_GetTick
 1705              	.LVL136:
 1706 00a6 401B     		subs	r0, r0, r5
 1707 00a8 B0F57A7F 		cmp	r0, #1000
 1708 00ac F4D9     		bls	.L132
1383:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1709              		.loc 1 1383 0
 1710 00ae 2368     		ldr	r3, [r4]
 1711 00b0 FF22     		movs	r2, #255
 1712 00b2 5A62     		str	r2, [r3, #36]
1385:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1713              		.loc 1 1385 0
 1714 00b4 0320     		movs	r0, #3
 1715 00b6 84F82100 		strb	r0, [r4, #33]
1388:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1716              		.loc 1 1388 0
 1717 00ba 0023     		movs	r3, #0
 1718 00bc 84F82030 		strb	r3, [r4, #32]
1390:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 1719              		.loc 1 1390 0
 1720 00c0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1721              	.LVL137:
 1722              	.L124:
1297:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1723              		.loc 1 1297 0
 1724 00c2 0368     		ldr	r3, [r0]
 1725 00c4 9B68     		ldr	r3, [r3, #8]
 1726 00c6 13F0400F 		tst	r3, #64
 1727 00ca 01D1     		bne	.L127
1304:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1728              		.loc 1 1304 0
 1729 00cc 0023     		movs	r3, #0
 1730 00ce CB70     		strb	r3, [r1, #3]
 1731              	.L127:
1311:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1732              		.loc 1 1311 0
 1733 00d0 EE69     		ldr	r6, [r5, #28]
1319:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
ARM GAS  /tmp/ccpp6UA4.s 			page 68


 1734              		.loc 1 1319 0
 1735 00d2 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 1736              	.LVL138:
1320:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds)                        | \
 1737              		.loc 1 1320 0
 1738 00d4 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1739 00d6 1B02     		lsls	r3, r3, #8
1319:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1740              		.loc 1 1319 0
 1741 00d8 43EA0243 		orr	r3, r3, r2, lsl #16
1321:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)   | \
 1742              		.loc 1 1321 0
 1743 00dc AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2
1320:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds)                        | \
 1744              		.loc 1 1320 0
 1745 00de 1343     		orrs	r3, r3, r2
1322:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
 1746              		.loc 1 1322 0
 1747 00e0 EA78     		ldrb	r2, [r5, #3]	@ zero_extendqisi2
1321:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)   | \
 1748              		.loc 1 1321 0
 1749 00e2 43EA8253 		orr	r3, r3, r2, lsl #22
1323:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmDateWeekDaySel)                      | \
 1750              		.loc 1 1323 0
 1751 00e6 95F82020 		ldrb	r2, [r5, #32]	@ zero_extendqisi2
1322:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos)   | \
 1752              		.loc 1 1322 0
 1753 00ea 43EA0263 		orr	r3, r3, r2, lsl #24
1323:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmDateWeekDaySel)                      | \
 1754              		.loc 1 1323 0
 1755 00ee 1E43     		orrs	r6, r6, r3
1325:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1756              		.loc 1 1325 0
 1757 00f0 6B69     		ldr	r3, [r5, #20]
1319:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1758              		.loc 1 1319 0
 1759 00f2 1E43     		orrs	r6, r6, r3
 1760              	.LVL139:
 1761 00f4 B5E7     		b	.L126
 1762              	.LVL140:
 1763              	.L136:
1337:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1764              		.loc 1 1337 0
 1765 00f6 2268     		ldr	r2, [r4]
 1766 00f8 9368     		ldr	r3, [r2, #8]
 1767 00fa 23F48073 		bic	r3, r3, #256
 1768 00fe 9360     		str	r3, [r2, #8]
1340:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1769              		.loc 1 1340 0
 1770 0100 2268     		ldr	r2, [r4]
 1771 0102 D368     		ldr	r3, [r2, #12]
 1772 0104 DBB2     		uxtb	r3, r3
 1773 0106 63F4C073 		orn	r3, r3, #384
 1774 010a D360     		str	r3, [r2, #12]
1342:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 1775              		.loc 1 1342 0
 1776 010c FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccpp6UA4.s 			page 69


 1777              	.LVL141:
 1778 0110 0546     		mov	r5, r0
 1779              	.LVL142:
 1780              	.L129:
1344:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1781              		.loc 1 1344 0
 1782 0112 2368     		ldr	r3, [r4]
 1783 0114 DA68     		ldr	r2, [r3, #12]
 1784 0116 12F0010F 		tst	r2, #1
 1785 011a 0FD1     		bne	.L138
1346:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1786              		.loc 1 1346 0
 1787 011c FFF7FEFF 		bl	HAL_GetTick
 1788              	.LVL143:
 1789 0120 401B     		subs	r0, r0, r5
 1790 0122 B0F57A7F 		cmp	r0, #1000
 1791 0126 F4D9     		bls	.L129
1349:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1792              		.loc 1 1349 0
 1793 0128 2368     		ldr	r3, [r4]
 1794 012a FF22     		movs	r2, #255
 1795 012c 5A62     		str	r2, [r3, #36]
1351:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1796              		.loc 1 1351 0
 1797 012e 0320     		movs	r0, #3
 1798 0130 84F82100 		strb	r0, [r4, #33]
1354:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1799              		.loc 1 1354 0
 1800 0134 0023     		movs	r3, #0
 1801 0136 84F82030 		strb	r3, [r4, #32]
1356:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 1802              		.loc 1 1356 0
 1803 013a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1804              	.LVL144:
 1805              	.L138:
1360:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 1806              		.loc 1 1360 0
 1807 013c DE61     		str	r6, [r3, #28]
1362:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1808              		.loc 1 1362 0
 1809 013e 2368     		ldr	r3, [r4]
 1810 0140 5F64     		str	r7, [r3, #68]
1364:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1811              		.loc 1 1364 0
 1812 0142 2268     		ldr	r2, [r4]
 1813 0144 9368     		ldr	r3, [r2, #8]
 1814 0146 43F48073 		orr	r3, r3, #256
 1815 014a 9360     		str	r3, [r2, #8]
1366:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1816              		.loc 1 1366 0
 1817 014c 2268     		ldr	r2, [r4]
 1818 014e 9368     		ldr	r3, [r2, #8]
 1819 0150 43F48053 		orr	r3, r3, #4096
 1820 0154 9360     		str	r3, [r2, #8]
 1821 0156 0CE0     		b	.L131
 1822              	.L137:
1394:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
ARM GAS  /tmp/ccpp6UA4.s 			page 70


 1823              		.loc 1 1394 0
 1824 0158 1E62     		str	r6, [r3, #32]
1396:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1825              		.loc 1 1396 0
 1826 015a 2368     		ldr	r3, [r4]
 1827 015c 9F64     		str	r7, [r3, #72]
1398:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1828              		.loc 1 1398 0
 1829 015e 2268     		ldr	r2, [r4]
 1830 0160 9368     		ldr	r3, [r2, #8]
 1831 0162 43F40073 		orr	r3, r3, #512
 1832 0166 9360     		str	r3, [r2, #8]
1400:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1833              		.loc 1 1400 0
 1834 0168 2268     		ldr	r2, [r4]
 1835 016a 9368     		ldr	r3, [r2, #8]
 1836 016c 43F40053 		orr	r3, r3, #8192
 1837 0170 9360     		str	r3, [r2, #8]
 1838              	.L131:
1405:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif
 1839              		.loc 1 1405 0
 1840 0172 0B4A     		ldr	r2, .L139
 1841 0174 1368     		ldr	r3, [r2]
 1842 0176 43F40033 		orr	r3, r3, #131072
 1843 017a 1360     		str	r3, [r2]
1408:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /*  Enable the write protection for RTC registers */
 1844              		.loc 1 1408 0
 1845 017c 4FF0B042 		mov	r2, #1476395008
 1846 0180 1368     		ldr	r3, [r2]
 1847 0182 43F40033 		orr	r3, r3, #131072
 1848 0186 1360     		str	r3, [r2]
1410:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1849              		.loc 1 1410 0
 1850 0188 2368     		ldr	r3, [r4]
 1851 018a FF22     		movs	r2, #255
 1852 018c 5A62     		str	r2, [r3, #36]
1412:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1853              		.loc 1 1412 0
 1854 018e 0123     		movs	r3, #1
 1855 0190 84F82130 		strb	r3, [r4, #33]
1415:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1856              		.loc 1 1415 0
 1857 0194 0020     		movs	r0, #0
 1858 0196 84F82000 		strb	r0, [r4, #32]
1417:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 1859              		.loc 1 1417 0
 1860 019a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1861              	.LVL145:
 1862              	.L134:
1260:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1863              		.loc 1 1260 0
 1864 019c 0220     		movs	r0, #2
 1865              	.LVL146:
1418:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1866              		.loc 1 1418 0
 1867 019e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1868              	.L140:
ARM GAS  /tmp/ccpp6UA4.s 			page 71


 1869              		.align	2
 1870              	.L139:
 1871 01a0 80000058 		.word	1476395136
 1872              		.cfi_endproc
 1873              	.LFE150:
 1875              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 1876              		.align	1
 1877              		.global	RTC_Bcd2ToByte
 1878              		.syntax unified
 1879              		.thumb
 1880              		.thumb_func
 1881              		.fpu fpv5-d16
 1883              	RTC_Bcd2ToByte:
 1884              	.LFB160:
1832:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1833:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1834:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
1835:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Value: BCD value to be converted
1836:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval Converted word
1837:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1838:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
1839:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 1885              		.loc 1 1839 0
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 0
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
 1889              		@ link register save eliminated.
 1890              	.LVL147:
1840:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint8_t tmp;
1841:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tmp = ((Value & 0xF0u) >> 4u) * 10u;
 1891              		.loc 1 1841 0
 1892 0000 0209     		lsrs	r2, r0, #4
 1893 0002 02EB8202 		add	r2, r2, r2, lsl #2
 1894 0006 5300     		lsls	r3, r2, #1
 1895 0008 DBB2     		uxtb	r3, r3
 1896              	.LVL148:
1842:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return (tmp + (Value & 0x0Fu));
 1897              		.loc 1 1842 0
 1898 000a 00F00F00 		and	r0, r0, #15
 1899              	.LVL149:
 1900 000e 1844     		add	r0, r0, r3
1843:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 1901              		.loc 1 1843 0
 1902 0010 C0B2     		uxtb	r0, r0
 1903 0012 7047     		bx	lr
 1904              		.cfi_endproc
 1905              	.LFE160:
 1907              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 1908              		.align	1
 1909              		.global	HAL_RTC_GetTime
 1910              		.syntax unified
 1911              		.thumb
 1912              		.thumb_func
 1913              		.fpu fpv5-d16
 1915              	HAL_RTC_GetTime:
 1916              	.LFB146:
 857:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
ARM GAS  /tmp/ccpp6UA4.s 			page 72


 1917              		.loc 1 857 0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 0
 1920              		@ frame_needed = 0, uses_anonymous_args = 0
 1921              	.LVL150:
 1922 0000 70B5     		push	{r4, r5, r6, lr}
 1923              	.LCFI12:
 1924              		.cfi_def_cfa_offset 16
 1925              		.cfi_offset 4, -16
 1926              		.cfi_offset 5, -12
 1927              		.cfi_offset 6, -8
 1928              		.cfi_offset 14, -4
 864:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1929              		.loc 1 864 0
 1930 0002 0368     		ldr	r3, [r0]
 1931 0004 9B6A     		ldr	r3, [r3, #40]
 1932 0006 4B60     		str	r3, [r1, #4]
 867:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1933              		.loc 1 867 0
 1934 0008 0368     		ldr	r3, [r0]
 1935 000a 1B69     		ldr	r3, [r3, #16]
 1936 000c C3F30E03 		ubfx	r3, r3, #0, #15
 1937 0010 8B60     		str	r3, [r1, #8]
 870:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1938              		.loc 1 870 0
 1939 0012 0368     		ldr	r3, [r0]
 1940 0014 1868     		ldr	r0, [r3]
 1941              	.LVL151:
 1942 0016 0E4B     		ldr	r3, .L145
 1943 0018 0340     		ands	r3, r3, r0
 1944              	.LVL152:
 873:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 1945              		.loc 1 873 0
 1946 001a C3F30540 		ubfx	r0, r3, #16, #6
 1947 001e 0870     		strb	r0, [r1]
 874:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 1948              		.loc 1 874 0
 1949 0020 C3F30626 		ubfx	r6, r3, #8, #7
 1950 0024 4E70     		strb	r6, [r1, #1]
 875:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 1951              		.loc 1 875 0
 1952 0026 03F07F05 		and	r5, r3, #127
 1953 002a 8D70     		strb	r5, [r1, #2]
 876:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1954              		.loc 1 876 0
 1955 002c 9B0D     		lsrs	r3, r3, #22
 1956              	.LVL153:
 1957 002e CB70     		strb	r3, [r1, #3]
 879:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1958              		.loc 1 879 0
 1959 0030 5AB9     		cbnz	r2, .L143
 1960 0032 0C46     		mov	r4, r1
 882:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 1961              		.loc 1 882 0
 1962 0034 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1963              	.LVL154:
 1964 0038 2070     		strb	r0, [r4]
ARM GAS  /tmp/ccpp6UA4.s 			page 73


 883:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 1965              		.loc 1 883 0
 1966 003a 3046     		mov	r0, r6
 1967 003c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1968              	.LVL155:
 1969 0040 6070     		strb	r0, [r4, #1]
 884:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1970              		.loc 1 884 0
 1971 0042 2846     		mov	r0, r5
 1972 0044 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1973              	.LVL156:
 1974 0048 A070     		strb	r0, [r4, #2]
 1975              	.LVL157:
 1976              	.L143:
 888:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1977              		.loc 1 888 0
 1978 004a 0020     		movs	r0, #0
 1979 004c 70BD     		pop	{r4, r5, r6, pc}
 1980              	.L146:
 1981 004e 00BF     		.align	2
 1982              	.L145:
 1983 0050 7F7F7F00 		.word	8355711
 1984              		.cfi_endproc
 1985              	.LFE146:
 1987              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1988              		.align	1
 1989              		.global	HAL_RTC_GetDate
 1990              		.syntax unified
 1991              		.thumb
 1992              		.thumb_func
 1993              		.fpu fpv5-d16
 1995              	HAL_RTC_GetDate:
 1996              	.LFB148:
1010:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
 1997              		.loc 1 1010 0
 1998              		.cfi_startproc
 1999              		@ args = 0, pretend = 0, frame = 0
 2000              		@ frame_needed = 0, uses_anonymous_args = 0
 2001              	.LVL158:
 2002 0000 70B5     		push	{r4, r5, r6, lr}
 2003              	.LCFI13:
 2004              		.cfi_def_cfa_offset 16
 2005              		.cfi_offset 4, -16
 2006              		.cfi_offset 5, -12
 2007              		.cfi_offset 6, -8
 2008              		.cfi_offset 14, -4
1017:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2009              		.loc 1 1017 0
 2010 0002 0368     		ldr	r3, [r0]
 2011 0004 5868     		ldr	r0, [r3, #4]
 2012              	.LVL159:
 2013 0006 0E4B     		ldr	r3, .L150
 2014 0008 0340     		ands	r3, r3, r0
 2015              	.LVL160:
1020:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 2016              		.loc 1 1020 0
 2017 000a 180C     		lsrs	r0, r3, #16
ARM GAS  /tmp/ccpp6UA4.s 			page 74


 2018 000c C870     		strb	r0, [r1, #3]
1021:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Date  = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 2019              		.loc 1 1021 0
 2020 000e C3F30426 		ubfx	r6, r3, #8, #5
 2021 0012 4E70     		strb	r6, [r1, #1]
1022:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 2022              		.loc 1 1022 0
 2023 0014 03F03F05 		and	r5, r3, #63
 2024 0018 8D70     		strb	r5, [r1, #2]
1023:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2025              		.loc 1 1023 0
 2026 001a C3F34233 		ubfx	r3, r3, #13, #3
 2027              	.LVL161:
 2028 001e 0B70     		strb	r3, [r1]
1026:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 2029              		.loc 1 1026 0
 2030 0020 5AB9     		cbnz	r2, .L148
 2031 0022 0C46     		mov	r4, r1
1029:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 2032              		.loc 1 1029 0
 2033 0024 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2034              	.LVL162:
 2035 0028 E070     		strb	r0, [r4, #3]
1030:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 2036              		.loc 1 1030 0
 2037 002a 3046     		mov	r0, r6
 2038 002c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2039              	.LVL163:
 2040 0030 6070     		strb	r0, [r4, #1]
1031:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 2041              		.loc 1 1031 0
 2042 0032 2846     		mov	r0, r5
 2043 0034 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2044              	.LVL164:
 2045 0038 A070     		strb	r0, [r4, #2]
 2046              	.LVL165:
 2047              	.L148:
1034:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2048              		.loc 1 1034 0
 2049 003a 0020     		movs	r0, #0
 2050 003c 70BD     		pop	{r4, r5, r6, pc}
 2051              	.L151:
 2052 003e 00BF     		.align	2
 2053              	.L150:
 2054 0040 3FFFFF00 		.word	16777023
 2055              		.cfi_endproc
 2056              	.LFE148:
 2058              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2059              		.align	1
 2060              		.global	HAL_RTC_GetAlarm
 2061              		.syntax unified
 2062              		.thumb
 2063              		.thumb_func
 2064              		.fpu fpv5-d16
 2066              	HAL_RTC_GetAlarm:
 2067              	.LFB152:
1524:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
ARM GAS  /tmp/ccpp6UA4.s 			page 75


 2068              		.loc 1 1524 0
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 0
 2071              		@ frame_needed = 0, uses_anonymous_args = 0
 2072              	.LVL166:
 2073 0000 10B5     		push	{r4, lr}
 2074              	.LCFI14:
 2075              		.cfi_def_cfa_offset 8
 2076              		.cfi_offset 4, -8
 2077              		.cfi_offset 14, -4
1532:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 2078              		.loc 1 1532 0
 2079 0002 B2F5807F 		cmp	r2, #256
 2080 0006 34D0     		beq	.L157
1552:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2081              		.loc 1 1552 0
 2082 0008 4FF40072 		mov	r2, #512
 2083              	.LVL167:
 2084 000c 4A62     		str	r2, [r1, #36]
1554:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2085              		.loc 1 1554 0
 2086 000e 0068     		ldr	r0, [r0]
 2087              	.LVL168:
 2088 0010 026A     		ldr	r2, [r0, #32]
 2089              	.LVL169:
1555:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2090              		.loc 1 1555 0
 2091 0012 806C     		ldr	r0, [r0, #72]
 2092 0014 C0F30E00 		ubfx	r0, r0, #0, #15
 2093              	.LVL170:
1558:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_A
 2094              		.loc 1 1558 0
 2095 0018 C2F30544 		ubfx	r4, r2, #16, #6
 2096 001c 0C70     		strb	r4, [r1]
1559:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMBR_ST  | RTC_ALRMBR_SU));
 2097              		.loc 1 1559 0
 2098 001e C2F30624 		ubfx	r4, r2, #8, #7
 2099 0022 4C70     		strb	r4, [r1, #1]
1560:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMBR_PM)                     >> RTC_T
 2100              		.loc 1 1560 0
 2101 0024 02F07F04 		and	r4, r2, #127
 2102 0028 8C70     		strb	r4, [r1, #2]
1561:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2103              		.loc 1 1561 0
 2104 002a C2F38054 		ubfx	r4, r2, #22, #1
 2105 002e CC70     		strb	r4, [r1, #3]
1562:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU))   >> RTC_A
 2106              		.loc 1 1562 0
 2107 0030 4860     		str	r0, [r1, #4]
1563:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMBR_WDSEL);
 2108              		.loc 1 1563 0
 2109 0032 C2F30560 		ubfx	r0, r2, #24, #6
 2110              	.LVL171:
 2111 0036 81F82000 		strb	r0, [r1, #32]
1564:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 2112              		.loc 1 1564 0
 2113 003a 02F08040 		and	r0, r2, #1073741824
ARM GAS  /tmp/ccpp6UA4.s 			page 76


 2114 003e C861     		str	r0, [r1, #28]
1565:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 2115              		.loc 1 1565 0
 2116 0040 02F08032 		and	r2, r2, #-2139062144
 2117              	.LVL172:
 2118 0044 4A61     		str	r2, [r1, #20]
 2119              	.LVL173:
 2120              	.L154:
1568:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 2121              		.loc 1 1568 0
 2122 0046 93B9     		cbnz	r3, .L155
 2123 0048 0C46     		mov	r4, r1
1570:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2124              		.loc 1 1570 0
 2125 004a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 2126 004c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2127              	.LVL174:
 2128 0050 2070     		strb	r0, [r4]
1571:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2129              		.loc 1 1571 0
 2130 0052 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2131 0054 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2132              	.LVL175:
 2133 0058 6070     		strb	r0, [r4, #1]
1572:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2134              		.loc 1 1572 0
 2135 005a A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2136 005c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2137              	.LVL176:
 2138 0060 A070     		strb	r0, [r4, #2]
1573:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 2139              		.loc 1 1573 0
 2140 0062 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 2141 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2142              	.LVL177:
 2143 006a 84F82000 		strb	r0, [r4, #32]
 2144              	.LVL178:
 2145              	.L155:
1577:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2146              		.loc 1 1577 0
 2147 006e 0020     		movs	r0, #0
 2148 0070 10BD     		pop	{r4, pc}
 2149              	.LVL179:
 2150              	.L157:
1535:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2151              		.loc 1 1535 0
 2152 0072 4A62     		str	r2, [r1, #36]
1537:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 2153              		.loc 1 1537 0
 2154 0074 0068     		ldr	r0, [r0]
 2155              	.LVL180:
 2156 0076 C269     		ldr	r2, [r0, #28]
 2157              	.LVL181:
1538:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2158              		.loc 1 1538 0
 2159 0078 406C     		ldr	r0, [r0, #68]
 2160 007a C0F30E00 		ubfx	r0, r0, #0, #15
ARM GAS  /tmp/ccpp6UA4.s 			page 77


 2161              	.LVL182:
1541:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_A
 2162              		.loc 1 1541 0
 2163 007e C2F30544 		ubfx	r4, r2, #16, #6
 2164 0082 0C70     		strb	r4, [r1]
1542:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 2165              		.loc 1 1542 0
 2166 0084 C2F30624 		ubfx	r4, r2, #8, #7
 2167 0088 4C70     		strb	r4, [r1, #1]
1543:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_T
 2168              		.loc 1 1543 0
 2169 008a 02F07F04 		and	r4, r2, #127
 2170 008e 8C70     		strb	r4, [r1, #2]
1544:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2171              		.loc 1 1544 0
 2172 0090 C2F38054 		ubfx	r4, r2, #22, #1
 2173 0094 CC70     		strb	r4, [r1, #3]
1545:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_A
 2174              		.loc 1 1545 0
 2175 0096 4860     		str	r0, [r1, #4]
1546:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 2176              		.loc 1 1546 0
 2177 0098 C2F30560 		ubfx	r0, r2, #24, #6
 2178              	.LVL183:
 2179 009c 81F82000 		strb	r0, [r1, #32]
1547:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 2180              		.loc 1 1547 0
 2181 00a0 02F08040 		and	r0, r2, #1073741824
 2182 00a4 C861     		str	r0, [r1, #28]
1548:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 2183              		.loc 1 1548 0
 2184 00a6 02F08032 		and	r2, r2, #-2139062144
 2185              	.LVL184:
 2186 00aa 4A61     		str	r2, [r1, #20]
 2187 00ac CBE7     		b	.L154
 2188              		.cfi_endproc
 2189              	.LFE152:
 2191              		.text
 2192              	.Letext0:
 2193              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2194              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2195              		.file 4 "Libraries/CMSIS/Include/core_cm7.h"
 2196              		.file 5 "Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 2197              		.file 6 "Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 2198              		.file 7 "/usr/include/newlib/sys/lock.h"
 2199              		.file 8 "/usr/include/newlib/sys/_types.h"
 2200              		.file 9 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2201              		.file 10 "/usr/include/newlib/sys/reent.h"
 2202              		.file 11 "/usr/include/newlib/math.h"
 2203              		.file 12 "Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 2204              		.file 13 "Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 2205              		.file 14 "Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
 2206              		.file 15 "Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 2207              		.file 16 "Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc_ex.h"
ARM GAS  /tmp/ccpp6UA4.s 			page 78


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_rtc.c
     /tmp/ccpp6UA4.s:17     .text.HAL_RTC_MspInit:0000000000000000 $t
     /tmp/ccpp6UA4.s:24     .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
     /tmp/ccpp6UA4.s:38     .text.HAL_RTC_MspDeInit:0000000000000000 $t
     /tmp/ccpp6UA4.s:45     .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
     /tmp/ccpp6UA4.s:58     .text.HAL_RTC_DeactivateAlarm:0000000000000000 $t
     /tmp/ccpp6UA4.s:65     .text.HAL_RTC_DeactivateAlarm:0000000000000000 HAL_RTC_DeactivateAlarm
     /tmp/ccpp6UA4.s:206    .text.HAL_RTC_AlarmAEventCallback:0000000000000000 $t
     /tmp/ccpp6UA4.s:213    .text.HAL_RTC_AlarmAEventCallback:0000000000000000 HAL_RTC_AlarmAEventCallback
     /tmp/ccpp6UA4.s:226    .text.HAL_RTC_AlarmIRQHandler:0000000000000000 $t
     /tmp/ccpp6UA4.s:233    .text.HAL_RTC_AlarmIRQHandler:0000000000000000 HAL_RTC_AlarmIRQHandler
     /tmp/ccpp6UA4.s:301    .text.HAL_RTC_AlarmIRQHandler:000000000000005c $d
     /tmp/ccpp6UA4.s:306    .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 $t
     /tmp/ccpp6UA4.s:313    .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 HAL_RTC_PollForAlarmAEvent
     /tmp/ccpp6UA4.s:376    .text.HAL_RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccpp6UA4.s:383    .text.HAL_RTC_WaitForSynchro:0000000000000000 HAL_RTC_WaitForSynchro
     /tmp/ccpp6UA4.s:433    .text.HAL_RTC_GetState:0000000000000000 $t
     /tmp/ccpp6UA4.s:440    .text.HAL_RTC_GetState:0000000000000000 HAL_RTC_GetState
     /tmp/ccpp6UA4.s:457    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccpp6UA4.s:464    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccpp6UA4.s:523    .text.HAL_RTC_Init:0000000000000000 $t
     /tmp/ccpp6UA4.s:530    .text.HAL_RTC_Init:0000000000000000 HAL_RTC_Init
     /tmp/ccpp6UA4.s:667    .text.HAL_RTC_Init:00000000000000b0 $d
     /tmp/ccpp6UA4.s:672    .text.HAL_RTC_DeInit:0000000000000000 $t
     /tmp/ccpp6UA4.s:679    .text.HAL_RTC_DeInit:0000000000000000 HAL_RTC_DeInit
     /tmp/ccpp6UA4.s:868    .text.HAL_RTC_DeInit:00000000000000f8 $d
     /tmp/ccpp6UA4.s:873    .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccpp6UA4.s:880    .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccpp6UA4.s:918    .text.HAL_RTC_SetTime:0000000000000000 $t
     /tmp/ccpp6UA4.s:925    .text.HAL_RTC_SetTime:0000000000000000 HAL_RTC_SetTime
     /tmp/ccpp6UA4.s:1120   .text.HAL_RTC_SetTime:000000000000010c $d
     /tmp/ccpp6UA4.s:1125   .text.HAL_RTC_SetDate:0000000000000000 $t
     /tmp/ccpp6UA4.s:1132   .text.HAL_RTC_SetDate:0000000000000000 HAL_RTC_SetDate
     /tmp/ccpp6UA4.s:1305   .text.HAL_RTC_SetDate:00000000000000e8 $d
     /tmp/ccpp6UA4.s:1310   .text.HAL_RTC_SetAlarm:0000000000000000 $t
     /tmp/ccpp6UA4.s:1317   .text.HAL_RTC_SetAlarm:0000000000000000 HAL_RTC_SetAlarm
     /tmp/ccpp6UA4.s:1580   .text.HAL_RTC_SetAlarm_IT:0000000000000000 $t
     /tmp/ccpp6UA4.s:1587   .text.HAL_RTC_SetAlarm_IT:0000000000000000 HAL_RTC_SetAlarm_IT
     /tmp/ccpp6UA4.s:1871   .text.HAL_RTC_SetAlarm_IT:00000000000001a0 $d
     /tmp/ccpp6UA4.s:1876   .text.RTC_Bcd2ToByte:0000000000000000 $t
     /tmp/ccpp6UA4.s:1883   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccpp6UA4.s:1908   .text.HAL_RTC_GetTime:0000000000000000 $t
     /tmp/ccpp6UA4.s:1915   .text.HAL_RTC_GetTime:0000000000000000 HAL_RTC_GetTime
     /tmp/ccpp6UA4.s:1983   .text.HAL_RTC_GetTime:0000000000000050 $d
     /tmp/ccpp6UA4.s:1988   .text.HAL_RTC_GetDate:0000000000000000 $t
     /tmp/ccpp6UA4.s:1995   .text.HAL_RTC_GetDate:0000000000000000 HAL_RTC_GetDate
     /tmp/ccpp6UA4.s:2054   .text.HAL_RTC_GetDate:0000000000000040 $d
     /tmp/ccpp6UA4.s:2059   .text.HAL_RTC_GetAlarm:0000000000000000 $t
     /tmp/ccpp6UA4.s:2066   .text.HAL_RTC_GetAlarm:0000000000000000 HAL_RTC_GetAlarm
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RTCEx_AlarmBEventCallback
