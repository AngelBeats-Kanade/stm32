ARM GAS  /tmp/cc968NXr.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_nand.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_NAND_MspInit,"ax",%progbits
  17              		.align	1
  18              		.weak	HAL_NAND_MspInit
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	HAL_NAND_MspInit:
  25              	.LFB143:
  26              		.file 1 "Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c"
   1:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
   2:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ******************************************************************************
   3:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @file    stm32h7xx_hal_nand.c
   4:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @author  MCD Application Team
   5:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief   NAND HAL module driver.
   6:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *          This file provides a generic firmware to drive NAND memories mounted
   7:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *          as external device.
   8:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *
   9:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   @verbatim
  10:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ==============================================================================
  11:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****                          ##### How to use this driver #####
  12:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ==============================================================================
  13:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     [..]
  14:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       This driver is a generic layered driver which contains a set of APIs used to
  15:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       control NAND flash memories. It uses the FMC layer functions to interface
  16:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       with NAND devices. This driver is used as follows:
  17:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  18:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       (+) NAND flash memory configuration sequence using the function HAL_NAND_Init()
  19:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           with control and timing parameters for both common and attribute spaces.
  20:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  21:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       (+) Read NAND flash memory maker and device IDs using the function
  22:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           HAL_NAND_Read_ID(). The read information is stored in the NAND_ID_TypeDef
  23:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           structure declared by the function caller.
  24:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  25:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       (+) Access NAND flash memory by read/write operations using the functions
  26:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           HAL_NAND_Read_Page_8b()/HAL_NAND_Read_SpareArea_8b(),
  27:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           HAL_NAND_Write_Page_8b()/HAL_NAND_Write_SpareArea_8b(),
  28:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           HAL_NAND_Read_Page_16b()/HAL_NAND_Read_SpareArea_16b(),
  29:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           HAL_NAND_Write_Page_16b()/HAL_NAND_Write_SpareArea_16b()
  30:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           to read/write page(s)/spare area(s). These functions use specific device
  31:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           information (Block, page size..) predefined by the user in the NAND_DeviceConfigTypeDef
  32:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           structure. The read/write address information is contained by the Nand_Address_Typedef
ARM GAS  /tmp/cc968NXr.s 			page 2


  33:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           structure passed as parameter.
  34:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  35:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       (+) Perform NAND flash Reset chip operation using the function HAL_NAND_Reset().
  36:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  37:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       (+) Perform NAND flash erase block operation using the function HAL_NAND_Erase_Block().
  38:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           The erase block address information is contained in the Nand_Address_Typedef
  39:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           structure passed as parameter.
  40:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  41:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       (+) Read the NAND flash status operation using the function HAL_NAND_Read_Status().
  42:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  43:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       (+) You can also control the NAND device by calling the control APIs HAL_NAND_ECC_Enable()/
  44:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           HAL_NAND_ECC_Disable() to respectively enable/disable the ECC code correction
  45:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           feature or the function HAL_NAND_GetECC() to get the ECC correction code.
  46:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  47:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       (+) You can monitor the NAND device HAL state by calling the function
  48:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           HAL_NAND_GetState()
  49:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  50:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     [..]
  51:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       (@) This driver is a set of generic APIs which handle standard NAND flash operations.
  52:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           If a NAND flash device contains different operations and/or implementations,
  53:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           it should be implemented separately.
  54:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  55:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     *** Callback registration ***
  56:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     =============================================
  57:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     [..]
  58:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       The compilation define  USE_HAL_NAND_REGISTER_CALLBACKS when set to 1
  59:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       allows the user to configure dynamically the driver callbacks.
  60:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  61:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       Use Functions @ref HAL_NAND_RegisterCallback() to register a user callback,
  62:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       it allows to register following callbacks:
  63:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         (+) MspInitCallback    : NAND MspInit.
  64:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         (+) MspDeInitCallback  : NAND MspDeInit.
  65:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       This function takes as parameters the HAL peripheral handle, the Callback ID
  66:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       and a pointer to the user callback function.
  67:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  68:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       Use function @ref HAL_NAND_UnRegisterCallback() to reset a callback to the default
  69:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       weak (surcharged) function. It allows to reset following callbacks:
  70:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         (+) MspInitCallback    : NAND MspInit.
  71:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         (+) MspDeInitCallback  : NAND MspDeInit.
  72:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       This function) takes as parameters the HAL peripheral handle and the Callback ID.
  73:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  74:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       By default, after the @ref HAL_NAND_Init and if the state is HAL_NAND_STATE_RESET
  75:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       all callbacks are reset to the corresponding legacy weak (surcharged) functions.
  76:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       Exception done for MspInit and MspDeInit callbacks that are respectively
  77:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       reset to the legacy weak (surcharged) functions in the @ref HAL_NAND_Init
  78:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       and @ref  HAL_NAND_DeInit only when these callbacks are null (not registered beforehand).
  79:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       If not, MspInit or MspDeInit are not null, the @ref HAL_NAND_Init and @ref HAL_NAND_DeInit
  80:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
  81:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  82:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       Callbacks can be registered/unregistered in READY state only.
  83:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
  84:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
  85:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       during the Init/DeInit.
  86:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       In that case first register the MspInit/MspDeInit user callbacks
  87:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       using @ref HAL_NAND_RegisterCallback before calling @ref HAL_NAND_DeInit
  88:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       or @ref HAL_NAND_Init function.
  89:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
ARM GAS  /tmp/cc968NXr.s 			page 3


  90:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       When The compilation define USE_HAL_NAND_REGISTER_CALLBACKS is set to 0 or
  91:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       not defined, the callback registering feature is not available
  92:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       and weak (surcharged) callbacks are used.
  93:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  94:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   @endverbatim
  95:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ******************************************************************************
  96:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @attention
  97:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *
  98:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  99:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *
 100:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 101:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * the "License"; You may not use this file except in compliance with the
 102:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * License. You may obtain a copy of the License at:
 103:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                       opensource.org/licenses/BSD-3-Clause
 104:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *
 105:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ******************************************************************************
 106:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 107:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 108:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /* Includes ------------------------------------------------------------------*/
 109:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #include "stm32h7xx_hal.h"
 110:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 111:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 112:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /** @addtogroup STM32H7xx_HAL_Driver
 113:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @{
 114:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 115:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 116:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #ifdef HAL_NAND_MODULE_ENABLED
 117:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 118:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /** @defgroup NAND NAND
 119:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief NAND HAL module driver
 120:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @{
 121:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 122:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 123:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /* Private typedef -----------------------------------------------------------*/
 124:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /* Private Constants ------------------------------------------------------------*/
 125:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /* Private macro -------------------------------------------------------------*/
 126:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /* Private variables ---------------------------------------------------------*/
 127:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /* Private function prototypes -----------------------------------------------*/
 128:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /* Exported functions ---------------------------------------------------------*/
 129:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 130:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions NAND Exported Functions
 131:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @{
 132:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 133:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 134:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group1 Initialization and de-initialization functions
 135:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief    Initialization and Configuration functions
 136:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *
 137:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   @verbatim
 138:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ==============================================================================
 139:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             ##### NAND Initialization and de-initialization functions #####
 140:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ==============================================================================
 141:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   [..]
 142:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     This section provides functions allowing to initialize/de-initialize
 143:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     the NAND memory
 144:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 145:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** @endverbatim
 146:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @{
ARM GAS  /tmp/cc968NXr.s 			page 4


 147:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 148:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 149:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 150:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Perform NAND memory Initialization sequence
 151:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 152:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 153:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  ComSpace_Timing pointer to Common space timing structure
 154:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  AttSpace_Timing pointer to Attribute space timing structure
 155:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
 156:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 157:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Ti
 158:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 159:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND handle state */
 160:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand == NULL)
 161:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 162:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
 163:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 164:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 165:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_RESET)
 166:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 167:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Allocate lock resource and initialize it */
 168:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->Lock = HAL_UNLOCKED;
 169:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 170:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
 171:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     if(hnand->MspInitCallback == NULL)
 172:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 173:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       hnand->MspInitCallback = HAL_NAND_MspInit;
 174:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 175:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->ItCallback = HAL_NAND_ITCallback;
 176:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 177:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Init the low level hardware */
 178:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->MspInitCallback(hnand);
 179:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #else
 180:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Initialize the low level hardware (MSP) */
 181:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     HAL_NAND_MspInit(hnand);
 182:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 183:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 184:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 185:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Initialize NAND control Interface */
 186:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 187:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 188:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Initialize NAND common space timing Interface */
 189:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 190:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 191:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Initialize NAND attribute space timing Interface */
 192:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank)
 193:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 194:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Enable the NAND device */
 195:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   __FMC_NAND_ENABLE(hnand->Instance);
 196:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   
 197:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Enable FMC Peripheral */
 198:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   __FMC_ENABLE();
 199:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Update the NAND controller state */
 200:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 201:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 202:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
 203:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
ARM GAS  /tmp/cc968NXr.s 			page 5


 204:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 205:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 206:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Perform NAND memory De-Initialization sequence
 207:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 208:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 209:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
 210:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 211:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_DeInit(NAND_HandleTypeDef *hnand)
 212:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 213:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
 214:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if(hnand->MspDeInitCallback == NULL)
 215:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 216:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->MspDeInitCallback = HAL_NAND_MspDeInit;
 217:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 218:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 219:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* DeInit the low level hardware */
 220:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   hnand->MspDeInitCallback(hnand);
 221:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #else
 222:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Initialize the low level hardware (MSP) */
 223:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   HAL_NAND_MspDeInit(hnand);
 224:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 225:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 226:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Configure the NAND registers with their reset values */
 227:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   (void)FMC_NAND_DeInit(hnand->Instance, hnand->Init.NandBank);
 228:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 229:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Reset the NAND controller state */
 230:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_RESET;
 231:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 232:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Release Lock */
 233:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
 234:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 235:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
 236:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 237:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 238:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 239:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  NAND MSP Init
 240:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 241:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 242:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval None
 243:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 244:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** __weak void HAL_NAND_MspInit(NAND_HandleTypeDef *hnand)
 245:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
  27              		.loc 1 245 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE143:
  37              		.section	.text.HAL_NAND_Init,"ax",%progbits
  38              		.align	1
  39              		.global	HAL_NAND_Init
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
ARM GAS  /tmp/cc968NXr.s 			page 6


  43              		.fpu fpv5-d16
  45              	HAL_NAND_Init:
  46              	.LFB141:
 158:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND handle state */
  47              		.loc 1 158 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              	.LVL1:
 160:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
  52              		.loc 1 160 0
  53 0000 48B3     		cbz	r0, .L5
 158:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND handle state */
  54              		.loc 1 158 0
  55 0002 70B5     		push	{r4, r5, r6, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 16
  58              		.cfi_offset 4, -16
  59              		.cfi_offset 5, -12
  60              		.cfi_offset 6, -8
  61              		.cfi_offset 14, -4
  62 0004 0446     		mov	r4, r0
  63 0006 1546     		mov	r5, r2
  64 0008 0E46     		mov	r6, r1
 165:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
  65              		.loc 1 165 0
  66 000a 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
  67 000e EBB1     		cbz	r3, .L10
  68              	.LVL2:
  69              	.L4:
 186:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  70              		.loc 1 186 0
  71 0010 2146     		mov	r1, r4
  72 0012 51F8040B 		ldr	r0, [r1], #4
  73 0016 FFF7FEFF 		bl	FMC_NAND_Init
  74              	.LVL3:
 189:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  75              		.loc 1 189 0
  76 001a 6268     		ldr	r2, [r4, #4]
  77 001c 3146     		mov	r1, r6
  78 001e 2068     		ldr	r0, [r4]
  79 0020 FFF7FEFF 		bl	FMC_NAND_CommonSpace_Timing_Init
  80              	.LVL4:
 192:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  81              		.loc 1 192 0
  82 0024 6268     		ldr	r2, [r4, #4]
  83 0026 2946     		mov	r1, r5
  84 0028 2068     		ldr	r0, [r4]
  85 002a FFF7FEFF 		bl	FMC_NAND_AttributeSpace_Timing_Init
  86              	.LVL5:
 195:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   
  87              		.loc 1 195 0
  88 002e 2268     		ldr	r2, [r4]
  89 0030 1368     		ldr	r3, [r2]
  90 0032 43F00403 		orr	r3, r3, #4
  91 0036 1360     		str	r3, [r2]
 198:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Update the NAND controller state */
ARM GAS  /tmp/cc968NXr.s 			page 7


  92              		.loc 1 198 0
  93 0038 084A     		ldr	r2, .L11
  94 003a 1368     		ldr	r3, [r2]
  95 003c 43F00043 		orr	r3, r3, #-2147483648
  96 0040 1360     		str	r3, [r2]
 200:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
  97              		.loc 1 200 0
  98 0042 0123     		movs	r3, #1
  99 0044 84F82130 		strb	r3, [r4, #33]
 202:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 100              		.loc 1 202 0
 101 0048 0020     		movs	r0, #0
 102 004a 70BD     		pop	{r4, r5, r6, pc}
 103              	.LVL6:
 104              	.L10:
 168:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 105              		.loc 1 168 0
 106 004c 80F82030 		strb	r3, [r0, #32]
 181:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 107              		.loc 1 181 0
 108 0050 FFF7FEFF 		bl	HAL_NAND_MspInit
 109              	.LVL7:
 110 0054 DCE7     		b	.L4
 111              	.LVL8:
 112              	.L5:
 113              	.LCFI1:
 114              		.cfi_def_cfa_offset 0
 115              		.cfi_restore 4
 116              		.cfi_restore 5
 117              		.cfi_restore 6
 118              		.cfi_restore 14
 162:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 119              		.loc 1 162 0
 120 0056 0120     		movs	r0, #1
 121              	.LVL9:
 122 0058 7047     		bx	lr
 123              	.L12:
 124 005a 00BF     		.align	2
 125              	.L11:
 126 005c 00400052 		.word	1375748096
 127              		.cfi_endproc
 128              	.LFE141:
 130              		.section	.text.HAL_NAND_MspDeInit,"ax",%progbits
 131              		.align	1
 132              		.weak	HAL_NAND_MspDeInit
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu fpv5-d16
 138              	HAL_NAND_MspDeInit:
 139              	.LFB144:
 246:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Prevent unused argument(s) compilation warning */
 247:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   UNUSED(hnand);
 248:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 249:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 250:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             the HAL_NAND_MspInit could be implemented in the user file
 251:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****    */
ARM GAS  /tmp/cc968NXr.s 			page 8


 252:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 253:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 254:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 255:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  NAND MSP DeInit
 256:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 257:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 258:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval None
 259:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 260:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** __weak void HAL_NAND_MspDeInit(NAND_HandleTypeDef *hnand)
 261:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 140              		.loc 1 261 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145              	.LVL10:
 146 0000 7047     		bx	lr
 147              		.cfi_endproc
 148              	.LFE144:
 150              		.section	.text.HAL_NAND_DeInit,"ax",%progbits
 151              		.align	1
 152              		.global	HAL_NAND_DeInit
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu fpv5-d16
 158              	HAL_NAND_DeInit:
 159              	.LFB142:
 212:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
 160              		.loc 1 212 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              	.LVL11:
 212:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
 165              		.loc 1 212 0
 166 0000 10B5     		push	{r4, lr}
 167              	.LCFI2:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 4, -8
 170              		.cfi_offset 14, -4
 171 0002 0446     		mov	r4, r0
 223:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 172              		.loc 1 223 0
 173 0004 FFF7FEFF 		bl	HAL_NAND_MspDeInit
 174              	.LVL12:
 227:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 175              		.loc 1 227 0
 176 0008 6168     		ldr	r1, [r4, #4]
 177 000a 2068     		ldr	r0, [r4]
 178 000c FFF7FEFF 		bl	FMC_NAND_DeInit
 179              	.LVL13:
 230:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 180              		.loc 1 230 0
 181 0010 0020     		movs	r0, #0
 182 0012 84F82100 		strb	r0, [r4, #33]
 233:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
ARM GAS  /tmp/cc968NXr.s 			page 9


 183              		.loc 1 233 0
 184 0016 84F82000 		strb	r0, [r4, #32]
 236:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 185              		.loc 1 236 0
 186 001a 10BD     		pop	{r4, pc}
 187              		.cfi_endproc
 188              	.LFE142:
 190              		.section	.text.HAL_NAND_ITCallback,"ax",%progbits
 191              		.align	1
 192              		.weak	HAL_NAND_ITCallback
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv5-d16
 198              	HAL_NAND_ITCallback:
 199              	.LFB146:
 262:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Prevent unused argument(s) compilation warning */
 263:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   UNUSED(hnand);
 264:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 265:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 266:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             the HAL_NAND_MspDeInit could be implemented in the user file
 267:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****    */
 268:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 269:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 270:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 271:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 272:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  This function handles NAND device interrupt request.
 273:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 274:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 275:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
 276:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** */
 277:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
 278:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 279:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check NAND interrupt Rising edge flag */
 280:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 281:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 282:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* NAND interrupt callback*/
 283:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
 284:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->ItCallback(hnand);
 285:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #else
 286:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 287:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 288:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 289:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Clear NAND interrupt Rising edge pending bit */
 290:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
 291:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 292:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 293:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check NAND interrupt Level flag */
 294:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 295:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 296:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* NAND interrupt callback*/
 297:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
 298:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->ItCallback(hnand);
 299:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #else
 300:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 301:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 302:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
ARM GAS  /tmp/cc968NXr.s 			page 10


 303:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Clear NAND interrupt Level pending bit */
 304:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
 305:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 306:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 307:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check NAND interrupt Falling edge flag */
 308:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 309:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 310:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* NAND interrupt callback*/
 311:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
 312:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->ItCallback(hnand);
 313:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #else
 314:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 315:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 316:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 317:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Clear NAND interrupt Falling edge pending bit */
 318:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
 319:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 320:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 321:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check NAND interrupt FIFO empty flag */
 322:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 323:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 324:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* NAND interrupt callback*/
 325:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
 326:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->ItCallback(hnand);
 327:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #else
 328:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 329:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 330:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 331:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Clear NAND interrupt FIFO empty pending bit */
 332:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
 333:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 334:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 335:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 336:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 337:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 338:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  NAND interrupt feature callback
 339:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 340:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 341:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval None
 342:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 343:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** __weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
 344:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 200              		.loc 1 344 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205              	.LVL14:
 206 0000 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE146:
 210              		.section	.text.HAL_NAND_IRQHandler,"ax",%progbits
 211              		.align	1
 212              		.global	HAL_NAND_IRQHandler
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
ARM GAS  /tmp/cc968NXr.s 			page 11


 216              		.fpu fpv5-d16
 218              	HAL_NAND_IRQHandler:
 219              	.LFB145:
 278:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check NAND interrupt Rising edge flag */
 220              		.loc 1 278 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              	.LVL15:
 278:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check NAND interrupt Rising edge flag */
 225              		.loc 1 278 0
 226 0000 10B5     		push	{r4, lr}
 227              	.LCFI3:
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 4, -8
 230              		.cfi_offset 14, -4
 231 0002 0446     		mov	r4, r0
 280:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 232              		.loc 1 280 0
 233 0004 0368     		ldr	r3, [r0]
 234 0006 5B68     		ldr	r3, [r3, #4]
 235 0008 13F0010F 		tst	r3, #1
 236 000c 0FD1     		bne	.L23
 237              	.LVL16:
 238              	.L18:
 294:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 239              		.loc 1 294 0
 240 000e 2368     		ldr	r3, [r4]
 241 0010 5B68     		ldr	r3, [r3, #4]
 242 0012 13F0020F 		tst	r3, #2
 243 0016 12D1     		bne	.L24
 244              	.L19:
 308:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 245              		.loc 1 308 0
 246 0018 2368     		ldr	r3, [r4]
 247 001a 5B68     		ldr	r3, [r3, #4]
 248 001c 13F0040F 		tst	r3, #4
 249 0020 16D1     		bne	.L25
 250              	.L20:
 322:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 251              		.loc 1 322 0
 252 0022 2368     		ldr	r3, [r4]
 253 0024 5B68     		ldr	r3, [r3, #4]
 254 0026 13F0400F 		tst	r3, #64
 255 002a 1AD1     		bne	.L26
 256              	.L17:
 257 002c 10BD     		pop	{r4, pc}
 258              	.LVL17:
 259              	.L23:
 286:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 260              		.loc 1 286 0
 261 002e FFF7FEFF 		bl	HAL_NAND_ITCallback
 262              	.LVL18:
 290:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 263              		.loc 1 290 0
 264 0032 2268     		ldr	r2, [r4]
 265 0034 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/cc968NXr.s 			page 12


 266 0036 23F00103 		bic	r3, r3, #1
 267 003a 5360     		str	r3, [r2, #4]
 268 003c E7E7     		b	.L18
 269              	.L24:
 300:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 270              		.loc 1 300 0
 271 003e 2046     		mov	r0, r4
 272 0040 FFF7FEFF 		bl	HAL_NAND_ITCallback
 273              	.LVL19:
 304:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 274              		.loc 1 304 0
 275 0044 2268     		ldr	r2, [r4]
 276 0046 5368     		ldr	r3, [r2, #4]
 277 0048 23F00203 		bic	r3, r3, #2
 278 004c 5360     		str	r3, [r2, #4]
 279 004e E3E7     		b	.L19
 280              	.L25:
 314:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 281              		.loc 1 314 0
 282 0050 2046     		mov	r0, r4
 283 0052 FFF7FEFF 		bl	HAL_NAND_ITCallback
 284              	.LVL20:
 318:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 285              		.loc 1 318 0
 286 0056 2268     		ldr	r2, [r4]
 287 0058 5368     		ldr	r3, [r2, #4]
 288 005a 23F00403 		bic	r3, r3, #4
 289 005e 5360     		str	r3, [r2, #4]
 290 0060 DFE7     		b	.L20
 291              	.L26:
 328:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
 292              		.loc 1 328 0
 293 0062 2046     		mov	r0, r4
 294 0064 FFF7FEFF 		bl	HAL_NAND_ITCallback
 295              	.LVL21:
 332:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 296              		.loc 1 332 0
 297 0068 2268     		ldr	r2, [r4]
 298 006a 5368     		ldr	r3, [r2, #4]
 299 006c 23F04003 		bic	r3, r3, #64
 300 0070 5360     		str	r3, [r2, #4]
 335:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 301              		.loc 1 335 0
 302 0072 DBE7     		b	.L17
 303              		.cfi_endproc
 304              	.LFE145:
 306              		.section	.text.HAL_NAND_Read_ID,"ax",%progbits
 307              		.align	1
 308              		.global	HAL_NAND_Read_ID
 309              		.syntax unified
 310              		.thumb
 311              		.thumb_func
 312              		.fpu fpv5-d16
 314              	HAL_NAND_Read_ID:
 315              	.LFB147:
 345:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Prevent unused argument(s) compilation warning */
 346:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   UNUSED(hnand);
ARM GAS  /tmp/cc968NXr.s 			page 13


 347:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 348:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 349:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             the HAL_NAND_ITCallback could be implemented in the user file
 350:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****    */
 351:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 352:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 353:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 354:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @}
 355:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 356:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 357:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group2 Input and Output functions
 358:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief    Input Output and memory control functions
 359:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *
 360:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   @verbatim
 361:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ==============================================================================
 362:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****                     ##### NAND Input and Output functions #####
 363:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ==============================================================================
 364:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   [..]
 365:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     This section provides functions allowing to use and control the NAND
 366:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     memory
 367:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 368:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** @endverbatim
 369:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @{
 370:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 371:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 372:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 373:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Read the NAND memory electronic signature
 374:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 375:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 376:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pNAND_ID NAND ID structure
 377:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
 378:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 379:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDTypeDef *pNAND_ID)
 380:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 316              		.loc 1 380 0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 8
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320              		@ link register save eliminated.
 321              	.LVL22:
 322 0000 82B0     		sub	sp, sp, #8
 323              	.LCFI4:
 324              		.cfi_def_cfa_offset 8
 381:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   __IO uint32_t data = 0;
 325              		.loc 1 381 0
 326 0002 0023     		movs	r3, #0
 327 0004 0193     		str	r3, [sp, #4]
 382:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   __IO uint32_t data1 = 0;
 328              		.loc 1 382 0
 329 0006 0093     		str	r3, [sp]
 383:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t deviceAddress;
 384:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 385:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
 386:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
 330              		.loc 1 386 0
 331 0008 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 332 000c DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cc968NXr.s 			page 14


 333 000e 022B     		cmp	r3, #2
 334 0010 4AD0     		beq	.L31
 387:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 388:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
 389:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 390:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
 335              		.loc 1 390 0
 336 0012 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 337 0016 DBB2     		uxtb	r3, r3
 338 0018 012B     		cmp	r3, #1
 339 001a 01D0     		beq	.L35
 391:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 392:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process Locked */
 393:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_LOCK(hnand);
 394:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 395:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
 396:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
 397:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 398:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Identify the device address */
 399:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     deviceAddress = NAND_DEVICE;
 400:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 401:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Send Read ID command sequence */
 402:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA))  = NAND_CMD_READID;
 403:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
 404:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00;
 405:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
 406:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 407:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Read the electronic signature from NAND flash */
 408:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     if (hnand->Init.MemoryDataWidth == FMC_NAND_MEM_BUS_WIDTH_8)
 409:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 410:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       data = *(__IO uint32_t *)deviceAddress;
 411:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 412:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Return the data read */
 413:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 414:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 415:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 416:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 417:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 418:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     else
 419:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 420:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       data = *(__IO uint32_t *)deviceAddress;
 421:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       data1 = *((__IO uint32_t *)deviceAddress + 4);
 422:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 423:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Return the data read */
 424:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 425:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Device_Id  = ADDR_3RD_CYCLE(data);
 426:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Third_Id   = ADDR_1ST_CYCLE(data1);
 427:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Fourth_Id  = ADDR_3RD_CYCLE(data1);
 428:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 429:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 430:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
 431:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
 432:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 433:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process unlocked */
 434:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_UNLOCK(hnand);
 435:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 436:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
ARM GAS  /tmp/cc968NXr.s 			page 15


 437:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 438:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
 340              		.loc 1 438 0
 341 001c 0120     		movs	r0, #1
 342              	.LVL23:
 343 001e 44E0     		b	.L28
 344              	.LVL24:
 345              	.L35:
 393:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 346              		.loc 1 393 0
 347 0020 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 348 0024 012B     		cmp	r3, #1
 349 0026 42D0     		beq	.L33
 393:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 350              		.loc 1 393 0 is_stmt 0 discriminator 2
 351 0028 0123     		movs	r3, #1
 352 002a 80F82030 		strb	r3, [r0, #32]
 396:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 353              		.loc 1 396 0 is_stmt 1 discriminator 2
 354 002e 0223     		movs	r3, #2
 355 0030 80F82130 		strb	r3, [r0, #33]
 356              	.LVL25:
 402:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
 357              		.loc 1 402 0 discriminator 2
 358 0034 9022     		movs	r2, #144
 359 0036 1F4B     		ldr	r3, .L36
 360 0038 1A70     		strb	r2, [r3]
 361              	.LBB340:
 362              	.LBB341:
 363              		.file 2 "Libraries/CMSIS/Include/cmsis_gcc.h"
   1:Libraries/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Libraries/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Libraries/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Libraries/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Libraries/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Libraries/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Libraries/CMSIS/Include/cmsis_gcc.h **** /*
   8:Libraries/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Libraries/CMSIS/Include/cmsis_gcc.h ****  *
  10:Libraries/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Libraries/CMSIS/Include/cmsis_gcc.h ****  *
  12:Libraries/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Libraries/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Libraries/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Libraries/CMSIS/Include/cmsis_gcc.h ****  *
  16:Libraries/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Libraries/CMSIS/Include/cmsis_gcc.h ****  *
  18:Libraries/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Libraries/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Libraries/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Libraries/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Libraries/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
  24:Libraries/CMSIS/Include/cmsis_gcc.h **** 
  25:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Libraries/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc968NXr.s 			page 16


  28:Libraries/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Libraries/CMSIS/Include/cmsis_gcc.h **** 
  34:Libraries/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Libraries/CMSIS/Include/cmsis_gcc.h **** 
  39:Libraries/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Libraries/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Libraries/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
ARM GAS  /tmp/cc968NXr.s 			page 17


  85:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Libraries/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Libraries/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Libraries/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 117:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 118:Libraries/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Libraries/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Libraries/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Libraries/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 123:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 124:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 125:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Libraries/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 129:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 131:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 133:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 134:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 135:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 136:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Libraries/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 140:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Libraries/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc968NXr.s 			page 18


 142:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 144:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 145:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 146:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 147:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 151:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 153:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 155:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 158:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 159:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 160:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 162:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 166:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 168:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 170:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 173:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 175:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 176:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 177:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 181:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 183:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 185:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 186:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 187:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 189:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 193:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 195:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 197:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Libraries/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc968NXr.s 			page 19


 199:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 200:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 201:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 205:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 207:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 209:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 212:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 213:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 214:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 215:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 219:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 221:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 223:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 226:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 227:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 228:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 229:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 233:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 235:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 237:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 240:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 241:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 242:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 243:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 247:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 249:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 251:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 254:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 255:Libraries/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc968NXr.s 			page 20


 256:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 258:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 262:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 264:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 266:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 269:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 271:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 272:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 273:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 277:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 279:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 281:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 282:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 283:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 285:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 289:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 291:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 293:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 295:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 296:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 297:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 301:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 303:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 305:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 308:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 309:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 310:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 312:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
ARM GAS  /tmp/cc968NXr.s 			page 21


 313:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 316:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 318:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 320:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 323:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 325:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 326:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 327:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 331:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 333:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 335:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 336:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 337:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 339:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 343:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 345:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 347:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 349:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 350:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 352:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 356:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 358:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 360:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 363:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 364:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 365:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 366:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc968NXr.s 			page 22


 370:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 372:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 374:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 376:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 377:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 378:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 382:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 384:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 386:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 389:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 390:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 391:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 393:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 397:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 399:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 401:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 404:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 406:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 407:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 408:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 412:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 414:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 416:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 417:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 418:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 420:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 424:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 426:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
ARM GAS  /tmp/cc968NXr.s 			page 23


 427:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 428:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 430:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 431:Libraries/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Libraries/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Libraries/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 435:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Libraries/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 439:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 441:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 443:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 444:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 445:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 446:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Libraries/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 450:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 452:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 454:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 455:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 456:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 457:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 461:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 463:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 465:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 468:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 469:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 470:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 472:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 476:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 478:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 480:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 483:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc968NXr.s 			page 24


 484:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 485:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 486:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 487:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 491:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 493:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 495:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 496:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 497:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 499:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 503:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 505:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 507:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 509:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 510:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 511:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Libraries/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 516:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 518:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 520:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 521:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 522:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 523:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 527:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 529:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 531:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 534:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 535:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 536:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 538:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
ARM GAS  /tmp/cc968NXr.s 			page 25


 541:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 542:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 544:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 546:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 549:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 551:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 552:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 553:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 557:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 559:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 561:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 562:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 563:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 565:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 569:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 571:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 573:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 575:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Libraries/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Libraries/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 579:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 580:Libraries/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Libraries/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 583:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 584:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Libraries/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Libraries/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Libraries/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Libraries/CMSIS/Include/cmsis_gcc.h ****   
 589:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 592:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 594:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Libraries/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Libraries/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Libraries/CMSIS/Include/cmsis_gcc.h ****   return 0U;
ARM GAS  /tmp/cc968NXr.s 			page 26


 598:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 599:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Libraries/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 604:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 605:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 607:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Libraries/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Libraries/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 611:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 614:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 616:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Libraries/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Libraries/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 620:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Libraries/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 625:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 627:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 628:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 629:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Libraries/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Libraries/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Libraries/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Libraries/CMSIS/Include/cmsis_gcc.h ****   
 634:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 637:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 639:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Libraries/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Libraries/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Libraries/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 644:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 647:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 648:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 649:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 651:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Libraries/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Libraries/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Libraries/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc968NXr.s 			page 27


 655:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 658:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 660:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Libraries/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Libraries/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 664:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 667:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 669:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 670:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 671:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Libraries/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Libraries/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Libraries/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 676:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 679:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 681:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Libraries/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Libraries/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Libraries/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 686:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Libraries/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 691:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 692:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 693:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 695:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Libraries/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Libraries/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 699:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 702:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 704:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Libraries/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Libraries/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 708:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Libraries/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc968NXr.s 			page 28


 712:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 713:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 715:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 716:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 717:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Libraries/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Libraries/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Libraries/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 722:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 725:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 727:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Libraries/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Libraries/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Libraries/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 732:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 735:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 736:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 737:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 739:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Libraries/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Libraries/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 743:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 746:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 748:Libraries/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Libraries/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Libraries/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 752:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 755:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 757:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Libraries/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 760:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 761:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 762:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 766:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 768:Libraries/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
ARM GAS  /tmp/cc968NXr.s 			page 29


 769:Libraries/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Libraries/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Libraries/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Libraries/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Libraries/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Libraries/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 776:Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 778:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 782:Libraries/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 785:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 786:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 787:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 788:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 792:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 794:Libraries/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Libraries/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Libraries/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Libraries/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Libraries/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Libraries/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Libraries/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 802:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 805:Libraries/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 808:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 809:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 810:Libraries/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 812:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 813:Libraries/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Libraries/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Libraries/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Libraries/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Libraries/CMSIS/Include/cmsis_gcc.h **** */
 818:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 819:Libraries/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Libraries/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Libraries/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Libraries/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
ARM GAS  /tmp/cc968NXr.s 			page 30


 826:Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 827:Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 832:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 833:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 836:Libraries/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 838:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 839:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 842:Libraries/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 844:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 845:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 846:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Libraries/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 850:Libraries/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 852:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 853:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 854:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 857:Libraries/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 859:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 860:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 861:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Libraries/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Libraries/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 866:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 868:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Libraries/CMSIS/Include/cmsis_gcc.h **** }
 870:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 871:Libraries/CMSIS/Include/cmsis_gcc.h **** 
 872:Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 873:Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Libraries/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 877:Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Libraries/CMSIS/Include/cmsis_gcc.h **** {
 879:Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 364              		.loc 2 879 0 discriminator 2
 365              		.syntax unified
 366              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc968NXr.s 			page 31


 367 003a BFF34F8F 		dsb 0xF
 368              	@ 0 "" 2
 369              		.thumb
 370              		.syntax unified
 371              	.LBE341:
 372              	.LBE340:
 404:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
 373              		.loc 1 404 0 discriminator 2
 374 003e 0022     		movs	r2, #0
 375 0040 03F58033 		add	r3, r3, #65536
 376 0044 1A70     		strb	r2, [r3]
 377              	.LBB342:
 378              	.LBB343:
 379              		.loc 2 879 0 discriminator 2
 380              		.syntax unified
 381              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 382 0046 BFF34F8F 		dsb 0xF
 383              	@ 0 "" 2
 384              		.thumb
 385              		.syntax unified
 386              	.LBE343:
 387              	.LBE342:
 408:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 388              		.loc 1 408 0 discriminator 2
 389 004a C368     		ldr	r3, [r0, #12]
 390 004c C3B9     		cbnz	r3, .L29
 410:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 391              		.loc 1 410 0
 392 004e 4FF00043 		mov	r3, #-2147483648
 393 0052 1B68     		ldr	r3, [r3]
 394 0054 0193     		str	r3, [sp, #4]
 413:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 395              		.loc 1 413 0
 396 0056 019B     		ldr	r3, [sp, #4]
 397 0058 0B70     		strb	r3, [r1]
 414:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 398              		.loc 1 414 0
 399 005a 019B     		ldr	r3, [sp, #4]
 400 005c C3F30723 		ubfx	r3, r3, #8, #8
 401 0060 4B70     		strb	r3, [r1, #1]
 415:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 402              		.loc 1 415 0
 403 0062 019B     		ldr	r3, [sp, #4]
 404 0064 C3F30743 		ubfx	r3, r3, #16, #8
 405 0068 8B70     		strb	r3, [r1, #2]
 416:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 406              		.loc 1 416 0
 407 006a 019B     		ldr	r3, [sp, #4]
 408 006c 1B0E     		lsrs	r3, r3, #24
 409 006e CB70     		strb	r3, [r1, #3]
 410              	.L30:
 431:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 411              		.loc 1 431 0
 412 0070 0123     		movs	r3, #1
 413 0072 80F82130 		strb	r3, [r0, #33]
 434:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 414              		.loc 1 434 0
ARM GAS  /tmp/cc968NXr.s 			page 32


 415 0076 0023     		movs	r3, #0
 416 0078 80F82030 		strb	r3, [r0, #32]
 439:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 440:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 441:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
 417              		.loc 1 441 0
 418 007c 1846     		mov	r0, r3
 419              	.LVL26:
 420 007e 14E0     		b	.L28
 421              	.LVL27:
 422              	.L29:
 420:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       data1 = *((__IO uint32_t *)deviceAddress + 4);
 423              		.loc 1 420 0
 424 0080 4FF00043 		mov	r3, #-2147483648
 425 0084 1B68     		ldr	r3, [r3]
 426 0086 0193     		str	r3, [sp, #4]
 421:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 427              		.loc 1 421 0
 428 0088 0B4B     		ldr	r3, .L36+4
 429 008a 1B68     		ldr	r3, [r3]
 430 008c 0093     		str	r3, [sp]
 424:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Device_Id  = ADDR_3RD_CYCLE(data);
 431              		.loc 1 424 0
 432 008e 019B     		ldr	r3, [sp, #4]
 433 0090 0B70     		strb	r3, [r1]
 425:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Third_Id   = ADDR_1ST_CYCLE(data1);
 434              		.loc 1 425 0
 435 0092 019B     		ldr	r3, [sp, #4]
 436 0094 C3F30743 		ubfx	r3, r3, #16, #8
 437 0098 4B70     		strb	r3, [r1, #1]
 426:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pNAND_ID->Fourth_Id  = ADDR_3RD_CYCLE(data1);
 438              		.loc 1 426 0
 439 009a 009B     		ldr	r3, [sp]
 440 009c 8B70     		strb	r3, [r1, #2]
 427:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 441              		.loc 1 427 0
 442 009e 009B     		ldr	r3, [sp]
 443 00a0 C3F30743 		ubfx	r3, r3, #16, #8
 444 00a4 CB70     		strb	r3, [r1, #3]
 445 00a6 E3E7     		b	.L30
 446              	.LVL28:
 447              	.L31:
 388:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 448              		.loc 1 388 0
 449 00a8 0220     		movs	r0, #2
 450              	.LVL29:
 451              	.L28:
 442:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 452              		.loc 1 442 0
 453 00aa 02B0     		add	sp, sp, #8
 454              	.LCFI5:
 455              		.cfi_remember_state
 456              		.cfi_def_cfa_offset 0
 457              		@ sp needed
 458 00ac 7047     		bx	lr
 459              	.LVL30:
 460              	.L33:
ARM GAS  /tmp/cc968NXr.s 			page 33


 461              	.LCFI6:
 462              		.cfi_restore_state
 393:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 463              		.loc 1 393 0
 464 00ae 0220     		movs	r0, #2
 465              	.LVL31:
 466 00b0 FBE7     		b	.L28
 467              	.L37:
 468 00b2 00BF     		.align	2
 469              	.L36:
 470 00b4 00000180 		.word	-2147418112
 471 00b8 10000080 		.word	-2147483632
 472              		.cfi_endproc
 473              	.LFE147:
 475              		.section	.text.HAL_NAND_Reset,"ax",%progbits
 476              		.align	1
 477              		.global	HAL_NAND_Reset
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 481              		.fpu fpv5-d16
 483              	HAL_NAND_Reset:
 484              	.LFB148:
 443:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 444:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 445:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  NAND memory reset
 446:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 447:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 448:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
 449:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 450:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
 451:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 485              		.loc 1 451 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 490              	.LVL32:
 452:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t deviceAddress;
 453:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 454:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
 455:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
 491              		.loc 1 455 0
 492 0000 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 493 0004 DBB2     		uxtb	r3, r3
 494 0006 022B     		cmp	r3, #2
 495 0008 18D0     		beq	.L40
 456:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 457:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
 458:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 459:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
 496              		.loc 1 459 0
 497 000a 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 498 000e DBB2     		uxtb	r3, r3
 499 0010 012B     		cmp	r3, #1
 500 0012 01D0     		beq	.L43
 460:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
ARM GAS  /tmp/cc968NXr.s 			page 34


 461:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process Locked */
 462:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_LOCK(hnand);
 463:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 464:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
 465:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
 466:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 467:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Identify the device address */
 468:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     deviceAddress = NAND_DEVICE;
 469:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 470:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Send NAND reset command */
 471:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = 0xFF;
 472:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 473:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
 474:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
 475:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 476:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process unlocked */
 477:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_UNLOCK(hnand);
 478:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 479:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
 480:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 481:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
 501              		.loc 1 481 0
 502 0014 0120     		movs	r0, #1
 503              	.LVL33:
 504 0016 7047     		bx	lr
 505              	.LVL34:
 506              	.L43:
 462:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 507              		.loc 1 462 0
 508 0018 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 509 001c 012B     		cmp	r3, #1
 510 001e 0FD0     		beq	.L42
 465:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 511              		.loc 1 465 0 discriminator 2
 512 0020 0223     		movs	r3, #2
 513 0022 80F82130 		strb	r3, [r0, #33]
 514              	.LVL35:
 471:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 515              		.loc 1 471 0 discriminator 2
 516 0026 FF22     		movs	r2, #255
 517 0028 064B     		ldr	r3, .L44
 518 002a 1A70     		strb	r2, [r3]
 474:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 519              		.loc 1 474 0 discriminator 2
 520 002c 0123     		movs	r3, #1
 521 002e 80F82130 		strb	r3, [r0, #33]
 477:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 522              		.loc 1 477 0 discriminator 2
 523 0032 0023     		movs	r3, #0
 524 0034 80F82030 		strb	r3, [r0, #32]
 482:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 483:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 484:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
 525              		.loc 1 484 0 discriminator 2
 526 0038 1846     		mov	r0, r3
 527              	.LVL36:
 528 003a 7047     		bx	lr
ARM GAS  /tmp/cc968NXr.s 			page 35


 529              	.LVL37:
 530              	.L40:
 457:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 531              		.loc 1 457 0
 532 003c 0220     		movs	r0, #2
 533              	.LVL38:
 534 003e 7047     		bx	lr
 535              	.LVL39:
 536              	.L42:
 462:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 537              		.loc 1 462 0
 538 0040 0220     		movs	r0, #2
 539              	.LVL40:
 485:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 486:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 540              		.loc 1 486 0
 541 0042 7047     		bx	lr
 542              	.L45:
 543              		.align	2
 544              	.L44:
 545 0044 00000180 		.word	-2147418112
 546              		.cfi_endproc
 547              	.LFE148:
 549              		.section	.text.HAL_NAND_ConfigDevice,"ax",%progbits
 550              		.align	1
 551              		.global	HAL_NAND_ConfigDevice
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu fpv5-d16
 557              	HAL_NAND_ConfigDevice:
 558              	.LFB149:
 487:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 488:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 489:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Configure the device: Enter the physical parameters of the device
 490:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 491:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 492:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pDeviceConfig  pointer to NAND_DeviceConfigTypeDef structure
 493:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
 494:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 495:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_ConfigDevice(NAND_HandleTypeDef *hnand, NAND_DeviceConfigTypeDef *pDevi
 496:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 559              		.loc 1 496 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 564              	.LVL41:
 497:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   hnand->Config.PageSize           = pDeviceConfig->PageSize;
 565              		.loc 1 497 0
 566 0000 0B68     		ldr	r3, [r1]
 567 0002 4362     		str	r3, [r0, #36]
 498:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   hnand->Config.SpareAreaSize      = pDeviceConfig->SpareAreaSize;
 568              		.loc 1 498 0
 569 0004 4B68     		ldr	r3, [r1, #4]
 570 0006 8362     		str	r3, [r0, #40]
 499:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   hnand->Config.BlockSize          = pDeviceConfig->BlockSize;
ARM GAS  /tmp/cc968NXr.s 			page 36


 571              		.loc 1 499 0
 572 0008 8B68     		ldr	r3, [r1, #8]
 573 000a C362     		str	r3, [r0, #44]
 500:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   hnand->Config.BlockNbr           = pDeviceConfig->BlockNbr;
 574              		.loc 1 500 0
 575 000c CB68     		ldr	r3, [r1, #12]
 576 000e 0363     		str	r3, [r0, #48]
 501:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   hnand->Config.PlaneSize          = pDeviceConfig->PlaneSize;
 577              		.loc 1 501 0
 578 0010 4B69     		ldr	r3, [r1, #20]
 579 0012 8363     		str	r3, [r0, #56]
 502:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   hnand->Config.PlaneNbr           = pDeviceConfig->PlaneNbr;
 580              		.loc 1 502 0
 581 0014 0B69     		ldr	r3, [r1, #16]
 582 0016 4363     		str	r3, [r0, #52]
 503:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   hnand->Config.ExtraCommandEnable = pDeviceConfig->ExtraCommandEnable;
 583              		.loc 1 503 0
 584 0018 0B7E     		ldrb	r3, [r1, #24]	@ zero_extendqisi2
 585 001a 80F83C30 		strb	r3, [r0, #60]
 504:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 505:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
 506:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 586              		.loc 1 506 0
 587 001e 0020     		movs	r0, #0
 588              	.LVL42:
 589 0020 7047     		bx	lr
 590              		.cfi_endproc
 591              	.LFE149:
 593              		.section	.text.HAL_NAND_Erase_Block,"ax",%progbits
 594              		.align	1
 595              		.global	HAL_NAND_Erase_Block
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 599              		.fpu fpv5-d16
 601              	HAL_NAND_Erase_Block:
 602              	.LFB158:
 507:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 508:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 509:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 510:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Read Page(s) from NAND memory block (8-bits addressing)
 511:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 512:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 513:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 514:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pBuffer  pointer to destination read buffer
 515:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  NumPageToRead  number of pages to read from block
 516:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
 517:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 518:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, u
 519:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 520:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 521:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t tickstart;
 522:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t deviceAddress, numPagesRead = 0U, nandAddress, nbpages = NumPageToRead;
 523:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint8_t * buff = pBuffer;
 524:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 525:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
 526:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
ARM GAS  /tmp/cc968NXr.s 			page 37


 527:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 528:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
 529:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 530:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
 531:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 532:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process Locked */
 533:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_LOCK(hnand);
 534:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 535:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
 536:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
 537:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 538:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Identify the device address */
 539:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     deviceAddress = NAND_DEVICE;
 540:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 541:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* NAND raw address calculation */
 542:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     nandAddress = ARRAY_ADDRESS(pAddress, hnand);
 543:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 544:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Page(s) read loop */
 545:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     while ((nbpages != 0U) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))
 546:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 547:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Send read page command sequence */
 548:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
 549:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 550:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 551:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Cards with page size <= 512 bytes */
 552:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if ((hnand->Config.PageSize) <= 512U)
 553:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 554:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 555:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 556:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 557:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 558:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 559:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 560:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 561:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 562:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 563:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 564:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 565:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 566:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 567:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 568:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 569:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 570:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 571:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 572:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 573:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 574:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 575:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       else /* (hnand->Config.PageSize) > 512 */
 576:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 577:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 578:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 579:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 580:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 581:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 582:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 583:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
ARM GAS  /tmp/cc968NXr.s 			page 38


 584:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 585:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 586:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 587:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 588:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 589:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 590:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 591:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 592:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 593:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 594:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 595:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 596:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 597:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 598:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 599:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 600:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 601:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 602:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 603:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 604:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 605:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 606:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 607:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if (hnand->Config.ExtraCommandEnable == ENABLE)
 608:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 609:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Get tick */
 610:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         tickstart = HAL_GetTick();
 611:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 612:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Read status until NAND is ready */
 613:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 614:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 615:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 616:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           {
 617:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             /* Update the NAND controller state */
 618:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             hnand->State = HAL_NAND_STATE_ERROR;
 619:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 620:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             /* Process unlocked */
 621:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             __HAL_UNLOCK(hnand);
 622:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 623:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             return HAL_TIMEOUT;
 624:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           }
 625:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 626:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 627:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Go back to read mode */
 628:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = ((uint8_t)0x00U);
 629:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 630:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 631:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 632:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Get Data into Buffer */
 633:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       for (index = 0U; index < hnand->Config.PageSize; index++)
 634:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 635:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *buff = *(uint8_t *)deviceAddress;
 636:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
 637:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 638:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 639:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment read pages number */
 640:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       numPagesRead++;
ARM GAS  /tmp/cc968NXr.s 			page 39


 641:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 642:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Decrement pages to read */
 643:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nbpages--;
 644:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 645:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment the NAND address */
 646:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nandAddress = (uint32_t)(nandAddress + 1U);
 647:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 648:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 649:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
 650:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
 651:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 652:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process unlocked */
 653:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_UNLOCK(hnand);
 654:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 655:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
 656:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 657:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
 658:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 659:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 660:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
 661:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 662:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 663:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 664:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 665:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Read Page(s) from NAND memory block (16-bits addressing)
 666:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 667:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 668:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 669:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pBuffer  pointer to destination read buffer. pBuffer should be 16bits aligned
 670:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  NumPageToRead  number of pages to read from block
 671:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
 672:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 673:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_Page_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, 
 674:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 675:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 676:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t tickstart;
 677:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t deviceAddress, numPagesRead = 0, nandAddress, nbpages = NumPageToRead;
 678:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint16_t * buff = pBuffer;
 679:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 680:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
 681:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
 682:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 683:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
 684:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 685:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
 686:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 687:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process Locked */
 688:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_LOCK(hnand);
 689:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 690:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
 691:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
 692:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 693:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Identify the device address */
 694:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     deviceAddress = NAND_DEVICE;
 695:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 696:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* NAND raw address calculation */
 697:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     nandAddress = ARRAY_ADDRESS(pAddress, hnand);
ARM GAS  /tmp/cc968NXr.s 			page 40


 698:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 699:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Page(s) read loop */
 700:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     while ((nbpages != 0U) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))
 701:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 702:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Send read page command sequence */
 703:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
 704:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 705:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 706:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Cards with page size <= 512 bytes */
 707:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if ((hnand->Config.PageSize) <= 512U)
 708:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 709:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 710:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 711:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 712:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 713:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 714:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 715:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 716:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 717:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 718:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 719:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 720:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 721:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 722:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 723:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 724:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 725:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 726:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 727:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 728:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 729:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 730:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       else /* (hnand->Config.PageSize) > 512 */
 731:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 732:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 733:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 734:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 735:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 736:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 737:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 738:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 739:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 740:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 741:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 742:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 743:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 744:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 745:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 746:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 747:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 748:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 749:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 750:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 751:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 752:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 753:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 754:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
ARM GAS  /tmp/cc968NXr.s 			page 41


 755:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 756:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 757:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 758:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 759:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 760:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 761:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if (hnand->Config.ExtraCommandEnable == ENABLE)
 762:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 763:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Get tick */
 764:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         tickstart = HAL_GetTick();
 765:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 766:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Read status until NAND is ready */
 767:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 768:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 769:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 770:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           {
 771:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             /* Update the NAND controller state */
 772:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             hnand->State = HAL_NAND_STATE_ERROR;
 773:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 774:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             /* Process unlocked */
 775:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             __HAL_UNLOCK(hnand);
 776:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 777:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             return HAL_TIMEOUT;
 778:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           }
 779:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 780:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 781:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Go back to read mode */
 782:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = ((uint8_t)0x00U);
 783:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 784:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 785:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 786:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Get Data into Buffer */
 787:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       for (index = 0U; index < hnand->Config.PageSize; index++)
 788:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 789:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *buff = *(uint16_t *)deviceAddress;
 790:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
 791:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 792:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 793:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment read pages number */
 794:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       numPagesRead++;
 795:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 796:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Decrement pages to read */
 797:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nbpages--;
 798:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 799:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment the NAND address */
 800:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nandAddress = (uint32_t)(nandAddress + 1U);
 801:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 802:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 803:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
 804:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
 805:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 806:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process unlocked */
 807:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_UNLOCK(hnand);
 808:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 809:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
 810:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 811:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
ARM GAS  /tmp/cc968NXr.s 			page 42


 812:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 813:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 814:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
 815:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 816:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 817:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 818:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Write Page(s) to NAND memory block (8-bits addressing)
 819:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 820:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 821:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 822:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write
 823:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  NumPageToWrite   number of pages to write to block
 824:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
 825:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 826:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, 
 827:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 828:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 829:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t tickstart;
 830:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t deviceAddress, numPagesWritten = 0, nandAddress, nbpages = NumPageToWrite;
 831:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint8_t * buff = pBuffer;
 832:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 833:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
 834:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
 835:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 836:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
 837:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 838:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
 839:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 840:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process Locked */
 841:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_LOCK(hnand);
 842:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 843:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
 844:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
 845:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 846:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Identify the device address */
 847:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     deviceAddress = NAND_DEVICE;
 848:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 849:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* NAND raw address calculation */
 850:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     nandAddress = ARRAY_ADDRESS(pAddress, hnand);
 851:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 852:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Page(s) write loop */
 853:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     while ((nbpages != 0U) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))
 854:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 855:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Send write page command sequence */
 856:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
 857:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 858:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
 859:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 860:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 861:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Cards with page size <= 512 bytes */
 862:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if ((hnand->Config.PageSize) <= 512U)
 863:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 864:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 865:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 866:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 867:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 868:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
ARM GAS  /tmp/cc968NXr.s 			page 43


 869:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 870:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 871:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 872:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 873:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 874:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 875:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 876:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 877:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 878:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 879:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 880:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 881:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 882:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 883:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 884:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 885:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       else /* (hnand->Config.PageSize) > 512 */
 886:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 887:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 888:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 889:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 890:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 891:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 892:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 893:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 894:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 895:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 896:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 897:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 898:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 899:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 900:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 901:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 902:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
 903:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 904:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
 905:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 906:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
 907:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 908:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
 909:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 910:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 911:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 912:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 913:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Write data to memory */
 914:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       for (index = 0U; index < hnand->Config.PageSize; index++)
 915:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 916:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)deviceAddress = *buff;
 917:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
 918:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 919:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 920:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 921:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 922:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 923:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 924:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Get tick */
 925:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       tickstart = HAL_GetTick();
ARM GAS  /tmp/cc968NXr.s 			page 44


 926:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 927:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Read status until NAND is ready */
 928:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 929:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 930:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 931:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 932:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           /* Update the NAND controller state */
 933:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           hnand->State = HAL_NAND_STATE_ERROR;
 934:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 935:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           /* Process unlocked */
 936:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __HAL_UNLOCK(hnand);
 937:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 938:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           return HAL_TIMEOUT;
 939:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 940:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
 941:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 942:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment written pages number */
 943:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       numPagesWritten++;
 944:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 945:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Decrement pages to write */
 946:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nbpages--;
 947:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 948:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment the NAND address */
 949:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nandAddress = (uint32_t)(nandAddress + 1U);
 950:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 951:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 952:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
 953:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
 954:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 955:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process unlocked */
 956:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_UNLOCK(hnand);
 957:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 958:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
 959:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 960:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
 961:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 962:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 963:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
 964:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 965:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 966:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
 967:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Write Page(s) to NAND memory block (16-bits addressing)
 968:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 969:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
 970:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 971:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write. pBuffer should be 16bits aligned
 972:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  NumPageToWrite   number of pages to write to block
 973:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
 974:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
 975:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_Page_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress,
 976:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 977:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 978:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t tickstart;
 979:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t deviceAddress, numPagesWritten = 0, nandAddress, nbpages = NumPageToWrite;
 980:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint16_t * buff = pBuffer;
 981:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 982:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
ARM GAS  /tmp/cc968NXr.s 			page 45


 983:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
 984:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 985:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
 986:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 987:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
 988:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 989:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process Locked */
 990:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_LOCK(hnand);
 991:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 992:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
 993:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
 994:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 995:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Identify the device address */
 996:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     deviceAddress = NAND_DEVICE;
 997:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 998:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* NAND raw address calculation */
 999:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     nandAddress = ARRAY_ADDRESS(pAddress, hnand);
1000:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1001:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Page(s) write loop */
1002:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     while ((nbpages != 0U) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))
1003:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
1004:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Send write page command sequence */
1005:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
1006:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
1007:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
1008:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
1009:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1010:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Cards with page size <= 512 bytes */
1011:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if ((hnand->Config.PageSize) <= 512U)
1012:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1013:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
1014:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1015:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1016:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1017:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1018:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1019:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1020:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1021:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1022:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1023:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1024:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1025:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1026:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1027:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1028:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1029:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1030:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1031:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1032:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1033:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1034:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       else /* (hnand->Config.PageSize) > 512 */
1035:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1036:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
1037:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1038:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1039:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
ARM GAS  /tmp/cc968NXr.s 			page 46


1040:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1041:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1042:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1043:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1044:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1045:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1046:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1047:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1048:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1049:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1050:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1051:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1052:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1053:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1054:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1055:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1056:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1057:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1058:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1059:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1060:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1061:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1062:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Write data to memory */
1063:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       for (index = 0U; index < hnand->Config.PageSize; index++)
1064:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1065:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint16_t *)deviceAddress = *buff;
1066:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
1067:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1068:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1069:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1070:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
1071:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
1072:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1073:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Get tick */
1074:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       tickstart = HAL_GetTick();
1075:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1076:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Read status until NAND is ready */
1077:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       while (HAL_NAND_Read_Status(hnand) != NAND_READY)
1078:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1079:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
1080:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1081:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           /* Update the NAND controller state */
1082:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           hnand->State = HAL_NAND_STATE_ERROR;
1083:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1084:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           /* Process unlocked */
1085:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __HAL_UNLOCK(hnand);
1086:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1087:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           return HAL_TIMEOUT;
1088:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1089:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1090:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1091:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment written pages number */
1092:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       numPagesWritten++;
1093:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1094:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Decrement pages to write */
1095:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nbpages--;
1096:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
ARM GAS  /tmp/cc968NXr.s 			page 47


1097:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment the NAND address */
1098:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nandAddress = (uint32_t)(nandAddress + 1U);
1099:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
1100:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1101:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
1102:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
1103:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1104:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process unlocked */
1105:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_UNLOCK(hnand);
1106:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1107:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
1108:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1109:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
1110:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1111:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1112:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
1113:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
1114:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1115:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
1116:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Read Spare area(s) from NAND memory (8-bits addressing)
1117:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1118:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
1119:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1120:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pBuffer pointer to source buffer to write
1121:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  NumSpareAreaToRead Number of spare area to read
1122:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
1123:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** */
1124:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_SpareArea_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddre
1125:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
1126:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
1127:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t tickstart;
1128:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t deviceAddress, numSpareAreaRead = 0, nandAddress, columnAddress, nbspare = NumSpareAreaT
1129:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint8_t * buff = pBuffer;
1130:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1131:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
1132:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
1133:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1134:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
1135:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1136:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
1137:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1138:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process Locked */
1139:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_LOCK(hnand);
1140:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1141:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
1142:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
1143:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1144:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Identify the device address */
1145:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     deviceAddress = NAND_DEVICE;
1146:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1147:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* NAND raw address calculation */
1148:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     nandAddress = ARRAY_ADDRESS(pAddress, hnand);
1149:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1150:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Column in page address */
1151:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     columnAddress = COLUMN_ADDRESS(hnand);
1152:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1153:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Spare area(s) read loop */
ARM GAS  /tmp/cc968NXr.s 			page 48


1154:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     while ((nbspare != 0U) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))
1155:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
1156:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Cards with page size <= 512 bytes */
1157:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if ((hnand->Config.PageSize) <= 512U)
1158:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1159:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Send read spare area command sequence */
1160:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_C;
1161:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1162:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1163:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
1164:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1165:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1166:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1167:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1168:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1169:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1170:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1171:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1172:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1173:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1174:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1175:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1176:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1177:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1178:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1179:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1180:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1181:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1182:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1183:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1184:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       else /* (hnand->Config.PageSize) > 512 */
1185:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1186:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Send read spare area command sequence */
1187:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
1188:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1189:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1190:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
1191:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1192:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress
1193:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1194:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress
1195:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1196:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1197:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1198:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1199:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1200:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1201:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1202:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1203:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress
1204:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1205:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress
1206:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1207:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1208:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1209:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1210:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
ARM GAS  /tmp/cc968NXr.s 			page 49


1211:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1212:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1213:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1214:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1215:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1216:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
1217:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
1218:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1219:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if (hnand->Config.ExtraCommandEnable == ENABLE)
1220:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1221:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Get tick */
1222:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         tickstart = HAL_GetTick();
1223:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1224:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Read status until NAND is ready */
1225:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         while (HAL_NAND_Read_Status(hnand) != NAND_READY)
1226:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1227:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
1228:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           {
1229:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             /* Update the NAND controller state */
1230:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             hnand->State = HAL_NAND_STATE_ERROR;
1231:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1232:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             /* Process unlocked */
1233:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             __HAL_UNLOCK(hnand);
1234:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1235:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             return HAL_TIMEOUT;
1236:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           }
1237:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1238:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1239:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Go back to read mode */
1240:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = ((uint8_t)0x00U);
1241:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1242:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1243:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1244:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Get Data into Buffer */
1245:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
1246:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1247:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *buff = *(uint8_t *)deviceAddress;
1248:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
1249:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1250:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1251:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment read spare areas number */
1252:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       numSpareAreaRead++;
1253:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1254:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Decrement spare areas to read */
1255:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nbspare--;
1256:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1257:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment the NAND address */
1258:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nandAddress = (uint32_t)(nandAddress + 1U);
1259:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
1260:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1261:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
1262:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
1263:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1264:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process unlocked */
1265:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_UNLOCK(hnand);
1266:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1267:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
ARM GAS  /tmp/cc968NXr.s 			page 50


1268:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1269:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
1270:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1271:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1272:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
1273:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
1274:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1275:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
1276:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Read Spare area(s) from NAND memory (16-bits addressing)
1277:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1278:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
1279:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1280:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pBuffer pointer to source buffer to write. pBuffer should be 16bits aligned.
1281:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  NumSpareAreaToRead Number of spare area to read
1282:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
1283:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** */
1284:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_SpareArea_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddr
1285:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
1286:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
1287:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t tickstart;
1288:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t deviceAddress, numSpareAreaRead = 0, nandAddress, columnAddress, nbspare = NumSpareAreaT
1289:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint16_t * buff = pBuffer;
1290:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1291:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
1292:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
1293:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1294:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
1295:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1296:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
1297:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1298:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process Locked */
1299:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_LOCK(hnand);
1300:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1301:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
1302:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
1303:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1304:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Identify the device address */
1305:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     deviceAddress = NAND_DEVICE;
1306:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1307:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* NAND raw address calculation */
1308:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     nandAddress = ARRAY_ADDRESS(pAddress, hnand);
1309:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1310:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Column in page address */
1311:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     columnAddress = (uint32_t)(COLUMN_ADDRESS(hnand) * 2U);
1312:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1313:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Spare area(s) read loop */
1314:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     while ((nbspare != 0U) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))
1315:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
1316:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Cards with page size <= 512 bytes */
1317:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if ((hnand->Config.PageSize) <= 512U)
1318:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1319:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Send read spare area command sequence */
1320:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_C;
1321:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1322:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1323:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
1324:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
ARM GAS  /tmp/cc968NXr.s 			page 51


1325:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1326:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1327:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1328:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1329:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1330:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1331:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1332:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1333:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1334:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1335:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1336:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1337:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1338:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1339:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1340:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1341:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1342:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1343:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1344:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       else /* (hnand->Config.PageSize) > 512 */
1345:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1346:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Send read spare area command sequence */
1347:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
1348:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1349:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1350:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
1351:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1352:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress
1353:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1354:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress
1355:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1356:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1357:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1358:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1359:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1360:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1361:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1362:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1363:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress
1364:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1365:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress
1366:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1367:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1368:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1369:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1370:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1371:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1372:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1373:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1374:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1375:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1376:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
1377:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
1378:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1379:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if (hnand->Config.ExtraCommandEnable == ENABLE)
1380:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1381:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Get tick */
ARM GAS  /tmp/cc968NXr.s 			page 52


1382:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         tickstart = HAL_GetTick();
1383:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1384:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Read status until NAND is ready */
1385:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         while (HAL_NAND_Read_Status(hnand) != NAND_READY)
1386:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1387:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
1388:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           {
1389:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             /* Update the NAND controller state */
1390:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             hnand->State = HAL_NAND_STATE_ERROR;
1391:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1392:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             /* Process unlocked */
1393:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             __HAL_UNLOCK(hnand);
1394:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1395:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****             return HAL_TIMEOUT;
1396:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           }
1397:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1398:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1399:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Go back to read mode */
1400:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = ((uint8_t)0x00U);
1401:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1402:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1403:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1404:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Get Data into Buffer */
1405:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
1406:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1407:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *buff = *(uint16_t *)deviceAddress;
1408:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
1409:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1410:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1411:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment read spare areas number */
1412:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       numSpareAreaRead++;
1413:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1414:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Decrement spare areas to read */
1415:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nbspare--;
1416:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1417:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment the NAND address */
1418:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nandAddress = (uint32_t)(nandAddress + 1U);
1419:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
1420:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1421:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
1422:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
1423:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1424:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process unlocked */
1425:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_UNLOCK(hnand);
1426:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1427:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
1428:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1429:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
1430:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1431:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1432:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
1433:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
1434:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1435:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
1436:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Write Spare area(s) to NAND memory (8-bits addressing)
1437:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1438:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
ARM GAS  /tmp/cc968NXr.s 			page 53


1439:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1440:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write
1441:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  NumSpareAreaTowrite   number of spare areas to write to block
1442:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
1443:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
1444:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_SpareArea_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddr
1445:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
1446:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
1447:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t tickstart;
1448:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t deviceAddress, numSpareAreaWritten = 0, nandAddress, columnAddress, nbspare = NumSpareAr
1449:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint8_t * buff = pBuffer;
1450:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1451:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
1452:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
1453:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1454:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
1455:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1456:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
1457:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1458:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process Locked */
1459:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_LOCK(hnand);
1460:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1461:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
1462:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
1463:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1464:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Identify the device address */
1465:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     deviceAddress = NAND_DEVICE;
1466:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1467:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Page address calculation */
1468:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     nandAddress = ARRAY_ADDRESS(pAddress, hnand);
1469:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1470:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Column in page address */
1471:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     columnAddress = COLUMN_ADDRESS(hnand);
1472:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1473:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Spare area(s) write loop */
1474:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     while ((nbspare != 0U) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))
1475:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
1476:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Cards with page size <= 512 bytes */
1477:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if ((hnand->Config.PageSize) <= 512U)
1478:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1479:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Send write Spare area command sequence */
1480:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_C;
1481:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1482:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
1483:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1484:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1485:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
1486:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1487:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1488:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1489:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1490:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1491:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1492:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1493:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1494:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1495:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
ARM GAS  /tmp/cc968NXr.s 			page 54


1496:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1497:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1498:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1499:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1500:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1501:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1502:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1503:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1504:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1505:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1506:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       else /* (hnand->Config.PageSize) > 512 */
1507:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1508:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Send write Spare area command sequence */
1509:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
1510:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1511:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
1512:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1513:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1514:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
1515:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1516:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress
1517:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1518:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress
1519:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1520:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1521:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1522:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1523:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1524:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1525:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1526:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1527:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress
1528:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1529:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress
1530:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1531:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1532:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1533:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1534:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1535:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1536:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1537:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1538:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1539:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1540:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Write data to memory */
1541:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
1542:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1543:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)deviceAddress = *buff;
1544:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
1545:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1546:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1547:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1548:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
1549:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
1550:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1551:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Get tick */
1552:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       tickstart = HAL_GetTick();
ARM GAS  /tmp/cc968NXr.s 			page 55


1553:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1554:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Read status until NAND is ready */
1555:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       while (HAL_NAND_Read_Status(hnand) != NAND_READY)
1556:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1557:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
1558:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1559:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           /* Update the NAND controller state */
1560:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           hnand->State = HAL_NAND_STATE_ERROR;
1561:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1562:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           /* Process unlocked */
1563:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __HAL_UNLOCK(hnand);
1564:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1565:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           return HAL_TIMEOUT;
1566:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1567:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1568:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1569:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment written spare areas number */
1570:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       numSpareAreaWritten++;
1571:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1572:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Decrement spare areas to write */
1573:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nbspare--;
1574:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1575:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment the NAND address */
1576:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nandAddress = (uint32_t)(nandAddress + 1U);
1577:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
1578:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1579:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
1580:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
1581:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1582:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process unlocked */
1583:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_UNLOCK(hnand);
1584:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1585:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
1586:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1587:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
1588:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1589:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1590:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
1591:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
1592:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1593:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
1594:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Write Spare area(s) to NAND memory (16-bits addressing)
1595:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1596:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
1597:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1598:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write. pBuffer should be 16bits aligned.
1599:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  NumSpareAreaTowrite   number of spare areas to write to block
1600:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
1601:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
1602:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_SpareArea_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAdd
1603:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
1604:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
1605:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t tickstart;
1606:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t deviceAddress, numSpareAreaWritten = 0, nandAddress, columnAddress, nbspare = NumSpareAr
1607:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint16_t * buff = pBuffer;
1608:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1609:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
ARM GAS  /tmp/cc968NXr.s 			page 56


1610:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
1611:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1612:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
1613:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1614:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
1615:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1616:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process Locked */
1617:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_LOCK(hnand);
1618:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1619:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
1620:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
1621:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1622:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Identify the device address */
1623:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     deviceAddress = NAND_DEVICE;
1624:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1625:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* NAND raw address calculation */
1626:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     nandAddress = ARRAY_ADDRESS(pAddress, hnand);
1627:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1628:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Column in page address */
1629:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     columnAddress = (uint32_t)(COLUMN_ADDRESS(hnand) * 2U);
1630:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1631:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Spare area(s) write loop */
1632:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     while ((nbspare != 0U) && (nandAddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))
1633:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
1634:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Cards with page size <= 512 bytes */
1635:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if ((hnand->Config.PageSize) <= 512U)
1636:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1637:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Send write Spare area command sequence */
1638:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_C;
1639:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1640:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
1641:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1642:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1643:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
1644:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1645:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1646:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1647:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1648:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1649:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1650:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1651:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1652:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1653:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1654:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = 0x00U;
1655:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1656:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1657:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1658:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1659:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1660:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1661:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1662:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1663:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1664:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       else /* (hnand->Config.PageSize) > 512 */
1665:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1666:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         /* Send write Spare area command sequence */
ARM GAS  /tmp/cc968NXr.s 			page 57


1667:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_AREA_A;
1668:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1669:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE0;
1670:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1671:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1672:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
1673:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1674:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress
1675:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1676:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress
1677:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1678:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1679:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1680:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1681:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1682:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1683:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1684:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1685:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnAddress
1686:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1687:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnAddress
1688:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1689:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandAddress);
1690:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1691:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandAddress);
1692:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1693:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           *(__IO uint8_t *)((uint32_t)(deviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandAddress);
1694:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
1695:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1696:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1697:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1698:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Write data to memory */
1699:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
1700:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1701:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         *(__IO uint16_t *)deviceAddress = *buff;
1702:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
1703:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
1704:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1705:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1706:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceAddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
1707:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
1708:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1709:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Get tick */
1710:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       tickstart = HAL_GetTick();
1711:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1712:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Read status until NAND is ready */
1713:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       while (HAL_NAND_Read_Status(hnand) != NAND_READY)
1714:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1715:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
1716:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
1717:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           /* Update the NAND controller state */
1718:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           hnand->State = HAL_NAND_STATE_ERROR;
1719:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1720:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           /* Process unlocked */
1721:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __HAL_UNLOCK(hnand);
1722:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1723:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           return HAL_TIMEOUT;
ARM GAS  /tmp/cc968NXr.s 			page 58


1724:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
1725:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1726:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1727:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment written spare areas number */
1728:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       numSpareAreaWritten++;
1729:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1730:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Decrement spare areas to write */
1731:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nbspare--;
1732:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1733:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* Increment the NAND address */
1734:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       nandAddress = (uint32_t)(nandAddress + 1U);
1735:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
1736:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1737:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
1738:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
1739:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1740:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process unlocked */
1741:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_UNLOCK(hnand);
1742:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1743:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
1744:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1745:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
1746:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1747:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1748:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
1749:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
1750:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1751:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
1752:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  NAND memory Block erase
1753:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1754:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
1755:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1756:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
1757:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
1758:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
1759:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 603              		.loc 1 1759 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              	.LVL43:
1760:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t DeviceAddress;
1761:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1762:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
1763:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
 608              		.loc 1 1763 0
 609 0000 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 610 0004 DBB2     		uxtb	r3, r3
 611 0006 022B     		cmp	r3, #2
 612 0008 4CD0     		beq	.L49
1764:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1765:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
1766:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1767:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
 613              		.loc 1 1767 0
 614 000a 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 615 000e DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cc968NXr.s 			page 59


 616 0010 012B     		cmp	r3, #1
 617 0012 01D0     		beq	.L56
1768:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1769:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process Locked */
1770:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_LOCK(hnand);
1771:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1772:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
1773:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
1774:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1775:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Identify the device address */
1776:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     DeviceAddress = NAND_DEVICE;
1777:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1778:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Send Erase block command sequence */
1779:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(DeviceAddress | CMD_AREA)) = NAND_CMD_ERASE0;
1780:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
1781:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(DeviceAddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddres
1782:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
1783:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(DeviceAddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddres
1784:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
1785:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(DeviceAddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddres
1786:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
1787:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1788:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(DeviceAddress | CMD_AREA)) = NAND_CMD_ERASE1;
1789:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
1790:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1791:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND controller state */
1792:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
1793:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1794:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Process unlocked */
1795:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __HAL_UNLOCK(hnand);
1796:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1797:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
1798:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1799:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
 618              		.loc 1 1799 0
 619 0014 0120     		movs	r0, #1
 620              	.LVL44:
 621 0016 7047     		bx	lr
 622              	.LVL45:
 623              	.L56:
1770:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 624              		.loc 1 1770 0
 625 0018 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 626 001c 012B     		cmp	r3, #1
 627 001e 43D0     		beq	.L51
1759:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t DeviceAddress;
 628              		.loc 1 1759 0 discriminator 2
 629 0020 F0B5     		push	{r4, r5, r6, r7, lr}
 630              	.LCFI7:
 631              		.cfi_def_cfa_offset 20
 632              		.cfi_offset 4, -20
 633              		.cfi_offset 5, -16
 634              		.cfi_offset 6, -12
 635              		.cfi_offset 7, -8
 636              		.cfi_offset 14, -4
1770:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 637              		.loc 1 1770 0 discriminator 2
ARM GAS  /tmp/cc968NXr.s 			page 60


 638 0022 0122     		movs	r2, #1
 639 0024 80F82020 		strb	r2, [r0, #32]
1773:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 640              		.loc 1 1773 0 discriminator 2
 641 0028 0223     		movs	r3, #2
 642 002a 80F82130 		strb	r3, [r0, #33]
 643              	.LVL46:
1779:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
 644              		.loc 1 1779 0 discriminator 2
 645 002e 1F4C     		ldr	r4, .L57
 646 0030 6023     		movs	r3, #96
 647 0032 2370     		strb	r3, [r4]
 648              	.LBB344:
 649              	.LBB345:
 650              		.loc 2 879 0 discriminator 2
 651              		.syntax unified
 652              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 653 0034 BFF34F8F 		dsb 0xF
 654              	@ 0 "" 2
 655              		.thumb
 656              		.syntax unified
 657              	.LBE345:
 658              	.LBE344:
1781:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
 659              		.loc 1 1781 0 discriminator 2
 660 0038 0D88     		ldrh	r5, [r1]
 661 003a 8E88     		ldrh	r6, [r1, #4]
 662 003c 4B88     		ldrh	r3, [r1, #2]
 663 003e 876B     		ldr	r7, [r0, #56]
 664 0040 07FB0363 		mla	r3, r7, r3, r6
 665 0044 C66A     		ldr	r6, [r0, #44]
 666 0046 13FB0653 		smlabb	r3, r3, r6, r5
 667 004a DBB2     		uxtb	r3, r3
 668 004c 184D     		ldr	r5, .L57+4
 669 004e 2B70     		strb	r3, [r5]
 670              	.LBB346:
 671              	.LBB347:
 672              		.loc 2 879 0 discriminator 2
 673              		.syntax unified
 674              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 675 0050 BFF34F8F 		dsb 0xF
 676              	@ 0 "" 2
 677              		.thumb
 678              		.syntax unified
 679              	.LBE347:
 680              	.LBE346:
1783:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
 681              		.loc 1 1783 0 discriminator 2
 682 0054 0E88     		ldrh	r6, [r1]
 683 0056 B1F804E0 		ldrh	lr, [r1, #4]
 684 005a 4B88     		ldrh	r3, [r1, #2]
 685 005c 876B     		ldr	r7, [r0, #56]
 686 005e 07FB03E3 		mla	r3, r7, r3, lr
 687 0062 C76A     		ldr	r7, [r0, #44]
 688 0064 07FB0363 		mla	r3, r7, r3, r6
 689 0068 C3F30723 		ubfx	r3, r3, #8, #8
 690 006c 2B70     		strb	r3, [r5]
ARM GAS  /tmp/cc968NXr.s 			page 61


 691              	.LBB348:
 692              	.LBB349:
 693              		.loc 2 879 0 discriminator 2
 694              		.syntax unified
 695              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 696 006e BFF34F8F 		dsb 0xF
 697              	@ 0 "" 2
 698              		.thumb
 699              		.syntax unified
 700              	.LBE349:
 701              	.LBE348:
1785:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
 702              		.loc 1 1785 0 discriminator 2
 703 0072 0E88     		ldrh	r6, [r1]
 704 0074 8F88     		ldrh	r7, [r1, #4]
 705 0076 4B88     		ldrh	r3, [r1, #2]
 706 0078 816B     		ldr	r1, [r0, #56]
 707              	.LVL47:
 708 007a 01FB0373 		mla	r3, r1, r3, r7
 709 007e C16A     		ldr	r1, [r0, #44]
 710 0080 01FB0363 		mla	r3, r1, r3, r6
 711 0084 C3F30743 		ubfx	r3, r3, #16, #8
 712 0088 2B70     		strb	r3, [r5]
 713              	.LBB350:
 714              	.LBB351:
 715              		.loc 2 879 0 discriminator 2
 716              		.syntax unified
 717              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 718 008a BFF34F8F 		dsb 0xF
 719              	@ 0 "" 2
 720              		.thumb
 721              		.syntax unified
 722              	.LBE351:
 723              	.LBE350:
1788:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     __DSB();
 724              		.loc 1 1788 0 discriminator 2
 725 008e D023     		movs	r3, #208
 726 0090 2370     		strb	r3, [r4]
 727              	.LBB352:
 728              	.LBB353:
 729              		.loc 2 879 0 discriminator 2
 730              		.syntax unified
 731              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 732 0092 BFF34F8F 		dsb 0xF
 733              	@ 0 "" 2
 734              		.thumb
 735              		.syntax unified
 736              	.LBE353:
 737              	.LBE352:
1792:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 738              		.loc 1 1792 0 discriminator 2
 739 0096 80F82120 		strb	r2, [r0, #33]
1795:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 740              		.loc 1 1795 0 discriminator 2
 741 009a 0023     		movs	r3, #0
 742 009c 80F82030 		strb	r3, [r0, #32]
1800:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
ARM GAS  /tmp/cc968NXr.s 			page 62


1801:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1802:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
 743              		.loc 1 1802 0 discriminator 2
 744 00a0 1846     		mov	r0, r3
 745              	.LVL48:
 746 00a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 747              	.LVL49:
 748              	.L49:
 749              	.LCFI8:
 750              		.cfi_def_cfa_offset 0
 751              		.cfi_restore 4
 752              		.cfi_restore 5
 753              		.cfi_restore 6
 754              		.cfi_restore 7
 755              		.cfi_restore 14
1765:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 756              		.loc 1 1765 0
 757 00a4 0220     		movs	r0, #2
 758              	.LVL50:
 759 00a6 7047     		bx	lr
 760              	.LVL51:
 761              	.L51:
1770:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 762              		.loc 1 1770 0
 763 00a8 0220     		movs	r0, #2
 764              	.LVL52:
 765 00aa 7047     		bx	lr
 766              	.L58:
 767              		.align	2
 768              	.L57:
 769 00ac 00000180 		.word	-2147418112
 770 00b0 00000280 		.word	-2147352576
 771              		.cfi_endproc
 772              	.LFE158:
 774              		.section	.text.HAL_NAND_Address_Inc,"ax",%progbits
 775              		.align	1
 776              		.global	HAL_NAND_Address_Inc
 777              		.syntax unified
 778              		.thumb
 779              		.thumb_func
 780              		.fpu fpv5-d16
 782              	HAL_NAND_Address_Inc:
 783              	.LFB159:
1803:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
1804:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1805:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
1806:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Increment the NAND memory address
1807:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1808:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
1809:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param pAddress pointer to NAND address structure
1810:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval The new status of the increment address operation. It can be:
1811:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *           - NAND_VALID_ADDRESS: When the new address is valid address
1812:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *           - NAND_INVALID_ADDRESS: When the new address is invalid address
1813:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
1814:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** uint32_t HAL_NAND_Address_Inc(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
1815:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 784              		.loc 1 1815 0
ARM GAS  /tmp/cc968NXr.s 			page 63


 785              		.cfi_startproc
 786              		@ args = 0, pretend = 0, frame = 0
 787              		@ frame_needed = 0, uses_anonymous_args = 0
 788              		@ link register save eliminated.
 789              	.LVL53:
1816:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t status = NAND_VALID_ADDRESS;
1817:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1818:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Increment page address */
1819:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   pAddress->Page++;
 790              		.loc 1 1819 0
 791 0000 0B88     		ldrh	r3, [r1]
 792 0002 0133     		adds	r3, r3, #1
 793 0004 9BB2     		uxth	r3, r3
 794 0006 0B80     		strh	r3, [r1]	@ movhi
1820:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1821:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check NAND address is valid */
1822:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (pAddress->Page == hnand->Config.BlockSize)
 795              		.loc 1 1822 0
 796 0008 C26A     		ldr	r2, [r0, #44]
 797 000a 9342     		cmp	r3, r2
 798 000c 02D0     		beq	.L64
1816:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t status = NAND_VALID_ADDRESS;
 799              		.loc 1 1816 0
 800 000e 4FF48070 		mov	r0, #256
 801              	.LVL54:
 802 0012 7047     		bx	lr
 803              	.LVL55:
 804              	.L64:
1823:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1824:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     pAddress->Page = 0;
 805              		.loc 1 1824 0
 806 0014 0023     		movs	r3, #0
 807 0016 0B80     		strh	r3, [r1]	@ movhi
1825:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     pAddress->Block++;
 808              		.loc 1 1825 0
 809 0018 8B88     		ldrh	r3, [r1, #4]
 810 001a 0133     		adds	r3, r3, #1
 811 001c 9BB2     		uxth	r3, r3
 812 001e 8B80     		strh	r3, [r1, #4]	@ movhi
1826:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1827:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     if (pAddress->Block == hnand->Config.PlaneSize)
 813              		.loc 1 1827 0
 814 0020 826B     		ldr	r2, [r0, #56]
 815 0022 9342     		cmp	r3, r2
 816 0024 02D0     		beq	.L65
1816:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 817              		.loc 1 1816 0
 818 0026 4FF48070 		mov	r0, #256
 819              	.LVL56:
 820 002a 7047     		bx	lr
 821              	.LVL57:
 822              	.L65:
1828:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
1829:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pAddress->Block = 0;
 823              		.loc 1 1829 0
 824 002c 0023     		movs	r3, #0
 825 002e 8B80     		strh	r3, [r1, #4]	@ movhi
ARM GAS  /tmp/cc968NXr.s 			page 64


1830:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       pAddress->Plane++;
 826              		.loc 1 1830 0
 827 0030 4B88     		ldrh	r3, [r1, #2]
 828 0032 0133     		adds	r3, r3, #1
 829 0034 9BB2     		uxth	r3, r3
 830 0036 4B80     		strh	r3, [r1, #2]	@ movhi
1831:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1832:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       if (pAddress->Plane == (hnand->Config.PlaneNbr))
 831              		.loc 1 1832 0
 832 0038 426B     		ldr	r2, [r0, #52]
 833 003a 9342     		cmp	r3, r2
 834 003c 02D0     		beq	.L63
1816:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 835              		.loc 1 1816 0
 836 003e 4FF48070 		mov	r0, #256
 837              	.LVL58:
 838 0042 7047     		bx	lr
 839              	.LVL59:
 840              	.L63:
1833:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
1834:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         status = NAND_INVALID_ADDRESS;
 841              		.loc 1 1834 0
 842 0044 4FF40070 		mov	r0, #512
 843              	.LVL60:
1835:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       }
1836:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
1837:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1838:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1839:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return (status);
1840:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 844              		.loc 1 1840 0
 845 0048 7047     		bx	lr
 846              		.cfi_endproc
 847              	.LFE159:
 849              		.section	.text.HAL_NAND_ECC_Enable,"ax",%progbits
 850              		.align	1
 851              		.global	HAL_NAND_ECC_Enable
 852              		.syntax unified
 853              		.thumb
 854              		.thumb_func
 855              		.fpu fpv5-d16
 857              	HAL_NAND_ECC_Enable:
 858              	.LFB160:
1841:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1842:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
1843:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
1844:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Register a User NAND Callback
1845:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *         To be used instead of the weak (surcharged) predefined callback
1846:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param hnand : NAND handle
1847:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param CallbackId : ID of the callback to be registered
1848:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *        This parameter can be one of the following values:
1849:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *          @arg @ref HAL_NAND_MSP_INIT_CB_ID       NAND MspInit callback ID
1850:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *          @arg @ref HAL_NAND_MSP_DEINIT_CB_ID     NAND MspDeInit callback ID
1851:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *          @arg @ref HAL_NAND_IT_CB_ID             NAND IT callback ID
1852:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param pCallback : pointer to the Callback function
1853:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval status
1854:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
ARM GAS  /tmp/cc968NXr.s 			page 65


1855:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_RegisterCallback (NAND_HandleTypeDef *hnand, HAL_NAND_CallbackIDTypeDef 
1856:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
1857:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   HAL_StatusTypeDef status = HAL_OK;
1858:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1859:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if(pCallback == NULL)
1860:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1861:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
1862:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1863:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1864:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Process locked */
1865:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   __HAL_LOCK(hnand);
1866:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1867:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_READY)
1868:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1869:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     switch (CallbackId)
1870:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
1871:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     case HAL_NAND_MSP_INIT_CB_ID :
1872:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       hnand->MspInitCallback = pCallback;
1873:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1874:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     case HAL_NAND_MSP_DEINIT_CB_ID :
1875:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       hnand->MspDeInitCallback = pCallback;
1876:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1877:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     case HAL_NAND_IT_CB_ID :
1878:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       hnand->ItCallback = pCallback;
1879:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1880:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     default :
1881:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* update return status */
1882:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       status =  HAL_ERROR;
1883:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1884:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
1885:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1886:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if(hnand->State == HAL_NAND_STATE_RESET)
1887:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1888:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     switch (CallbackId)
1889:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
1890:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     case HAL_NAND_MSP_INIT_CB_ID :
1891:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       hnand->MspInitCallback = pCallback;
1892:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1893:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     case HAL_NAND_MSP_DEINIT_CB_ID :
1894:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       hnand->MspDeInitCallback = pCallback;
1895:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1896:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     default :
1897:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* update return status */
1898:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       status =  HAL_ERROR;
1899:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1900:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
1901:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1902:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
1903:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1904:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* update return status */
1905:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     status =  HAL_ERROR;
1906:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1907:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1908:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Release Lock */
1909:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
1910:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return status;
1911:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
ARM GAS  /tmp/cc968NXr.s 			page 66


1912:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1913:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
1914:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Unregister a User NAND Callback
1915:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *         NAND Callback is redirected to the weak (surcharged) predefined callback
1916:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param hnand : NAND handle
1917:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param CallbackId : ID of the callback to be unregistered
1918:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *        This parameter can be one of the following values:
1919:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *          @arg @ref HAL_NAND_MSP_INIT_CB_ID       NAND MspInit callback ID
1920:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *          @arg @ref HAL_NAND_MSP_DEINIT_CB_ID     NAND MspDeInit callback ID
1921:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *          @arg @ref HAL_NAND_IT_CB_ID             NAND IT callback ID
1922:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval status
1923:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
1924:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_UnRegisterCallback (NAND_HandleTypeDef *hnand, HAL_NAND_CallbackIDTypeDe
1925:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
1926:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   HAL_StatusTypeDef status = HAL_OK;
1927:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1928:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Process locked */
1929:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   __HAL_LOCK(hnand);
1930:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1931:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_READY)
1932:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1933:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     switch (CallbackId)
1934:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
1935:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     case HAL_NAND_MSP_INIT_CB_ID :
1936:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       hnand->MspInitCallback = HAL_NAND_MspInit;
1937:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1938:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     case HAL_NAND_MSP_DEINIT_CB_ID :
1939:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       hnand->MspDeInitCallback = HAL_NAND_MspDeInit;
1940:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1941:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     case HAL_NAND_IT_CB_ID :
1942:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       hnand->ItCallback = HAL_NAND_ITCallback;
1943:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1944:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     default :
1945:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* update return status */
1946:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       status =  HAL_ERROR;
1947:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1948:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
1949:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1950:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if(hnand->State == HAL_NAND_STATE_RESET)
1951:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1952:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     switch (CallbackId)
1953:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
1954:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     case HAL_NAND_MSP_INIT_CB_ID :
1955:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       hnand->MspInitCallback = HAL_NAND_MspInit;
1956:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1957:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     case HAL_NAND_MSP_DEINIT_CB_ID :
1958:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       hnand->MspDeInitCallback = HAL_NAND_MspDeInit;
1959:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1960:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     default :
1961:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       /* update return status */
1962:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       status =  HAL_ERROR;
1963:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       break;
1964:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
1965:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1966:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
1967:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
1968:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* update return status */
ARM GAS  /tmp/cc968NXr.s 			page 67


1969:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     status =  HAL_ERROR;
1970:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
1971:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1972:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Release Lock */
1973:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
1974:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return status;
1975:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
1976:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** #endif
1977:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1978:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
1979:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @}
1980:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
1981:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1982:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group3 Peripheral Control functions
1983:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****  *  @brief   management functions
1984:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****  *
1985:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** @verbatim
1986:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ==============================================================================
1987:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****                          ##### NAND Control functions #####
1988:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ==============================================================================
1989:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   [..]
1990:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     This subsection provides a set of functions allowing to control dynamically
1991:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     the NAND interface.
1992:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1993:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** @endverbatim
1994:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @{
1995:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
1996:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1997:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
1998:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
1999:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Enables dynamically NAND ECC feature.
2000:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
2001:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
2002:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
2003:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
2004:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_ECC_Enable(NAND_HandleTypeDef *hnand)
2005:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 859              		.loc 1 2005 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              	.LVL61:
2006:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
2007:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
 864              		.loc 1 2007 0
 865 0000 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 866 0004 DBB2     		uxtb	r3, r3
 867 0006 022B     		cmp	r3, #2
 868 0008 14D0     		beq	.L68
2008:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
2009:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
2010:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2011:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
 869              		.loc 1 2011 0
 870 000a 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 871 000e DBB2     		uxtb	r3, r3
 872 0010 012B     		cmp	r3, #1
ARM GAS  /tmp/cc968NXr.s 			page 68


 873 0012 01D0     		beq	.L74
2012:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
2013:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND state */
2014:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
2015:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2016:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Enable ECC feature */
2017:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     (void)FMC_NAND_ECC_Enable(hnand->Instance, hnand->Init.NandBank);
2018:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2019:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND state */
2020:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
2021:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2022:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
2023:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
2024:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
 874              		.loc 1 2024 0
 875 0014 0120     		movs	r0, #1
 876              	.LVL62:
 877 0016 7047     		bx	lr
 878              	.LVL63:
 879              	.L74:
2005:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
 880              		.loc 1 2005 0
 881 0018 10B5     		push	{r4, lr}
 882              	.LCFI9:
 883              		.cfi_def_cfa_offset 8
 884              		.cfi_offset 4, -8
 885              		.cfi_offset 14, -4
 886 001a 0446     		mov	r4, r0
2014:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 887              		.loc 1 2014 0
 888 001c 0223     		movs	r3, #2
 889 001e 80F82130 		strb	r3, [r0, #33]
2017:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 890              		.loc 1 2017 0
 891 0022 4168     		ldr	r1, [r0, #4]
 892 0024 0068     		ldr	r0, [r0]
 893              	.LVL64:
 894 0026 FFF7FEFF 		bl	FMC_NAND_ECC_Enable
 895              	.LVL65:
2020:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 896              		.loc 1 2020 0
 897 002a 0123     		movs	r3, #1
 898 002c 84F82130 		strb	r3, [r4, #33]
2025:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2026:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2027:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
 899              		.loc 1 2027 0
 900 0030 0020     		movs	r0, #0
 901 0032 10BD     		pop	{r4, pc}
 902              	.LVL66:
 903              	.L68:
 904              	.LCFI10:
 905              		.cfi_def_cfa_offset 0
 906              		.cfi_restore 4
 907              		.cfi_restore 14
2009:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 908              		.loc 1 2009 0
ARM GAS  /tmp/cc968NXr.s 			page 69


 909 0034 0220     		movs	r0, #2
 910              	.LVL67:
 911 0036 7047     		bx	lr
 912              		.cfi_endproc
 913              	.LFE160:
 915              		.section	.text.HAL_NAND_ECC_Disable,"ax",%progbits
 916              		.align	1
 917              		.global	HAL_NAND_ECC_Disable
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu fpv5-d16
 923              	HAL_NAND_ECC_Disable:
 924              	.LFB161:
2028:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
2029:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2030:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
2031:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Disables dynamically FMC_NAND ECC feature.
2032:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
2033:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
2034:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
2035:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
2036:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)
2037:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 925              		.loc 1 2037 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              	.LVL68:
2038:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
2039:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
 930              		.loc 1 2039 0
 931 0000 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 932 0004 DBB2     		uxtb	r3, r3
 933 0006 022B     		cmp	r3, #2
 934 0008 14D0     		beq	.L77
2040:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
2041:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
2042:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2043:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
 935              		.loc 1 2043 0
 936 000a 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 937 000e DBB2     		uxtb	r3, r3
 938 0010 012B     		cmp	r3, #1
 939 0012 01D0     		beq	.L83
2044:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
2045:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND state */
2046:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
2047:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2048:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Disable ECC feature */
2049:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     (void)FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
2050:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2051:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND state */
2052:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
2053:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2054:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
2055:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
ARM GAS  /tmp/cc968NXr.s 			page 70


2056:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
 940              		.loc 1 2056 0
 941 0014 0120     		movs	r0, #1
 942              	.LVL69:
 943 0016 7047     		bx	lr
 944              	.LVL70:
 945              	.L83:
2037:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
 946              		.loc 1 2037 0
 947 0018 10B5     		push	{r4, lr}
 948              	.LCFI11:
 949              		.cfi_def_cfa_offset 8
 950              		.cfi_offset 4, -8
 951              		.cfi_offset 14, -4
 952 001a 0446     		mov	r4, r0
2046:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 953              		.loc 1 2046 0
 954 001c 0223     		movs	r3, #2
 955 001e 80F82130 		strb	r3, [r0, #33]
2049:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 956              		.loc 1 2049 0
 957 0022 4168     		ldr	r1, [r0, #4]
 958 0024 0068     		ldr	r0, [r0]
 959              	.LVL71:
 960 0026 FFF7FEFF 		bl	FMC_NAND_ECC_Disable
 961              	.LVL72:
2052:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 962              		.loc 1 2052 0
 963 002a 0123     		movs	r3, #1
 964 002c 84F82130 		strb	r3, [r4, #33]
2057:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2058:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2059:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return HAL_OK;
 965              		.loc 1 2059 0
 966 0030 0020     		movs	r0, #0
 967 0032 10BD     		pop	{r4, pc}
 968              	.LVL73:
 969              	.L77:
 970              	.LCFI12:
 971              		.cfi_def_cfa_offset 0
 972              		.cfi_restore 4
 973              		.cfi_restore 14
2041:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 974              		.loc 1 2041 0
 975 0034 0220     		movs	r0, #2
 976              	.LVL74:
 977 0036 7047     		bx	lr
 978              		.cfi_endproc
 979              	.LFE161:
 981              		.section	.text.HAL_NAND_GetECC,"ax",%progbits
 982              		.align	1
 983              		.global	HAL_NAND_GetECC
 984              		.syntax unified
 985              		.thumb
 986              		.thumb_func
 987              		.fpu fpv5-d16
 989              	HAL_NAND_GetECC:
ARM GAS  /tmp/cc968NXr.s 			page 71


 990              	.LFB162:
2060:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
2061:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2062:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
2063:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  Disables dynamically NAND ECC feature.
2064:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
2065:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
2066:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  ECCval pointer to ECC value
2067:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  Timeout maximum timeout to wait
2068:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL status
2069:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
2070:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_GetECC(NAND_HandleTypeDef *hnand, uint32_t *ECCval, uint32_t Timeout)
2071:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 991              		.loc 1 2071 0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 0
 994              		@ frame_needed = 0, uses_anonymous_args = 0
 995              	.LVL75:
 996 0000 10B5     		push	{r4, lr}
 997              	.LCFI13:
 998              		.cfi_def_cfa_offset 8
 999              		.cfi_offset 4, -8
 1000              		.cfi_offset 14, -4
2072:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   HAL_StatusTypeDef status;
2073:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2074:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Check the NAND controller state */
2075:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if (hnand->State == HAL_NAND_STATE_BUSY)
 1001              		.loc 1 2075 0
 1002 0002 90F82140 		ldrb	r4, [r0, #33]	@ zero_extendqisi2
 1003 0006 E4B2     		uxtb	r4, r4
 1004 0008 022C     		cmp	r4, #2
 1005 000a 13D0     		beq	.L86
2076:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
2077:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_BUSY;
2078:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2079:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if (hnand->State == HAL_NAND_STATE_READY)
 1006              		.loc 1 2079 0
 1007 000c 90F82140 		ldrb	r4, [r0, #33]	@ zero_extendqisi2
 1008 0010 E4B2     		uxtb	r4, r4
 1009 0012 012C     		cmp	r4, #1
 1010 0014 01D0     		beq	.L89
2080:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
2081:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND state */
2082:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_BUSY;
2083:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2084:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Get NAND ECC value */
2085:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     status = FMC_NAND_GetECC(hnand->Instance, ECCval, hnand->Init.NandBank, Timeout);
2086:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2087:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     /* Update the NAND state */
2088:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     hnand->State = HAL_NAND_STATE_READY;
2089:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2090:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
2091:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
2092:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return HAL_ERROR;
 1011              		.loc 1 2092 0
 1012 0016 0120     		movs	r0, #1
 1013              	.LVL76:
ARM GAS  /tmp/cc968NXr.s 			page 72


2093:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2094:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2095:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return status;
2096:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 1014              		.loc 1 2096 0
 1015 0018 10BD     		pop	{r4, pc}
 1016              	.LVL77:
 1017              	.L89:
 1018 001a 1346     		mov	r3, r2
 1019 001c 0446     		mov	r4, r0
2082:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1020              		.loc 1 2082 0
 1021 001e 0222     		movs	r2, #2
 1022              	.LVL78:
 1023 0020 80F82120 		strb	r2, [r0, #33]
2085:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1024              		.loc 1 2085 0
 1025 0024 4268     		ldr	r2, [r0, #4]
 1026 0026 0068     		ldr	r0, [r0]
 1027              	.LVL79:
 1028 0028 FFF7FEFF 		bl	FMC_NAND_GetECC
 1029              	.LVL80:
2088:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 1030              		.loc 1 2088 0
 1031 002c 0123     		movs	r3, #1
 1032 002e 84F82130 		strb	r3, [r4, #33]
2095:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 1033              		.loc 1 2095 0
 1034 0032 10BD     		pop	{r4, pc}
 1035              	.LVL81:
 1036              	.L86:
2077:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 1037              		.loc 1 2077 0
 1038 0034 0220     		movs	r0, #2
 1039              	.LVL82:
 1040 0036 10BD     		pop	{r4, pc}
 1041              		.cfi_endproc
 1042              	.LFE162:
 1044              		.section	.text.HAL_NAND_GetState,"ax",%progbits
 1045              		.align	1
 1046              		.global	HAL_NAND_GetState
 1047              		.syntax unified
 1048              		.thumb
 1049              		.thumb_func
 1050              		.fpu fpv5-d16
 1052              	HAL_NAND_GetState:
 1053              	.LFB163:
2097:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2098:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
2099:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @}
2100:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
2101:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2102:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2103:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group4 Peripheral State functions
2104:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****  *  @brief   Peripheral State functions
2105:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****  *
2106:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** @verbatim
ARM GAS  /tmp/cc968NXr.s 			page 73


2107:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ==============================================================================
2108:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****                          ##### NAND State functions #####
2109:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   ==============================================================================
2110:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   [..]
2111:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     This subsection permits to get in run-time the status of the NAND controller
2112:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     and the data flow.
2113:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2114:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** @endverbatim
2115:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @{
2116:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
2117:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2118:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
2119:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  return the NAND state
2120:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
2121:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
2122:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval HAL state
2123:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
2124:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
2125:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 1054              		.loc 1 2125 0
 1055              		.cfi_startproc
 1056              		@ args = 0, pretend = 0, frame = 0
 1057              		@ frame_needed = 0, uses_anonymous_args = 0
 1058              		@ link register save eliminated.
 1059              	.LVL83:
2126:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   return hnand->State;
 1060              		.loc 1 2126 0
 1061 0000 90F82100 		ldrb	r0, [r0, #33]	@ zero_extendqisi2
 1062              	.LVL84:
2127:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 1063              		.loc 1 2127 0
 1064 0004 7047     		bx	lr
 1065              		.cfi_endproc
 1066              	.LFE163:
 1068              		.section	.text.HAL_NAND_Read_Status,"ax",%progbits
 1069              		.align	1
 1070              		.global	HAL_NAND_Read_Status
 1071              		.syntax unified
 1072              		.thumb
 1073              		.thumb_func
 1074              		.fpu fpv5-d16
 1076              	HAL_NAND_Read_Status:
 1077              	.LFB164:
2128:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2129:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** /**
2130:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @brief  NAND memory read status
2131:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
2132:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *                the configuration information for NAND module.
2133:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   * @retval NAND status
2134:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   */
2135:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
2136:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** {
 1078              		.loc 1 2136 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082              		@ link register save eliminated.
ARM GAS  /tmp/cc968NXr.s 			page 74


 1083              	.LVL85:
2137:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t data;
2138:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t DeviceAddress;
2139:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   UNUSED(hnand);
2140:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2141:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Identify the device address */
2142:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   DeviceAddress = NAND_DEVICE;
2143:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2144:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Send Read status operation command */
2145:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(DeviceAddress | CMD_AREA)) = NAND_CMD_STATUS;
 1084              		.loc 1 2145 0
 1085 0000 7022     		movs	r2, #112
 1086 0002 094B     		ldr	r3, .L95
 1087 0004 1A70     		strb	r2, [r3]
2146:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2147:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Read status register data */
2148:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   data = *(__IO uint8_t *)DeviceAddress;
 1088              		.loc 1 2148 0
 1089 0006 4FF00043 		mov	r3, #-2147483648
 1090 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1091 000c DBB2     		uxtb	r3, r3
 1092              	.LVL86:
2149:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
2150:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   /* Return the status */
2151:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   if ((data & NAND_ERROR) == NAND_ERROR)
 1093              		.loc 1 2151 0
 1094 000e 13F0010F 		tst	r3, #1
 1095 0012 04D1     		bne	.L93
2152:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
2153:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return NAND_ERROR;
2154:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2155:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else if ((data & NAND_READY) == NAND_READY)
 1096              		.loc 1 2155 0
 1097 0014 13F0400F 		tst	r3, #64
 1098 0018 03D0     		beq	.L94
2156:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
2157:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return NAND_READY;
 1099              		.loc 1 2157 0
 1100 001a 4020     		movs	r0, #64
 1101              	.LVL87:
 1102 001c 7047     		bx	lr
 1103              	.LVL88:
 1104              	.L93:
2153:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 1105              		.loc 1 2153 0
 1106 001e 0120     		movs	r0, #1
 1107              	.LVL89:
 1108 0020 7047     		bx	lr
 1109              	.LVL90:
 1110              	.L94:
2158:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2159:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   else
2160:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
2161:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     return NAND_BUSY;
 1111              		.loc 1 2161 0
 1112 0022 0020     		movs	r0, #0
 1113              	.LVL91:
ARM GAS  /tmp/cc968NXr.s 			page 75


2162:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
2163:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 1114              		.loc 1 2163 0
 1115 0024 7047     		bx	lr
 1116              	.L96:
 1117 0026 00BF     		.align	2
 1118              	.L95:
 1119 0028 00000180 		.word	-2147418112
 1120              		.cfi_endproc
 1121              	.LFE164:
 1123              		.section	.text.HAL_NAND_Read_Page_8b,"ax",%progbits
 1124              		.align	1
 1125              		.global	HAL_NAND_Read_Page_8b
 1126              		.syntax unified
 1127              		.thumb
 1128              		.thumb_func
 1129              		.fpu fpv5-d16
 1131              	HAL_NAND_Read_Page_8b:
 1132              	.LFB150:
 519:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 1133              		.loc 1 519 0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 0
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 1137              	.LVL92:
 1138 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1139              	.LCFI14:
 1140              		.cfi_def_cfa_offset 24
 1141              		.cfi_offset 4, -24
 1142              		.cfi_offset 5, -20
 1143              		.cfi_offset 6, -16
 1144              		.cfi_offset 7, -12
 1145              		.cfi_offset 8, -8
 1146              		.cfi_offset 14, -4
 1147 0004 1F46     		mov	r7, r3
 1148              	.LVL93:
 526:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 1149              		.loc 1 526 0
 1150 0006 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 1151              	.LVL94:
 1152 000a DBB2     		uxtb	r3, r3
 1153 000c 022B     		cmp	r3, #2
 1154 000e 00F0C480 		beq	.L111
 1155 0012 0446     		mov	r4, r0
 1156 0014 1546     		mov	r5, r2
 530:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 1157              		.loc 1 530 0
 1158 0016 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 1159 001a DBB2     		uxtb	r3, r3
 1160 001c 012B     		cmp	r3, #1
 1161 001e 02D0     		beq	.L115
 657:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 1162              		.loc 1 657 0
 1163 0020 0120     		movs	r0, #1
 1164              	.LVL95:
 1165 0022 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1166              	.LVL96:
ARM GAS  /tmp/cc968NXr.s 			page 76


 1167              	.L115:
 533:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1168              		.loc 1 533 0
 1169 0026 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1170 002a 012B     		cmp	r3, #1
 1171 002c 00F0B880 		beq	.L113
 533:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1172              		.loc 1 533 0 is_stmt 0 discriminator 2
 1173 0030 0123     		movs	r3, #1
 1174 0032 80F82030 		strb	r3, [r0, #32]
 536:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1175              		.loc 1 536 0 is_stmt 1 discriminator 2
 1176 0036 0223     		movs	r3, #2
 1177 0038 80F82130 		strb	r3, [r0, #33]
 1178              	.LVL97:
 542:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1179              		.loc 1 542 0 discriminator 2
 1180 003c 0B88     		ldrh	r3, [r1]
 1181 003e 8A88     		ldrh	r2, [r1, #4]
 1182              	.LVL98:
 1183 0040 4E88     		ldrh	r6, [r1, #2]
 1184 0042 816B     		ldr	r1, [r0, #56]
 1185              	.LVL99:
 1186 0044 01FB0626 		mla	r6, r1, r6, r2
 1187 0048 C26A     		ldr	r2, [r0, #44]
 1188 004a 02FB0636 		mla	r6, r2, r6, r3
 1189              	.LVL100:
 545:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 1190              		.loc 1 545 0 discriminator 2
 1191 004e 6BE0     		b	.L99
 1192              	.LVL101:
 1193              	.L101:
 565:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1194              		.loc 1 565 0
 1195 0050 554B     		ldr	r3, .L118
 1196 0052 0022     		movs	r2, #0
 1197 0054 1A70     		strb	r2, [r3]
 1198              	.LBB354:
 1199              	.LBB355:
 1200              		.loc 2 879 0
 1201              		.syntax unified
 1202              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1203 0056 BFF34F8F 		dsb 0xF
 1204              	@ 0 "" 2
 1205              		.thumb
 1206              		.syntax unified
 1207              	.LBE355:
 1208              	.LBE354:
 567:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1209              		.loc 1 567 0
 1210 005a F2B2     		uxtb	r2, r6
 1211 005c 1A70     		strb	r2, [r3]
 1212              	.LBB356:
 1213              	.LBB357:
 1214              		.loc 2 879 0
 1215              		.syntax unified
 1216              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc968NXr.s 			page 77


 1217 005e BFF34F8F 		dsb 0xF
 1218              	@ 0 "" 2
 1219              		.thumb
 1220              		.syntax unified
 1221              	.LBE357:
 1222              	.LBE356:
 569:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1223              		.loc 1 569 0
 1224 0062 C6F30722 		ubfx	r2, r6, #8, #8
 1225 0066 1A70     		strb	r2, [r3]
 1226              	.LBB358:
 1227              	.LBB359:
 1228              		.loc 2 879 0
 1229              		.syntax unified
 1230              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1231 0068 BFF34F8F 		dsb 0xF
 1232              	@ 0 "" 2
 1233              		.thumb
 1234              		.syntax unified
 1235              	.LBE359:
 1236              	.LBE358:
 571:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1237              		.loc 1 571 0
 1238 006c C6F30742 		ubfx	r2, r6, #16, #8
 1239 0070 1A70     		strb	r2, [r3]
 1240              	.LBB360:
 1241              	.LBB361:
 1242              		.loc 2 879 0
 1243              		.syntax unified
 1244              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1245 0072 BFF34F8F 		dsb 0xF
 1246              	@ 0 "" 2
 1247              		.thumb
 1248              		.syntax unified
 1249 0076 7DE0     		b	.L102
 1250              	.L100:
 1251              	.LBE361:
 1252              	.LBE360:
 577:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 1253              		.loc 1 577 0
 1254 0078 E26A     		ldr	r2, [r4, #44]
 1255 007a 236B     		ldr	r3, [r4, #48]
 1256 007c 03FB02F3 		mul	r3, r3, r2
 1257 0080 B3F5803F 		cmp	r3, #65536
 1258 0084 11D2     		bcs	.L103
 579:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1259              		.loc 1 579 0
 1260 0086 484B     		ldr	r3, .L118
 1261 0088 0022     		movs	r2, #0
 1262 008a 1A70     		strb	r2, [r3]
 1263              	.LBB362:
 1264              	.LBB363:
 1265              		.loc 2 879 0
 1266              		.syntax unified
 1267              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1268 008c BFF34F8F 		dsb 0xF
 1269              	@ 0 "" 2
ARM GAS  /tmp/cc968NXr.s 			page 78


 1270              		.thumb
 1271              		.syntax unified
 1272              	.LBE363:
 1273              	.LBE362:
 581:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1274              		.loc 1 581 0
 1275 0090 1A70     		strb	r2, [r3]
 1276              	.LBB364:
 1277              	.LBB365:
 1278              		.loc 2 879 0
 1279              		.syntax unified
 1280              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1281 0092 BFF34F8F 		dsb 0xF
 1282              	@ 0 "" 2
 1283              		.thumb
 1284              		.syntax unified
 1285              	.LBE365:
 1286              	.LBE364:
 583:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1287              		.loc 1 583 0
 1288 0096 F2B2     		uxtb	r2, r6
 1289 0098 1A70     		strb	r2, [r3]
 1290              	.LBB366:
 1291              	.LBB367:
 1292              		.loc 2 879 0
 1293              		.syntax unified
 1294              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1295 009a BFF34F8F 		dsb 0xF
 1296              	@ 0 "" 2
 1297              		.thumb
 1298              		.syntax unified
 1299              	.LBE367:
 1300              	.LBE366:
 585:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1301              		.loc 1 585 0
 1302 009e C6F30722 		ubfx	r2, r6, #8, #8
 1303 00a2 1A70     		strb	r2, [r3]
 1304              	.LBB368:
 1305              	.LBB369:
 1306              		.loc 2 879 0
 1307              		.syntax unified
 1308              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1309 00a4 BFF34F8F 		dsb 0xF
 1310              	@ 0 "" 2
 1311              		.thumb
 1312              		.syntax unified
 1313 00a8 64E0     		b	.L102
 1314              	.L103:
 1315              	.LBE369:
 1316              	.LBE368:
 590:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1317              		.loc 1 590 0
 1318 00aa 3F4B     		ldr	r3, .L118
 1319 00ac 0022     		movs	r2, #0
 1320 00ae 1A70     		strb	r2, [r3]
 1321              	.LBB370:
 1322              	.LBB371:
ARM GAS  /tmp/cc968NXr.s 			page 79


 1323              		.loc 2 879 0
 1324              		.syntax unified
 1325              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1326 00b0 BFF34F8F 		dsb 0xF
 1327              	@ 0 "" 2
 1328              		.thumb
 1329              		.syntax unified
 1330              	.LBE371:
 1331              	.LBE370:
 592:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1332              		.loc 1 592 0
 1333 00b4 1A70     		strb	r2, [r3]
 1334              	.LBB372:
 1335              	.LBB373:
 1336              		.loc 2 879 0
 1337              		.syntax unified
 1338              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1339 00b6 BFF34F8F 		dsb 0xF
 1340              	@ 0 "" 2
 1341              		.thumb
 1342              		.syntax unified
 1343              	.LBE373:
 1344              	.LBE372:
 594:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1345              		.loc 1 594 0
 1346 00ba F2B2     		uxtb	r2, r6
 1347 00bc 1A70     		strb	r2, [r3]
 1348              	.LBB374:
 1349              	.LBB375:
 1350              		.loc 2 879 0
 1351              		.syntax unified
 1352              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1353 00be BFF34F8F 		dsb 0xF
 1354              	@ 0 "" 2
 1355              		.thumb
 1356              		.syntax unified
 1357              	.LBE375:
 1358              	.LBE374:
 596:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1359              		.loc 1 596 0
 1360 00c2 C6F30722 		ubfx	r2, r6, #8, #8
 1361 00c6 1A70     		strb	r2, [r3]
 1362              	.LBB376:
 1363              	.LBB377:
 1364              		.loc 2 879 0
 1365              		.syntax unified
 1366              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1367 00c8 BFF34F8F 		dsb 0xF
 1368              	@ 0 "" 2
 1369              		.thumb
 1370              		.syntax unified
 1371              	.LBE377:
 1372              	.LBE376:
 598:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1373              		.loc 1 598 0
 1374 00cc C6F30742 		ubfx	r2, r6, #16, #8
 1375 00d0 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc968NXr.s 			page 80


 1376              	.LBB378:
 1377              	.LBB379:
 1378              		.loc 2 879 0
 1379              		.syntax unified
 1380              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1381 00d2 BFF34F8F 		dsb 0xF
 1382              	@ 0 "" 2
 1383              		.thumb
 1384              		.syntax unified
 1385 00d6 4DE0     		b	.L102
 1386              	.L117:
 1387              	.LBE379:
 1388              	.LBE378:
 610:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1389              		.loc 1 610 0
 1390 00d8 FFF7FEFF 		bl	HAL_GetTick
 1391              	.LVL102:
 1392 00dc 8046     		mov	r8, r0
 1393              	.LVL103:
 1394              	.L105:
 613:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 1395              		.loc 1 613 0
 1396 00de 2046     		mov	r0, r4
 1397 00e0 FFF7FEFF 		bl	HAL_NAND_Read_Status
 1398              	.LVL104:
 1399 00e4 4028     		cmp	r0, #64
 1400 00e6 0ED0     		beq	.L116
 615:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           {
 1401              		.loc 1 615 0
 1402 00e8 FFF7FEFF 		bl	HAL_GetTick
 1403              	.LVL105:
 1404 00ec A0EB0800 		sub	r0, r0, r8
 1405 00f0 B0F1807F 		cmp	r0, #16777216
 1406 00f4 F3D9     		bls	.L105
 618:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1407              		.loc 1 618 0
 1408 00f6 0320     		movs	r0, #3
 1409 00f8 84F82100 		strb	r0, [r4, #33]
 621:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1410              		.loc 1 621 0
 1411 00fc 0023     		movs	r3, #0
 1412 00fe 84F82030 		strb	r3, [r4, #32]
 623:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           }
 1413              		.loc 1 623 0
 1414 0102 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1415              	.LVL106:
 1416              	.L116:
 628:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 1417              		.loc 1 628 0
 1418 0106 0022     		movs	r2, #0
 1419 0108 284B     		ldr	r3, .L118+4
 1420 010a 1A70     		strb	r2, [r3]
 1421              	.LBB380:
 1422              	.LBB381:
 1423              		.loc 2 879 0
 1424              		.syntax unified
 1425              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc968NXr.s 			page 81


 1426 010c BFF34F8F 		dsb 0xF
 1427              	@ 0 "" 2
 1428              		.thumb
 1429              		.syntax unified
 1430 0110 39E0     		b	.L104
 1431              	.LVL107:
 1432              	.L108:
 1433              	.LBE381:
 1434              	.LBE380:
 635:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
 1435              		.loc 1 635 0 discriminator 3
 1436 0112 4FF00042 		mov	r2, #-2147483648
 1437 0116 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1438 0118 05F8012B 		strb	r2, [r5], #1
 1439              	.LVL108:
 633:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 1440              		.loc 1 633 0 discriminator 3
 1441 011c 0133     		adds	r3, r3, #1
 1442              	.LVL109:
 1443              	.L107:
 633:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 1444              		.loc 1 633 0 is_stmt 0 discriminator 1
 1445 011e 626A     		ldr	r2, [r4, #36]
 1446 0120 9342     		cmp	r3, r2
 1447 0122 F6D3     		bcc	.L108
 643:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1448              		.loc 1 643 0 is_stmt 1
 1449 0124 013F     		subs	r7, r7, #1
 1450              	.LVL110:
 646:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 1451              		.loc 1 646 0
 1452 0126 0136     		adds	r6, r6, #1
 1453              	.LVL111:
 1454              	.L99:
 545:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 1455              		.loc 1 545 0
 1456 0128 7FB3     		cbz	r7, .L109
 545:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 1457              		.loc 1 545 0 is_stmt 0 discriminator 1
 1458 012a E26A     		ldr	r2, [r4, #44]
 1459 012c 236B     		ldr	r3, [r4, #48]
 1460 012e 03FB02F3 		mul	r3, r3, r2
 1461 0132 9E42     		cmp	r6, r3
 1462 0134 29D2     		bcs	.L109
 548:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 1463              		.loc 1 548 0 is_stmt 1
 1464 0136 0022     		movs	r2, #0
 1465 0138 1C4B     		ldr	r3, .L118+4
 1466 013a 1A70     		strb	r2, [r3]
 1467              	.LBB382:
 1468              	.LBB383:
 1469              		.loc 2 879 0
 1470              		.syntax unified
 1471              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1472 013c BFF34F8F 		dsb 0xF
 1473              	@ 0 "" 2
 1474              		.thumb
ARM GAS  /tmp/cc968NXr.s 			page 82


 1475              		.syntax unified
 1476              	.LBE383:
 1477              	.LBE382:
 552:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 1478              		.loc 1 552 0
 1479 0140 636A     		ldr	r3, [r4, #36]
 1480 0142 B3F5007F 		cmp	r3, #512
 1481 0146 97D8     		bhi	.L100
 554:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 1482              		.loc 1 554 0
 1483 0148 E26A     		ldr	r2, [r4, #44]
 1484 014a 236B     		ldr	r3, [r4, #48]
 1485 014c 03FB02F3 		mul	r3, r3, r2
 1486 0150 B3F5803F 		cmp	r3, #65536
 1487 0154 BFF47CAF 		bcs	.L101
 556:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1488              		.loc 1 556 0
 1489 0158 134B     		ldr	r3, .L118
 1490 015a 0022     		movs	r2, #0
 1491 015c 1A70     		strb	r2, [r3]
 1492              	.LBB384:
 1493              	.LBB385:
 1494              		.loc 2 879 0
 1495              		.syntax unified
 1496              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1497 015e BFF34F8F 		dsb 0xF
 1498              	@ 0 "" 2
 1499              		.thumb
 1500              		.syntax unified
 1501              	.LBE385:
 1502              	.LBE384:
 558:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1503              		.loc 1 558 0
 1504 0162 F2B2     		uxtb	r2, r6
 1505 0164 1A70     		strb	r2, [r3]
 1506              	.LBB386:
 1507              	.LBB387:
 1508              		.loc 2 879 0
 1509              		.syntax unified
 1510              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1511 0166 BFF34F8F 		dsb 0xF
 1512              	@ 0 "" 2
 1513              		.thumb
 1514              		.syntax unified
 1515              	.LBE387:
 1516              	.LBE386:
 560:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1517              		.loc 1 560 0
 1518 016a C6F30722 		ubfx	r2, r6, #8, #8
 1519 016e 1A70     		strb	r2, [r3]
 1520              	.LBB388:
 1521              	.LBB389:
 1522              		.loc 2 879 0
 1523              		.syntax unified
 1524              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1525 0170 BFF34F8F 		dsb 0xF
 1526              	@ 0 "" 2
ARM GAS  /tmp/cc968NXr.s 			page 83


 1527              		.thumb
 1528              		.syntax unified
 1529              	.L102:
 1530              	.LBE389:
 1531              	.LBE388:
 603:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 1532              		.loc 1 603 0
 1533 0174 3022     		movs	r2, #48
 1534 0176 0D4B     		ldr	r3, .L118+4
 1535 0178 1A70     		strb	r2, [r3]
 1536              	.LBB390:
 1537              	.LBB391:
 1538              		.loc 2 879 0
 1539              		.syntax unified
 1540              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1541 017a BFF34F8F 		dsb 0xF
 1542              	@ 0 "" 2
 1543              		.thumb
 1544              		.syntax unified
 1545              	.LBE391:
 1546              	.LBE390:
 607:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 1547              		.loc 1 607 0
 1548 017e 94F83C30 		ldrb	r3, [r4, #60]	@ zero_extendqisi2
 1549 0182 012B     		cmp	r3, #1
 1550 0184 A8D0     		beq	.L117
 1551              	.L104:
 519:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 1552              		.loc 1 519 0 discriminator 1
 1553 0186 0023     		movs	r3, #0
 1554 0188 C9E7     		b	.L107
 1555              	.L109:
 650:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1556              		.loc 1 650 0
 1557 018a 0123     		movs	r3, #1
 1558 018c 84F82130 		strb	r3, [r4, #33]
 653:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 1559              		.loc 1 653 0
 1560 0190 0020     		movs	r0, #0
 1561 0192 84F82000 		strb	r0, [r4, #32]
 660:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1562              		.loc 1 660 0
 1563 0196 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1564              	.LVL112:
 1565              	.L111:
 528:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 1566              		.loc 1 528 0
 1567 019a 0220     		movs	r0, #2
 1568              	.LVL113:
 1569 019c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1570              	.LVL114:
 1571              	.L113:
 533:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1572              		.loc 1 533 0
 1573 01a0 0220     		movs	r0, #2
 1574              	.LVL115:
 662:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
ARM GAS  /tmp/cc968NXr.s 			page 84


 1575              		.loc 1 662 0
 1576 01a2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1577              	.LVL116:
 1578              	.L119:
 1579 01a6 00BF     		.align	2
 1580              	.L118:
 1581 01a8 00000280 		.word	-2147352576
 1582 01ac 00000180 		.word	-2147418112
 1583              		.cfi_endproc
 1584              	.LFE150:
 1586              		.section	.text.HAL_NAND_Read_Page_16b,"ax",%progbits
 1587              		.align	1
 1588              		.global	HAL_NAND_Read_Page_16b
 1589              		.syntax unified
 1590              		.thumb
 1591              		.thumb_func
 1592              		.fpu fpv5-d16
 1594              	HAL_NAND_Read_Page_16b:
 1595              	.LFB151:
 674:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 1596              		.loc 1 674 0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 0
 1599              		@ frame_needed = 0, uses_anonymous_args = 0
 1600              	.LVL117:
 1601 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1602              	.LCFI15:
 1603              		.cfi_def_cfa_offset 24
 1604              		.cfi_offset 4, -24
 1605              		.cfi_offset 5, -20
 1606              		.cfi_offset 6, -16
 1607              		.cfi_offset 7, -12
 1608              		.cfi_offset 8, -8
 1609              		.cfi_offset 14, -4
 1610 0004 1F46     		mov	r7, r3
 1611              	.LVL118:
 681:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 1612              		.loc 1 681 0
 1613 0006 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 1614              	.LVL119:
 1615 000a DBB2     		uxtb	r3, r3
 1616 000c 022B     		cmp	r3, #2
 1617 000e 00F0C480 		beq	.L134
 1618 0012 0446     		mov	r4, r0
 1619 0014 1546     		mov	r5, r2
 685:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 1620              		.loc 1 685 0
 1621 0016 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 1622 001a DBB2     		uxtb	r3, r3
 1623 001c 012B     		cmp	r3, #1
 1624 001e 02D0     		beq	.L138
 811:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 1625              		.loc 1 811 0
 1626 0020 0120     		movs	r0, #1
 1627              	.LVL120:
 1628 0022 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1629              	.LVL121:
ARM GAS  /tmp/cc968NXr.s 			page 85


 1630              	.L138:
 688:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1631              		.loc 1 688 0
 1632 0026 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1633 002a 012B     		cmp	r3, #1
 1634 002c 00F0B880 		beq	.L136
 688:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1635              		.loc 1 688 0 is_stmt 0 discriminator 2
 1636 0030 0123     		movs	r3, #1
 1637 0032 80F82030 		strb	r3, [r0, #32]
 691:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1638              		.loc 1 691 0 is_stmt 1 discriminator 2
 1639 0036 0223     		movs	r3, #2
 1640 0038 80F82130 		strb	r3, [r0, #33]
 1641              	.LVL122:
 697:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1642              		.loc 1 697 0 discriminator 2
 1643 003c 0B88     		ldrh	r3, [r1]
 1644 003e 8A88     		ldrh	r2, [r1, #4]
 1645              	.LVL123:
 1646 0040 4E88     		ldrh	r6, [r1, #2]
 1647 0042 816B     		ldr	r1, [r0, #56]
 1648              	.LVL124:
 1649 0044 01FB0626 		mla	r6, r1, r6, r2
 1650 0048 C26A     		ldr	r2, [r0, #44]
 1651 004a 02FB0636 		mla	r6, r2, r6, r3
 1652              	.LVL125:
 700:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 1653              		.loc 1 700 0 discriminator 2
 1654 004e 6BE0     		b	.L122
 1655              	.LVL126:
 1656              	.L124:
 720:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1657              		.loc 1 720 0
 1658 0050 554B     		ldr	r3, .L141
 1659 0052 0022     		movs	r2, #0
 1660 0054 1A70     		strb	r2, [r3]
 1661              	.LBB392:
 1662              	.LBB393:
 1663              		.loc 2 879 0
 1664              		.syntax unified
 1665              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1666 0056 BFF34F8F 		dsb 0xF
 1667              	@ 0 "" 2
 1668              		.thumb
 1669              		.syntax unified
 1670              	.LBE393:
 1671              	.LBE392:
 722:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1672              		.loc 1 722 0
 1673 005a F2B2     		uxtb	r2, r6
 1674 005c 1A70     		strb	r2, [r3]
 1675              	.LBB394:
 1676              	.LBB395:
 1677              		.loc 2 879 0
 1678              		.syntax unified
 1679              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc968NXr.s 			page 86


 1680 005e BFF34F8F 		dsb 0xF
 1681              	@ 0 "" 2
 1682              		.thumb
 1683              		.syntax unified
 1684              	.LBE395:
 1685              	.LBE394:
 724:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1686              		.loc 1 724 0
 1687 0062 C6F30722 		ubfx	r2, r6, #8, #8
 1688 0066 1A70     		strb	r2, [r3]
 1689              	.LBB396:
 1690              	.LBB397:
 1691              		.loc 2 879 0
 1692              		.syntax unified
 1693              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1694 0068 BFF34F8F 		dsb 0xF
 1695              	@ 0 "" 2
 1696              		.thumb
 1697              		.syntax unified
 1698              	.LBE397:
 1699              	.LBE396:
 726:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1700              		.loc 1 726 0
 1701 006c C6F30742 		ubfx	r2, r6, #16, #8
 1702 0070 1A70     		strb	r2, [r3]
 1703              	.LBB398:
 1704              	.LBB399:
 1705              		.loc 2 879 0
 1706              		.syntax unified
 1707              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1708 0072 BFF34F8F 		dsb 0xF
 1709              	@ 0 "" 2
 1710              		.thumb
 1711              		.syntax unified
 1712 0076 7DE0     		b	.L125
 1713              	.L123:
 1714              	.LBE399:
 1715              	.LBE398:
 732:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 1716              		.loc 1 732 0
 1717 0078 E26A     		ldr	r2, [r4, #44]
 1718 007a 236B     		ldr	r3, [r4, #48]
 1719 007c 03FB02F3 		mul	r3, r3, r2
 1720 0080 B3F5803F 		cmp	r3, #65536
 1721 0084 11D2     		bcs	.L126
 734:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1722              		.loc 1 734 0
 1723 0086 484B     		ldr	r3, .L141
 1724 0088 0022     		movs	r2, #0
 1725 008a 1A70     		strb	r2, [r3]
 1726              	.LBB400:
 1727              	.LBB401:
 1728              		.loc 2 879 0
 1729              		.syntax unified
 1730              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1731 008c BFF34F8F 		dsb 0xF
 1732              	@ 0 "" 2
ARM GAS  /tmp/cc968NXr.s 			page 87


 1733              		.thumb
 1734              		.syntax unified
 1735              	.LBE401:
 1736              	.LBE400:
 736:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1737              		.loc 1 736 0
 1738 0090 1A70     		strb	r2, [r3]
 1739              	.LBB402:
 1740              	.LBB403:
 1741              		.loc 2 879 0
 1742              		.syntax unified
 1743              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1744 0092 BFF34F8F 		dsb 0xF
 1745              	@ 0 "" 2
 1746              		.thumb
 1747              		.syntax unified
 1748              	.LBE403:
 1749              	.LBE402:
 738:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1750              		.loc 1 738 0
 1751 0096 F2B2     		uxtb	r2, r6
 1752 0098 1A70     		strb	r2, [r3]
 1753              	.LBB404:
 1754              	.LBB405:
 1755              		.loc 2 879 0
 1756              		.syntax unified
 1757              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1758 009a BFF34F8F 		dsb 0xF
 1759              	@ 0 "" 2
 1760              		.thumb
 1761              		.syntax unified
 1762              	.LBE405:
 1763              	.LBE404:
 740:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1764              		.loc 1 740 0
 1765 009e C6F30722 		ubfx	r2, r6, #8, #8
 1766 00a2 1A70     		strb	r2, [r3]
 1767              	.LBB406:
 1768              	.LBB407:
 1769              		.loc 2 879 0
 1770              		.syntax unified
 1771              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1772 00a4 BFF34F8F 		dsb 0xF
 1773              	@ 0 "" 2
 1774              		.thumb
 1775              		.syntax unified
 1776 00a8 64E0     		b	.L125
 1777              	.L126:
 1778              	.LBE407:
 1779              	.LBE406:
 745:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1780              		.loc 1 745 0
 1781 00aa 3F4B     		ldr	r3, .L141
 1782 00ac 0022     		movs	r2, #0
 1783 00ae 1A70     		strb	r2, [r3]
 1784              	.LBB408:
 1785              	.LBB409:
ARM GAS  /tmp/cc968NXr.s 			page 88


 1786              		.loc 2 879 0
 1787              		.syntax unified
 1788              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1789 00b0 BFF34F8F 		dsb 0xF
 1790              	@ 0 "" 2
 1791              		.thumb
 1792              		.syntax unified
 1793              	.LBE409:
 1794              	.LBE408:
 747:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1795              		.loc 1 747 0
 1796 00b4 1A70     		strb	r2, [r3]
 1797              	.LBB410:
 1798              	.LBB411:
 1799              		.loc 2 879 0
 1800              		.syntax unified
 1801              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1802 00b6 BFF34F8F 		dsb 0xF
 1803              	@ 0 "" 2
 1804              		.thumb
 1805              		.syntax unified
 1806              	.LBE411:
 1807              	.LBE410:
 749:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1808              		.loc 1 749 0
 1809 00ba F2B2     		uxtb	r2, r6
 1810 00bc 1A70     		strb	r2, [r3]
 1811              	.LBB412:
 1812              	.LBB413:
 1813              		.loc 2 879 0
 1814              		.syntax unified
 1815              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1816 00be BFF34F8F 		dsb 0xF
 1817              	@ 0 "" 2
 1818              		.thumb
 1819              		.syntax unified
 1820              	.LBE413:
 1821              	.LBE412:
 751:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1822              		.loc 1 751 0
 1823 00c2 C6F30722 		ubfx	r2, r6, #8, #8
 1824 00c6 1A70     		strb	r2, [r3]
 1825              	.LBB414:
 1826              	.LBB415:
 1827              		.loc 2 879 0
 1828              		.syntax unified
 1829              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1830 00c8 BFF34F8F 		dsb 0xF
 1831              	@ 0 "" 2
 1832              		.thumb
 1833              		.syntax unified
 1834              	.LBE415:
 1835              	.LBE414:
 753:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1836              		.loc 1 753 0
 1837 00cc C6F30742 		ubfx	r2, r6, #16, #8
 1838 00d0 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc968NXr.s 			page 89


 1839              	.LBB416:
 1840              	.LBB417:
 1841              		.loc 2 879 0
 1842              		.syntax unified
 1843              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1844 00d2 BFF34F8F 		dsb 0xF
 1845              	@ 0 "" 2
 1846              		.thumb
 1847              		.syntax unified
 1848 00d6 4DE0     		b	.L125
 1849              	.L140:
 1850              	.LBE417:
 1851              	.LBE416:
 764:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1852              		.loc 1 764 0
 1853 00d8 FFF7FEFF 		bl	HAL_GetTick
 1854              	.LVL127:
 1855 00dc 8046     		mov	r8, r0
 1856              	.LVL128:
 1857              	.L128:
 767:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 1858              		.loc 1 767 0
 1859 00de 2046     		mov	r0, r4
 1860 00e0 FFF7FEFF 		bl	HAL_NAND_Read_Status
 1861              	.LVL129:
 1862 00e4 4028     		cmp	r0, #64
 1863 00e6 0ED0     		beq	.L139
 769:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           {
 1864              		.loc 1 769 0
 1865 00e8 FFF7FEFF 		bl	HAL_GetTick
 1866              	.LVL130:
 1867 00ec A0EB0800 		sub	r0, r0, r8
 1868 00f0 B0F1807F 		cmp	r0, #16777216
 1869 00f4 F3D9     		bls	.L128
 772:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1870              		.loc 1 772 0
 1871 00f6 0320     		movs	r0, #3
 1872 00f8 84F82100 		strb	r0, [r4, #33]
 775:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1873              		.loc 1 775 0
 1874 00fc 0023     		movs	r3, #0
 1875 00fe 84F82030 		strb	r3, [r4, #32]
 777:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           }
 1876              		.loc 1 777 0
 1877 0102 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1878              	.LVL131:
 1879              	.L139:
 782:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 1880              		.loc 1 782 0
 1881 0106 0022     		movs	r2, #0
 1882 0108 284B     		ldr	r3, .L141+4
 1883 010a 1A70     		strb	r2, [r3]
 1884              	.LBB418:
 1885              	.LBB419:
 1886              		.loc 2 879 0
 1887              		.syntax unified
 1888              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc968NXr.s 			page 90


 1889 010c BFF34F8F 		dsb 0xF
 1890              	@ 0 "" 2
 1891              		.thumb
 1892              		.syntax unified
 1893 0110 39E0     		b	.L127
 1894              	.LVL132:
 1895              	.L131:
 1896              	.LBE419:
 1897              	.LBE418:
 789:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
 1898              		.loc 1 789 0 discriminator 3
 1899 0112 4FF00042 		mov	r2, #-2147483648
 1900 0116 1288     		ldrh	r2, [r2]
 1901 0118 25F8022B 		strh	r2, [r5], #2	@ movhi
 1902              	.LVL133:
 787:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 1903              		.loc 1 787 0 discriminator 3
 1904 011c 0133     		adds	r3, r3, #1
 1905              	.LVL134:
 1906              	.L130:
 787:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 1907              		.loc 1 787 0 is_stmt 0 discriminator 1
 1908 011e 626A     		ldr	r2, [r4, #36]
 1909 0120 9342     		cmp	r3, r2
 1910 0122 F6D3     		bcc	.L131
 797:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 1911              		.loc 1 797 0 is_stmt 1
 1912 0124 013F     		subs	r7, r7, #1
 1913              	.LVL135:
 800:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 1914              		.loc 1 800 0
 1915 0126 0136     		adds	r6, r6, #1
 1916              	.LVL136:
 1917              	.L122:
 700:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 1918              		.loc 1 700 0
 1919 0128 7FB3     		cbz	r7, .L132
 700:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 1920              		.loc 1 700 0 is_stmt 0 discriminator 1
 1921 012a E26A     		ldr	r2, [r4, #44]
 1922 012c 236B     		ldr	r3, [r4, #48]
 1923 012e 03FB02F3 		mul	r3, r3, r2
 1924 0132 9E42     		cmp	r6, r3
 1925 0134 29D2     		bcs	.L132
 703:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 1926              		.loc 1 703 0 is_stmt 1
 1927 0136 0022     		movs	r2, #0
 1928 0138 1C4B     		ldr	r3, .L141+4
 1929 013a 1A70     		strb	r2, [r3]
 1930              	.LBB420:
 1931              	.LBB421:
 1932              		.loc 2 879 0
 1933              		.syntax unified
 1934              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1935 013c BFF34F8F 		dsb 0xF
 1936              	@ 0 "" 2
 1937              		.thumb
ARM GAS  /tmp/cc968NXr.s 			page 91


 1938              		.syntax unified
 1939              	.LBE421:
 1940              	.LBE420:
 707:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 1941              		.loc 1 707 0
 1942 0140 636A     		ldr	r3, [r4, #36]
 1943 0142 B3F5007F 		cmp	r3, #512
 1944 0146 97D8     		bhi	.L123
 709:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 1945              		.loc 1 709 0
 1946 0148 E26A     		ldr	r2, [r4, #44]
 1947 014a 236B     		ldr	r3, [r4, #48]
 1948 014c 03FB02F3 		mul	r3, r3, r2
 1949 0150 B3F5803F 		cmp	r3, #65536
 1950 0154 BFF47CAF 		bcs	.L124
 711:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1951              		.loc 1 711 0
 1952 0158 134B     		ldr	r3, .L141
 1953 015a 0022     		movs	r2, #0
 1954 015c 1A70     		strb	r2, [r3]
 1955              	.LBB422:
 1956              	.LBB423:
 1957              		.loc 2 879 0
 1958              		.syntax unified
 1959              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1960 015e BFF34F8F 		dsb 0xF
 1961              	@ 0 "" 2
 1962              		.thumb
 1963              		.syntax unified
 1964              	.LBE423:
 1965              	.LBE422:
 713:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1966              		.loc 1 713 0
 1967 0162 F2B2     		uxtb	r2, r6
 1968 0164 1A70     		strb	r2, [r3]
 1969              	.LBB424:
 1970              	.LBB425:
 1971              		.loc 2 879 0
 1972              		.syntax unified
 1973              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1974 0166 BFF34F8F 		dsb 0xF
 1975              	@ 0 "" 2
 1976              		.thumb
 1977              		.syntax unified
 1978              	.LBE425:
 1979              	.LBE424:
 715:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 1980              		.loc 1 715 0
 1981 016a C6F30722 		ubfx	r2, r6, #8, #8
 1982 016e 1A70     		strb	r2, [r3]
 1983              	.LBB426:
 1984              	.LBB427:
 1985              		.loc 2 879 0
 1986              		.syntax unified
 1987              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1988 0170 BFF34F8F 		dsb 0xF
 1989              	@ 0 "" 2
ARM GAS  /tmp/cc968NXr.s 			page 92


 1990              		.thumb
 1991              		.syntax unified
 1992              	.L125:
 1993              	.LBE427:
 1994              	.LBE426:
 758:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 1995              		.loc 1 758 0
 1996 0174 3022     		movs	r2, #48
 1997 0176 0D4B     		ldr	r3, .L141+4
 1998 0178 1A70     		strb	r2, [r3]
 1999              	.LBB428:
 2000              	.LBB429:
 2001              		.loc 2 879 0
 2002              		.syntax unified
 2003              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2004 017a BFF34F8F 		dsb 0xF
 2005              	@ 0 "" 2
 2006              		.thumb
 2007              		.syntax unified
 2008              	.LBE429:
 2009              	.LBE428:
 761:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 2010              		.loc 1 761 0
 2011 017e 94F83C30 		ldrb	r3, [r4, #60]	@ zero_extendqisi2
 2012 0182 012B     		cmp	r3, #1
 2013 0184 A8D0     		beq	.L140
 2014              	.L127:
 674:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 2015              		.loc 1 674 0 discriminator 1
 2016 0186 0023     		movs	r3, #0
 2017 0188 C9E7     		b	.L130
 2018              	.L132:
 804:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2019              		.loc 1 804 0
 2020 018a 0123     		movs	r3, #1
 2021 018c 84F82130 		strb	r3, [r4, #33]
 807:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 2022              		.loc 1 807 0
 2023 0190 0020     		movs	r0, #0
 2024 0192 84F82000 		strb	r0, [r4, #32]
 814:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 2025              		.loc 1 814 0
 2026 0196 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2027              	.LVL137:
 2028              	.L134:
 683:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 2029              		.loc 1 683 0
 2030 019a 0220     		movs	r0, #2
 2031              	.LVL138:
 2032 019c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2033              	.LVL139:
 2034              	.L136:
 688:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2035              		.loc 1 688 0
 2036 01a0 0220     		movs	r0, #2
 2037              	.LVL140:
 815:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
ARM GAS  /tmp/cc968NXr.s 			page 93


 2038              		.loc 1 815 0
 2039 01a2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2040              	.LVL141:
 2041              	.L142:
 2042 01a6 00BF     		.align	2
 2043              	.L141:
 2044 01a8 00000280 		.word	-2147352576
 2045 01ac 00000180 		.word	-2147418112
 2046              		.cfi_endproc
 2047              	.LFE151:
 2049              		.section	.text.HAL_NAND_Write_Page_8b,"ax",%progbits
 2050              		.align	1
 2051              		.global	HAL_NAND_Write_Page_8b
 2052              		.syntax unified
 2053              		.thumb
 2054              		.thumb_func
 2055              		.fpu fpv5-d16
 2057              	HAL_NAND_Write_Page_8b:
 2058              	.LFB152:
 827:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 2059              		.loc 1 827 0
 2060              		.cfi_startproc
 2061              		@ args = 0, pretend = 0, frame = 0
 2062              		@ frame_needed = 0, uses_anonymous_args = 0
 2063              	.LVL142:
 2064 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2065              	.LCFI16:
 2066              		.cfi_def_cfa_offset 24
 2067              		.cfi_offset 4, -24
 2068              		.cfi_offset 5, -20
 2069              		.cfi_offset 6, -16
 2070              		.cfi_offset 7, -12
 2071              		.cfi_offset 8, -8
 2072              		.cfi_offset 14, -4
 2073 0004 1F46     		mov	r7, r3
 2074              	.LVL143:
 834:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 2075              		.loc 1 834 0
 2076 0006 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 2077              	.LVL144:
 2078 000a DBB2     		uxtb	r3, r3
 2079 000c 022B     		cmp	r3, #2
 2080 000e 00F0C280 		beq	.L156
 2081 0012 0446     		mov	r4, r0
 2082 0014 1546     		mov	r5, r2
 838:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 2083              		.loc 1 838 0
 2084 0016 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 2085 001a DBB2     		uxtb	r3, r3
 2086 001c 012B     		cmp	r3, #1
 2087 001e 02D0     		beq	.L160
 960:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 2088              		.loc 1 960 0
 2089 0020 0120     		movs	r0, #1
 2090              	.LVL145:
 2091 0022 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2092              	.LVL146:
ARM GAS  /tmp/cc968NXr.s 			page 94


 2093              	.L160:
 841:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2094              		.loc 1 841 0
 2095 0026 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2096 002a 012B     		cmp	r3, #1
 2097 002c 00F0B680 		beq	.L158
 841:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2098              		.loc 1 841 0 is_stmt 0 discriminator 2
 2099 0030 0123     		movs	r3, #1
 2100 0032 80F82030 		strb	r3, [r0, #32]
 844:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2101              		.loc 1 844 0 is_stmt 1 discriminator 2
 2102 0036 0223     		movs	r3, #2
 2103 0038 80F82130 		strb	r3, [r0, #33]
 2104              	.LVL147:
 850:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2105              		.loc 1 850 0 discriminator 2
 2106 003c 0B88     		ldrh	r3, [r1]
 2107 003e 8A88     		ldrh	r2, [r1, #4]
 2108              	.LVL148:
 2109 0040 4E88     		ldrh	r6, [r1, #2]
 2110 0042 816B     		ldr	r1, [r0, #56]
 2111              	.LVL149:
 2112 0044 01FB0626 		mla	r6, r1, r6, r2
 2113 0048 C26A     		ldr	r2, [r0, #44]
 2114 004a 02FB0636 		mla	r6, r2, r6, r3
 2115              	.LVL150:
 2116              	.L145:
 853:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 2117              		.loc 1 853 0
 2118 004e 002F     		cmp	r7, #0
 2119 0050 00F09980 		beq	.L154
 853:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 2120              		.loc 1 853 0 is_stmt 0 discriminator 1
 2121 0054 E26A     		ldr	r2, [r4, #44]
 2122 0056 236B     		ldr	r3, [r4, #48]
 2123 0058 03FB02F3 		mul	r3, r3, r2
 2124 005c 9E42     		cmp	r6, r3
 2125 005e 80F09280 		bcs	.L154
 856:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 2126              		.loc 1 856 0 is_stmt 1
 2127 0062 504B     		ldr	r3, .L162
 2128 0064 0022     		movs	r2, #0
 2129 0066 1A70     		strb	r2, [r3]
 2130              	.LBB430:
 2131              	.LBB431:
 2132              		.loc 2 879 0
 2133              		.syntax unified
 2134              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2135 0068 BFF34F8F 		dsb 0xF
 2136              	@ 0 "" 2
 2137              		.thumb
 2138              		.syntax unified
 2139              	.LBE431:
 2140              	.LBE430:
 858:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 2141              		.loc 1 858 0
ARM GAS  /tmp/cc968NXr.s 			page 95


 2142 006c 8022     		movs	r2, #128
 2143 006e 1A70     		strb	r2, [r3]
 2144              	.LBB432:
 2145              	.LBB433:
 2146              		.loc 2 879 0
 2147              		.syntax unified
 2148              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2149 0070 BFF34F8F 		dsb 0xF
 2150              	@ 0 "" 2
 2151              		.thumb
 2152              		.syntax unified
 2153              	.LBE433:
 2154              	.LBE432:
 862:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 2155              		.loc 1 862 0
 2156 0074 636A     		ldr	r3, [r4, #36]
 2157 0076 B3F5007F 		cmp	r3, #512
 2158 007a 2AD8     		bhi	.L146
 864:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 2159              		.loc 1 864 0
 2160 007c E26A     		ldr	r2, [r4, #44]
 2161 007e 236B     		ldr	r3, [r4, #48]
 2162 0080 03FB02F3 		mul	r3, r3, r2
 2163 0084 B3F5803F 		cmp	r3, #65536
 2164 0088 0FD2     		bcs	.L147
 866:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2165              		.loc 1 866 0
 2166 008a 474B     		ldr	r3, .L162+4
 2167 008c 0022     		movs	r2, #0
 2168 008e 1A70     		strb	r2, [r3]
 2169              	.LBB434:
 2170              	.LBB435:
 2171              		.loc 2 879 0
 2172              		.syntax unified
 2173              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2174 0090 BFF34F8F 		dsb 0xF
 2175              	@ 0 "" 2
 2176              		.thumb
 2177              		.syntax unified
 2178              	.LBE435:
 2179              	.LBE434:
 868:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2180              		.loc 1 868 0
 2181 0094 F2B2     		uxtb	r2, r6
 2182 0096 1A70     		strb	r2, [r3]
 2183              	.LBB436:
 2184              	.LBB437:
 2185              		.loc 2 879 0
 2186              		.syntax unified
 2187              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2188 0098 BFF34F8F 		dsb 0xF
 2189              	@ 0 "" 2
 2190              		.thumb
 2191              		.syntax unified
 2192              	.LBE437:
 2193              	.LBE436:
 870:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
ARM GAS  /tmp/cc968NXr.s 			page 96


 2194              		.loc 1 870 0
 2195 009c C6F30722 		ubfx	r2, r6, #8, #8
 2196 00a0 1A70     		strb	r2, [r3]
 2197              	.LBB438:
 2198              	.LBB439:
 2199              		.loc 2 879 0
 2200              		.syntax unified
 2201              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2202 00a2 BFF34F8F 		dsb 0xF
 2203              	@ 0 "" 2
 2204              		.thumb
 2205              		.syntax unified
 2206              	.L148:
 2207              	.LBE439:
 2208              	.LBE438:
 827:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 2209              		.loc 1 827 0 discriminator 1
 2210 00a6 0023     		movs	r3, #0
 2211 00a8 4BE0     		b	.L150
 2212              	.L147:
 875:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2213              		.loc 1 875 0
 2214 00aa 3F4B     		ldr	r3, .L162+4
 2215 00ac 0022     		movs	r2, #0
 2216 00ae 1A70     		strb	r2, [r3]
 2217              	.LBB440:
 2218              	.LBB441:
 2219              		.loc 2 879 0
 2220              		.syntax unified
 2221              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2222 00b0 BFF34F8F 		dsb 0xF
 2223              	@ 0 "" 2
 2224              		.thumb
 2225              		.syntax unified
 2226              	.LBE441:
 2227              	.LBE440:
 877:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2228              		.loc 1 877 0
 2229 00b4 F2B2     		uxtb	r2, r6
 2230 00b6 1A70     		strb	r2, [r3]
 2231              	.LBB442:
 2232              	.LBB443:
 2233              		.loc 2 879 0
 2234              		.syntax unified
 2235              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2236 00b8 BFF34F8F 		dsb 0xF
 2237              	@ 0 "" 2
 2238              		.thumb
 2239              		.syntax unified
 2240              	.LBE443:
 2241              	.LBE442:
 879:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2242              		.loc 1 879 0
 2243 00bc C6F30722 		ubfx	r2, r6, #8, #8
 2244 00c0 1A70     		strb	r2, [r3]
 2245              	.LBB444:
 2246              	.LBB445:
ARM GAS  /tmp/cc968NXr.s 			page 97


 2247              		.loc 2 879 0
 2248              		.syntax unified
 2249              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2250 00c2 BFF34F8F 		dsb 0xF
 2251              	@ 0 "" 2
 2252              		.thumb
 2253              		.syntax unified
 2254              	.LBE445:
 2255              	.LBE444:
 881:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2256              		.loc 1 881 0
 2257 00c6 C6F30742 		ubfx	r2, r6, #16, #8
 2258 00ca 1A70     		strb	r2, [r3]
 2259              	.LBB446:
 2260              	.LBB447:
 2261              		.loc 2 879 0
 2262              		.syntax unified
 2263              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2264 00cc BFF34F8F 		dsb 0xF
 2265              	@ 0 "" 2
 2266              		.thumb
 2267              		.syntax unified
 2268 00d0 E9E7     		b	.L148
 2269              	.L146:
 2270              	.LBE447:
 2271              	.LBE446:
 887:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 2272              		.loc 1 887 0
 2273 00d2 E26A     		ldr	r2, [r4, #44]
 2274 00d4 236B     		ldr	r3, [r4, #48]
 2275 00d6 03FB02F3 		mul	r3, r3, r2
 2276 00da B3F5803F 		cmp	r3, #65536
 2277 00de 11D2     		bcs	.L149
 889:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2278              		.loc 1 889 0
 2279 00e0 314B     		ldr	r3, .L162+4
 2280 00e2 0022     		movs	r2, #0
 2281 00e4 1A70     		strb	r2, [r3]
 2282              	.LBB448:
 2283              	.LBB449:
 2284              		.loc 2 879 0
 2285              		.syntax unified
 2286              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2287 00e6 BFF34F8F 		dsb 0xF
 2288              	@ 0 "" 2
 2289              		.thumb
 2290              		.syntax unified
 2291              	.LBE449:
 2292              	.LBE448:
 891:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2293              		.loc 1 891 0
 2294 00ea 1A70     		strb	r2, [r3]
 2295              	.LBB450:
 2296              	.LBB451:
 2297              		.loc 2 879 0
 2298              		.syntax unified
 2299              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc968NXr.s 			page 98


 2300 00ec BFF34F8F 		dsb 0xF
 2301              	@ 0 "" 2
 2302              		.thumb
 2303              		.syntax unified
 2304              	.LBE451:
 2305              	.LBE450:
 893:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2306              		.loc 1 893 0
 2307 00f0 F2B2     		uxtb	r2, r6
 2308 00f2 1A70     		strb	r2, [r3]
 2309              	.LBB452:
 2310              	.LBB453:
 2311              		.loc 2 879 0
 2312              		.syntax unified
 2313              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2314 00f4 BFF34F8F 		dsb 0xF
 2315              	@ 0 "" 2
 2316              		.thumb
 2317              		.syntax unified
 2318              	.LBE453:
 2319              	.LBE452:
 895:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2320              		.loc 1 895 0
 2321 00f8 C6F30722 		ubfx	r2, r6, #8, #8
 2322 00fc 1A70     		strb	r2, [r3]
 2323              	.LBB454:
 2324              	.LBB455:
 2325              		.loc 2 879 0
 2326              		.syntax unified
 2327              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2328 00fe BFF34F8F 		dsb 0xF
 2329              	@ 0 "" 2
 2330              		.thumb
 2331              		.syntax unified
 2332 0102 D0E7     		b	.L148
 2333              	.L149:
 2334              	.LBE455:
 2335              	.LBE454:
 900:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2336              		.loc 1 900 0
 2337 0104 284B     		ldr	r3, .L162+4
 2338 0106 0022     		movs	r2, #0
 2339 0108 1A70     		strb	r2, [r3]
 2340              	.LBB456:
 2341              	.LBB457:
 2342              		.loc 2 879 0
 2343              		.syntax unified
 2344              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2345 010a BFF34F8F 		dsb 0xF
 2346              	@ 0 "" 2
 2347              		.thumb
 2348              		.syntax unified
 2349              	.LBE457:
 2350              	.LBE456:
 902:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2351              		.loc 1 902 0
 2352 010e 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc968NXr.s 			page 99


 2353              	.LBB458:
 2354              	.LBB459:
 2355              		.loc 2 879 0
 2356              		.syntax unified
 2357              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2358 0110 BFF34F8F 		dsb 0xF
 2359              	@ 0 "" 2
 2360              		.thumb
 2361              		.syntax unified
 2362              	.LBE459:
 2363              	.LBE458:
 904:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2364              		.loc 1 904 0
 2365 0114 F2B2     		uxtb	r2, r6
 2366 0116 1A70     		strb	r2, [r3]
 2367              	.LBB460:
 2368              	.LBB461:
 2369              		.loc 2 879 0
 2370              		.syntax unified
 2371              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2372 0118 BFF34F8F 		dsb 0xF
 2373              	@ 0 "" 2
 2374              		.thumb
 2375              		.syntax unified
 2376              	.LBE461:
 2377              	.LBE460:
 906:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2378              		.loc 1 906 0
 2379 011c C6F30722 		ubfx	r2, r6, #8, #8
 2380 0120 1A70     		strb	r2, [r3]
 2381              	.LBB462:
 2382              	.LBB463:
 2383              		.loc 2 879 0
 2384              		.syntax unified
 2385              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2386 0122 BFF34F8F 		dsb 0xF
 2387              	@ 0 "" 2
 2388              		.thumb
 2389              		.syntax unified
 2390              	.LBE463:
 2391              	.LBE462:
 908:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2392              		.loc 1 908 0
 2393 0126 C6F30742 		ubfx	r2, r6, #16, #8
 2394 012a 1A70     		strb	r2, [r3]
 2395              	.LBB464:
 2396              	.LBB465:
 2397              		.loc 2 879 0
 2398              		.syntax unified
 2399              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2400 012c BFF34F8F 		dsb 0xF
 2401              	@ 0 "" 2
 2402              		.thumb
 2403              		.syntax unified
 2404 0130 B9E7     		b	.L148
 2405              	.LVL151:
 2406              	.L151:
ARM GAS  /tmp/cc968NXr.s 			page 100


 2407              	.LBE465:
 2408              	.LBE464:
 916:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
 2409              		.loc 1 916 0 discriminator 3
 2410 0132 15F8011B 		ldrb	r1, [r5], #1	@ zero_extendqisi2
 2411              	.LVL152:
 2412 0136 4FF00042 		mov	r2, #-2147483648
 2413 013a 1170     		strb	r1, [r2]
 2414              	.LVL153:
 2415              	.LBB466:
 2416              	.LBB467:
 2417              		.loc 2 879 0 discriminator 3
 2418              		.syntax unified
 2419              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2420 013c BFF34F8F 		dsb 0xF
 2421              	@ 0 "" 2
 2422              		.thumb
 2423              		.syntax unified
 2424              	.LBE467:
 2425              	.LBE466:
 914:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 2426              		.loc 1 914 0 discriminator 3
 2427 0140 0133     		adds	r3, r3, #1
 2428              	.LVL154:
 2429              	.L150:
 914:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 2430              		.loc 1 914 0 is_stmt 0 discriminator 1
 2431 0142 626A     		ldr	r2, [r4, #36]
 2432 0144 9342     		cmp	r3, r2
 2433 0146 F4D3     		bcc	.L151
 921:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 2434              		.loc 1 921 0 is_stmt 1
 2435 0148 1022     		movs	r2, #16
 2436 014a 164B     		ldr	r3, .L162
 2437              	.LVL155:
 2438 014c 1A70     		strb	r2, [r3]
 2439              	.LBB468:
 2440              	.LBB469:
 2441              		.loc 2 879 0
 2442              		.syntax unified
 2443              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2444 014e BFF34F8F 		dsb 0xF
 2445              	@ 0 "" 2
 2446              		.thumb
 2447              		.syntax unified
 2448              	.LBE469:
 2449              	.LBE468:
 925:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2450              		.loc 1 925 0
 2451 0152 FFF7FEFF 		bl	HAL_GetTick
 2452              	.LVL156:
 2453 0156 8046     		mov	r8, r0
 2454              	.LVL157:
 2455              	.L152:
 928:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 2456              		.loc 1 928 0
 2457 0158 2046     		mov	r0, r4
ARM GAS  /tmp/cc968NXr.s 			page 101


 2458 015a FFF7FEFF 		bl	HAL_NAND_Read_Status
 2459              	.LVL158:
 2460 015e 4028     		cmp	r0, #64
 2461 0160 0ED0     		beq	.L161
 930:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 2462              		.loc 1 930 0
 2463 0162 FFF7FEFF 		bl	HAL_GetTick
 2464              	.LVL159:
 2465 0166 A0EB0800 		sub	r0, r0, r8
 2466 016a B0F1807F 		cmp	r0, #16777216
 2467 016e F3D9     		bls	.L152
 933:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2468              		.loc 1 933 0
 2469 0170 0320     		movs	r0, #3
 2470 0172 84F82100 		strb	r0, [r4, #33]
 936:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2471              		.loc 1 936 0
 2472 0176 0023     		movs	r3, #0
 2473 0178 84F82030 		strb	r3, [r4, #32]
 938:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 2474              		.loc 1 938 0
 2475 017c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2476              	.LVL160:
 2477              	.L161:
 946:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2478              		.loc 1 946 0
 2479 0180 013F     		subs	r7, r7, #1
 2480              	.LVL161:
 949:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 2481              		.loc 1 949 0
 2482 0182 0136     		adds	r6, r6, #1
 2483              	.LVL162:
 2484 0184 63E7     		b	.L145
 2485              	.LVL163:
 2486              	.L154:
 953:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2487              		.loc 1 953 0
 2488 0186 0123     		movs	r3, #1
 2489 0188 84F82130 		strb	r3, [r4, #33]
 956:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 2490              		.loc 1 956 0
 2491 018c 0020     		movs	r0, #0
 2492 018e 84F82000 		strb	r0, [r4, #32]
 963:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 2493              		.loc 1 963 0
 2494 0192 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2495              	.LVL164:
 2496              	.L156:
 836:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 2497              		.loc 1 836 0
 2498 0196 0220     		movs	r0, #2
 2499              	.LVL165:
 2500 0198 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2501              	.LVL166:
 2502              	.L158:
 841:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2503              		.loc 1 841 0
ARM GAS  /tmp/cc968NXr.s 			page 102


 2504 019c 0220     		movs	r0, #2
 2505              	.LVL167:
 964:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2506              		.loc 1 964 0
 2507 019e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2508              	.LVL168:
 2509              	.L163:
 2510 01a2 00BF     		.align	2
 2511              	.L162:
 2512 01a4 00000180 		.word	-2147418112
 2513 01a8 00000280 		.word	-2147352576
 2514              		.cfi_endproc
 2515              	.LFE152:
 2517              		.section	.text.HAL_NAND_Write_Page_16b,"ax",%progbits
 2518              		.align	1
 2519              		.global	HAL_NAND_Write_Page_16b
 2520              		.syntax unified
 2521              		.thumb
 2522              		.thumb_func
 2523              		.fpu fpv5-d16
 2525              	HAL_NAND_Write_Page_16b:
 2526              	.LFB153:
 976:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 2527              		.loc 1 976 0
 2528              		.cfi_startproc
 2529              		@ args = 0, pretend = 0, frame = 0
 2530              		@ frame_needed = 0, uses_anonymous_args = 0
 2531              	.LVL169:
 2532 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2533              	.LCFI17:
 2534              		.cfi_def_cfa_offset 24
 2535              		.cfi_offset 4, -24
 2536              		.cfi_offset 5, -20
 2537              		.cfi_offset 6, -16
 2538              		.cfi_offset 7, -12
 2539              		.cfi_offset 8, -8
 2540              		.cfi_offset 14, -4
 2541 0004 1F46     		mov	r7, r3
 2542              	.LVL170:
 983:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 2543              		.loc 1 983 0
 2544 0006 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 2545              	.LVL171:
 2546 000a DBB2     		uxtb	r3, r3
 2547 000c 022B     		cmp	r3, #2
 2548 000e 00F0C280 		beq	.L177
 2549 0012 0446     		mov	r4, r0
 2550 0014 1546     		mov	r5, r2
 987:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 2551              		.loc 1 987 0
 2552 0016 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 2553 001a DBB2     		uxtb	r3, r3
 2554 001c 012B     		cmp	r3, #1
 2555 001e 02D0     		beq	.L181
1109:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 2556              		.loc 1 1109 0
 2557 0020 0120     		movs	r0, #1
ARM GAS  /tmp/cc968NXr.s 			page 103


 2558              	.LVL172:
 2559 0022 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2560              	.LVL173:
 2561              	.L181:
 990:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2562              		.loc 1 990 0
 2563 0026 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2564 002a 012B     		cmp	r3, #1
 2565 002c 00F0B680 		beq	.L179
 990:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2566              		.loc 1 990 0 is_stmt 0 discriminator 2
 2567 0030 0123     		movs	r3, #1
 2568 0032 80F82030 		strb	r3, [r0, #32]
 993:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2569              		.loc 1 993 0 is_stmt 1 discriminator 2
 2570 0036 0223     		movs	r3, #2
 2571 0038 80F82130 		strb	r3, [r0, #33]
 2572              	.LVL174:
 999:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2573              		.loc 1 999 0 discriminator 2
 2574 003c 0B88     		ldrh	r3, [r1]
 2575 003e 8A88     		ldrh	r2, [r1, #4]
 2576              	.LVL175:
 2577 0040 4E88     		ldrh	r6, [r1, #2]
 2578 0042 816B     		ldr	r1, [r0, #56]
 2579              	.LVL176:
 2580 0044 01FB0626 		mla	r6, r1, r6, r2
 2581 0048 C26A     		ldr	r2, [r0, #44]
 2582 004a 02FB0636 		mla	r6, r2, r6, r3
 2583              	.LVL177:
 2584              	.L166:
1002:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 2585              		.loc 1 1002 0
 2586 004e 002F     		cmp	r7, #0
 2587 0050 00F09980 		beq	.L175
1002:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 2588              		.loc 1 1002 0 is_stmt 0 discriminator 1
 2589 0054 E26A     		ldr	r2, [r4, #44]
 2590 0056 236B     		ldr	r3, [r4, #48]
 2591 0058 03FB02F3 		mul	r3, r3, r2
 2592 005c 9E42     		cmp	r6, r3
 2593 005e 80F09280 		bcs	.L175
1005:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 2594              		.loc 1 1005 0 is_stmt 1
 2595 0062 504B     		ldr	r3, .L183
 2596 0064 0022     		movs	r2, #0
 2597 0066 1A70     		strb	r2, [r3]
 2598              	.LBB470:
 2599              	.LBB471:
 2600              		.loc 2 879 0
 2601              		.syntax unified
 2602              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2603 0068 BFF34F8F 		dsb 0xF
 2604              	@ 0 "" 2
 2605              		.thumb
 2606              		.syntax unified
 2607              	.LBE471:
ARM GAS  /tmp/cc968NXr.s 			page 104


 2608              	.LBE470:
1007:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 2609              		.loc 1 1007 0
 2610 006c 8022     		movs	r2, #128
 2611 006e 1A70     		strb	r2, [r3]
 2612              	.LBB472:
 2613              	.LBB473:
 2614              		.loc 2 879 0
 2615              		.syntax unified
 2616              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2617 0070 BFF34F8F 		dsb 0xF
 2618              	@ 0 "" 2
 2619              		.thumb
 2620              		.syntax unified
 2621              	.LBE473:
 2622              	.LBE472:
1011:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 2623              		.loc 1 1011 0
 2624 0074 636A     		ldr	r3, [r4, #36]
 2625 0076 B3F5007F 		cmp	r3, #512
 2626 007a 2AD8     		bhi	.L167
1013:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 2627              		.loc 1 1013 0
 2628 007c E26A     		ldr	r2, [r4, #44]
 2629 007e 236B     		ldr	r3, [r4, #48]
 2630 0080 03FB02F3 		mul	r3, r3, r2
 2631 0084 B3F5803F 		cmp	r3, #65536
 2632 0088 0FD2     		bcs	.L168
1015:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2633              		.loc 1 1015 0
 2634 008a 474B     		ldr	r3, .L183+4
 2635 008c 0022     		movs	r2, #0
 2636 008e 1A70     		strb	r2, [r3]
 2637              	.LBB474:
 2638              	.LBB475:
 2639              		.loc 2 879 0
 2640              		.syntax unified
 2641              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2642 0090 BFF34F8F 		dsb 0xF
 2643              	@ 0 "" 2
 2644              		.thumb
 2645              		.syntax unified
 2646              	.LBE475:
 2647              	.LBE474:
1017:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2648              		.loc 1 1017 0
 2649 0094 F2B2     		uxtb	r2, r6
 2650 0096 1A70     		strb	r2, [r3]
 2651              	.LBB476:
 2652              	.LBB477:
 2653              		.loc 2 879 0
 2654              		.syntax unified
 2655              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2656 0098 BFF34F8F 		dsb 0xF
 2657              	@ 0 "" 2
 2658              		.thumb
 2659              		.syntax unified
ARM GAS  /tmp/cc968NXr.s 			page 105


 2660              	.LBE477:
 2661              	.LBE476:
1019:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2662              		.loc 1 1019 0
 2663 009c C6F30722 		ubfx	r2, r6, #8, #8
 2664 00a0 1A70     		strb	r2, [r3]
 2665              	.LBB478:
 2666              	.LBB479:
 2667              		.loc 2 879 0
 2668              		.syntax unified
 2669              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2670 00a2 BFF34F8F 		dsb 0xF
 2671              	@ 0 "" 2
 2672              		.thumb
 2673              		.syntax unified
 2674              	.L169:
 2675              	.LBE479:
 2676              	.LBE478:
 976:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 2677              		.loc 1 976 0 discriminator 1
 2678 00a6 0023     		movs	r3, #0
 2679 00a8 4BE0     		b	.L171
 2680              	.L168:
1024:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2681              		.loc 1 1024 0
 2682 00aa 3F4B     		ldr	r3, .L183+4
 2683 00ac 0022     		movs	r2, #0
 2684 00ae 1A70     		strb	r2, [r3]
 2685              	.LBB480:
 2686              	.LBB481:
 2687              		.loc 2 879 0
 2688              		.syntax unified
 2689              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2690 00b0 BFF34F8F 		dsb 0xF
 2691              	@ 0 "" 2
 2692              		.thumb
 2693              		.syntax unified
 2694              	.LBE481:
 2695              	.LBE480:
1026:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2696              		.loc 1 1026 0
 2697 00b4 F2B2     		uxtb	r2, r6
 2698 00b6 1A70     		strb	r2, [r3]
 2699              	.LBB482:
 2700              	.LBB483:
 2701              		.loc 2 879 0
 2702              		.syntax unified
 2703              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2704 00b8 BFF34F8F 		dsb 0xF
 2705              	@ 0 "" 2
 2706              		.thumb
 2707              		.syntax unified
 2708              	.LBE483:
 2709              	.LBE482:
1028:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2710              		.loc 1 1028 0
 2711 00bc C6F30722 		ubfx	r2, r6, #8, #8
ARM GAS  /tmp/cc968NXr.s 			page 106


 2712 00c0 1A70     		strb	r2, [r3]
 2713              	.LBB484:
 2714              	.LBB485:
 2715              		.loc 2 879 0
 2716              		.syntax unified
 2717              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2718 00c2 BFF34F8F 		dsb 0xF
 2719              	@ 0 "" 2
 2720              		.thumb
 2721              		.syntax unified
 2722              	.LBE485:
 2723              	.LBE484:
1030:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2724              		.loc 1 1030 0
 2725 00c6 C6F30742 		ubfx	r2, r6, #16, #8
 2726 00ca 1A70     		strb	r2, [r3]
 2727              	.LBB486:
 2728              	.LBB487:
 2729              		.loc 2 879 0
 2730              		.syntax unified
 2731              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2732 00cc BFF34F8F 		dsb 0xF
 2733              	@ 0 "" 2
 2734              		.thumb
 2735              		.syntax unified
 2736 00d0 E9E7     		b	.L169
 2737              	.L167:
 2738              	.LBE487:
 2739              	.LBE486:
1036:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 2740              		.loc 1 1036 0
 2741 00d2 E26A     		ldr	r2, [r4, #44]
 2742 00d4 236B     		ldr	r3, [r4, #48]
 2743 00d6 03FB02F3 		mul	r3, r3, r2
 2744 00da B3F5803F 		cmp	r3, #65536
 2745 00de 11D2     		bcs	.L170
1038:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2746              		.loc 1 1038 0
 2747 00e0 314B     		ldr	r3, .L183+4
 2748 00e2 0022     		movs	r2, #0
 2749 00e4 1A70     		strb	r2, [r3]
 2750              	.LBB488:
 2751              	.LBB489:
 2752              		.loc 2 879 0
 2753              		.syntax unified
 2754              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2755 00e6 BFF34F8F 		dsb 0xF
 2756              	@ 0 "" 2
 2757              		.thumb
 2758              		.syntax unified
 2759              	.LBE489:
 2760              	.LBE488:
1040:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2761              		.loc 1 1040 0
 2762 00ea 1A70     		strb	r2, [r3]
 2763              	.LBB490:
 2764              	.LBB491:
ARM GAS  /tmp/cc968NXr.s 			page 107


 2765              		.loc 2 879 0
 2766              		.syntax unified
 2767              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2768 00ec BFF34F8F 		dsb 0xF
 2769              	@ 0 "" 2
 2770              		.thumb
 2771              		.syntax unified
 2772              	.LBE491:
 2773              	.LBE490:
1042:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2774              		.loc 1 1042 0
 2775 00f0 F2B2     		uxtb	r2, r6
 2776 00f2 1A70     		strb	r2, [r3]
 2777              	.LBB492:
 2778              	.LBB493:
 2779              		.loc 2 879 0
 2780              		.syntax unified
 2781              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2782 00f4 BFF34F8F 		dsb 0xF
 2783              	@ 0 "" 2
 2784              		.thumb
 2785              		.syntax unified
 2786              	.LBE493:
 2787              	.LBE492:
1044:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2788              		.loc 1 1044 0
 2789 00f8 C6F30722 		ubfx	r2, r6, #8, #8
 2790 00fc 1A70     		strb	r2, [r3]
 2791              	.LBB494:
 2792              	.LBB495:
 2793              		.loc 2 879 0
 2794              		.syntax unified
 2795              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2796 00fe BFF34F8F 		dsb 0xF
 2797              	@ 0 "" 2
 2798              		.thumb
 2799              		.syntax unified
 2800 0102 D0E7     		b	.L169
 2801              	.L170:
 2802              	.LBE495:
 2803              	.LBE494:
1049:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2804              		.loc 1 1049 0
 2805 0104 284B     		ldr	r3, .L183+4
 2806 0106 0022     		movs	r2, #0
 2807 0108 1A70     		strb	r2, [r3]
 2808              	.LBB496:
 2809              	.LBB497:
 2810              		.loc 2 879 0
 2811              		.syntax unified
 2812              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2813 010a BFF34F8F 		dsb 0xF
 2814              	@ 0 "" 2
 2815              		.thumb
 2816              		.syntax unified
 2817              	.LBE497:
 2818              	.LBE496:
ARM GAS  /tmp/cc968NXr.s 			page 108


1051:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2819              		.loc 1 1051 0
 2820 010e 1A70     		strb	r2, [r3]
 2821              	.LBB498:
 2822              	.LBB499:
 2823              		.loc 2 879 0
 2824              		.syntax unified
 2825              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2826 0110 BFF34F8F 		dsb 0xF
 2827              	@ 0 "" 2
 2828              		.thumb
 2829              		.syntax unified
 2830              	.LBE499:
 2831              	.LBE498:
1053:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2832              		.loc 1 1053 0
 2833 0114 F2B2     		uxtb	r2, r6
 2834 0116 1A70     		strb	r2, [r3]
 2835              	.LBB500:
 2836              	.LBB501:
 2837              		.loc 2 879 0
 2838              		.syntax unified
 2839              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2840 0118 BFF34F8F 		dsb 0xF
 2841              	@ 0 "" 2
 2842              		.thumb
 2843              		.syntax unified
 2844              	.LBE501:
 2845              	.LBE500:
1055:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2846              		.loc 1 1055 0
 2847 011c C6F30722 		ubfx	r2, r6, #8, #8
 2848 0120 1A70     		strb	r2, [r3]
 2849              	.LBB502:
 2850              	.LBB503:
 2851              		.loc 2 879 0
 2852              		.syntax unified
 2853              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2854 0122 BFF34F8F 		dsb 0xF
 2855              	@ 0 "" 2
 2856              		.thumb
 2857              		.syntax unified
 2858              	.LBE503:
 2859              	.LBE502:
1057:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 2860              		.loc 1 1057 0
 2861 0126 C6F30742 		ubfx	r2, r6, #16, #8
 2862 012a 1A70     		strb	r2, [r3]
 2863              	.LBB504:
 2864              	.LBB505:
 2865              		.loc 2 879 0
 2866              		.syntax unified
 2867              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2868 012c BFF34F8F 		dsb 0xF
 2869              	@ 0 "" 2
 2870              		.thumb
 2871              		.syntax unified
ARM GAS  /tmp/cc968NXr.s 			page 109


 2872 0130 B9E7     		b	.L169
 2873              	.LVL178:
 2874              	.L172:
 2875              	.LBE505:
 2876              	.LBE504:
1065:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
 2877              		.loc 1 1065 0 discriminator 3
 2878 0132 35F8021B 		ldrh	r1, [r5], #2
 2879              	.LVL179:
 2880 0136 4FF00042 		mov	r2, #-2147483648
 2881 013a 1180     		strh	r1, [r2]	@ movhi
 2882              	.LVL180:
 2883              	.LBB506:
 2884              	.LBB507:
 2885              		.loc 2 879 0 discriminator 3
 2886              		.syntax unified
 2887              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2888 013c BFF34F8F 		dsb 0xF
 2889              	@ 0 "" 2
 2890              		.thumb
 2891              		.syntax unified
 2892              	.LBE507:
 2893              	.LBE506:
1063:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 2894              		.loc 1 1063 0 discriminator 3
 2895 0140 0133     		adds	r3, r3, #1
 2896              	.LVL181:
 2897              	.L171:
1063:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 2898              		.loc 1 1063 0 is_stmt 0 discriminator 1
 2899 0142 626A     		ldr	r2, [r4, #36]
 2900 0144 9342     		cmp	r3, r2
 2901 0146 F4D3     		bcc	.L172
1070:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 2902              		.loc 1 1070 0 is_stmt 1
 2903 0148 1022     		movs	r2, #16
 2904 014a 164B     		ldr	r3, .L183
 2905              	.LVL182:
 2906 014c 1A70     		strb	r2, [r3]
 2907              	.LBB508:
 2908              	.LBB509:
 2909              		.loc 2 879 0
 2910              		.syntax unified
 2911              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2912 014e BFF34F8F 		dsb 0xF
 2913              	@ 0 "" 2
 2914              		.thumb
 2915              		.syntax unified
 2916              	.LBE509:
 2917              	.LBE508:
1074:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2918              		.loc 1 1074 0
 2919 0152 FFF7FEFF 		bl	HAL_GetTick
 2920              	.LVL183:
 2921 0156 8046     		mov	r8, r0
 2922              	.LVL184:
 2923              	.L173:
ARM GAS  /tmp/cc968NXr.s 			page 110


1077:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 2924              		.loc 1 1077 0
 2925 0158 2046     		mov	r0, r4
 2926 015a FFF7FEFF 		bl	HAL_NAND_Read_Status
 2927              	.LVL185:
 2928 015e 4028     		cmp	r0, #64
 2929 0160 0ED0     		beq	.L182
1079:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 2930              		.loc 1 1079 0
 2931 0162 FFF7FEFF 		bl	HAL_GetTick
 2932              	.LVL186:
 2933 0166 A0EB0800 		sub	r0, r0, r8
 2934 016a B0F1807F 		cmp	r0, #16777216
 2935 016e F3D9     		bls	.L173
1082:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2936              		.loc 1 1082 0
 2937 0170 0320     		movs	r0, #3
 2938 0172 84F82100 		strb	r0, [r4, #33]
1085:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2939              		.loc 1 1085 0
 2940 0176 0023     		movs	r3, #0
 2941 0178 84F82030 		strb	r3, [r4, #32]
1087:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 2942              		.loc 1 1087 0
 2943 017c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2944              	.LVL187:
 2945              	.L182:
1095:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2946              		.loc 1 1095 0
 2947 0180 013F     		subs	r7, r7, #1
 2948              	.LVL188:
1098:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 2949              		.loc 1 1098 0
 2950 0182 0136     		adds	r6, r6, #1
 2951              	.LVL189:
 2952 0184 63E7     		b	.L166
 2953              	.LVL190:
 2954              	.L175:
1102:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2955              		.loc 1 1102 0
 2956 0186 0123     		movs	r3, #1
 2957 0188 84F82130 		strb	r3, [r4, #33]
1105:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 2958              		.loc 1 1105 0
 2959 018c 0020     		movs	r0, #0
 2960 018e 84F82000 		strb	r0, [r4, #32]
1112:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 2961              		.loc 1 1112 0
 2962 0192 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2963              	.LVL191:
 2964              	.L177:
 985:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 2965              		.loc 1 985 0
 2966 0196 0220     		movs	r0, #2
 2967              	.LVL192:
 2968 0198 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2969              	.LVL193:
ARM GAS  /tmp/cc968NXr.s 			page 111


 2970              	.L179:
 990:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2971              		.loc 1 990 0
 2972 019c 0220     		movs	r0, #2
 2973              	.LVL194:
1113:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 2974              		.loc 1 1113 0
 2975 019e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2976              	.LVL195:
 2977              	.L184:
 2978 01a2 00BF     		.align	2
 2979              	.L183:
 2980 01a4 00000180 		.word	-2147418112
 2981 01a8 00000280 		.word	-2147352576
 2982              		.cfi_endproc
 2983              	.LFE153:
 2985              		.section	.text.HAL_NAND_Read_SpareArea_8b,"ax",%progbits
 2986              		.align	1
 2987              		.global	HAL_NAND_Read_SpareArea_8b
 2988              		.syntax unified
 2989              		.thumb
 2990              		.thumb_func
 2991              		.fpu fpv5-d16
 2993              	HAL_NAND_Read_SpareArea_8b:
 2994              	.LFB154:
1125:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 2995              		.loc 1 1125 0
 2996              		.cfi_startproc
 2997              		@ args = 0, pretend = 0, frame = 0
 2998              		@ frame_needed = 0, uses_anonymous_args = 0
 2999              	.LVL196:
 3000 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3001              	.LCFI18:
 3002              		.cfi_def_cfa_offset 32
 3003              		.cfi_offset 3, -32
 3004              		.cfi_offset 4, -28
 3005              		.cfi_offset 5, -24
 3006              		.cfi_offset 6, -20
 3007              		.cfi_offset 7, -16
 3008              		.cfi_offset 8, -12
 3009              		.cfi_offset 9, -8
 3010              		.cfi_offset 14, -4
 3011 0004 1F46     		mov	r7, r3
 3012              	.LVL197:
1132:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 3013              		.loc 1 1132 0
 3014 0006 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 3015              	.LVL198:
 3016 000a DBB2     		uxtb	r3, r3
 3017 000c 022B     		cmp	r3, #2
 3018 000e 00F0D180 		beq	.L199
 3019 0012 0446     		mov	r4, r0
 3020 0014 1546     		mov	r5, r2
1136:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 3021              		.loc 1 1136 0
 3022 0016 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 3023 001a DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cc968NXr.s 			page 112


 3024 001c 012B     		cmp	r3, #1
 3025 001e 02D0     		beq	.L203
1269:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 3026              		.loc 1 1269 0
 3027 0020 0120     		movs	r0, #1
 3028              	.LVL199:
 3029 0022 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3030              	.LVL200:
 3031              	.L203:
1139:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3032              		.loc 1 1139 0
 3033 0026 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 3034 002a 012B     		cmp	r3, #1
 3035 002c 00F0C580 		beq	.L201
1139:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3036              		.loc 1 1139 0 is_stmt 0 discriminator 2
 3037 0030 0123     		movs	r3, #1
 3038 0032 80F82030 		strb	r3, [r0, #32]
1142:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3039              		.loc 1 1142 0 is_stmt 1 discriminator 2
 3040 0036 0223     		movs	r3, #2
 3041 0038 80F82130 		strb	r3, [r0, #33]
 3042              	.LVL201:
1148:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3043              		.loc 1 1148 0 discriminator 2
 3044 003c 0B88     		ldrh	r3, [r1]
 3045 003e 8A88     		ldrh	r2, [r1, #4]
 3046              	.LVL202:
 3047 0040 4E88     		ldrh	r6, [r1, #2]
 3048 0042 816B     		ldr	r1, [r0, #56]
 3049              	.LVL203:
 3050 0044 01FB0626 		mla	r6, r1, r6, r2
 3051 0048 C26A     		ldr	r2, [r0, #44]
 3052 004a 02FB0636 		mla	r6, r2, r6, r3
 3053              	.LVL204:
1151:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3054              		.loc 1 1151 0 discriminator 2
 3055 004e D0F82480 		ldr	r8, [r0, #36]
 3056              	.LVL205:
1154:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 3057              		.loc 1 1154 0 discriminator 2
 3058 0052 76E0     		b	.L187
 3059              	.LVL206:
 3060              	.L189:
1174:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3061              		.loc 1 1174 0
 3062 0054 5A4B     		ldr	r3, .L206
 3063 0056 0022     		movs	r2, #0
 3064 0058 1A70     		strb	r2, [r3]
 3065              	.LBB510:
 3066              	.LBB511:
 3067              		.loc 2 879 0
 3068              		.syntax unified
 3069              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3070 005a BFF34F8F 		dsb 0xF
 3071              	@ 0 "" 2
 3072              		.thumb
ARM GAS  /tmp/cc968NXr.s 			page 113


 3073              		.syntax unified
 3074              	.LBE511:
 3075              	.LBE510:
1176:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3076              		.loc 1 1176 0
 3077 005e F2B2     		uxtb	r2, r6
 3078 0060 1A70     		strb	r2, [r3]
 3079              	.LBB512:
 3080              	.LBB513:
 3081              		.loc 2 879 0
 3082              		.syntax unified
 3083              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3084 0062 BFF34F8F 		dsb 0xF
 3085              	@ 0 "" 2
 3086              		.thumb
 3087              		.syntax unified
 3088              	.LBE513:
 3089              	.LBE512:
1178:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3090              		.loc 1 1178 0
 3091 0066 C6F30722 		ubfx	r2, r6, #8, #8
 3092 006a 1A70     		strb	r2, [r3]
 3093              	.LBB514:
 3094              	.LBB515:
 3095              		.loc 2 879 0
 3096              		.syntax unified
 3097              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3098 006c BFF34F8F 		dsb 0xF
 3099              	@ 0 "" 2
 3100              		.thumb
 3101              		.syntax unified
 3102              	.LBE515:
 3103              	.LBE514:
1180:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3104              		.loc 1 1180 0
 3105 0070 C6F30742 		ubfx	r2, r6, #16, #8
 3106 0074 1A70     		strb	r2, [r3]
 3107              	.LBB516:
 3108              	.LBB517:
 3109              		.loc 2 879 0
 3110              		.syntax unified
 3111              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3112 0076 BFF34F8F 		dsb 0xF
 3113              	@ 0 "" 2
 3114              		.thumb
 3115              		.syntax unified
 3116 007a 88E0     		b	.L190
 3117              	.L188:
 3118              	.LBE517:
 3119              	.LBE516:
1187:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 3120              		.loc 1 1187 0
 3121 007c 0022     		movs	r2, #0
 3122 007e 514B     		ldr	r3, .L206+4
 3123 0080 1A70     		strb	r2, [r3]
 3124              	.LBB518:
 3125              	.LBB519:
ARM GAS  /tmp/cc968NXr.s 			page 114


 3126              		.loc 2 879 0
 3127              		.syntax unified
 3128              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3129 0082 BFF34F8F 		dsb 0xF
 3130              	@ 0 "" 2
 3131              		.thumb
 3132              		.syntax unified
 3133              	.LBE519:
 3134              	.LBE518:
1190:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 3135              		.loc 1 1190 0
 3136 0086 E26A     		ldr	r2, [r4, #44]
 3137 0088 236B     		ldr	r3, [r4, #48]
 3138 008a 03FB02F3 		mul	r3, r3, r2
 3139 008e B3F5803F 		cmp	r3, #65536
 3140 0092 14D2     		bcs	.L191
1192:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3141              		.loc 1 1192 0
 3142 0094 5FFA88F2 		uxtb	r2, r8
 3143 0098 494B     		ldr	r3, .L206
 3144 009a 1A70     		strb	r2, [r3]
 3145              	.LBB520:
 3146              	.LBB521:
 3147              		.loc 2 879 0
 3148              		.syntax unified
 3149              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3150 009c BFF34F8F 		dsb 0xF
 3151              	@ 0 "" 2
 3152              		.thumb
 3153              		.syntax unified
 3154              	.LBE521:
 3155              	.LBE520:
1194:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3156              		.loc 1 1194 0
 3157 00a0 C8F30722 		ubfx	r2, r8, #8, #8
 3158 00a4 1A70     		strb	r2, [r3]
 3159              	.LBB522:
 3160              	.LBB523:
 3161              		.loc 2 879 0
 3162              		.syntax unified
 3163              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3164 00a6 BFF34F8F 		dsb 0xF
 3165              	@ 0 "" 2
 3166              		.thumb
 3167              		.syntax unified
 3168              	.LBE523:
 3169              	.LBE522:
1196:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3170              		.loc 1 1196 0
 3171 00aa F2B2     		uxtb	r2, r6
 3172 00ac 1A70     		strb	r2, [r3]
 3173              	.LBB524:
 3174              	.LBB525:
 3175              		.loc 2 879 0
 3176              		.syntax unified
 3177              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3178 00ae BFF34F8F 		dsb 0xF
ARM GAS  /tmp/cc968NXr.s 			page 115


 3179              	@ 0 "" 2
 3180              		.thumb
 3181              		.syntax unified
 3182              	.LBE525:
 3183              	.LBE524:
1198:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3184              		.loc 1 1198 0
 3185 00b2 C6F30722 		ubfx	r2, r6, #8, #8
 3186 00b6 1A70     		strb	r2, [r3]
 3187              	.LBB526:
 3188              	.LBB527:
 3189              		.loc 2 879 0
 3190              		.syntax unified
 3191              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3192 00b8 BFF34F8F 		dsb 0xF
 3193              	@ 0 "" 2
 3194              		.thumb
 3195              		.syntax unified
 3196 00bc 67E0     		b	.L190
 3197              	.L191:
 3198              	.LBE527:
 3199              	.LBE526:
1203:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3200              		.loc 1 1203 0
 3201 00be 5FFA88F2 		uxtb	r2, r8
 3202 00c2 3F4B     		ldr	r3, .L206
 3203 00c4 1A70     		strb	r2, [r3]
 3204              	.LBB528:
 3205              	.LBB529:
 3206              		.loc 2 879 0
 3207              		.syntax unified
 3208              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3209 00c6 BFF34F8F 		dsb 0xF
 3210              	@ 0 "" 2
 3211              		.thumb
 3212              		.syntax unified
 3213              	.LBE529:
 3214              	.LBE528:
1205:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3215              		.loc 1 1205 0
 3216 00ca C8F30722 		ubfx	r2, r8, #8, #8
 3217 00ce 1A70     		strb	r2, [r3]
 3218              	.LBB530:
 3219              	.LBB531:
 3220              		.loc 2 879 0
 3221              		.syntax unified
 3222              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3223 00d0 BFF34F8F 		dsb 0xF
 3224              	@ 0 "" 2
 3225              		.thumb
 3226              		.syntax unified
 3227              	.LBE531:
 3228              	.LBE530:
1207:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3229              		.loc 1 1207 0
 3230 00d4 F2B2     		uxtb	r2, r6
 3231 00d6 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc968NXr.s 			page 116


 3232              	.LBB532:
 3233              	.LBB533:
 3234              		.loc 2 879 0
 3235              		.syntax unified
 3236              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3237 00d8 BFF34F8F 		dsb 0xF
 3238              	@ 0 "" 2
 3239              		.thumb
 3240              		.syntax unified
 3241              	.LBE533:
 3242              	.LBE532:
1209:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3243              		.loc 1 1209 0
 3244 00dc C6F30722 		ubfx	r2, r6, #8, #8
 3245 00e0 1A70     		strb	r2, [r3]
 3246              	.LBB534:
 3247              	.LBB535:
 3248              		.loc 2 879 0
 3249              		.syntax unified
 3250              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3251 00e2 BFF34F8F 		dsb 0xF
 3252              	@ 0 "" 2
 3253              		.thumb
 3254              		.syntax unified
 3255              	.LBE535:
 3256              	.LBE534:
1211:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3257              		.loc 1 1211 0
 3258 00e6 C6F30742 		ubfx	r2, r6, #16, #8
 3259 00ea 1A70     		strb	r2, [r3]
 3260              	.LBB536:
 3261              	.LBB537:
 3262              		.loc 2 879 0
 3263              		.syntax unified
 3264              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3265 00ec BFF34F8F 		dsb 0xF
 3266              	@ 0 "" 2
 3267              		.thumb
 3268              		.syntax unified
 3269 00f0 4DE0     		b	.L190
 3270              	.L205:
 3271              	.LBE537:
 3272              	.LBE536:
1222:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3273              		.loc 1 1222 0
 3274 00f2 FFF7FEFF 		bl	HAL_GetTick
 3275              	.LVL207:
 3276 00f6 8146     		mov	r9, r0
 3277              	.LVL208:
 3278              	.L193:
1225:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 3279              		.loc 1 1225 0
 3280 00f8 2046     		mov	r0, r4
 3281 00fa FFF7FEFF 		bl	HAL_NAND_Read_Status
 3282              	.LVL209:
 3283 00fe 4028     		cmp	r0, #64
 3284 0100 0ED0     		beq	.L204
ARM GAS  /tmp/cc968NXr.s 			page 117


1227:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           {
 3285              		.loc 1 1227 0
 3286 0102 FFF7FEFF 		bl	HAL_GetTick
 3287              	.LVL210:
 3288 0106 A0EB0900 		sub	r0, r0, r9
 3289 010a B0F1807F 		cmp	r0, #16777216
 3290 010e F3D9     		bls	.L193
1230:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3291              		.loc 1 1230 0
 3292 0110 0320     		movs	r0, #3
 3293 0112 84F82100 		strb	r0, [r4, #33]
1233:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3294              		.loc 1 1233 0
 3295 0116 0023     		movs	r3, #0
 3296 0118 84F82030 		strb	r3, [r4, #32]
1235:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           }
 3297              		.loc 1 1235 0
 3298 011c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3299              	.LVL211:
 3300              	.L204:
1240:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 3301              		.loc 1 1240 0
 3302 0120 0022     		movs	r2, #0
 3303 0122 284B     		ldr	r3, .L206+4
 3304 0124 1A70     		strb	r2, [r3]
 3305              	.LBB538:
 3306              	.LBB539:
 3307              		.loc 2 879 0
 3308              		.syntax unified
 3309              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3310 0126 BFF34F8F 		dsb 0xF
 3311              	@ 0 "" 2
 3312              		.thumb
 3313              		.syntax unified
 3314 012a 39E0     		b	.L192
 3315              	.LVL212:
 3316              	.L196:
 3317              	.LBE539:
 3318              	.LBE538:
1247:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
 3319              		.loc 1 1247 0 discriminator 3
 3320 012c 4FF00042 		mov	r2, #-2147483648
 3321 0130 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3322 0132 05F8012B 		strb	r2, [r5], #1
 3323              	.LVL213:
1245:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 3324              		.loc 1 1245 0 discriminator 3
 3325 0136 0133     		adds	r3, r3, #1
 3326              	.LVL214:
 3327              	.L195:
1245:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 3328              		.loc 1 1245 0 is_stmt 0 discriminator 1
 3329 0138 A26A     		ldr	r2, [r4, #40]
 3330 013a 9342     		cmp	r3, r2
 3331 013c F6D3     		bcc	.L196
1255:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3332              		.loc 1 1255 0 is_stmt 1
ARM GAS  /tmp/cc968NXr.s 			page 118


 3333 013e 013F     		subs	r7, r7, #1
 3334              	.LVL215:
1258:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 3335              		.loc 1 1258 0
 3336 0140 0136     		adds	r6, r6, #1
 3337              	.LVL216:
 3338              	.L187:
1154:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 3339              		.loc 1 1154 0
 3340 0142 7FB3     		cbz	r7, .L197
1154:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 3341              		.loc 1 1154 0 is_stmt 0 discriminator 1
 3342 0144 E26A     		ldr	r2, [r4, #44]
 3343 0146 236B     		ldr	r3, [r4, #48]
 3344 0148 03FB02F3 		mul	r3, r3, r2
 3345 014c 9E42     		cmp	r6, r3
 3346 014e 29D2     		bcs	.L197
1157:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 3347              		.loc 1 1157 0 is_stmt 1
 3348 0150 636A     		ldr	r3, [r4, #36]
 3349 0152 B3F5007F 		cmp	r3, #512
 3350 0156 91D8     		bhi	.L188
1160:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 3351              		.loc 1 1160 0
 3352 0158 5022     		movs	r2, #80
 3353 015a 1A4B     		ldr	r3, .L206+4
 3354 015c 1A70     		strb	r2, [r3]
 3355              	.LBB540:
 3356              	.LBB541:
 3357              		.loc 2 879 0
 3358              		.syntax unified
 3359              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3360 015e BFF34F8F 		dsb 0xF
 3361              	@ 0 "" 2
 3362              		.thumb
 3363              		.syntax unified
 3364              	.LBE541:
 3365              	.LBE540:
1163:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 3366              		.loc 1 1163 0
 3367 0162 E26A     		ldr	r2, [r4, #44]
 3368 0164 236B     		ldr	r3, [r4, #48]
 3369 0166 03FB02F3 		mul	r3, r3, r2
 3370 016a B3F5803F 		cmp	r3, #65536
 3371 016e BFF471AF 		bcs	.L189
1165:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3372              		.loc 1 1165 0
 3373 0172 134B     		ldr	r3, .L206
 3374 0174 0022     		movs	r2, #0
 3375 0176 1A70     		strb	r2, [r3]
 3376              	.LBB542:
 3377              	.LBB543:
 3378              		.loc 2 879 0
 3379              		.syntax unified
 3380              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3381 0178 BFF34F8F 		dsb 0xF
 3382              	@ 0 "" 2
ARM GAS  /tmp/cc968NXr.s 			page 119


 3383              		.thumb
 3384              		.syntax unified
 3385              	.LBE543:
 3386              	.LBE542:
1167:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3387              		.loc 1 1167 0
 3388 017c F2B2     		uxtb	r2, r6
 3389 017e 1A70     		strb	r2, [r3]
 3390              	.LBB544:
 3391              	.LBB545:
 3392              		.loc 2 879 0
 3393              		.syntax unified
 3394              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3395 0180 BFF34F8F 		dsb 0xF
 3396              	@ 0 "" 2
 3397              		.thumb
 3398              		.syntax unified
 3399              	.LBE545:
 3400              	.LBE544:
1169:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3401              		.loc 1 1169 0
 3402 0184 C6F30722 		ubfx	r2, r6, #8, #8
 3403 0188 1A70     		strb	r2, [r3]
 3404              	.LBB546:
 3405              	.LBB547:
 3406              		.loc 2 879 0
 3407              		.syntax unified
 3408              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3409 018a BFF34F8F 		dsb 0xF
 3410              	@ 0 "" 2
 3411              		.thumb
 3412              		.syntax unified
 3413              	.L190:
 3414              	.LBE547:
 3415              	.LBE546:
1216:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 3416              		.loc 1 1216 0
 3417 018e 3022     		movs	r2, #48
 3418 0190 0C4B     		ldr	r3, .L206+4
 3419 0192 1A70     		strb	r2, [r3]
 3420              	.LBB548:
 3421              	.LBB549:
 3422              		.loc 2 879 0
 3423              		.syntax unified
 3424              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3425 0194 BFF34F8F 		dsb 0xF
 3426              	@ 0 "" 2
 3427              		.thumb
 3428              		.syntax unified
 3429              	.LBE549:
 3430              	.LBE548:
1219:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 3431              		.loc 1 1219 0
 3432 0198 94F83C30 		ldrb	r3, [r4, #60]	@ zero_extendqisi2
 3433 019c 012B     		cmp	r3, #1
 3434 019e A8D0     		beq	.L205
 3435              	.L192:
ARM GAS  /tmp/cc968NXr.s 			page 120


1125:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 3436              		.loc 1 1125 0 discriminator 1
 3437 01a0 0023     		movs	r3, #0
 3438 01a2 C9E7     		b	.L195
 3439              	.L197:
1262:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3440              		.loc 1 1262 0
 3441 01a4 0123     		movs	r3, #1
 3442 01a6 84F82130 		strb	r3, [r4, #33]
1265:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 3443              		.loc 1 1265 0
 3444 01aa 0020     		movs	r0, #0
 3445 01ac 84F82000 		strb	r0, [r4, #32]
1272:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 3446              		.loc 1 1272 0
 3447 01b0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3448              	.LVL217:
 3449              	.L199:
1134:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 3450              		.loc 1 1134 0
 3451 01b4 0220     		movs	r0, #2
 3452              	.LVL218:
 3453 01b6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3454              	.LVL219:
 3455              	.L201:
1139:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3456              		.loc 1 1139 0
 3457 01ba 0220     		movs	r0, #2
 3458              	.LVL220:
1273:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3459              		.loc 1 1273 0
 3460 01bc BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3461              	.LVL221:
 3462              	.L207:
 3463              		.align	2
 3464              	.L206:
 3465 01c0 00000280 		.word	-2147352576
 3466 01c4 00000180 		.word	-2147418112
 3467              		.cfi_endproc
 3468              	.LFE154:
 3470              		.section	.text.HAL_NAND_Read_SpareArea_16b,"ax",%progbits
 3471              		.align	1
 3472              		.global	HAL_NAND_Read_SpareArea_16b
 3473              		.syntax unified
 3474              		.thumb
 3475              		.thumb_func
 3476              		.fpu fpv5-d16
 3478              	HAL_NAND_Read_SpareArea_16b:
 3479              	.LFB155:
1285:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 3480              		.loc 1 1285 0
 3481              		.cfi_startproc
 3482              		@ args = 0, pretend = 0, frame = 0
 3483              		@ frame_needed = 0, uses_anonymous_args = 0
 3484              	.LVL222:
 3485 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3486              	.LCFI19:
ARM GAS  /tmp/cc968NXr.s 			page 121


 3487              		.cfi_def_cfa_offset 32
 3488              		.cfi_offset 3, -32
 3489              		.cfi_offset 4, -28
 3490              		.cfi_offset 5, -24
 3491              		.cfi_offset 6, -20
 3492              		.cfi_offset 7, -16
 3493              		.cfi_offset 8, -12
 3494              		.cfi_offset 9, -8
 3495              		.cfi_offset 14, -4
 3496 0004 1F46     		mov	r7, r3
 3497              	.LVL223:
1292:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 3498              		.loc 1 1292 0
 3499 0006 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 3500              	.LVL224:
 3501 000a DBB2     		uxtb	r3, r3
 3502 000c 022B     		cmp	r3, #2
 3503 000e 00F0D280 		beq	.L222
 3504 0012 0446     		mov	r4, r0
 3505 0014 1546     		mov	r5, r2
1296:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 3506              		.loc 1 1296 0
 3507 0016 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 3508 001a DBB2     		uxtb	r3, r3
 3509 001c 012B     		cmp	r3, #1
 3510 001e 02D0     		beq	.L226
1429:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 3511              		.loc 1 1429 0
 3512 0020 0120     		movs	r0, #1
 3513              	.LVL225:
 3514 0022 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3515              	.LVL226:
 3516              	.L226:
1299:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3517              		.loc 1 1299 0
 3518 0026 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 3519 002a 012B     		cmp	r3, #1
 3520 002c 00F0C680 		beq	.L224
1299:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3521              		.loc 1 1299 0 is_stmt 0 discriminator 2
 3522 0030 0123     		movs	r3, #1
 3523 0032 80F82030 		strb	r3, [r0, #32]
1302:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3524              		.loc 1 1302 0 is_stmt 1 discriminator 2
 3525 0036 0223     		movs	r3, #2
 3526 0038 80F82130 		strb	r3, [r0, #33]
 3527              	.LVL227:
1308:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3528              		.loc 1 1308 0 discriminator 2
 3529 003c 0B88     		ldrh	r3, [r1]
 3530 003e 8A88     		ldrh	r2, [r1, #4]
 3531              	.LVL228:
 3532 0040 4E88     		ldrh	r6, [r1, #2]
 3533 0042 816B     		ldr	r1, [r0, #56]
 3534              	.LVL229:
 3535 0044 01FB0626 		mla	r6, r1, r6, r2
 3536 0048 C26A     		ldr	r2, [r0, #44]
ARM GAS  /tmp/cc968NXr.s 			page 122


 3537 004a 02FB0636 		mla	r6, r2, r6, r3
 3538              	.LVL230:
1311:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3539              		.loc 1 1311 0 discriminator 2
 3540 004e 436A     		ldr	r3, [r0, #36]
 3541 0050 4FEA4308 		lsl	r8, r3, #1
 3542              	.LVL231:
1314:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 3543              		.loc 1 1314 0 discriminator 2
 3544 0054 76E0     		b	.L210
 3545              	.LVL232:
 3546              	.L212:
1334:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3547              		.loc 1 1334 0
 3548 0056 5B4B     		ldr	r3, .L229
 3549 0058 0022     		movs	r2, #0
 3550 005a 1A70     		strb	r2, [r3]
 3551              	.LBB550:
 3552              	.LBB551:
 3553              		.loc 2 879 0
 3554              		.syntax unified
 3555              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3556 005c BFF34F8F 		dsb 0xF
 3557              	@ 0 "" 2
 3558              		.thumb
 3559              		.syntax unified
 3560              	.LBE551:
 3561              	.LBE550:
1336:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3562              		.loc 1 1336 0
 3563 0060 F2B2     		uxtb	r2, r6
 3564 0062 1A70     		strb	r2, [r3]
 3565              	.LBB552:
 3566              	.LBB553:
 3567              		.loc 2 879 0
 3568              		.syntax unified
 3569              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3570 0064 BFF34F8F 		dsb 0xF
 3571              	@ 0 "" 2
 3572              		.thumb
 3573              		.syntax unified
 3574              	.LBE553:
 3575              	.LBE552:
1338:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3576              		.loc 1 1338 0
 3577 0068 C6F30722 		ubfx	r2, r6, #8, #8
 3578 006c 1A70     		strb	r2, [r3]
 3579              	.LBB554:
 3580              	.LBB555:
 3581              		.loc 2 879 0
 3582              		.syntax unified
 3583              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3584 006e BFF34F8F 		dsb 0xF
 3585              	@ 0 "" 2
 3586              		.thumb
 3587              		.syntax unified
 3588              	.LBE555:
ARM GAS  /tmp/cc968NXr.s 			page 123


 3589              	.LBE554:
1340:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3590              		.loc 1 1340 0
 3591 0072 C6F30742 		ubfx	r2, r6, #16, #8
 3592 0076 1A70     		strb	r2, [r3]
 3593              	.LBB556:
 3594              	.LBB557:
 3595              		.loc 2 879 0
 3596              		.syntax unified
 3597              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3598 0078 BFF34F8F 		dsb 0xF
 3599              	@ 0 "" 2
 3600              		.thumb
 3601              		.syntax unified
 3602 007c 88E0     		b	.L213
 3603              	.L211:
 3604              	.LBE557:
 3605              	.LBE556:
1347:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 3606              		.loc 1 1347 0
 3607 007e 0022     		movs	r2, #0
 3608 0080 514B     		ldr	r3, .L229+4
 3609 0082 1A70     		strb	r2, [r3]
 3610              	.LBB558:
 3611              	.LBB559:
 3612              		.loc 2 879 0
 3613              		.syntax unified
 3614              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3615 0084 BFF34F8F 		dsb 0xF
 3616              	@ 0 "" 2
 3617              		.thumb
 3618              		.syntax unified
 3619              	.LBE559:
 3620              	.LBE558:
1350:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 3621              		.loc 1 1350 0
 3622 0088 E26A     		ldr	r2, [r4, #44]
 3623 008a 236B     		ldr	r3, [r4, #48]
 3624 008c 03FB02F3 		mul	r3, r3, r2
 3625 0090 B3F5803F 		cmp	r3, #65536
 3626 0094 14D2     		bcs	.L214
1352:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3627              		.loc 1 1352 0
 3628 0096 5FFA88F2 		uxtb	r2, r8
 3629 009a 4A4B     		ldr	r3, .L229
 3630 009c 1A70     		strb	r2, [r3]
 3631              	.LBB560:
 3632              	.LBB561:
 3633              		.loc 2 879 0
 3634              		.syntax unified
 3635              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3636 009e BFF34F8F 		dsb 0xF
 3637              	@ 0 "" 2
 3638              		.thumb
 3639              		.syntax unified
 3640              	.LBE561:
 3641              	.LBE560:
ARM GAS  /tmp/cc968NXr.s 			page 124


1354:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3642              		.loc 1 1354 0
 3643 00a2 C8F30722 		ubfx	r2, r8, #8, #8
 3644 00a6 1A70     		strb	r2, [r3]
 3645              	.LBB562:
 3646              	.LBB563:
 3647              		.loc 2 879 0
 3648              		.syntax unified
 3649              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3650 00a8 BFF34F8F 		dsb 0xF
 3651              	@ 0 "" 2
 3652              		.thumb
 3653              		.syntax unified
 3654              	.LBE563:
 3655              	.LBE562:
1356:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3656              		.loc 1 1356 0
 3657 00ac F2B2     		uxtb	r2, r6
 3658 00ae 1A70     		strb	r2, [r3]
 3659              	.LBB564:
 3660              	.LBB565:
 3661              		.loc 2 879 0
 3662              		.syntax unified
 3663              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3664 00b0 BFF34F8F 		dsb 0xF
 3665              	@ 0 "" 2
 3666              		.thumb
 3667              		.syntax unified
 3668              	.LBE565:
 3669              	.LBE564:
1358:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3670              		.loc 1 1358 0
 3671 00b4 C6F30722 		ubfx	r2, r6, #8, #8
 3672 00b8 1A70     		strb	r2, [r3]
 3673              	.LBB566:
 3674              	.LBB567:
 3675              		.loc 2 879 0
 3676              		.syntax unified
 3677              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3678 00ba BFF34F8F 		dsb 0xF
 3679              	@ 0 "" 2
 3680              		.thumb
 3681              		.syntax unified
 3682 00be 67E0     		b	.L213
 3683              	.L214:
 3684              	.LBE567:
 3685              	.LBE566:
1363:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3686              		.loc 1 1363 0
 3687 00c0 5FFA88F2 		uxtb	r2, r8
 3688 00c4 3F4B     		ldr	r3, .L229
 3689 00c6 1A70     		strb	r2, [r3]
 3690              	.LBB568:
 3691              	.LBB569:
 3692              		.loc 2 879 0
 3693              		.syntax unified
 3694              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc968NXr.s 			page 125


 3695 00c8 BFF34F8F 		dsb 0xF
 3696              	@ 0 "" 2
 3697              		.thumb
 3698              		.syntax unified
 3699              	.LBE569:
 3700              	.LBE568:
1365:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3701              		.loc 1 1365 0
 3702 00cc C8F30722 		ubfx	r2, r8, #8, #8
 3703 00d0 1A70     		strb	r2, [r3]
 3704              	.LBB570:
 3705              	.LBB571:
 3706              		.loc 2 879 0
 3707              		.syntax unified
 3708              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3709 00d2 BFF34F8F 		dsb 0xF
 3710              	@ 0 "" 2
 3711              		.thumb
 3712              		.syntax unified
 3713              	.LBE571:
 3714              	.LBE570:
1367:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3715              		.loc 1 1367 0
 3716 00d6 F2B2     		uxtb	r2, r6
 3717 00d8 1A70     		strb	r2, [r3]
 3718              	.LBB572:
 3719              	.LBB573:
 3720              		.loc 2 879 0
 3721              		.syntax unified
 3722              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3723 00da BFF34F8F 		dsb 0xF
 3724              	@ 0 "" 2
 3725              		.thumb
 3726              		.syntax unified
 3727              	.LBE573:
 3728              	.LBE572:
1369:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3729              		.loc 1 1369 0
 3730 00de C6F30722 		ubfx	r2, r6, #8, #8
 3731 00e2 1A70     		strb	r2, [r3]
 3732              	.LBB574:
 3733              	.LBB575:
 3734              		.loc 2 879 0
 3735              		.syntax unified
 3736              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3737 00e4 BFF34F8F 		dsb 0xF
 3738              	@ 0 "" 2
 3739              		.thumb
 3740              		.syntax unified
 3741              	.LBE575:
 3742              	.LBE574:
1371:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3743              		.loc 1 1371 0
 3744 00e8 C6F30742 		ubfx	r2, r6, #16, #8
 3745 00ec 1A70     		strb	r2, [r3]
 3746              	.LBB576:
 3747              	.LBB577:
ARM GAS  /tmp/cc968NXr.s 			page 126


 3748              		.loc 2 879 0
 3749              		.syntax unified
 3750              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3751 00ee BFF34F8F 		dsb 0xF
 3752              	@ 0 "" 2
 3753              		.thumb
 3754              		.syntax unified
 3755 00f2 4DE0     		b	.L213
 3756              	.L228:
 3757              	.LBE577:
 3758              	.LBE576:
1382:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3759              		.loc 1 1382 0
 3760 00f4 FFF7FEFF 		bl	HAL_GetTick
 3761              	.LVL233:
 3762 00f8 8146     		mov	r9, r0
 3763              	.LVL234:
 3764              	.L216:
1385:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 3765              		.loc 1 1385 0
 3766 00fa 2046     		mov	r0, r4
 3767 00fc FFF7FEFF 		bl	HAL_NAND_Read_Status
 3768              	.LVL235:
 3769 0100 4028     		cmp	r0, #64
 3770 0102 0ED0     		beq	.L227
1387:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           {
 3771              		.loc 1 1387 0
 3772 0104 FFF7FEFF 		bl	HAL_GetTick
 3773              	.LVL236:
 3774 0108 A0EB0900 		sub	r0, r0, r9
 3775 010c B0F1807F 		cmp	r0, #16777216
 3776 0110 F3D9     		bls	.L216
1390:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3777              		.loc 1 1390 0
 3778 0112 0320     		movs	r0, #3
 3779 0114 84F82100 		strb	r0, [r4, #33]
1393:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3780              		.loc 1 1393 0
 3781 0118 0023     		movs	r3, #0
 3782 011a 84F82030 		strb	r3, [r4, #32]
1395:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           }
 3783              		.loc 1 1395 0
 3784 011e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3785              	.LVL237:
 3786              	.L227:
1400:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 3787              		.loc 1 1400 0
 3788 0122 0022     		movs	r2, #0
 3789 0124 284B     		ldr	r3, .L229+4
 3790 0126 1A70     		strb	r2, [r3]
 3791              	.LBB578:
 3792              	.LBB579:
 3793              		.loc 2 879 0
 3794              		.syntax unified
 3795              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3796 0128 BFF34F8F 		dsb 0xF
 3797              	@ 0 "" 2
ARM GAS  /tmp/cc968NXr.s 			page 127


 3798              		.thumb
 3799              		.syntax unified
 3800 012c 39E0     		b	.L215
 3801              	.LVL238:
 3802              	.L219:
 3803              	.LBE579:
 3804              	.LBE578:
1407:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
 3805              		.loc 1 1407 0 discriminator 3
 3806 012e 4FF00042 		mov	r2, #-2147483648
 3807 0132 1288     		ldrh	r2, [r2]
 3808 0134 25F8022B 		strh	r2, [r5], #2	@ movhi
 3809              	.LVL239:
1405:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 3810              		.loc 1 1405 0 discriminator 3
 3811 0138 0133     		adds	r3, r3, #1
 3812              	.LVL240:
 3813              	.L218:
1405:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 3814              		.loc 1 1405 0 is_stmt 0 discriminator 1
 3815 013a A26A     		ldr	r2, [r4, #40]
 3816 013c 9342     		cmp	r3, r2
 3817 013e F6D3     		bcc	.L219
1415:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3818              		.loc 1 1415 0 is_stmt 1
 3819 0140 013F     		subs	r7, r7, #1
 3820              	.LVL241:
1418:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 3821              		.loc 1 1418 0
 3822 0142 0136     		adds	r6, r6, #1
 3823              	.LVL242:
 3824              	.L210:
1314:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 3825              		.loc 1 1314 0
 3826 0144 7FB3     		cbz	r7, .L220
1314:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 3827              		.loc 1 1314 0 is_stmt 0 discriminator 1
 3828 0146 E26A     		ldr	r2, [r4, #44]
 3829 0148 236B     		ldr	r3, [r4, #48]
 3830 014a 03FB02F3 		mul	r3, r3, r2
 3831 014e 9E42     		cmp	r6, r3
 3832 0150 29D2     		bcs	.L220
1317:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 3833              		.loc 1 1317 0 is_stmt 1
 3834 0152 636A     		ldr	r3, [r4, #36]
 3835 0154 B3F5007F 		cmp	r3, #512
 3836 0158 91D8     		bhi	.L211
1320:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 3837              		.loc 1 1320 0
 3838 015a 5022     		movs	r2, #80
 3839 015c 1A4B     		ldr	r3, .L229+4
 3840 015e 1A70     		strb	r2, [r3]
 3841              	.LBB580:
 3842              	.LBB581:
 3843              		.loc 2 879 0
 3844              		.syntax unified
 3845              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc968NXr.s 			page 128


 3846 0160 BFF34F8F 		dsb 0xF
 3847              	@ 0 "" 2
 3848              		.thumb
 3849              		.syntax unified
 3850              	.LBE581:
 3851              	.LBE580:
1323:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 3852              		.loc 1 1323 0
 3853 0164 E26A     		ldr	r2, [r4, #44]
 3854 0166 236B     		ldr	r3, [r4, #48]
 3855 0168 03FB02F3 		mul	r3, r3, r2
 3856 016c B3F5803F 		cmp	r3, #65536
 3857 0170 BFF471AF 		bcs	.L212
1325:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3858              		.loc 1 1325 0
 3859 0174 134B     		ldr	r3, .L229
 3860 0176 0022     		movs	r2, #0
 3861 0178 1A70     		strb	r2, [r3]
 3862              	.LBB582:
 3863              	.LBB583:
 3864              		.loc 2 879 0
 3865              		.syntax unified
 3866              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3867 017a BFF34F8F 		dsb 0xF
 3868              	@ 0 "" 2
 3869              		.thumb
 3870              		.syntax unified
 3871              	.LBE583:
 3872              	.LBE582:
1327:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3873              		.loc 1 1327 0
 3874 017e F2B2     		uxtb	r2, r6
 3875 0180 1A70     		strb	r2, [r3]
 3876              	.LBB584:
 3877              	.LBB585:
 3878              		.loc 2 879 0
 3879              		.syntax unified
 3880              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3881 0182 BFF34F8F 		dsb 0xF
 3882              	@ 0 "" 2
 3883              		.thumb
 3884              		.syntax unified
 3885              	.LBE585:
 3886              	.LBE584:
1329:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 3887              		.loc 1 1329 0
 3888 0186 C6F30722 		ubfx	r2, r6, #8, #8
 3889 018a 1A70     		strb	r2, [r3]
 3890              	.LBB586:
 3891              	.LBB587:
 3892              		.loc 2 879 0
 3893              		.syntax unified
 3894              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3895 018c BFF34F8F 		dsb 0xF
 3896              	@ 0 "" 2
 3897              		.thumb
 3898              		.syntax unified
ARM GAS  /tmp/cc968NXr.s 			page 129


 3899              	.L213:
 3900              	.LBE587:
 3901              	.LBE586:
1376:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 3902              		.loc 1 1376 0
 3903 0190 3022     		movs	r2, #48
 3904 0192 0D4B     		ldr	r3, .L229+4
 3905 0194 1A70     		strb	r2, [r3]
 3906              	.LBB588:
 3907              	.LBB589:
 3908              		.loc 2 879 0
 3909              		.syntax unified
 3910              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 3911 0196 BFF34F8F 		dsb 0xF
 3912              	@ 0 "" 2
 3913              		.thumb
 3914              		.syntax unified
 3915              	.LBE589:
 3916              	.LBE588:
1379:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 3917              		.loc 1 1379 0
 3918 019a 94F83C30 		ldrb	r3, [r4, #60]	@ zero_extendqisi2
 3919 019e 012B     		cmp	r3, #1
 3920 01a0 A8D0     		beq	.L228
 3921              	.L215:
1285:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 3922              		.loc 1 1285 0 discriminator 1
 3923 01a2 0023     		movs	r3, #0
 3924 01a4 C9E7     		b	.L218
 3925              	.L220:
1422:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3926              		.loc 1 1422 0
 3927 01a6 0123     		movs	r3, #1
 3928 01a8 84F82130 		strb	r3, [r4, #33]
1425:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 3929              		.loc 1 1425 0
 3930 01ac 0020     		movs	r0, #0
 3931 01ae 84F82000 		strb	r0, [r4, #32]
1432:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 3932              		.loc 1 1432 0
 3933 01b2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3934              	.LVL243:
 3935              	.L222:
1294:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 3936              		.loc 1 1294 0
 3937 01b6 0220     		movs	r0, #2
 3938              	.LVL244:
 3939 01b8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3940              	.LVL245:
 3941              	.L224:
1299:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3942              		.loc 1 1299 0
 3943 01bc 0220     		movs	r0, #2
 3944              	.LVL246:
1433:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 3945              		.loc 1 1433 0
 3946 01be BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
ARM GAS  /tmp/cc968NXr.s 			page 130


 3947              	.LVL247:
 3948              	.L230:
 3949 01c2 00BF     		.align	2
 3950              	.L229:
 3951 01c4 00000280 		.word	-2147352576
 3952 01c8 00000180 		.word	-2147418112
 3953              		.cfi_endproc
 3954              	.LFE155:
 3956              		.section	.text.HAL_NAND_Write_SpareArea_8b,"ax",%progbits
 3957              		.align	1
 3958              		.global	HAL_NAND_Write_SpareArea_8b
 3959              		.syntax unified
 3960              		.thumb
 3961              		.thumb_func
 3962              		.fpu fpv5-d16
 3964              	HAL_NAND_Write_SpareArea_8b:
 3965              	.LFB156:
1445:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 3966              		.loc 1 1445 0
 3967              		.cfi_startproc
 3968              		@ args = 0, pretend = 0, frame = 0
 3969              		@ frame_needed = 0, uses_anonymous_args = 0
 3970              	.LVL248:
 3971 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3972              	.LCFI20:
 3973              		.cfi_def_cfa_offset 32
 3974              		.cfi_offset 3, -32
 3975              		.cfi_offset 4, -28
 3976              		.cfi_offset 5, -24
 3977              		.cfi_offset 6, -20
 3978              		.cfi_offset 7, -16
 3979              		.cfi_offset 8, -12
 3980              		.cfi_offset 9, -8
 3981              		.cfi_offset 14, -4
 3982 0004 1F46     		mov	r7, r3
 3983              	.LVL249:
1452:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 3984              		.loc 1 1452 0
 3985 0006 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 3986              	.LVL250:
 3987 000a DBB2     		uxtb	r3, r3
 3988 000c 022B     		cmp	r3, #2
 3989 000e 00F0D380 		beq	.L244
 3990 0012 0446     		mov	r4, r0
 3991 0014 1546     		mov	r5, r2
1456:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 3992              		.loc 1 1456 0
 3993 0016 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 3994 001a DBB2     		uxtb	r3, r3
 3995 001c 012B     		cmp	r3, #1
 3996 001e 02D0     		beq	.L248
1587:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 3997              		.loc 1 1587 0
 3998 0020 0120     		movs	r0, #1
 3999              	.LVL251:
 4000 0022 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4001              	.LVL252:
ARM GAS  /tmp/cc968NXr.s 			page 131


 4002              	.L248:
1459:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4003              		.loc 1 1459 0
 4004 0026 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 4005 002a 012B     		cmp	r3, #1
 4006 002c 00F0C780 		beq	.L246
1459:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4007              		.loc 1 1459 0 is_stmt 0 discriminator 2
 4008 0030 0123     		movs	r3, #1
 4009 0032 80F82030 		strb	r3, [r0, #32]
1462:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4010              		.loc 1 1462 0 is_stmt 1 discriminator 2
 4011 0036 0223     		movs	r3, #2
 4012 0038 80F82130 		strb	r3, [r0, #33]
 4013              	.LVL253:
1468:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4014              		.loc 1 1468 0 discriminator 2
 4015 003c 0B88     		ldrh	r3, [r1]
 4016 003e 8A88     		ldrh	r2, [r1, #4]
 4017              	.LVL254:
 4018 0040 4E88     		ldrh	r6, [r1, #2]
 4019 0042 816B     		ldr	r1, [r0, #56]
 4020              	.LVL255:
 4021 0044 01FB0626 		mla	r6, r1, r6, r2
 4022 0048 C26A     		ldr	r2, [r0, #44]
 4023 004a 02FB0636 		mla	r6, r2, r6, r3
 4024              	.LVL256:
1471:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4025              		.loc 1 1471 0 discriminator 2
 4026 004e D0F82480 		ldr	r8, [r0, #36]
 4027              	.LVL257:
 4028              	.L233:
1474:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 4029              		.loc 1 1474 0
 4030 0052 002F     		cmp	r7, #0
 4031 0054 00F0A880 		beq	.L242
1474:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 4032              		.loc 1 1474 0 is_stmt 0 discriminator 1
 4033 0058 E26A     		ldr	r2, [r4, #44]
 4034 005a 236B     		ldr	r3, [r4, #48]
 4035 005c 03FB02F3 		mul	r3, r3, r2
 4036 0060 9E42     		cmp	r6, r3
 4037 0062 80F0A180 		bcs	.L242
1477:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 4038              		.loc 1 1477 0 is_stmt 1
 4039 0066 636A     		ldr	r3, [r4, #36]
 4040 0068 B3F5007F 		cmp	r3, #512
 4041 006c 33D8     		bhi	.L234
1480:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 4042              		.loc 1 1480 0
 4043 006e 554B     		ldr	r3, .L250
 4044 0070 5022     		movs	r2, #80
 4045 0072 1A70     		strb	r2, [r3]
 4046              	.LBB590:
 4047              	.LBB591:
 4048              		.loc 2 879 0
 4049              		.syntax unified
ARM GAS  /tmp/cc968NXr.s 			page 132


 4050              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4051 0074 BFF34F8F 		dsb 0xF
 4052              	@ 0 "" 2
 4053              		.thumb
 4054              		.syntax unified
 4055              	.LBE591:
 4056              	.LBE590:
1482:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 4057              		.loc 1 1482 0
 4058 0078 8022     		movs	r2, #128
 4059 007a 1A70     		strb	r2, [r3]
 4060              	.LBB592:
 4061              	.LBB593:
 4062              		.loc 2 879 0
 4063              		.syntax unified
 4064              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4065 007c BFF34F8F 		dsb 0xF
 4066              	@ 0 "" 2
 4067              		.thumb
 4068              		.syntax unified
 4069              	.LBE593:
 4070              	.LBE592:
1485:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 4071              		.loc 1 1485 0
 4072 0080 E26A     		ldr	r2, [r4, #44]
 4073 0082 236B     		ldr	r3, [r4, #48]
 4074 0084 03FB02F3 		mul	r3, r3, r2
 4075 0088 B3F5803F 		cmp	r3, #65536
 4076 008c 0FD2     		bcs	.L235
1487:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4077              		.loc 1 1487 0
 4078 008e 4E4B     		ldr	r3, .L250+4
 4079 0090 0022     		movs	r2, #0
 4080 0092 1A70     		strb	r2, [r3]
 4081              	.LBB594:
 4082              	.LBB595:
 4083              		.loc 2 879 0
 4084              		.syntax unified
 4085              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4086 0094 BFF34F8F 		dsb 0xF
 4087              	@ 0 "" 2
 4088              		.thumb
 4089              		.syntax unified
 4090              	.LBE595:
 4091              	.LBE594:
1489:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4092              		.loc 1 1489 0
 4093 0098 F2B2     		uxtb	r2, r6
 4094 009a 1A70     		strb	r2, [r3]
 4095              	.LBB596:
 4096              	.LBB597:
 4097              		.loc 2 879 0
 4098              		.syntax unified
 4099              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4100 009c BFF34F8F 		dsb 0xF
 4101              	@ 0 "" 2
 4102              		.thumb
ARM GAS  /tmp/cc968NXr.s 			page 133


 4103              		.syntax unified
 4104              	.LBE597:
 4105              	.LBE596:
1491:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4106              		.loc 1 1491 0
 4107 00a0 C6F30722 		ubfx	r2, r6, #8, #8
 4108 00a4 1A70     		strb	r2, [r3]
 4109              	.LBB598:
 4110              	.LBB599:
 4111              		.loc 2 879 0
 4112              		.syntax unified
 4113              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4114 00a6 BFF34F8F 		dsb 0xF
 4115              	@ 0 "" 2
 4116              		.thumb
 4117              		.syntax unified
 4118              	.L236:
 4119              	.LBE599:
 4120              	.LBE598:
1445:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 4121              		.loc 1 1445 0 discriminator 1
 4122 00aa 0023     		movs	r3, #0
 4123 00ac 5AE0     		b	.L238
 4124              	.L235:
1496:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4125              		.loc 1 1496 0
 4126 00ae 464B     		ldr	r3, .L250+4
 4127 00b0 0022     		movs	r2, #0
 4128 00b2 1A70     		strb	r2, [r3]
 4129              	.LBB600:
 4130              	.LBB601:
 4131              		.loc 2 879 0
 4132              		.syntax unified
 4133              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4134 00b4 BFF34F8F 		dsb 0xF
 4135              	@ 0 "" 2
 4136              		.thumb
 4137              		.syntax unified
 4138              	.LBE601:
 4139              	.LBE600:
1498:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4140              		.loc 1 1498 0
 4141 00b8 F2B2     		uxtb	r2, r6
 4142 00ba 1A70     		strb	r2, [r3]
 4143              	.LBB602:
 4144              	.LBB603:
 4145              		.loc 2 879 0
 4146              		.syntax unified
 4147              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4148 00bc BFF34F8F 		dsb 0xF
 4149              	@ 0 "" 2
 4150              		.thumb
 4151              		.syntax unified
 4152              	.LBE603:
 4153              	.LBE602:
1500:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4154              		.loc 1 1500 0
ARM GAS  /tmp/cc968NXr.s 			page 134


 4155 00c0 C6F30722 		ubfx	r2, r6, #8, #8
 4156 00c4 1A70     		strb	r2, [r3]
 4157              	.LBB604:
 4158              	.LBB605:
 4159              		.loc 2 879 0
 4160              		.syntax unified
 4161              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4162 00c6 BFF34F8F 		dsb 0xF
 4163              	@ 0 "" 2
 4164              		.thumb
 4165              		.syntax unified
 4166              	.LBE605:
 4167              	.LBE604:
1502:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4168              		.loc 1 1502 0
 4169 00ca C6F30742 		ubfx	r2, r6, #16, #8
 4170 00ce 1A70     		strb	r2, [r3]
 4171              	.LBB606:
 4172              	.LBB607:
 4173              		.loc 2 879 0
 4174              		.syntax unified
 4175              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4176 00d0 BFF34F8F 		dsb 0xF
 4177              	@ 0 "" 2
 4178              		.thumb
 4179              		.syntax unified
 4180 00d4 E9E7     		b	.L236
 4181              	.L234:
 4182              	.LBE607:
 4183              	.LBE606:
1509:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 4184              		.loc 1 1509 0
 4185 00d6 3B4B     		ldr	r3, .L250
 4186 00d8 0022     		movs	r2, #0
 4187 00da 1A70     		strb	r2, [r3]
 4188              	.LBB608:
 4189              	.LBB609:
 4190              		.loc 2 879 0
 4191              		.syntax unified
 4192              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4193 00dc BFF34F8F 		dsb 0xF
 4194              	@ 0 "" 2
 4195              		.thumb
 4196              		.syntax unified
 4197              	.LBE609:
 4198              	.LBE608:
1511:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 4199              		.loc 1 1511 0
 4200 00e0 8022     		movs	r2, #128
 4201 00e2 1A70     		strb	r2, [r3]
 4202              	.LBB610:
 4203              	.LBB611:
 4204              		.loc 2 879 0
 4205              		.syntax unified
 4206              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4207 00e4 BFF34F8F 		dsb 0xF
 4208              	@ 0 "" 2
ARM GAS  /tmp/cc968NXr.s 			page 135


 4209              		.thumb
 4210              		.syntax unified
 4211              	.LBE611:
 4212              	.LBE610:
1514:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 4213              		.loc 1 1514 0
 4214 00e8 E26A     		ldr	r2, [r4, #44]
 4215 00ea 236B     		ldr	r3, [r4, #48]
 4216 00ec 03FB02F3 		mul	r3, r3, r2
 4217 00f0 B3F5803F 		cmp	r3, #65536
 4218 00f4 14D2     		bcs	.L237
1516:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4219              		.loc 1 1516 0
 4220 00f6 5FFA88F2 		uxtb	r2, r8
 4221 00fa 334B     		ldr	r3, .L250+4
 4222 00fc 1A70     		strb	r2, [r3]
 4223              	.LBB612:
 4224              	.LBB613:
 4225              		.loc 2 879 0
 4226              		.syntax unified
 4227              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4228 00fe BFF34F8F 		dsb 0xF
 4229              	@ 0 "" 2
 4230              		.thumb
 4231              		.syntax unified
 4232              	.LBE613:
 4233              	.LBE612:
1518:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4234              		.loc 1 1518 0
 4235 0102 C8F30722 		ubfx	r2, r8, #8, #8
 4236 0106 1A70     		strb	r2, [r3]
 4237              	.LBB614:
 4238              	.LBB615:
 4239              		.loc 2 879 0
 4240              		.syntax unified
 4241              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4242 0108 BFF34F8F 		dsb 0xF
 4243              	@ 0 "" 2
 4244              		.thumb
 4245              		.syntax unified
 4246              	.LBE615:
 4247              	.LBE614:
1520:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4248              		.loc 1 1520 0
 4249 010c F2B2     		uxtb	r2, r6
 4250 010e 1A70     		strb	r2, [r3]
 4251              	.LBB616:
 4252              	.LBB617:
 4253              		.loc 2 879 0
 4254              		.syntax unified
 4255              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4256 0110 BFF34F8F 		dsb 0xF
 4257              	@ 0 "" 2
 4258              		.thumb
 4259              		.syntax unified
 4260              	.LBE617:
 4261              	.LBE616:
ARM GAS  /tmp/cc968NXr.s 			page 136


1522:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4262              		.loc 1 1522 0
 4263 0114 C6F30722 		ubfx	r2, r6, #8, #8
 4264 0118 1A70     		strb	r2, [r3]
 4265              	.LBB618:
 4266              	.LBB619:
 4267              		.loc 2 879 0
 4268              		.syntax unified
 4269              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4270 011a BFF34F8F 		dsb 0xF
 4271              	@ 0 "" 2
 4272              		.thumb
 4273              		.syntax unified
 4274 011e C4E7     		b	.L236
 4275              	.L237:
 4276              	.LBE619:
 4277              	.LBE618:
1527:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4278              		.loc 1 1527 0
 4279 0120 5FFA88F2 		uxtb	r2, r8
 4280 0124 284B     		ldr	r3, .L250+4
 4281 0126 1A70     		strb	r2, [r3]
 4282              	.LBB620:
 4283              	.LBB621:
 4284              		.loc 2 879 0
 4285              		.syntax unified
 4286              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4287 0128 BFF34F8F 		dsb 0xF
 4288              	@ 0 "" 2
 4289              		.thumb
 4290              		.syntax unified
 4291              	.LBE621:
 4292              	.LBE620:
1529:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4293              		.loc 1 1529 0
 4294 012c C8F30722 		ubfx	r2, r8, #8, #8
 4295 0130 1A70     		strb	r2, [r3]
 4296              	.LBB622:
 4297              	.LBB623:
 4298              		.loc 2 879 0
 4299              		.syntax unified
 4300              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4301 0132 BFF34F8F 		dsb 0xF
 4302              	@ 0 "" 2
 4303              		.thumb
 4304              		.syntax unified
 4305              	.LBE623:
 4306              	.LBE622:
1531:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4307              		.loc 1 1531 0
 4308 0136 F2B2     		uxtb	r2, r6
 4309 0138 1A70     		strb	r2, [r3]
 4310              	.LBB624:
 4311              	.LBB625:
 4312              		.loc 2 879 0
 4313              		.syntax unified
 4314              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc968NXr.s 			page 137


 4315 013a BFF34F8F 		dsb 0xF
 4316              	@ 0 "" 2
 4317              		.thumb
 4318              		.syntax unified
 4319              	.LBE625:
 4320              	.LBE624:
1533:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4321              		.loc 1 1533 0
 4322 013e C6F30722 		ubfx	r2, r6, #8, #8
 4323 0142 1A70     		strb	r2, [r3]
 4324              	.LBB626:
 4325              	.LBB627:
 4326              		.loc 2 879 0
 4327              		.syntax unified
 4328              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4329 0144 BFF34F8F 		dsb 0xF
 4330              	@ 0 "" 2
 4331              		.thumb
 4332              		.syntax unified
 4333              	.LBE627:
 4334              	.LBE626:
1535:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4335              		.loc 1 1535 0
 4336 0148 C6F30742 		ubfx	r2, r6, #16, #8
 4337 014c 1A70     		strb	r2, [r3]
 4338              	.LBB628:
 4339              	.LBB629:
 4340              		.loc 2 879 0
 4341              		.syntax unified
 4342              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4343 014e BFF34F8F 		dsb 0xF
 4344              	@ 0 "" 2
 4345              		.thumb
 4346              		.syntax unified
 4347 0152 AAE7     		b	.L236
 4348              	.LVL258:
 4349              	.L239:
 4350              	.LBE629:
 4351              	.LBE628:
1543:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
 4352              		.loc 1 1543 0 discriminator 3
 4353 0154 15F8011B 		ldrb	r1, [r5], #1	@ zero_extendqisi2
 4354              	.LVL259:
 4355 0158 4FF00042 		mov	r2, #-2147483648
 4356 015c 1170     		strb	r1, [r2]
 4357              	.LVL260:
 4358              	.LBB630:
 4359              	.LBB631:
 4360              		.loc 2 879 0 discriminator 3
 4361              		.syntax unified
 4362              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4363 015e BFF34F8F 		dsb 0xF
 4364              	@ 0 "" 2
 4365              		.thumb
 4366              		.syntax unified
 4367              	.LBE631:
 4368              	.LBE630:
ARM GAS  /tmp/cc968NXr.s 			page 138


1541:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 4369              		.loc 1 1541 0 discriminator 3
 4370 0162 0133     		adds	r3, r3, #1
 4371              	.LVL261:
 4372              	.L238:
1541:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 4373              		.loc 1 1541 0 is_stmt 0 discriminator 1
 4374 0164 A26A     		ldr	r2, [r4, #40]
 4375 0166 9342     		cmp	r3, r2
 4376 0168 F4D3     		bcc	.L239
1548:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 4377              		.loc 1 1548 0 is_stmt 1
 4378 016a 1022     		movs	r2, #16
 4379 016c 154B     		ldr	r3, .L250
 4380              	.LVL262:
 4381 016e 1A70     		strb	r2, [r3]
 4382              	.LBB632:
 4383              	.LBB633:
 4384              		.loc 2 879 0
 4385              		.syntax unified
 4386              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4387 0170 BFF34F8F 		dsb 0xF
 4388              	@ 0 "" 2
 4389              		.thumb
 4390              		.syntax unified
 4391              	.LBE633:
 4392              	.LBE632:
1552:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4393              		.loc 1 1552 0
 4394 0174 FFF7FEFF 		bl	HAL_GetTick
 4395              	.LVL263:
 4396 0178 8146     		mov	r9, r0
 4397              	.LVL264:
 4398              	.L240:
1555:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 4399              		.loc 1 1555 0
 4400 017a 2046     		mov	r0, r4
 4401 017c FFF7FEFF 		bl	HAL_NAND_Read_Status
 4402              	.LVL265:
 4403 0180 4028     		cmp	r0, #64
 4404 0182 0ED0     		beq	.L249
1557:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 4405              		.loc 1 1557 0
 4406 0184 FFF7FEFF 		bl	HAL_GetTick
 4407              	.LVL266:
 4408 0188 A0EB0900 		sub	r0, r0, r9
 4409 018c B0F1807F 		cmp	r0, #16777216
 4410 0190 F3D9     		bls	.L240
1560:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4411              		.loc 1 1560 0
 4412 0192 0320     		movs	r0, #3
 4413 0194 84F82100 		strb	r0, [r4, #33]
1563:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4414              		.loc 1 1563 0
 4415 0198 0023     		movs	r3, #0
 4416 019a 84F82030 		strb	r3, [r4, #32]
1565:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
ARM GAS  /tmp/cc968NXr.s 			page 139


 4417              		.loc 1 1565 0
 4418 019e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4419              	.LVL267:
 4420              	.L249:
1573:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4421              		.loc 1 1573 0
 4422 01a2 013F     		subs	r7, r7, #1
 4423              	.LVL268:
1576:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 4424              		.loc 1 1576 0
 4425 01a4 0136     		adds	r6, r6, #1
 4426              	.LVL269:
 4427 01a6 54E7     		b	.L233
 4428              	.LVL270:
 4429              	.L242:
1580:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4430              		.loc 1 1580 0
 4431 01a8 0123     		movs	r3, #1
 4432 01aa 84F82130 		strb	r3, [r4, #33]
1583:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 4433              		.loc 1 1583 0
 4434 01ae 0020     		movs	r0, #0
 4435 01b0 84F82000 		strb	r0, [r4, #32]
1590:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 4436              		.loc 1 1590 0
 4437 01b4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4438              	.LVL271:
 4439              	.L244:
1454:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 4440              		.loc 1 1454 0
 4441 01b8 0220     		movs	r0, #2
 4442              	.LVL272:
 4443 01ba BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4444              	.LVL273:
 4445              	.L246:
1459:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4446              		.loc 1 1459 0
 4447 01be 0220     		movs	r0, #2
 4448              	.LVL274:
1591:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4449              		.loc 1 1591 0
 4450 01c0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4451              	.LVL275:
 4452              	.L251:
 4453              		.align	2
 4454              	.L250:
 4455 01c4 00000180 		.word	-2147418112
 4456 01c8 00000280 		.word	-2147352576
 4457              		.cfi_endproc
 4458              	.LFE156:
 4460              		.section	.text.HAL_NAND_Write_SpareArea_16b,"ax",%progbits
 4461              		.align	1
 4462              		.global	HAL_NAND_Write_SpareArea_16b
 4463              		.syntax unified
 4464              		.thumb
 4465              		.thumb_func
 4466              		.fpu fpv5-d16
ARM GAS  /tmp/cc968NXr.s 			page 140


 4468              	HAL_NAND_Write_SpareArea_16b:
 4469              	.LFB157:
1603:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 4470              		.loc 1 1603 0
 4471              		.cfi_startproc
 4472              		@ args = 0, pretend = 0, frame = 0
 4473              		@ frame_needed = 0, uses_anonymous_args = 0
 4474              	.LVL276:
 4475 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4476              	.LCFI21:
 4477              		.cfi_def_cfa_offset 32
 4478              		.cfi_offset 3, -32
 4479              		.cfi_offset 4, -28
 4480              		.cfi_offset 5, -24
 4481              		.cfi_offset 6, -20
 4482              		.cfi_offset 7, -16
 4483              		.cfi_offset 8, -12
 4484              		.cfi_offset 9, -8
 4485              		.cfi_offset 14, -4
 4486 0004 1F46     		mov	r7, r3
 4487              	.LVL277:
1610:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 4488              		.loc 1 1610 0
 4489 0006 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 4490              	.LVL278:
 4491 000a DBB2     		uxtb	r3, r3
 4492 000c 022B     		cmp	r3, #2
 4493 000e 00F0D480 		beq	.L265
 4494 0012 0446     		mov	r4, r0
 4495 0014 1546     		mov	r5, r2
1614:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   {
 4496              		.loc 1 1614 0
 4497 0016 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 4498 001a DBB2     		uxtb	r3, r3
 4499 001c 012B     		cmp	r3, #1
 4500 001e 02D0     		beq	.L269
1745:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 4501              		.loc 1 1745 0
 4502 0020 0120     		movs	r0, #1
 4503              	.LVL279:
 4504 0022 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4505              	.LVL280:
 4506              	.L269:
1617:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4507              		.loc 1 1617 0
 4508 0026 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 4509 002a 012B     		cmp	r3, #1
 4510 002c 00F0C880 		beq	.L267
1617:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4511              		.loc 1 1617 0 is_stmt 0 discriminator 2
 4512 0030 0123     		movs	r3, #1
 4513 0032 80F82030 		strb	r3, [r0, #32]
1620:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4514              		.loc 1 1620 0 is_stmt 1 discriminator 2
 4515 0036 0223     		movs	r3, #2
 4516 0038 80F82130 		strb	r3, [r0, #33]
 4517              	.LVL281:
ARM GAS  /tmp/cc968NXr.s 			page 141


1626:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4518              		.loc 1 1626 0 discriminator 2
 4519 003c 0B88     		ldrh	r3, [r1]
 4520 003e 8A88     		ldrh	r2, [r1, #4]
 4521              	.LVL282:
 4522 0040 4E88     		ldrh	r6, [r1, #2]
 4523 0042 816B     		ldr	r1, [r0, #56]
 4524              	.LVL283:
 4525 0044 01FB0626 		mla	r6, r1, r6, r2
 4526 0048 C26A     		ldr	r2, [r0, #44]
 4527 004a 02FB0636 		mla	r6, r2, r6, r3
 4528              	.LVL284:
1629:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4529              		.loc 1 1629 0 discriminator 2
 4530 004e 436A     		ldr	r3, [r0, #36]
 4531 0050 4FEA4308 		lsl	r8, r3, #1
 4532              	.LVL285:
 4533              	.L254:
1632:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 4534              		.loc 1 1632 0
 4535 0054 002F     		cmp	r7, #0
 4536 0056 00F0A880 		beq	.L263
1632:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     {
 4537              		.loc 1 1632 0 is_stmt 0 discriminator 1
 4538 005a E26A     		ldr	r2, [r4, #44]
 4539 005c 236B     		ldr	r3, [r4, #48]
 4540 005e 03FB02F3 		mul	r3, r3, r2
 4541 0062 9E42     		cmp	r6, r3
 4542 0064 80F0A180 		bcs	.L263
1635:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 4543              		.loc 1 1635 0 is_stmt 1
 4544 0068 636A     		ldr	r3, [r4, #36]
 4545 006a B3F5007F 		cmp	r3, #512
 4546 006e 33D8     		bhi	.L255
1638:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 4547              		.loc 1 1638 0
 4548 0070 554B     		ldr	r3, .L271
 4549 0072 5022     		movs	r2, #80
 4550 0074 1A70     		strb	r2, [r3]
 4551              	.LBB634:
 4552              	.LBB635:
 4553              		.loc 2 879 0
 4554              		.syntax unified
 4555              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4556 0076 BFF34F8F 		dsb 0xF
 4557              	@ 0 "" 2
 4558              		.thumb
 4559              		.syntax unified
 4560              	.LBE635:
 4561              	.LBE634:
1640:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 4562              		.loc 1 1640 0
 4563 007a 8022     		movs	r2, #128
 4564 007c 1A70     		strb	r2, [r3]
 4565              	.LBB636:
 4566              	.LBB637:
 4567              		.loc 2 879 0
ARM GAS  /tmp/cc968NXr.s 			page 142


 4568              		.syntax unified
 4569              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4570 007e BFF34F8F 		dsb 0xF
 4571              	@ 0 "" 2
 4572              		.thumb
 4573              		.syntax unified
 4574              	.LBE637:
 4575              	.LBE636:
1643:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 4576              		.loc 1 1643 0
 4577 0082 E26A     		ldr	r2, [r4, #44]
 4578 0084 236B     		ldr	r3, [r4, #48]
 4579 0086 03FB02F3 		mul	r3, r3, r2
 4580 008a B3F5803F 		cmp	r3, #65536
 4581 008e 0FD2     		bcs	.L256
1645:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4582              		.loc 1 1645 0
 4583 0090 4E4B     		ldr	r3, .L271+4
 4584 0092 0022     		movs	r2, #0
 4585 0094 1A70     		strb	r2, [r3]
 4586              	.LBB638:
 4587              	.LBB639:
 4588              		.loc 2 879 0
 4589              		.syntax unified
 4590              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4591 0096 BFF34F8F 		dsb 0xF
 4592              	@ 0 "" 2
 4593              		.thumb
 4594              		.syntax unified
 4595              	.LBE639:
 4596              	.LBE638:
1647:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4597              		.loc 1 1647 0
 4598 009a F2B2     		uxtb	r2, r6
 4599 009c 1A70     		strb	r2, [r3]
 4600              	.LBB640:
 4601              	.LBB641:
 4602              		.loc 2 879 0
 4603              		.syntax unified
 4604              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4605 009e BFF34F8F 		dsb 0xF
 4606              	@ 0 "" 2
 4607              		.thumb
 4608              		.syntax unified
 4609              	.LBE641:
 4610              	.LBE640:
1649:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4611              		.loc 1 1649 0
 4612 00a2 C6F30722 		ubfx	r2, r6, #8, #8
 4613 00a6 1A70     		strb	r2, [r3]
 4614              	.LBB642:
 4615              	.LBB643:
 4616              		.loc 2 879 0
 4617              		.syntax unified
 4618              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4619 00a8 BFF34F8F 		dsb 0xF
 4620              	@ 0 "" 2
ARM GAS  /tmp/cc968NXr.s 			page 143


 4621              		.thumb
 4622              		.syntax unified
 4623              	.L257:
 4624              	.LBE643:
 4625              	.LBE642:
1603:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   uint32_t index;
 4626              		.loc 1 1603 0 discriminator 1
 4627 00ac 0023     		movs	r3, #0
 4628 00ae 5AE0     		b	.L259
 4629              	.L256:
1654:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4630              		.loc 1 1654 0
 4631 00b0 464B     		ldr	r3, .L271+4
 4632 00b2 0022     		movs	r2, #0
 4633 00b4 1A70     		strb	r2, [r3]
 4634              	.LBB644:
 4635              	.LBB645:
 4636              		.loc 2 879 0
 4637              		.syntax unified
 4638              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4639 00b6 BFF34F8F 		dsb 0xF
 4640              	@ 0 "" 2
 4641              		.thumb
 4642              		.syntax unified
 4643              	.LBE645:
 4644              	.LBE644:
1656:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4645              		.loc 1 1656 0
 4646 00ba F2B2     		uxtb	r2, r6
 4647 00bc 1A70     		strb	r2, [r3]
 4648              	.LBB646:
 4649              	.LBB647:
 4650              		.loc 2 879 0
 4651              		.syntax unified
 4652              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4653 00be BFF34F8F 		dsb 0xF
 4654              	@ 0 "" 2
 4655              		.thumb
 4656              		.syntax unified
 4657              	.LBE647:
 4658              	.LBE646:
1658:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4659              		.loc 1 1658 0
 4660 00c2 C6F30722 		ubfx	r2, r6, #8, #8
 4661 00c6 1A70     		strb	r2, [r3]
 4662              	.LBB648:
 4663              	.LBB649:
 4664              		.loc 2 879 0
 4665              		.syntax unified
 4666              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4667 00c8 BFF34F8F 		dsb 0xF
 4668              	@ 0 "" 2
 4669              		.thumb
 4670              		.syntax unified
 4671              	.LBE649:
 4672              	.LBE648:
1660:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
ARM GAS  /tmp/cc968NXr.s 			page 144


 4673              		.loc 1 1660 0
 4674 00cc C6F30742 		ubfx	r2, r6, #16, #8
 4675 00d0 1A70     		strb	r2, [r3]
 4676              	.LBB650:
 4677              	.LBB651:
 4678              		.loc 2 879 0
 4679              		.syntax unified
 4680              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4681 00d2 BFF34F8F 		dsb 0xF
 4682              	@ 0 "" 2
 4683              		.thumb
 4684              		.syntax unified
 4685 00d6 E9E7     		b	.L257
 4686              	.L255:
 4687              	.LBE651:
 4688              	.LBE650:
1667:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 4689              		.loc 1 1667 0
 4690 00d8 3B4B     		ldr	r3, .L271
 4691 00da 0022     		movs	r2, #0
 4692 00dc 1A70     		strb	r2, [r3]
 4693              	.LBB652:
 4694              	.LBB653:
 4695              		.loc 2 879 0
 4696              		.syntax unified
 4697              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4698 00de BFF34F8F 		dsb 0xF
 4699              	@ 0 "" 2
 4700              		.thumb
 4701              		.syntax unified
 4702              	.LBE653:
 4703              	.LBE652:
1669:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         __DSB();
 4704              		.loc 1 1669 0
 4705 00e2 8022     		movs	r2, #128
 4706 00e4 1A70     		strb	r2, [r3]
 4707              	.LBB654:
 4708              	.LBB655:
 4709              		.loc 2 879 0
 4710              		.syntax unified
 4711              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4712 00e6 BFF34F8F 		dsb 0xF
 4713              	@ 0 "" 2
 4714              		.thumb
 4715              		.syntax unified
 4716              	.LBE655:
 4717              	.LBE654:
1672:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 4718              		.loc 1 1672 0
 4719 00ea E26A     		ldr	r2, [r4, #44]
 4720 00ec 236B     		ldr	r3, [r4, #48]
 4721 00ee 03FB02F3 		mul	r3, r3, r2
 4722 00f2 B3F5803F 		cmp	r3, #65536
 4723 00f6 14D2     		bcs	.L258
1674:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4724              		.loc 1 1674 0
 4725 00f8 5FFA88F2 		uxtb	r2, r8
ARM GAS  /tmp/cc968NXr.s 			page 145


 4726 00fc 334B     		ldr	r3, .L271+4
 4727 00fe 1A70     		strb	r2, [r3]
 4728              	.LBB656:
 4729              	.LBB657:
 4730              		.loc 2 879 0
 4731              		.syntax unified
 4732              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4733 0100 BFF34F8F 		dsb 0xF
 4734              	@ 0 "" 2
 4735              		.thumb
 4736              		.syntax unified
 4737              	.LBE657:
 4738              	.LBE656:
1676:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4739              		.loc 1 1676 0
 4740 0104 C8F30722 		ubfx	r2, r8, #8, #8
 4741 0108 1A70     		strb	r2, [r3]
 4742              	.LBB658:
 4743              	.LBB659:
 4744              		.loc 2 879 0
 4745              		.syntax unified
 4746              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4747 010a BFF34F8F 		dsb 0xF
 4748              	@ 0 "" 2
 4749              		.thumb
 4750              		.syntax unified
 4751              	.LBE659:
 4752              	.LBE658:
1678:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4753              		.loc 1 1678 0
 4754 010e F2B2     		uxtb	r2, r6
 4755 0110 1A70     		strb	r2, [r3]
 4756              	.LBB660:
 4757              	.LBB661:
 4758              		.loc 2 879 0
 4759              		.syntax unified
 4760              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4761 0112 BFF34F8F 		dsb 0xF
 4762              	@ 0 "" 2
 4763              		.thumb
 4764              		.syntax unified
 4765              	.LBE661:
 4766              	.LBE660:
1680:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4767              		.loc 1 1680 0
 4768 0116 C6F30722 		ubfx	r2, r6, #8, #8
 4769 011a 1A70     		strb	r2, [r3]
 4770              	.LBB662:
 4771              	.LBB663:
 4772              		.loc 2 879 0
 4773              		.syntax unified
 4774              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4775 011c BFF34F8F 		dsb 0xF
 4776              	@ 0 "" 2
 4777              		.thumb
 4778              		.syntax unified
 4779 0120 C4E7     		b	.L257
ARM GAS  /tmp/cc968NXr.s 			page 146


 4780              	.L258:
 4781              	.LBE663:
 4782              	.LBE662:
1685:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4783              		.loc 1 1685 0
 4784 0122 5FFA88F2 		uxtb	r2, r8
 4785 0126 294B     		ldr	r3, .L271+4
 4786 0128 1A70     		strb	r2, [r3]
 4787              	.LBB664:
 4788              	.LBB665:
 4789              		.loc 2 879 0
 4790              		.syntax unified
 4791              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4792 012a BFF34F8F 		dsb 0xF
 4793              	@ 0 "" 2
 4794              		.thumb
 4795              		.syntax unified
 4796              	.LBE665:
 4797              	.LBE664:
1687:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4798              		.loc 1 1687 0
 4799 012e C8F30722 		ubfx	r2, r8, #8, #8
 4800 0132 1A70     		strb	r2, [r3]
 4801              	.LBB666:
 4802              	.LBB667:
 4803              		.loc 2 879 0
 4804              		.syntax unified
 4805              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4806 0134 BFF34F8F 		dsb 0xF
 4807              	@ 0 "" 2
 4808              		.thumb
 4809              		.syntax unified
 4810              	.LBE667:
 4811              	.LBE666:
1689:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4812              		.loc 1 1689 0
 4813 0138 F2B2     		uxtb	r2, r6
 4814 013a 1A70     		strb	r2, [r3]
 4815              	.LBB668:
 4816              	.LBB669:
 4817              		.loc 2 879 0
 4818              		.syntax unified
 4819              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4820 013c BFF34F8F 		dsb 0xF
 4821              	@ 0 "" 2
 4822              		.thumb
 4823              		.syntax unified
 4824              	.LBE669:
 4825              	.LBE668:
1691:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4826              		.loc 1 1691 0
 4827 0140 C6F30722 		ubfx	r2, r6, #8, #8
 4828 0144 1A70     		strb	r2, [r3]
 4829              	.LBB670:
 4830              	.LBB671:
 4831              		.loc 2 879 0
 4832              		.syntax unified
ARM GAS  /tmp/cc968NXr.s 			page 147


 4833              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4834 0146 BFF34F8F 		dsb 0xF
 4835              	@ 0 "" 2
 4836              		.thumb
 4837              		.syntax unified
 4838              	.LBE671:
 4839              	.LBE670:
1693:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****           __DSB();
 4840              		.loc 1 1693 0
 4841 014a C6F30742 		ubfx	r2, r6, #16, #8
 4842 014e 1A70     		strb	r2, [r3]
 4843              	.LBB672:
 4844              	.LBB673:
 4845              		.loc 2 879 0
 4846              		.syntax unified
 4847              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4848 0150 BFF34F8F 		dsb 0xF
 4849              	@ 0 "" 2
 4850              		.thumb
 4851              		.syntax unified
 4852 0154 AAE7     		b	.L257
 4853              	.LVL286:
 4854              	.L260:
 4855              	.LBE673:
 4856              	.LBE672:
1701:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         buff++;
 4857              		.loc 1 1701 0 discriminator 3
 4858 0156 35F8021B 		ldrh	r1, [r5], #2
 4859              	.LVL287:
 4860 015a 4FF00042 		mov	r2, #-2147483648
 4861 015e 1180     		strh	r1, [r2]	@ movhi
 4862              	.LVL288:
 4863              	.LBB674:
 4864              	.LBB675:
 4865              		.loc 2 879 0 discriminator 3
 4866              		.syntax unified
 4867              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4868 0160 BFF34F8F 		dsb 0xF
 4869              	@ 0 "" 2
 4870              		.thumb
 4871              		.syntax unified
 4872              	.LBE675:
 4873              	.LBE674:
1699:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 4874              		.loc 1 1699 0 discriminator 3
 4875 0164 0133     		adds	r3, r3, #1
 4876              	.LVL289:
 4877              	.L259:
1699:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 4878              		.loc 1 1699 0 is_stmt 0 discriminator 1
 4879 0166 A26A     		ldr	r2, [r4, #40]
 4880 0168 9342     		cmp	r3, r2
 4881 016a F4D3     		bcc	.L260
1706:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       __DSB();
 4882              		.loc 1 1706 0 is_stmt 1
 4883 016c 1022     		movs	r2, #16
 4884 016e 164B     		ldr	r3, .L271
ARM GAS  /tmp/cc968NXr.s 			page 148


 4885              	.LVL290:
 4886 0170 1A70     		strb	r2, [r3]
 4887              	.LBB676:
 4888              	.LBB677:
 4889              		.loc 2 879 0
 4890              		.syntax unified
 4891              	@ 879 "Libraries/CMSIS/Include/cmsis_gcc.h" 1
 4892 0172 BFF34F8F 		dsb 0xF
 4893              	@ 0 "" 2
 4894              		.thumb
 4895              		.syntax unified
 4896              	.LBE677:
 4897              	.LBE676:
1710:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4898              		.loc 1 1710 0
 4899 0176 FFF7FEFF 		bl	HAL_GetTick
 4900              	.LVL291:
 4901 017a 8146     		mov	r9, r0
 4902              	.LVL292:
 4903              	.L261:
1713:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****       {
 4904              		.loc 1 1713 0
 4905 017c 2046     		mov	r0, r4
 4906 017e FFF7FEFF 		bl	HAL_NAND_Read_Status
 4907              	.LVL293:
 4908 0182 4028     		cmp	r0, #64
 4909 0184 0ED0     		beq	.L270
1715:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         {
 4910              		.loc 1 1715 0
 4911 0186 FFF7FEFF 		bl	HAL_GetTick
 4912              	.LVL294:
 4913 018a A0EB0900 		sub	r0, r0, r9
 4914 018e B0F1807F 		cmp	r0, #16777216
 4915 0192 F3D9     		bls	.L261
1718:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4916              		.loc 1 1718 0
 4917 0194 0320     		movs	r0, #3
 4918 0196 84F82100 		strb	r0, [r4, #33]
1721:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4919              		.loc 1 1721 0
 4920 019a 0023     		movs	r3, #0
 4921 019c 84F82030 		strb	r3, [r4, #32]
1723:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****         }
 4922              		.loc 1 1723 0
 4923 01a0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4924              	.LVL295:
 4925              	.L270:
1731:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4926              		.loc 1 1731 0
 4927 01a4 013F     		subs	r7, r7, #1
 4928              	.LVL296:
1734:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****     }
 4929              		.loc 1 1734 0
 4930 01a6 0136     		adds	r6, r6, #1
 4931              	.LVL297:
 4932 01a8 54E7     		b	.L254
 4933              	.LVL298:
ARM GAS  /tmp/cc968NXr.s 			page 149


 4934              	.L263:
1738:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4935              		.loc 1 1738 0
 4936 01aa 0123     		movs	r3, #1
 4937 01ac 84F82130 		strb	r3, [r4, #33]
1741:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 4938              		.loc 1 1741 0
 4939 01b0 0020     		movs	r0, #0
 4940 01b2 84F82000 		strb	r0, [r4, #32]
1748:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** }
 4941              		.loc 1 1748 0
 4942 01b6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4943              	.LVL299:
 4944              	.L265:
1612:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c ****   }
 4945              		.loc 1 1612 0
 4946 01ba 0220     		movs	r0, #2
 4947              	.LVL300:
 4948 01bc BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4949              	.LVL301:
 4950              	.L267:
1617:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4951              		.loc 1 1617 0
 4952 01c0 0220     		movs	r0, #2
 4953              	.LVL302:
1749:Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c **** 
 4954              		.loc 1 1749 0
 4955 01c2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4956              	.LVL303:
 4957              	.L272:
 4958 01c6 00BF     		.align	2
 4959              	.L271:
 4960 01c8 00000180 		.word	-2147418112
 4961 01cc 00000280 		.word	-2147352576
 4962              		.cfi_endproc
 4963              	.LFE157:
 4965              		.text
 4966              	.Letext0:
 4967              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 4968              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 4969              		.file 5 "Libraries/CMSIS/Include/core_cm7.h"
 4970              		.file 6 "Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 4971              		.file 7 "Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 4972              		.file 8 "Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 4973              		.file 9 "/usr/include/newlib/sys/lock.h"
 4974              		.file 10 "/usr/include/newlib/sys/_types.h"
 4975              		.file 11 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 4976              		.file 12 "/usr/include/newlib/sys/reent.h"
 4977              		.file 13 "/usr/include/newlib/math.h"
 4978              		.file 14 "Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 4979              		.file 15 "Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 4980              		.file 16 "Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_fmc.h"
 4981              		.file 17 "Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_nand.h"
 4982              		.file 18 "Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/cc968NXr.s 			page 150


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_nand.c
     /tmp/cc968NXr.s:17     .text.HAL_NAND_MspInit:0000000000000000 $t
     /tmp/cc968NXr.s:24     .text.HAL_NAND_MspInit:0000000000000000 HAL_NAND_MspInit
     /tmp/cc968NXr.s:38     .text.HAL_NAND_Init:0000000000000000 $t
     /tmp/cc968NXr.s:45     .text.HAL_NAND_Init:0000000000000000 HAL_NAND_Init
     /tmp/cc968NXr.s:126    .text.HAL_NAND_Init:000000000000005c $d
     /tmp/cc968NXr.s:131    .text.HAL_NAND_MspDeInit:0000000000000000 $t
     /tmp/cc968NXr.s:138    .text.HAL_NAND_MspDeInit:0000000000000000 HAL_NAND_MspDeInit
     /tmp/cc968NXr.s:151    .text.HAL_NAND_DeInit:0000000000000000 $t
     /tmp/cc968NXr.s:158    .text.HAL_NAND_DeInit:0000000000000000 HAL_NAND_DeInit
     /tmp/cc968NXr.s:191    .text.HAL_NAND_ITCallback:0000000000000000 $t
     /tmp/cc968NXr.s:198    .text.HAL_NAND_ITCallback:0000000000000000 HAL_NAND_ITCallback
     /tmp/cc968NXr.s:211    .text.HAL_NAND_IRQHandler:0000000000000000 $t
     /tmp/cc968NXr.s:218    .text.HAL_NAND_IRQHandler:0000000000000000 HAL_NAND_IRQHandler
     /tmp/cc968NXr.s:307    .text.HAL_NAND_Read_ID:0000000000000000 $t
     /tmp/cc968NXr.s:314    .text.HAL_NAND_Read_ID:0000000000000000 HAL_NAND_Read_ID
     /tmp/cc968NXr.s:470    .text.HAL_NAND_Read_ID:00000000000000b4 $d
     /tmp/cc968NXr.s:476    .text.HAL_NAND_Reset:0000000000000000 $t
     /tmp/cc968NXr.s:483    .text.HAL_NAND_Reset:0000000000000000 HAL_NAND_Reset
     /tmp/cc968NXr.s:545    .text.HAL_NAND_Reset:0000000000000044 $d
     /tmp/cc968NXr.s:550    .text.HAL_NAND_ConfigDevice:0000000000000000 $t
     /tmp/cc968NXr.s:557    .text.HAL_NAND_ConfigDevice:0000000000000000 HAL_NAND_ConfigDevice
     /tmp/cc968NXr.s:594    .text.HAL_NAND_Erase_Block:0000000000000000 $t
     /tmp/cc968NXr.s:601    .text.HAL_NAND_Erase_Block:0000000000000000 HAL_NAND_Erase_Block
     /tmp/cc968NXr.s:769    .text.HAL_NAND_Erase_Block:00000000000000ac $d
     /tmp/cc968NXr.s:775    .text.HAL_NAND_Address_Inc:0000000000000000 $t
     /tmp/cc968NXr.s:782    .text.HAL_NAND_Address_Inc:0000000000000000 HAL_NAND_Address_Inc
     /tmp/cc968NXr.s:850    .text.HAL_NAND_ECC_Enable:0000000000000000 $t
     /tmp/cc968NXr.s:857    .text.HAL_NAND_ECC_Enable:0000000000000000 HAL_NAND_ECC_Enable
     /tmp/cc968NXr.s:916    .text.HAL_NAND_ECC_Disable:0000000000000000 $t
     /tmp/cc968NXr.s:923    .text.HAL_NAND_ECC_Disable:0000000000000000 HAL_NAND_ECC_Disable
     /tmp/cc968NXr.s:982    .text.HAL_NAND_GetECC:0000000000000000 $t
     /tmp/cc968NXr.s:989    .text.HAL_NAND_GetECC:0000000000000000 HAL_NAND_GetECC
     /tmp/cc968NXr.s:1045   .text.HAL_NAND_GetState:0000000000000000 $t
     /tmp/cc968NXr.s:1052   .text.HAL_NAND_GetState:0000000000000000 HAL_NAND_GetState
     /tmp/cc968NXr.s:1069   .text.HAL_NAND_Read_Status:0000000000000000 $t
     /tmp/cc968NXr.s:1076   .text.HAL_NAND_Read_Status:0000000000000000 HAL_NAND_Read_Status
     /tmp/cc968NXr.s:1119   .text.HAL_NAND_Read_Status:0000000000000028 $d
     /tmp/cc968NXr.s:1124   .text.HAL_NAND_Read_Page_8b:0000000000000000 $t
     /tmp/cc968NXr.s:1131   .text.HAL_NAND_Read_Page_8b:0000000000000000 HAL_NAND_Read_Page_8b
     /tmp/cc968NXr.s:1581   .text.HAL_NAND_Read_Page_8b:00000000000001a8 $d
     /tmp/cc968NXr.s:1587   .text.HAL_NAND_Read_Page_16b:0000000000000000 $t
     /tmp/cc968NXr.s:1594   .text.HAL_NAND_Read_Page_16b:0000000000000000 HAL_NAND_Read_Page_16b
     /tmp/cc968NXr.s:2044   .text.HAL_NAND_Read_Page_16b:00000000000001a8 $d
     /tmp/cc968NXr.s:2050   .text.HAL_NAND_Write_Page_8b:0000000000000000 $t
     /tmp/cc968NXr.s:2057   .text.HAL_NAND_Write_Page_8b:0000000000000000 HAL_NAND_Write_Page_8b
     /tmp/cc968NXr.s:2512   .text.HAL_NAND_Write_Page_8b:00000000000001a4 $d
     /tmp/cc968NXr.s:2518   .text.HAL_NAND_Write_Page_16b:0000000000000000 $t
     /tmp/cc968NXr.s:2525   .text.HAL_NAND_Write_Page_16b:0000000000000000 HAL_NAND_Write_Page_16b
     /tmp/cc968NXr.s:2980   .text.HAL_NAND_Write_Page_16b:00000000000001a4 $d
     /tmp/cc968NXr.s:2986   .text.HAL_NAND_Read_SpareArea_8b:0000000000000000 $t
     /tmp/cc968NXr.s:2993   .text.HAL_NAND_Read_SpareArea_8b:0000000000000000 HAL_NAND_Read_SpareArea_8b
     /tmp/cc968NXr.s:3465   .text.HAL_NAND_Read_SpareArea_8b:00000000000001c0 $d
     /tmp/cc968NXr.s:3471   .text.HAL_NAND_Read_SpareArea_16b:0000000000000000 $t
     /tmp/cc968NXr.s:3478   .text.HAL_NAND_Read_SpareArea_16b:0000000000000000 HAL_NAND_Read_SpareArea_16b
     /tmp/cc968NXr.s:3951   .text.HAL_NAND_Read_SpareArea_16b:00000000000001c4 $d
ARM GAS  /tmp/cc968NXr.s 			page 151


     /tmp/cc968NXr.s:3957   .text.HAL_NAND_Write_SpareArea_8b:0000000000000000 $t
     /tmp/cc968NXr.s:3964   .text.HAL_NAND_Write_SpareArea_8b:0000000000000000 HAL_NAND_Write_SpareArea_8b
     /tmp/cc968NXr.s:4455   .text.HAL_NAND_Write_SpareArea_8b:00000000000001c4 $d
     /tmp/cc968NXr.s:4461   .text.HAL_NAND_Write_SpareArea_16b:0000000000000000 $t
     /tmp/cc968NXr.s:4468   .text.HAL_NAND_Write_SpareArea_16b:0000000000000000 HAL_NAND_Write_SpareArea_16b
     /tmp/cc968NXr.s:4960   .text.HAL_NAND_Write_SpareArea_16b:00000000000001c8 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
FMC_NAND_Init
FMC_NAND_CommonSpace_Timing_Init
FMC_NAND_AttributeSpace_Timing_Init
FMC_NAND_DeInit
FMC_NAND_ECC_Enable
FMC_NAND_ECC_Disable
FMC_NAND_GetECC
HAL_GetTick
