ARM GAS  /tmp/ccVLwjO0.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_can.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.CheckITStatus,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	CheckITStatus:
  23              	.LFB53:
  24              		.file 1 "Libraries/FWlib/src/stm32f10x_can.c"
   1:Libraries/FWlib/src/stm32f10x_can.c **** /**
   2:Libraries/FWlib/src/stm32f10x_can.c ****   ******************************************************************************
   3:Libraries/FWlib/src/stm32f10x_can.c ****   * @file    stm32f10x_can.c
   4:Libraries/FWlib/src/stm32f10x_can.c ****   * @author  MCD Application Team
   5:Libraries/FWlib/src/stm32f10x_can.c ****   * @version V3.5.0
   6:Libraries/FWlib/src/stm32f10x_can.c ****   * @date    11-March-2011
   7:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief   This file provides all the CAN firmware functions.
   8:Libraries/FWlib/src/stm32f10x_can.c ****   ******************************************************************************
   9:Libraries/FWlib/src/stm32f10x_can.c ****   * @attention
  10:Libraries/FWlib/src/stm32f10x_can.c ****   *
  11:Libraries/FWlib/src/stm32f10x_can.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:Libraries/FWlib/src/stm32f10x_can.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:Libraries/FWlib/src/stm32f10x_can.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:Libraries/FWlib/src/stm32f10x_can.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:Libraries/FWlib/src/stm32f10x_can.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:Libraries/FWlib/src/stm32f10x_can.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:Libraries/FWlib/src/stm32f10x_can.c ****   *
  18:Libraries/FWlib/src/stm32f10x_can.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:Libraries/FWlib/src/stm32f10x_can.c ****   ******************************************************************************
  20:Libraries/FWlib/src/stm32f10x_can.c ****   */
  21:Libraries/FWlib/src/stm32f10x_can.c **** 
  22:Libraries/FWlib/src/stm32f10x_can.c **** /* Includes ------------------------------------------------------------------*/
  23:Libraries/FWlib/src/stm32f10x_can.c **** #include "stm32f10x_can.h"
  24:Libraries/FWlib/src/stm32f10x_can.c **** #include "stm32f10x_rcc.h"
  25:Libraries/FWlib/src/stm32f10x_can.c **** 
  26:Libraries/FWlib/src/stm32f10x_can.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:Libraries/FWlib/src/stm32f10x_can.c ****   * @{
  28:Libraries/FWlib/src/stm32f10x_can.c ****   */
  29:Libraries/FWlib/src/stm32f10x_can.c **** 
  30:Libraries/FWlib/src/stm32f10x_can.c **** /** @defgroup CAN 
  31:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief CAN driver modules
  32:Libraries/FWlib/src/stm32f10x_can.c ****   * @{
  33:Libraries/FWlib/src/stm32f10x_can.c ****   */ 
  34:Libraries/FWlib/src/stm32f10x_can.c **** 
ARM GAS  /tmp/ccVLwjO0.s 			page 2


  35:Libraries/FWlib/src/stm32f10x_can.c **** /** @defgroup CAN_Private_TypesDefinitions
  36:Libraries/FWlib/src/stm32f10x_can.c ****   * @{
  37:Libraries/FWlib/src/stm32f10x_can.c ****   */
  38:Libraries/FWlib/src/stm32f10x_can.c **** 
  39:Libraries/FWlib/src/stm32f10x_can.c **** /**
  40:Libraries/FWlib/src/stm32f10x_can.c ****   * @}
  41:Libraries/FWlib/src/stm32f10x_can.c ****   */
  42:Libraries/FWlib/src/stm32f10x_can.c **** 
  43:Libraries/FWlib/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Defines
  44:Libraries/FWlib/src/stm32f10x_can.c ****   * @{
  45:Libraries/FWlib/src/stm32f10x_can.c ****   */
  46:Libraries/FWlib/src/stm32f10x_can.c **** 
  47:Libraries/FWlib/src/stm32f10x_can.c **** /* CAN Master Control Register bits */
  48:Libraries/FWlib/src/stm32f10x_can.c **** 
  49:Libraries/FWlib/src/stm32f10x_can.c **** #define MCR_DBF      ((uint32_t)0x00010000) /* software master reset */
  50:Libraries/FWlib/src/stm32f10x_can.c **** 
  51:Libraries/FWlib/src/stm32f10x_can.c **** /* CAN Mailbox Transmit Request */
  52:Libraries/FWlib/src/stm32f10x_can.c **** #define TMIDxR_TXRQ  ((uint32_t)0x00000001) /* Transmit mailbox request */
  53:Libraries/FWlib/src/stm32f10x_can.c **** 
  54:Libraries/FWlib/src/stm32f10x_can.c **** /* CAN Filter Master Register bits */
  55:Libraries/FWlib/src/stm32f10x_can.c **** #define FMR_FINIT    ((uint32_t)0x00000001) /* Filter init mode */
  56:Libraries/FWlib/src/stm32f10x_can.c **** 
  57:Libraries/FWlib/src/stm32f10x_can.c **** /* Time out for INAK bit */
  58:Libraries/FWlib/src/stm32f10x_can.c **** #define INAK_TIMEOUT        ((uint32_t)0x0000FFFF)
  59:Libraries/FWlib/src/stm32f10x_can.c **** /* Time out for SLAK bit */
  60:Libraries/FWlib/src/stm32f10x_can.c **** #define SLAK_TIMEOUT        ((uint32_t)0x0000FFFF)
  61:Libraries/FWlib/src/stm32f10x_can.c **** 
  62:Libraries/FWlib/src/stm32f10x_can.c **** 
  63:Libraries/FWlib/src/stm32f10x_can.c **** 
  64:Libraries/FWlib/src/stm32f10x_can.c **** /* Flags in TSR register */
  65:Libraries/FWlib/src/stm32f10x_can.c **** #define CAN_FLAGS_TSR              ((uint32_t)0x08000000) 
  66:Libraries/FWlib/src/stm32f10x_can.c **** /* Flags in RF1R register */
  67:Libraries/FWlib/src/stm32f10x_can.c **** #define CAN_FLAGS_RF1R             ((uint32_t)0x04000000) 
  68:Libraries/FWlib/src/stm32f10x_can.c **** /* Flags in RF0R register */
  69:Libraries/FWlib/src/stm32f10x_can.c **** #define CAN_FLAGS_RF0R             ((uint32_t)0x02000000) 
  70:Libraries/FWlib/src/stm32f10x_can.c **** /* Flags in MSR register */
  71:Libraries/FWlib/src/stm32f10x_can.c **** #define CAN_FLAGS_MSR              ((uint32_t)0x01000000) 
  72:Libraries/FWlib/src/stm32f10x_can.c **** /* Flags in ESR register */
  73:Libraries/FWlib/src/stm32f10x_can.c **** #define CAN_FLAGS_ESR              ((uint32_t)0x00F00000) 
  74:Libraries/FWlib/src/stm32f10x_can.c **** 
  75:Libraries/FWlib/src/stm32f10x_can.c **** /* Mailboxes definition */
  76:Libraries/FWlib/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_0                   ((uint8_t)0x00)
  77:Libraries/FWlib/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_1                   ((uint8_t)0x01)
  78:Libraries/FWlib/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_2                   ((uint8_t)0x02) 
  79:Libraries/FWlib/src/stm32f10x_can.c **** 
  80:Libraries/FWlib/src/stm32f10x_can.c **** 
  81:Libraries/FWlib/src/stm32f10x_can.c **** 
  82:Libraries/FWlib/src/stm32f10x_can.c **** #define CAN_MODE_MASK              ((uint32_t) 0x00000003)
  83:Libraries/FWlib/src/stm32f10x_can.c **** /**
  84:Libraries/FWlib/src/stm32f10x_can.c ****   * @}
  85:Libraries/FWlib/src/stm32f10x_can.c ****   */
  86:Libraries/FWlib/src/stm32f10x_can.c **** 
  87:Libraries/FWlib/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Macros
  88:Libraries/FWlib/src/stm32f10x_can.c ****   * @{
  89:Libraries/FWlib/src/stm32f10x_can.c ****   */
  90:Libraries/FWlib/src/stm32f10x_can.c **** 
  91:Libraries/FWlib/src/stm32f10x_can.c **** /**
ARM GAS  /tmp/ccVLwjO0.s 			page 3


  92:Libraries/FWlib/src/stm32f10x_can.c ****   * @}
  93:Libraries/FWlib/src/stm32f10x_can.c ****   */
  94:Libraries/FWlib/src/stm32f10x_can.c **** 
  95:Libraries/FWlib/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Variables
  96:Libraries/FWlib/src/stm32f10x_can.c ****   * @{
  97:Libraries/FWlib/src/stm32f10x_can.c ****   */
  98:Libraries/FWlib/src/stm32f10x_can.c **** 
  99:Libraries/FWlib/src/stm32f10x_can.c **** /**
 100:Libraries/FWlib/src/stm32f10x_can.c ****   * @}
 101:Libraries/FWlib/src/stm32f10x_can.c ****   */
 102:Libraries/FWlib/src/stm32f10x_can.c **** 
 103:Libraries/FWlib/src/stm32f10x_can.c **** /** @defgroup CAN_Private_FunctionPrototypes
 104:Libraries/FWlib/src/stm32f10x_can.c ****   * @{
 105:Libraries/FWlib/src/stm32f10x_can.c ****   */
 106:Libraries/FWlib/src/stm32f10x_can.c **** 
 107:Libraries/FWlib/src/stm32f10x_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 108:Libraries/FWlib/src/stm32f10x_can.c **** 
 109:Libraries/FWlib/src/stm32f10x_can.c **** /**
 110:Libraries/FWlib/src/stm32f10x_can.c ****   * @}
 111:Libraries/FWlib/src/stm32f10x_can.c ****   */
 112:Libraries/FWlib/src/stm32f10x_can.c **** 
 113:Libraries/FWlib/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Functions
 114:Libraries/FWlib/src/stm32f10x_can.c ****   * @{
 115:Libraries/FWlib/src/stm32f10x_can.c ****   */
 116:Libraries/FWlib/src/stm32f10x_can.c **** 
 117:Libraries/FWlib/src/stm32f10x_can.c **** /**
 118:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 119:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 120:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None.
 121:Libraries/FWlib/src/stm32f10x_can.c ****   */
 122:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 123:Libraries/FWlib/src/stm32f10x_can.c **** {
 124:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 125:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 126:Libraries/FWlib/src/stm32f10x_can.c ****  
 127:Libraries/FWlib/src/stm32f10x_can.c ****   if (CANx == CAN1)
 128:Libraries/FWlib/src/stm32f10x_can.c ****   {
 129:Libraries/FWlib/src/stm32f10x_can.c ****     /* Enable CAN1 reset state */
 130:Libraries/FWlib/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 131:Libraries/FWlib/src/stm32f10x_can.c ****     /* Release CAN1 from reset state */
 132:Libraries/FWlib/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 133:Libraries/FWlib/src/stm32f10x_can.c ****   }
 134:Libraries/FWlib/src/stm32f10x_can.c ****   else
 135:Libraries/FWlib/src/stm32f10x_can.c ****   {  
 136:Libraries/FWlib/src/stm32f10x_can.c ****     /* Enable CAN2 reset state */
 137:Libraries/FWlib/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 138:Libraries/FWlib/src/stm32f10x_can.c ****     /* Release CAN2 from reset state */
 139:Libraries/FWlib/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 140:Libraries/FWlib/src/stm32f10x_can.c ****   }
 141:Libraries/FWlib/src/stm32f10x_can.c **** }
 142:Libraries/FWlib/src/stm32f10x_can.c **** 
 143:Libraries/FWlib/src/stm32f10x_can.c **** /**
 144:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 145:Libraries/FWlib/src/stm32f10x_can.c ****   *         parameters in the CAN_InitStruct.
 146:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:           where x can be 1 or 2 to to select the CAN 
 147:Libraries/FWlib/src/stm32f10x_can.c ****   *                         peripheral.
 148:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that
ARM GAS  /tmp/ccVLwjO0.s 			page 4


 149:Libraries/FWlib/src/stm32f10x_can.c ****   *                         contains the configuration information for the 
 150:Libraries/FWlib/src/stm32f10x_can.c ****   *                         CAN peripheral.
 151:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval Constant indicates initialization succeed which will be 
 152:Libraries/FWlib/src/stm32f10x_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 153:Libraries/FWlib/src/stm32f10x_can.c ****   */
 154:Libraries/FWlib/src/stm32f10x_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 155:Libraries/FWlib/src/stm32f10x_can.c **** {
 156:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 157:Libraries/FWlib/src/stm32f10x_can.c ****   uint32_t wait_ack = 0x00000000;
 158:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 159:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 160:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 161:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 162:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 163:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 164:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 165:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 166:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 167:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 168:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 169:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 170:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 171:Libraries/FWlib/src/stm32f10x_can.c **** 
 172:Libraries/FWlib/src/stm32f10x_can.c ****   /* Exit from sleep mode */
 173:Libraries/FWlib/src/stm32f10x_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 174:Libraries/FWlib/src/stm32f10x_can.c **** 
 175:Libraries/FWlib/src/stm32f10x_can.c ****   /* Request initialisation */
 176:Libraries/FWlib/src/stm32f10x_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 177:Libraries/FWlib/src/stm32f10x_can.c **** 
 178:Libraries/FWlib/src/stm32f10x_can.c ****   /* Wait the acknowledge */
 179:Libraries/FWlib/src/stm32f10x_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 180:Libraries/FWlib/src/stm32f10x_can.c ****   {
 181:Libraries/FWlib/src/stm32f10x_can.c ****     wait_ack++;
 182:Libraries/FWlib/src/stm32f10x_can.c ****   }
 183:Libraries/FWlib/src/stm32f10x_can.c **** 
 184:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check acknowledge */
 185:Libraries/FWlib/src/stm32f10x_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 186:Libraries/FWlib/src/stm32f10x_can.c ****   {
 187:Libraries/FWlib/src/stm32f10x_can.c ****     InitStatus = CAN_InitStatus_Failed;
 188:Libraries/FWlib/src/stm32f10x_can.c ****   }
 189:Libraries/FWlib/src/stm32f10x_can.c ****   else 
 190:Libraries/FWlib/src/stm32f10x_can.c ****   {
 191:Libraries/FWlib/src/stm32f10x_can.c ****     /* Set the time triggered communication mode */
 192:Libraries/FWlib/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 193:Libraries/FWlib/src/stm32f10x_can.c ****     {
 194:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 195:Libraries/FWlib/src/stm32f10x_can.c ****     }
 196:Libraries/FWlib/src/stm32f10x_can.c ****     else
 197:Libraries/FWlib/src/stm32f10x_can.c ****     {
 198:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 199:Libraries/FWlib/src/stm32f10x_can.c ****     }
 200:Libraries/FWlib/src/stm32f10x_can.c **** 
 201:Libraries/FWlib/src/stm32f10x_can.c ****     /* Set the automatic bus-off management */
 202:Libraries/FWlib/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 203:Libraries/FWlib/src/stm32f10x_can.c ****     {
 204:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 205:Libraries/FWlib/src/stm32f10x_can.c ****     }
ARM GAS  /tmp/ccVLwjO0.s 			page 5


 206:Libraries/FWlib/src/stm32f10x_can.c ****     else
 207:Libraries/FWlib/src/stm32f10x_can.c ****     {
 208:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 209:Libraries/FWlib/src/stm32f10x_can.c ****     }
 210:Libraries/FWlib/src/stm32f10x_can.c **** 
 211:Libraries/FWlib/src/stm32f10x_can.c ****     /* Set the automatic wake-up mode */
 212:Libraries/FWlib/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 213:Libraries/FWlib/src/stm32f10x_can.c ****     {
 214:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 215:Libraries/FWlib/src/stm32f10x_can.c ****     }
 216:Libraries/FWlib/src/stm32f10x_can.c ****     else
 217:Libraries/FWlib/src/stm32f10x_can.c ****     {
 218:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 219:Libraries/FWlib/src/stm32f10x_can.c ****     }
 220:Libraries/FWlib/src/stm32f10x_can.c **** 
 221:Libraries/FWlib/src/stm32f10x_can.c ****     /* Set the no automatic retransmission */
 222:Libraries/FWlib/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 223:Libraries/FWlib/src/stm32f10x_can.c ****     {
 224:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_NART;
 225:Libraries/FWlib/src/stm32f10x_can.c ****     }
 226:Libraries/FWlib/src/stm32f10x_can.c ****     else
 227:Libraries/FWlib/src/stm32f10x_can.c ****     {
 228:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 229:Libraries/FWlib/src/stm32f10x_can.c ****     }
 230:Libraries/FWlib/src/stm32f10x_can.c **** 
 231:Libraries/FWlib/src/stm32f10x_can.c ****     /* Set the receive FIFO locked mode */
 232:Libraries/FWlib/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 233:Libraries/FWlib/src/stm32f10x_can.c ****     {
 234:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 235:Libraries/FWlib/src/stm32f10x_can.c ****     }
 236:Libraries/FWlib/src/stm32f10x_can.c ****     else
 237:Libraries/FWlib/src/stm32f10x_can.c ****     {
 238:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 239:Libraries/FWlib/src/stm32f10x_can.c ****     }
 240:Libraries/FWlib/src/stm32f10x_can.c **** 
 241:Libraries/FWlib/src/stm32f10x_can.c ****     /* Set the transmit FIFO priority */
 242:Libraries/FWlib/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 243:Libraries/FWlib/src/stm32f10x_can.c ****     {
 244:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 245:Libraries/FWlib/src/stm32f10x_can.c ****     }
 246:Libraries/FWlib/src/stm32f10x_can.c ****     else
 247:Libraries/FWlib/src/stm32f10x_can.c ****     {
 248:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 249:Libraries/FWlib/src/stm32f10x_can.c ****     }
 250:Libraries/FWlib/src/stm32f10x_can.c **** 
 251:Libraries/FWlib/src/stm32f10x_can.c ****     /* Set the bit timing register */
 252:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 253:Libraries/FWlib/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 254:Libraries/FWlib/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 255:Libraries/FWlib/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 256:Libraries/FWlib/src/stm32f10x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 257:Libraries/FWlib/src/stm32f10x_can.c **** 
 258:Libraries/FWlib/src/stm32f10x_can.c ****     /* Request leave initialisation */
 259:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 260:Libraries/FWlib/src/stm32f10x_can.c **** 
 261:Libraries/FWlib/src/stm32f10x_can.c ****    /* Wait the acknowledge */
 262:Libraries/FWlib/src/stm32f10x_can.c ****    wait_ack = 0;
ARM GAS  /tmp/ccVLwjO0.s 			page 6


 263:Libraries/FWlib/src/stm32f10x_can.c **** 
 264:Libraries/FWlib/src/stm32f10x_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 265:Libraries/FWlib/src/stm32f10x_can.c ****    {
 266:Libraries/FWlib/src/stm32f10x_can.c ****      wait_ack++;
 267:Libraries/FWlib/src/stm32f10x_can.c ****    }
 268:Libraries/FWlib/src/stm32f10x_can.c **** 
 269:Libraries/FWlib/src/stm32f10x_can.c ****     /* ...and check acknowledged */
 270:Libraries/FWlib/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 271:Libraries/FWlib/src/stm32f10x_can.c ****     {
 272:Libraries/FWlib/src/stm32f10x_can.c ****       InitStatus = CAN_InitStatus_Failed;
 273:Libraries/FWlib/src/stm32f10x_can.c ****     }
 274:Libraries/FWlib/src/stm32f10x_can.c ****     else
 275:Libraries/FWlib/src/stm32f10x_can.c ****     {
 276:Libraries/FWlib/src/stm32f10x_can.c ****       InitStatus = CAN_InitStatus_Success ;
 277:Libraries/FWlib/src/stm32f10x_can.c ****     }
 278:Libraries/FWlib/src/stm32f10x_can.c ****   }
 279:Libraries/FWlib/src/stm32f10x_can.c **** 
 280:Libraries/FWlib/src/stm32f10x_can.c ****   /* At this step, return the status of initialization */
 281:Libraries/FWlib/src/stm32f10x_can.c ****   return InitStatus;
 282:Libraries/FWlib/src/stm32f10x_can.c **** }
 283:Libraries/FWlib/src/stm32f10x_can.c **** 
 284:Libraries/FWlib/src/stm32f10x_can.c **** /**
 285:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 286:Libraries/FWlib/src/stm32f10x_can.c ****   *         parameters in the CAN_FilterInitStruct.
 287:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef
 288:Libraries/FWlib/src/stm32f10x_can.c ****   *                               structure that contains the configuration 
 289:Libraries/FWlib/src/stm32f10x_can.c ****   *                               information.
 290:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None.
 291:Libraries/FWlib/src/stm32f10x_can.c ****   */
 292:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 293:Libraries/FWlib/src/stm32f10x_can.c **** {
 294:Libraries/FWlib/src/stm32f10x_can.c ****   uint32_t filter_number_bit_pos = 0;
 295:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 296:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 297:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 298:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 299:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 300:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 301:Libraries/FWlib/src/stm32f10x_can.c **** 
 302:Libraries/FWlib/src/stm32f10x_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 303:Libraries/FWlib/src/stm32f10x_can.c **** 
 304:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialisation mode for the filter */
 305:Libraries/FWlib/src/stm32f10x_can.c ****   CAN1->FMR |= FMR_FINIT;
 306:Libraries/FWlib/src/stm32f10x_can.c **** 
 307:Libraries/FWlib/src/stm32f10x_can.c ****   /* Filter Deactivation */
 308:Libraries/FWlib/src/stm32f10x_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 309:Libraries/FWlib/src/stm32f10x_can.c **** 
 310:Libraries/FWlib/src/stm32f10x_can.c ****   /* Filter Scale */
 311:Libraries/FWlib/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 312:Libraries/FWlib/src/stm32f10x_can.c ****   {
 313:Libraries/FWlib/src/stm32f10x_can.c ****     /* 16-bit scale for the filter */
 314:Libraries/FWlib/src/stm32f10x_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 315:Libraries/FWlib/src/stm32f10x_can.c **** 
 316:Libraries/FWlib/src/stm32f10x_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 317:Libraries/FWlib/src/stm32f10x_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 318:Libraries/FWlib/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 319:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
ARM GAS  /tmp/ccVLwjO0.s 			page 7


 320:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 321:Libraries/FWlib/src/stm32f10x_can.c **** 
 322:Libraries/FWlib/src/stm32f10x_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 323:Libraries/FWlib/src/stm32f10x_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 324:Libraries/FWlib/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 325:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 326:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 327:Libraries/FWlib/src/stm32f10x_can.c ****   }
 328:Libraries/FWlib/src/stm32f10x_can.c **** 
 329:Libraries/FWlib/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 330:Libraries/FWlib/src/stm32f10x_can.c ****   {
 331:Libraries/FWlib/src/stm32f10x_can.c ****     /* 32-bit scale for the filter */
 332:Libraries/FWlib/src/stm32f10x_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 333:Libraries/FWlib/src/stm32f10x_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 334:Libraries/FWlib/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 335:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 336:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 337:Libraries/FWlib/src/stm32f10x_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 338:Libraries/FWlib/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 339:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 340:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 341:Libraries/FWlib/src/stm32f10x_can.c ****   }
 342:Libraries/FWlib/src/stm32f10x_can.c **** 
 343:Libraries/FWlib/src/stm32f10x_can.c ****   /* Filter Mode */
 344:Libraries/FWlib/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 345:Libraries/FWlib/src/stm32f10x_can.c ****   {
 346:Libraries/FWlib/src/stm32f10x_can.c ****     /*Id/Mask mode for the filter*/
 347:Libraries/FWlib/src/stm32f10x_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 348:Libraries/FWlib/src/stm32f10x_can.c ****   }
 349:Libraries/FWlib/src/stm32f10x_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 350:Libraries/FWlib/src/stm32f10x_can.c ****   {
 351:Libraries/FWlib/src/stm32f10x_can.c ****     /*Identifier list mode for the filter*/
 352:Libraries/FWlib/src/stm32f10x_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 353:Libraries/FWlib/src/stm32f10x_can.c ****   }
 354:Libraries/FWlib/src/stm32f10x_can.c **** 
 355:Libraries/FWlib/src/stm32f10x_can.c ****   /* Filter FIFO assignment */
 356:Libraries/FWlib/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 357:Libraries/FWlib/src/stm32f10x_can.c ****   {
 358:Libraries/FWlib/src/stm32f10x_can.c ****     /* FIFO 0 assignation for the filter */
 359:Libraries/FWlib/src/stm32f10x_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 360:Libraries/FWlib/src/stm32f10x_can.c ****   }
 361:Libraries/FWlib/src/stm32f10x_can.c **** 
 362:Libraries/FWlib/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 363:Libraries/FWlib/src/stm32f10x_can.c ****   {
 364:Libraries/FWlib/src/stm32f10x_can.c ****     /* FIFO 1 assignation for the filter */
 365:Libraries/FWlib/src/stm32f10x_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 366:Libraries/FWlib/src/stm32f10x_can.c ****   }
 367:Libraries/FWlib/src/stm32f10x_can.c ****   
 368:Libraries/FWlib/src/stm32f10x_can.c ****   /* Filter activation */
 369:Libraries/FWlib/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 370:Libraries/FWlib/src/stm32f10x_can.c ****   {
 371:Libraries/FWlib/src/stm32f10x_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 372:Libraries/FWlib/src/stm32f10x_can.c ****   }
 373:Libraries/FWlib/src/stm32f10x_can.c **** 
 374:Libraries/FWlib/src/stm32f10x_can.c ****   /* Leave the initialisation mode for the filter */
 375:Libraries/FWlib/src/stm32f10x_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 376:Libraries/FWlib/src/stm32f10x_can.c **** }
ARM GAS  /tmp/ccVLwjO0.s 			page 8


 377:Libraries/FWlib/src/stm32f10x_can.c **** 
 378:Libraries/FWlib/src/stm32f10x_can.c **** /**
 379:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 380:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which
 381:Libraries/FWlib/src/stm32f10x_can.c ****   *                         will be initialized.
 382:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None.
 383:Libraries/FWlib/src/stm32f10x_can.c ****   */
 384:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 385:Libraries/FWlib/src/stm32f10x_can.c **** {
 386:Libraries/FWlib/src/stm32f10x_can.c ****   /* Reset CAN init structure parameters values */
 387:Libraries/FWlib/src/stm32f10x_can.c ****   
 388:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialize the time triggered communication mode */
 389:Libraries/FWlib/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 390:Libraries/FWlib/src/stm32f10x_can.c ****   
 391:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialize the automatic bus-off management */
 392:Libraries/FWlib/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 393:Libraries/FWlib/src/stm32f10x_can.c ****   
 394:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialize the automatic wake-up mode */
 395:Libraries/FWlib/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 396:Libraries/FWlib/src/stm32f10x_can.c ****   
 397:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialize the no automatic retransmission */
 398:Libraries/FWlib/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 399:Libraries/FWlib/src/stm32f10x_can.c ****   
 400:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialize the receive FIFO locked mode */
 401:Libraries/FWlib/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 402:Libraries/FWlib/src/stm32f10x_can.c ****   
 403:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialize the transmit FIFO priority */
 404:Libraries/FWlib/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 405:Libraries/FWlib/src/stm32f10x_can.c ****   
 406:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialize the CAN_Mode member */
 407:Libraries/FWlib/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 408:Libraries/FWlib/src/stm32f10x_can.c ****   
 409:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialize the CAN_SJW member */
 410:Libraries/FWlib/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 411:Libraries/FWlib/src/stm32f10x_can.c ****   
 412:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialize the CAN_BS1 member */
 413:Libraries/FWlib/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 414:Libraries/FWlib/src/stm32f10x_can.c ****   
 415:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialize the CAN_BS2 member */
 416:Libraries/FWlib/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 417:Libraries/FWlib/src/stm32f10x_can.c ****   
 418:Libraries/FWlib/src/stm32f10x_can.c ****   /* Initialize the CAN_Prescaler member */
 419:Libraries/FWlib/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 420:Libraries/FWlib/src/stm32f10x_can.c **** }
 421:Libraries/FWlib/src/stm32f10x_can.c **** 
 422:Libraries/FWlib/src/stm32f10x_can.c **** /**
 423:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Select the start bank filter for slave CAN.
 424:Libraries/FWlib/src/stm32f10x_can.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 425:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 426:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None.
 427:Libraries/FWlib/src/stm32f10x_can.c ****   */
 428:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 429:Libraries/FWlib/src/stm32f10x_can.c **** {
 430:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 431:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 432:Libraries/FWlib/src/stm32f10x_can.c ****   
 433:Libraries/FWlib/src/stm32f10x_can.c ****   /* Enter Initialisation mode for the filter */
ARM GAS  /tmp/ccVLwjO0.s 			page 9


 434:Libraries/FWlib/src/stm32f10x_can.c ****   CAN1->FMR |= FMR_FINIT;
 435:Libraries/FWlib/src/stm32f10x_can.c ****   
 436:Libraries/FWlib/src/stm32f10x_can.c ****   /* Select the start slave bank */
 437:Libraries/FWlib/src/stm32f10x_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 438:Libraries/FWlib/src/stm32f10x_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 439:Libraries/FWlib/src/stm32f10x_can.c ****   
 440:Libraries/FWlib/src/stm32f10x_can.c ****   /* Leave Initialisation mode for the filter */
 441:Libraries/FWlib/src/stm32f10x_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 442:Libraries/FWlib/src/stm32f10x_can.c **** }
 443:Libraries/FWlib/src/stm32f10x_can.c **** 
 444:Libraries/FWlib/src/stm32f10x_can.c **** /**
 445:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 446:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
 447:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  NewState: new state of the CAN peripheral. This parameter can 
 448:Libraries/FWlib/src/stm32f10x_can.c ****   *                   be: ENABLE or DISABLE.
 449:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None.
 450:Libraries/FWlib/src/stm32f10x_can.c ****   */
 451:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 452:Libraries/FWlib/src/stm32f10x_can.c **** {
 453:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 454:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 455:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 456:Libraries/FWlib/src/stm32f10x_can.c ****   
 457:Libraries/FWlib/src/stm32f10x_can.c ****   if (NewState != DISABLE)
 458:Libraries/FWlib/src/stm32f10x_can.c ****   {
 459:Libraries/FWlib/src/stm32f10x_can.c ****     /* Enable Debug Freeze  */
 460:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->MCR |= MCR_DBF;
 461:Libraries/FWlib/src/stm32f10x_can.c ****   }
 462:Libraries/FWlib/src/stm32f10x_can.c ****   else
 463:Libraries/FWlib/src/stm32f10x_can.c ****   {
 464:Libraries/FWlib/src/stm32f10x_can.c ****     /* Disable Debug Freeze */
 465:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->MCR &= ~MCR_DBF;
 466:Libraries/FWlib/src/stm32f10x_can.c ****   }
 467:Libraries/FWlib/src/stm32f10x_can.c **** }
 468:Libraries/FWlib/src/stm32f10x_can.c **** 
 469:Libraries/FWlib/src/stm32f10x_can.c **** 
 470:Libraries/FWlib/src/stm32f10x_can.c **** /**
 471:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Enables or disabes the CAN Time TriggerOperation communication mode.
 472:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:      where x can be 1 or 2 to to select the CAN peripheral.
 473:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  NewState : Mode new state , can be one of @ref FunctionalState.
 474:Libraries/FWlib/src/stm32f10x_can.c ****   * @note   when enabled, Time stamp (TIME[15:0]) value is sent in the last 
 475:Libraries/FWlib/src/stm32f10x_can.c ****   *         two data bytes of the 8-byte message: TIME[7:0] in data byte 6 
 476:Libraries/FWlib/src/stm32f10x_can.c ****   *         and TIME[15:8] in data byte 7 
 477:Libraries/FWlib/src/stm32f10x_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 478:Libraries/FWlib/src/stm32f10x_can.c ****   *         sent over the CAN bus.  
 479:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None
 480:Libraries/FWlib/src/stm32f10x_can.c ****   */
 481:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 482:Libraries/FWlib/src/stm32f10x_can.c **** {
 483:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 484:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 485:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:Libraries/FWlib/src/stm32f10x_can.c ****   if (NewState != DISABLE)
 487:Libraries/FWlib/src/stm32f10x_can.c ****   {
 488:Libraries/FWlib/src/stm32f10x_can.c ****     /* Enable the TTCM mode */
 489:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 490:Libraries/FWlib/src/stm32f10x_can.c **** 
ARM GAS  /tmp/ccVLwjO0.s 			page 10


 491:Libraries/FWlib/src/stm32f10x_can.c ****     /* Set TGT bits */
 492:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 493:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 494:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 495:Libraries/FWlib/src/stm32f10x_can.c ****   }
 496:Libraries/FWlib/src/stm32f10x_can.c ****   else
 497:Libraries/FWlib/src/stm32f10x_can.c ****   {
 498:Libraries/FWlib/src/stm32f10x_can.c ****     /* Disable the TTCM mode */
 499:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 500:Libraries/FWlib/src/stm32f10x_can.c **** 
 501:Libraries/FWlib/src/stm32f10x_can.c ****     /* Reset TGT bits */
 502:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 503:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 504:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 505:Libraries/FWlib/src/stm32f10x_can.c ****   }
 506:Libraries/FWlib/src/stm32f10x_can.c **** }
 507:Libraries/FWlib/src/stm32f10x_can.c **** /**
 508:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Initiates the transmission of a message.
 509:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:      where x can be 1 or 2 to to select the CAN peripheral.
 510:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN
 511:Libraries/FWlib/src/stm32f10x_can.c ****   *                    DLC and CAN data.
 512:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval The number of the mailbox that is used for transmission
 513:Libraries/FWlib/src/stm32f10x_can.c ****   *                    or CAN_TxStatus_NoMailBox if there is no empty mailbox.
 514:Libraries/FWlib/src/stm32f10x_can.c ****   */
 515:Libraries/FWlib/src/stm32f10x_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 516:Libraries/FWlib/src/stm32f10x_can.c **** {
 517:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t transmit_mailbox = 0;
 518:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 519:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 520:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 521:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 522:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 523:Libraries/FWlib/src/stm32f10x_can.c **** 
 524:Libraries/FWlib/src/stm32f10x_can.c ****   /* Select one empty transmit mailbox */
 525:Libraries/FWlib/src/stm32f10x_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 526:Libraries/FWlib/src/stm32f10x_can.c ****   {
 527:Libraries/FWlib/src/stm32f10x_can.c ****     transmit_mailbox = 0;
 528:Libraries/FWlib/src/stm32f10x_can.c ****   }
 529:Libraries/FWlib/src/stm32f10x_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 530:Libraries/FWlib/src/stm32f10x_can.c ****   {
 531:Libraries/FWlib/src/stm32f10x_can.c ****     transmit_mailbox = 1;
 532:Libraries/FWlib/src/stm32f10x_can.c ****   }
 533:Libraries/FWlib/src/stm32f10x_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 534:Libraries/FWlib/src/stm32f10x_can.c ****   {
 535:Libraries/FWlib/src/stm32f10x_can.c ****     transmit_mailbox = 2;
 536:Libraries/FWlib/src/stm32f10x_can.c ****   }
 537:Libraries/FWlib/src/stm32f10x_can.c ****   else
 538:Libraries/FWlib/src/stm32f10x_can.c ****   {
 539:Libraries/FWlib/src/stm32f10x_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 540:Libraries/FWlib/src/stm32f10x_can.c ****   }
 541:Libraries/FWlib/src/stm32f10x_can.c **** 
 542:Libraries/FWlib/src/stm32f10x_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 543:Libraries/FWlib/src/stm32f10x_can.c ****   {
 544:Libraries/FWlib/src/stm32f10x_can.c ****     /* Set up the Id */
 545:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 546:Libraries/FWlib/src/stm32f10x_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 547:Libraries/FWlib/src/stm32f10x_can.c ****     {
ARM GAS  /tmp/ccVLwjO0.s 			page 11


 548:Libraries/FWlib/src/stm32f10x_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 549:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 550:Libraries/FWlib/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 551:Libraries/FWlib/src/stm32f10x_can.c ****     }
 552:Libraries/FWlib/src/stm32f10x_can.c ****     else
 553:Libraries/FWlib/src/stm32f10x_can.c ****     {
 554:Libraries/FWlib/src/stm32f10x_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 555:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 556:Libraries/FWlib/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 557:Libraries/FWlib/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 558:Libraries/FWlib/src/stm32f10x_can.c ****     }
 559:Libraries/FWlib/src/stm32f10x_can.c ****     
 560:Libraries/FWlib/src/stm32f10x_can.c ****     /* Set up the DLC */
 561:Libraries/FWlib/src/stm32f10x_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 562:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 563:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 564:Libraries/FWlib/src/stm32f10x_can.c **** 
 565:Libraries/FWlib/src/stm32f10x_can.c ****     /* Set up the data field */
 566:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 567:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 568:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 569:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 570:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 571:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 572:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 573:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 574:Libraries/FWlib/src/stm32f10x_can.c ****     /* Request transmission */
 575:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 576:Libraries/FWlib/src/stm32f10x_can.c ****   }
 577:Libraries/FWlib/src/stm32f10x_can.c ****   return transmit_mailbox;
 578:Libraries/FWlib/src/stm32f10x_can.c **** }
 579:Libraries/FWlib/src/stm32f10x_can.c **** 
 580:Libraries/FWlib/src/stm32f10x_can.c **** /**
 581:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Checks the transmission of a message.
 582:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:            where x can be 1 or 2 to to select the 
 583:Libraries/FWlib/src/stm32f10x_can.c ****   *                          CAN peripheral.
 584:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for 
 585:Libraries/FWlib/src/stm32f10x_can.c ****   *                          transmission.
 586:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, CAN_TxStatus_Failed 
 587:Libraries/FWlib/src/stm32f10x_can.c ****   *         in an other case.
 588:Libraries/FWlib/src/stm32f10x_can.c ****   */
 589:Libraries/FWlib/src/stm32f10x_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 590:Libraries/FWlib/src/stm32f10x_can.c **** {
 591:Libraries/FWlib/src/stm32f10x_can.c ****   uint32_t state = 0;
 592:Libraries/FWlib/src/stm32f10x_can.c **** 
 593:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 594:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 595:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 596:Libraries/FWlib/src/stm32f10x_can.c ****  
 597:Libraries/FWlib/src/stm32f10x_can.c ****   switch (TransmitMailbox)
 598:Libraries/FWlib/src/stm32f10x_can.c ****   {
 599:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_0): 
 600:Libraries/FWlib/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 601:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 602:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): 
 603:Libraries/FWlib/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 604:Libraries/FWlib/src/stm32f10x_can.c ****       break;
ARM GAS  /tmp/ccVLwjO0.s 			page 12


 605:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): 
 606:Libraries/FWlib/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 607:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 608:Libraries/FWlib/src/stm32f10x_can.c ****     default:
 609:Libraries/FWlib/src/stm32f10x_can.c ****       state = CAN_TxStatus_Failed;
 610:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 611:Libraries/FWlib/src/stm32f10x_can.c ****   }
 612:Libraries/FWlib/src/stm32f10x_can.c ****   switch (state)
 613:Libraries/FWlib/src/stm32f10x_can.c ****   {
 614:Libraries/FWlib/src/stm32f10x_can.c ****       /* transmit pending  */
 615:Libraries/FWlib/src/stm32f10x_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 616:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 617:Libraries/FWlib/src/stm32f10x_can.c ****       /* transmit failed  */
 618:Libraries/FWlib/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 619:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 620:Libraries/FWlib/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 621:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 622:Libraries/FWlib/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 623:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 624:Libraries/FWlib/src/stm32f10x_can.c ****       /* transmit succeeded  */
 625:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 626:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 627:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 628:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 629:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 630:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 631:Libraries/FWlib/src/stm32f10x_can.c ****     default: state = CAN_TxStatus_Failed;
 632:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 633:Libraries/FWlib/src/stm32f10x_can.c ****   }
 634:Libraries/FWlib/src/stm32f10x_can.c ****   return (uint8_t) state;
 635:Libraries/FWlib/src/stm32f10x_can.c **** }
 636:Libraries/FWlib/src/stm32f10x_can.c **** 
 637:Libraries/FWlib/src/stm32f10x_can.c **** /**
 638:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Cancels a transmit request.
 639:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral. 
 640:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  Mailbox:  Mailbox number.
 641:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None.
 642:Libraries/FWlib/src/stm32f10x_can.c ****   */
 643:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 644:Libraries/FWlib/src/stm32f10x_can.c **** {
 645:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 646:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 647:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 648:Libraries/FWlib/src/stm32f10x_can.c ****   /* abort transmission */
 649:Libraries/FWlib/src/stm32f10x_can.c ****   switch (Mailbox)
 650:Libraries/FWlib/src/stm32f10x_can.c ****   {
 651:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 652:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 653:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 654:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 655:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 656:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 657:Libraries/FWlib/src/stm32f10x_can.c ****     default:
 658:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 659:Libraries/FWlib/src/stm32f10x_can.c ****   }
 660:Libraries/FWlib/src/stm32f10x_can.c **** }
 661:Libraries/FWlib/src/stm32f10x_can.c **** 
ARM GAS  /tmp/ccVLwjO0.s 			page 13


 662:Libraries/FWlib/src/stm32f10x_can.c **** 
 663:Libraries/FWlib/src/stm32f10x_can.c **** /**
 664:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Receives a message.
 665:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral.
 666:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 667:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  RxMessage:  pointer to a structure receive message which contains 
 668:Libraries/FWlib/src/stm32f10x_can.c ****   *                     CAN Id, CAN DLC, CAN datas and FMI number.
 669:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None.
 670:Libraries/FWlib/src/stm32f10x_can.c ****   */
 671:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 672:Libraries/FWlib/src/stm32f10x_can.c **** {
 673:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 674:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 675:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 676:Libraries/FWlib/src/stm32f10x_can.c ****   /* Get the Id */
 677:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 678:Libraries/FWlib/src/stm32f10x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 679:Libraries/FWlib/src/stm32f10x_can.c ****   {
 680:Libraries/FWlib/src/stm32f10x_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 681:Libraries/FWlib/src/stm32f10x_can.c ****   }
 682:Libraries/FWlib/src/stm32f10x_can.c ****   else
 683:Libraries/FWlib/src/stm32f10x_can.c ****   {
 684:Libraries/FWlib/src/stm32f10x_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 685:Libraries/FWlib/src/stm32f10x_can.c ****   }
 686:Libraries/FWlib/src/stm32f10x_can.c ****   
 687:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 688:Libraries/FWlib/src/stm32f10x_can.c ****   /* Get the DLC */
 689:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 690:Libraries/FWlib/src/stm32f10x_can.c ****   /* Get the FMI */
 691:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 692:Libraries/FWlib/src/stm32f10x_can.c ****   /* Get the data field */
 693:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 694:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 695:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 696:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 697:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 698:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 699:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 700:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 701:Libraries/FWlib/src/stm32f10x_can.c ****   /* Release the FIFO */
 702:Libraries/FWlib/src/stm32f10x_can.c ****   /* Release FIFO0 */
 703:Libraries/FWlib/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 704:Libraries/FWlib/src/stm32f10x_can.c ****   {
 705:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 706:Libraries/FWlib/src/stm32f10x_can.c ****   }
 707:Libraries/FWlib/src/stm32f10x_can.c ****   /* Release FIFO1 */
 708:Libraries/FWlib/src/stm32f10x_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 709:Libraries/FWlib/src/stm32f10x_can.c ****   {
 710:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 711:Libraries/FWlib/src/stm32f10x_can.c ****   }
 712:Libraries/FWlib/src/stm32f10x_can.c **** }
 713:Libraries/FWlib/src/stm32f10x_can.c **** 
 714:Libraries/FWlib/src/stm32f10x_can.c **** /**
 715:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Releases the specified FIFO.
 716:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral. 
 717:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 718:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None.
ARM GAS  /tmp/ccVLwjO0.s 			page 14


 719:Libraries/FWlib/src/stm32f10x_can.c ****   */
 720:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 721:Libraries/FWlib/src/stm32f10x_can.c **** {
 722:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 723:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 724:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 725:Libraries/FWlib/src/stm32f10x_can.c ****   /* Release FIFO0 */
 726:Libraries/FWlib/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 727:Libraries/FWlib/src/stm32f10x_can.c ****   {
 728:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 729:Libraries/FWlib/src/stm32f10x_can.c ****   }
 730:Libraries/FWlib/src/stm32f10x_can.c ****   /* Release FIFO1 */
 731:Libraries/FWlib/src/stm32f10x_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 732:Libraries/FWlib/src/stm32f10x_can.c ****   {
 733:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 734:Libraries/FWlib/src/stm32f10x_can.c ****   }
 735:Libraries/FWlib/src/stm32f10x_can.c **** }
 736:Libraries/FWlib/src/stm32f10x_can.c **** 
 737:Libraries/FWlib/src/stm32f10x_can.c **** /**
 738:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Returns the number of pending messages.
 739:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral.
 740:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 741:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval NbMessage : which is the number of pending message.
 742:Libraries/FWlib/src/stm32f10x_can.c ****   */
 743:Libraries/FWlib/src/stm32f10x_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 744:Libraries/FWlib/src/stm32f10x_can.c **** {
 745:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t message_pending=0;
 746:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 747:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 748:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 749:Libraries/FWlib/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 750:Libraries/FWlib/src/stm32f10x_can.c ****   {
 751:Libraries/FWlib/src/stm32f10x_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 752:Libraries/FWlib/src/stm32f10x_can.c ****   }
 753:Libraries/FWlib/src/stm32f10x_can.c ****   else if (FIFONumber == CAN_FIFO1)
 754:Libraries/FWlib/src/stm32f10x_can.c ****   {
 755:Libraries/FWlib/src/stm32f10x_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 756:Libraries/FWlib/src/stm32f10x_can.c ****   }
 757:Libraries/FWlib/src/stm32f10x_can.c ****   else
 758:Libraries/FWlib/src/stm32f10x_can.c ****   {
 759:Libraries/FWlib/src/stm32f10x_can.c ****     message_pending = 0;
 760:Libraries/FWlib/src/stm32f10x_can.c ****   }
 761:Libraries/FWlib/src/stm32f10x_can.c ****   return message_pending;
 762:Libraries/FWlib/src/stm32f10x_can.c **** }
 763:Libraries/FWlib/src/stm32f10x_can.c **** 
 764:Libraries/FWlib/src/stm32f10x_can.c **** 
 765:Libraries/FWlib/src/stm32f10x_can.c **** /**
 766:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief   Select the CAN Operation mode.
 767:Libraries/FWlib/src/stm32f10x_can.c ****   * @param CAN_OperatingMode : CAN Operating Mode. This parameter can be one 
 768:Libraries/FWlib/src/stm32f10x_can.c ****   *                            of @ref CAN_OperatingMode_TypeDef enumeration.
 769:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval status of the requested mode which can be 
 770:Libraries/FWlib/src/stm32f10x_can.c ****   *         - CAN_ModeStatus_Failed    CAN failed entering the specific mode 
 771:Libraries/FWlib/src/stm32f10x_can.c ****   *         - CAN_ModeStatus_Success   CAN Succeed entering the specific mode 
 772:Libraries/FWlib/src/stm32f10x_can.c **** 
 773:Libraries/FWlib/src/stm32f10x_can.c ****   */
 774:Libraries/FWlib/src/stm32f10x_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
 775:Libraries/FWlib/src/stm32f10x_can.c **** {
ARM GAS  /tmp/ccVLwjO0.s 			page 15


 776:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 777:Libraries/FWlib/src/stm32f10x_can.c ****   
 778:Libraries/FWlib/src/stm32f10x_can.c ****   /* Timeout for INAK or also for SLAK bits*/
 779:Libraries/FWlib/src/stm32f10x_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 780:Libraries/FWlib/src/stm32f10x_can.c **** 
 781:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 782:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 783:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 784:Libraries/FWlib/src/stm32f10x_can.c **** 
 785:Libraries/FWlib/src/stm32f10x_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 786:Libraries/FWlib/src/stm32f10x_can.c ****   {
 787:Libraries/FWlib/src/stm32f10x_can.c ****     /* Request initialisation */
 788:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 789:Libraries/FWlib/src/stm32f10x_can.c **** 
 790:Libraries/FWlib/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 791:Libraries/FWlib/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 792:Libraries/FWlib/src/stm32f10x_can.c ****     {
 793:Libraries/FWlib/src/stm32f10x_can.c ****       timeout--;
 794:Libraries/FWlib/src/stm32f10x_can.c ****     }
 795:Libraries/FWlib/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 796:Libraries/FWlib/src/stm32f10x_can.c ****     {
 797:Libraries/FWlib/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 798:Libraries/FWlib/src/stm32f10x_can.c ****     }
 799:Libraries/FWlib/src/stm32f10x_can.c ****     else
 800:Libraries/FWlib/src/stm32f10x_can.c ****     {
 801:Libraries/FWlib/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 802:Libraries/FWlib/src/stm32f10x_can.c ****     }
 803:Libraries/FWlib/src/stm32f10x_can.c ****   }
 804:Libraries/FWlib/src/stm32f10x_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 805:Libraries/FWlib/src/stm32f10x_can.c ****   {
 806:Libraries/FWlib/src/stm32f10x_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
 807:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 808:Libraries/FWlib/src/stm32f10x_can.c **** 
 809:Libraries/FWlib/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 810:Libraries/FWlib/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 811:Libraries/FWlib/src/stm32f10x_can.c ****     {
 812:Libraries/FWlib/src/stm32f10x_can.c ****       timeout--;
 813:Libraries/FWlib/src/stm32f10x_can.c ****     }
 814:Libraries/FWlib/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 815:Libraries/FWlib/src/stm32f10x_can.c ****     {
 816:Libraries/FWlib/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 817:Libraries/FWlib/src/stm32f10x_can.c ****     }
 818:Libraries/FWlib/src/stm32f10x_can.c ****     else
 819:Libraries/FWlib/src/stm32f10x_can.c ****     {
 820:Libraries/FWlib/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 821:Libraries/FWlib/src/stm32f10x_can.c ****     }
 822:Libraries/FWlib/src/stm32f10x_can.c ****   }
 823:Libraries/FWlib/src/stm32f10x_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 824:Libraries/FWlib/src/stm32f10x_can.c ****   {
 825:Libraries/FWlib/src/stm32f10x_can.c ****     /* Request Sleep mode */
 826:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 827:Libraries/FWlib/src/stm32f10x_can.c **** 
 828:Libraries/FWlib/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 829:Libraries/FWlib/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 830:Libraries/FWlib/src/stm32f10x_can.c ****     {
 831:Libraries/FWlib/src/stm32f10x_can.c ****       timeout--;
 832:Libraries/FWlib/src/stm32f10x_can.c ****     }
ARM GAS  /tmp/ccVLwjO0.s 			page 16


 833:Libraries/FWlib/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 834:Libraries/FWlib/src/stm32f10x_can.c ****     {
 835:Libraries/FWlib/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 836:Libraries/FWlib/src/stm32f10x_can.c ****     }
 837:Libraries/FWlib/src/stm32f10x_can.c ****     else
 838:Libraries/FWlib/src/stm32f10x_can.c ****     {
 839:Libraries/FWlib/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 840:Libraries/FWlib/src/stm32f10x_can.c ****     }
 841:Libraries/FWlib/src/stm32f10x_can.c ****   }
 842:Libraries/FWlib/src/stm32f10x_can.c ****   else
 843:Libraries/FWlib/src/stm32f10x_can.c ****   {
 844:Libraries/FWlib/src/stm32f10x_can.c ****     status = CAN_ModeStatus_Failed;
 845:Libraries/FWlib/src/stm32f10x_can.c ****   }
 846:Libraries/FWlib/src/stm32f10x_can.c **** 
 847:Libraries/FWlib/src/stm32f10x_can.c ****   return  (uint8_t) status;
 848:Libraries/FWlib/src/stm32f10x_can.c **** }
 849:Libraries/FWlib/src/stm32f10x_can.c **** 
 850:Libraries/FWlib/src/stm32f10x_can.c **** /**
 851:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Enters the low power mode.
 852:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.
 853:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval status: CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed in an 
 854:Libraries/FWlib/src/stm32f10x_can.c ****   *                 other case.
 855:Libraries/FWlib/src/stm32f10x_can.c ****   */
 856:Libraries/FWlib/src/stm32f10x_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
 857:Libraries/FWlib/src/stm32f10x_can.c **** {
 858:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 859:Libraries/FWlib/src/stm32f10x_can.c ****   
 860:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 861:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 862:Libraries/FWlib/src/stm32f10x_can.c ****     
 863:Libraries/FWlib/src/stm32f10x_can.c ****   /* Request Sleep mode */
 864:Libraries/FWlib/src/stm32f10x_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 865:Libraries/FWlib/src/stm32f10x_can.c ****    
 866:Libraries/FWlib/src/stm32f10x_can.c ****   /* Sleep mode status */
 867:Libraries/FWlib/src/stm32f10x_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 868:Libraries/FWlib/src/stm32f10x_can.c ****   {
 869:Libraries/FWlib/src/stm32f10x_can.c ****     /* Sleep mode not entered */
 870:Libraries/FWlib/src/stm32f10x_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 871:Libraries/FWlib/src/stm32f10x_can.c ****   }
 872:Libraries/FWlib/src/stm32f10x_can.c ****   /* return sleep mode status */
 873:Libraries/FWlib/src/stm32f10x_can.c ****    return (uint8_t)sleepstatus;
 874:Libraries/FWlib/src/stm32f10x_can.c **** }
 875:Libraries/FWlib/src/stm32f10x_can.c **** 
 876:Libraries/FWlib/src/stm32f10x_can.c **** /**
 877:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Wakes the CAN up.
 878:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
 879:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval status:  CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed in an 
 880:Libraries/FWlib/src/stm32f10x_can.c ****   *                  other case.
 881:Libraries/FWlib/src/stm32f10x_can.c ****   */
 882:Libraries/FWlib/src/stm32f10x_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
 883:Libraries/FWlib/src/stm32f10x_can.c **** {
 884:Libraries/FWlib/src/stm32f10x_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 885:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 886:Libraries/FWlib/src/stm32f10x_can.c ****   
 887:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 888:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 889:Libraries/FWlib/src/stm32f10x_can.c ****     
ARM GAS  /tmp/ccVLwjO0.s 			page 17


 890:Libraries/FWlib/src/stm32f10x_can.c ****   /* Wake up request */
 891:Libraries/FWlib/src/stm32f10x_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 892:Libraries/FWlib/src/stm32f10x_can.c ****     
 893:Libraries/FWlib/src/stm32f10x_can.c ****   /* Sleep mode status */
 894:Libraries/FWlib/src/stm32f10x_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 895:Libraries/FWlib/src/stm32f10x_can.c ****   {
 896:Libraries/FWlib/src/stm32f10x_can.c ****    wait_slak--;
 897:Libraries/FWlib/src/stm32f10x_can.c ****   }
 898:Libraries/FWlib/src/stm32f10x_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 899:Libraries/FWlib/src/stm32f10x_can.c ****   {
 900:Libraries/FWlib/src/stm32f10x_can.c ****    /* wake up done : Sleep mode exited */
 901:Libraries/FWlib/src/stm32f10x_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 902:Libraries/FWlib/src/stm32f10x_can.c ****   }
 903:Libraries/FWlib/src/stm32f10x_can.c ****   /* return wakeup status */
 904:Libraries/FWlib/src/stm32f10x_can.c ****   return (uint8_t)wakeupstatus;
 905:Libraries/FWlib/src/stm32f10x_can.c **** }
 906:Libraries/FWlib/src/stm32f10x_can.c **** 
 907:Libraries/FWlib/src/stm32f10x_can.c **** 
 908:Libraries/FWlib/src/stm32f10x_can.c **** /**
 909:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Returns the CANx's last error code (LEC).
 910:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:          where x can be 1 or 2 to to select the CAN peripheral.  
 911:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval CAN_ErrorCode: specifies the Error code : 
 912:Libraries/FWlib/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_NoErr            No Error  
 913:Libraries/FWlib/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_StuffErr         Stuff Error
 914:Libraries/FWlib/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_FormErr          Form Error
 915:Libraries/FWlib/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_ACKErr           Acknowledgment Error
 916:Libraries/FWlib/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_BitRecessiveErr  Bit Recessive Error
 917:Libraries/FWlib/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_BitDominantErr   Bit Dominant Error
 918:Libraries/FWlib/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_CRCErr           CRC Error
 919:Libraries/FWlib/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_SoftwareSetErr   Software Set Error  
 920:Libraries/FWlib/src/stm32f10x_can.c ****   */
 921:Libraries/FWlib/src/stm32f10x_can.c ****  
 922:Libraries/FWlib/src/stm32f10x_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
 923:Libraries/FWlib/src/stm32f10x_can.c **** {
 924:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t errorcode=0;
 925:Libraries/FWlib/src/stm32f10x_can.c ****   
 926:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 927:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 928:Libraries/FWlib/src/stm32f10x_can.c ****   
 929:Libraries/FWlib/src/stm32f10x_can.c ****   /* Get the error code*/
 930:Libraries/FWlib/src/stm32f10x_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 931:Libraries/FWlib/src/stm32f10x_can.c ****   
 932:Libraries/FWlib/src/stm32f10x_can.c ****   /* Return the error code*/
 933:Libraries/FWlib/src/stm32f10x_can.c ****   return errorcode;
 934:Libraries/FWlib/src/stm32f10x_can.c **** }
 935:Libraries/FWlib/src/stm32f10x_can.c **** /**
 936:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
 937:Libraries/FWlib/src/stm32f10x_can.c ****   * @note   In case of an error during reception, this counter is incremented 
 938:Libraries/FWlib/src/stm32f10x_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
 939:Libraries/FWlib/src/stm32f10x_can.c ****   *         standard. After every successful reception, the counter is 
 940:Libraries/FWlib/src/stm32f10x_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
 941:Libraries/FWlib/src/stm32f10x_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
 942:Libraries/FWlib/src/stm32f10x_can.c ****   *         error passive state.  
 943:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
 944:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval CAN Receive Error Counter. 
 945:Libraries/FWlib/src/stm32f10x_can.c ****   */
 946:Libraries/FWlib/src/stm32f10x_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
ARM GAS  /tmp/ccVLwjO0.s 			page 18


 947:Libraries/FWlib/src/stm32f10x_can.c **** {
 948:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t counter=0;
 949:Libraries/FWlib/src/stm32f10x_can.c ****   
 950:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 951:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 952:Libraries/FWlib/src/stm32f10x_can.c ****   
 953:Libraries/FWlib/src/stm32f10x_can.c ****   /* Get the Receive Error Counter*/
 954:Libraries/FWlib/src/stm32f10x_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 955:Libraries/FWlib/src/stm32f10x_can.c ****   
 956:Libraries/FWlib/src/stm32f10x_can.c ****   /* Return the Receive Error Counter*/
 957:Libraries/FWlib/src/stm32f10x_can.c ****   return counter;
 958:Libraries/FWlib/src/stm32f10x_can.c **** }
 959:Libraries/FWlib/src/stm32f10x_can.c **** 
 960:Libraries/FWlib/src/stm32f10x_can.c **** 
 961:Libraries/FWlib/src/stm32f10x_can.c **** /**
 962:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
 963:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.  
 964:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
 965:Libraries/FWlib/src/stm32f10x_can.c ****   */
 966:Libraries/FWlib/src/stm32f10x_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
 967:Libraries/FWlib/src/stm32f10x_can.c **** {
 968:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t counter=0;
 969:Libraries/FWlib/src/stm32f10x_can.c ****   
 970:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 971:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 972:Libraries/FWlib/src/stm32f10x_can.c ****   
 973:Libraries/FWlib/src/stm32f10x_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
 974:Libraries/FWlib/src/stm32f10x_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 975:Libraries/FWlib/src/stm32f10x_can.c ****   
 976:Libraries/FWlib/src/stm32f10x_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
 977:Libraries/FWlib/src/stm32f10x_can.c ****   return counter;
 978:Libraries/FWlib/src/stm32f10x_can.c **** }
 979:Libraries/FWlib/src/stm32f10x_can.c **** 
 980:Libraries/FWlib/src/stm32f10x_can.c **** 
 981:Libraries/FWlib/src/stm32f10x_can.c **** /**
 982:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
 983:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.
 984:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
 985:Libraries/FWlib/src/stm32f10x_can.c ****   *                 This parameter can be: 
 986:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_TME, 
 987:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_FMP0, 
 988:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_FF0,
 989:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_FOV0, 
 990:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_FMP1, 
 991:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_FF1,
 992:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_FOV1, 
 993:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_EWG, 
 994:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_EPV,
 995:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_LEC, 
 996:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_ERR, 
 997:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_WKU or 
 998:Libraries/FWlib/src/stm32f10x_can.c ****   *                 - CAN_IT_SLK.
 999:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  NewState: new state of the CAN interrupts.
1000:Libraries/FWlib/src/stm32f10x_can.c ****   *                   This parameter can be: ENABLE or DISABLE.
1001:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None.
1002:Libraries/FWlib/src/stm32f10x_can.c ****   */
1003:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
ARM GAS  /tmp/ccVLwjO0.s 			page 19


1004:Libraries/FWlib/src/stm32f10x_can.c **** {
1005:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
1006:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1007:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1008:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1009:Libraries/FWlib/src/stm32f10x_can.c **** 
1010:Libraries/FWlib/src/stm32f10x_can.c ****   if (NewState != DISABLE)
1011:Libraries/FWlib/src/stm32f10x_can.c ****   {
1012:Libraries/FWlib/src/stm32f10x_can.c ****     /* Enable the selected CANx interrupt */
1013:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->IER |= CAN_IT;
1014:Libraries/FWlib/src/stm32f10x_can.c ****   }
1015:Libraries/FWlib/src/stm32f10x_can.c ****   else
1016:Libraries/FWlib/src/stm32f10x_can.c ****   {
1017:Libraries/FWlib/src/stm32f10x_can.c ****     /* Disable the selected CANx interrupt */
1018:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->IER &= ~CAN_IT;
1019:Libraries/FWlib/src/stm32f10x_can.c ****   }
1020:Libraries/FWlib/src/stm32f10x_can.c **** }
1021:Libraries/FWlib/src/stm32f10x_can.c **** /**
1022:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1023:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
1024:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1025:Libraries/FWlib/src/stm32f10x_can.c ****   *                   This parameter can be one of the following flags: 
1026:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_EWG
1027:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_EPV 
1028:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_BOF
1029:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP0
1030:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP1
1031:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP2
1032:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FMP1   
1033:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FF1       
1034:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FOV1   
1035:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FMP0   
1036:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FF0       
1037:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FOV0   
1038:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_WKU 
1039:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_SLAK  
1040:Libraries/FWlib/src/stm32f10x_can.c ****   *                  - CAN_FLAG_LEC       
1041:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1042:Libraries/FWlib/src/stm32f10x_can.c ****   */
1043:Libraries/FWlib/src/stm32f10x_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1044:Libraries/FWlib/src/stm32f10x_can.c **** {
1045:Libraries/FWlib/src/stm32f10x_can.c ****   FlagStatus bitstatus = RESET;
1046:Libraries/FWlib/src/stm32f10x_can.c ****   
1047:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
1048:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1049:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1050:Libraries/FWlib/src/stm32f10x_can.c ****   
1051:Libraries/FWlib/src/stm32f10x_can.c **** 
1052:Libraries/FWlib/src/stm32f10x_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1053:Libraries/FWlib/src/stm32f10x_can.c ****   { 
1054:Libraries/FWlib/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1055:Libraries/FWlib/src/stm32f10x_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1056:Libraries/FWlib/src/stm32f10x_can.c ****     { 
1057:Libraries/FWlib/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1058:Libraries/FWlib/src/stm32f10x_can.c ****       bitstatus = SET;
1059:Libraries/FWlib/src/stm32f10x_can.c ****     }
1060:Libraries/FWlib/src/stm32f10x_can.c ****     else
ARM GAS  /tmp/ccVLwjO0.s 			page 20


1061:Libraries/FWlib/src/stm32f10x_can.c ****     { 
1062:Libraries/FWlib/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1063:Libraries/FWlib/src/stm32f10x_can.c ****       bitstatus = RESET;
1064:Libraries/FWlib/src/stm32f10x_can.c ****     }
1065:Libraries/FWlib/src/stm32f10x_can.c ****   }
1066:Libraries/FWlib/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1067:Libraries/FWlib/src/stm32f10x_can.c ****   { 
1068:Libraries/FWlib/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1069:Libraries/FWlib/src/stm32f10x_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1070:Libraries/FWlib/src/stm32f10x_can.c ****     { 
1071:Libraries/FWlib/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1072:Libraries/FWlib/src/stm32f10x_can.c ****       bitstatus = SET;
1073:Libraries/FWlib/src/stm32f10x_can.c ****     }
1074:Libraries/FWlib/src/stm32f10x_can.c ****     else
1075:Libraries/FWlib/src/stm32f10x_can.c ****     { 
1076:Libraries/FWlib/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1077:Libraries/FWlib/src/stm32f10x_can.c ****       bitstatus = RESET;
1078:Libraries/FWlib/src/stm32f10x_can.c ****     }
1079:Libraries/FWlib/src/stm32f10x_can.c ****   }
1080:Libraries/FWlib/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1081:Libraries/FWlib/src/stm32f10x_can.c ****   { 
1082:Libraries/FWlib/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1083:Libraries/FWlib/src/stm32f10x_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1084:Libraries/FWlib/src/stm32f10x_can.c ****     { 
1085:Libraries/FWlib/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1086:Libraries/FWlib/src/stm32f10x_can.c ****       bitstatus = SET;
1087:Libraries/FWlib/src/stm32f10x_can.c ****     }
1088:Libraries/FWlib/src/stm32f10x_can.c ****     else
1089:Libraries/FWlib/src/stm32f10x_can.c ****     { 
1090:Libraries/FWlib/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1091:Libraries/FWlib/src/stm32f10x_can.c ****       bitstatus = RESET;
1092:Libraries/FWlib/src/stm32f10x_can.c ****     }
1093:Libraries/FWlib/src/stm32f10x_can.c ****   }
1094:Libraries/FWlib/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1095:Libraries/FWlib/src/stm32f10x_can.c ****   { 
1096:Libraries/FWlib/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1097:Libraries/FWlib/src/stm32f10x_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1098:Libraries/FWlib/src/stm32f10x_can.c ****     { 
1099:Libraries/FWlib/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1100:Libraries/FWlib/src/stm32f10x_can.c ****       bitstatus = SET;
1101:Libraries/FWlib/src/stm32f10x_can.c ****     }
1102:Libraries/FWlib/src/stm32f10x_can.c ****     else
1103:Libraries/FWlib/src/stm32f10x_can.c ****     { 
1104:Libraries/FWlib/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1105:Libraries/FWlib/src/stm32f10x_can.c ****       bitstatus = RESET;
1106:Libraries/FWlib/src/stm32f10x_can.c ****     }
1107:Libraries/FWlib/src/stm32f10x_can.c ****   }
1108:Libraries/FWlib/src/stm32f10x_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1109:Libraries/FWlib/src/stm32f10x_can.c ****   { 
1110:Libraries/FWlib/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1111:Libraries/FWlib/src/stm32f10x_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1112:Libraries/FWlib/src/stm32f10x_can.c ****     { 
1113:Libraries/FWlib/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1114:Libraries/FWlib/src/stm32f10x_can.c ****       bitstatus = SET;
1115:Libraries/FWlib/src/stm32f10x_can.c ****     }
1116:Libraries/FWlib/src/stm32f10x_can.c ****     else
1117:Libraries/FWlib/src/stm32f10x_can.c ****     { 
ARM GAS  /tmp/ccVLwjO0.s 			page 21


1118:Libraries/FWlib/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1119:Libraries/FWlib/src/stm32f10x_can.c ****       bitstatus = RESET;
1120:Libraries/FWlib/src/stm32f10x_can.c ****     }
1121:Libraries/FWlib/src/stm32f10x_can.c ****   }
1122:Libraries/FWlib/src/stm32f10x_can.c ****   /* Return the CAN_FLAG status */
1123:Libraries/FWlib/src/stm32f10x_can.c ****   return  bitstatus;
1124:Libraries/FWlib/src/stm32f10x_can.c **** }
1125:Libraries/FWlib/src/stm32f10x_can.c **** 
1126:Libraries/FWlib/src/stm32f10x_can.c **** /**
1127:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Clears the CAN's pending flags.
1128:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
1129:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1130:Libraries/FWlib/src/stm32f10x_can.c ****   *                   This parameter can be one of the following flags: 
1131:Libraries/FWlib/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP0
1132:Libraries/FWlib/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP1
1133:Libraries/FWlib/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP2
1134:Libraries/FWlib/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FF1       
1135:Libraries/FWlib/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FOV1   
1136:Libraries/FWlib/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FF0       
1137:Libraries/FWlib/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FOV0   
1138:Libraries/FWlib/src/stm32f10x_can.c ****   *                    - CAN_FLAG_WKU   
1139:Libraries/FWlib/src/stm32f10x_can.c ****   *                    - CAN_FLAG_SLAK    
1140:Libraries/FWlib/src/stm32f10x_can.c ****   *                    - CAN_FLAG_LEC       
1141:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None.
1142:Libraries/FWlib/src/stm32f10x_can.c ****   */
1143:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1144:Libraries/FWlib/src/stm32f10x_can.c **** {
1145:Libraries/FWlib/src/stm32f10x_can.c ****   uint32_t flagtmp=0;
1146:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
1147:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1148:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1149:Libraries/FWlib/src/stm32f10x_can.c ****   
1150:Libraries/FWlib/src/stm32f10x_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1151:Libraries/FWlib/src/stm32f10x_can.c ****   {
1152:Libraries/FWlib/src/stm32f10x_can.c ****     /* Clear the selected CAN flags */
1153:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->ESR = (uint32_t)RESET;
1154:Libraries/FWlib/src/stm32f10x_can.c ****   }
1155:Libraries/FWlib/src/stm32f10x_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1156:Libraries/FWlib/src/stm32f10x_can.c ****   {
1157:Libraries/FWlib/src/stm32f10x_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1158:Libraries/FWlib/src/stm32f10x_can.c **** 
1159:Libraries/FWlib/src/stm32f10x_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1160:Libraries/FWlib/src/stm32f10x_can.c ****     {
1161:Libraries/FWlib/src/stm32f10x_can.c ****       /* Receive Flags */
1162:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1163:Libraries/FWlib/src/stm32f10x_can.c ****     }
1164:Libraries/FWlib/src/stm32f10x_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1165:Libraries/FWlib/src/stm32f10x_can.c ****     {
1166:Libraries/FWlib/src/stm32f10x_can.c ****       /* Receive Flags */
1167:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1168:Libraries/FWlib/src/stm32f10x_can.c ****     }
1169:Libraries/FWlib/src/stm32f10x_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1170:Libraries/FWlib/src/stm32f10x_can.c ****     {
1171:Libraries/FWlib/src/stm32f10x_can.c ****       /* Transmit Flags */
1172:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
1173:Libraries/FWlib/src/stm32f10x_can.c ****     }
1174:Libraries/FWlib/src/stm32f10x_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
ARM GAS  /tmp/ccVLwjO0.s 			page 22


1175:Libraries/FWlib/src/stm32f10x_can.c ****     {
1176:Libraries/FWlib/src/stm32f10x_can.c ****       /* Operating mode Flags */
1177:Libraries/FWlib/src/stm32f10x_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1178:Libraries/FWlib/src/stm32f10x_can.c ****     }
1179:Libraries/FWlib/src/stm32f10x_can.c ****   }
1180:Libraries/FWlib/src/stm32f10x_can.c **** }
1181:Libraries/FWlib/src/stm32f10x_can.c **** 
1182:Libraries/FWlib/src/stm32f10x_can.c **** /**
1183:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1184:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
1185:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CAN_IT:  specifies the CAN interrupt source to check.
1186:Libraries/FWlib/src/stm32f10x_can.c ****   *                  This parameter can be one of the following flags: 
1187:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_TME               
1188:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_FMP0              
1189:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_FF0               
1190:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_FOV0              
1191:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_FMP1              
1192:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_FF1               
1193:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_FOV1              
1194:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_WKU  
1195:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_SLK  
1196:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_EWG    
1197:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_EPV    
1198:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_BOF    
1199:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_LEC    
1200:Libraries/FWlib/src/stm32f10x_can.c ****   *                 -  CAN_IT_ERR 
1201:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1202:Libraries/FWlib/src/stm32f10x_can.c ****   */
1203:Libraries/FWlib/src/stm32f10x_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1204:Libraries/FWlib/src/stm32f10x_can.c **** {
1205:Libraries/FWlib/src/stm32f10x_can.c ****   ITStatus itstatus = RESET;
1206:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
1207:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1208:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1209:Libraries/FWlib/src/stm32f10x_can.c ****   
1210:Libraries/FWlib/src/stm32f10x_can.c ****   /* check the enable interrupt bit */
1211:Libraries/FWlib/src/stm32f10x_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1212:Libraries/FWlib/src/stm32f10x_can.c ****  {
1213:Libraries/FWlib/src/stm32f10x_can.c ****    /* in case the Interrupt is enabled, .... */
1214:Libraries/FWlib/src/stm32f10x_can.c ****     switch (CAN_IT)
1215:Libraries/FWlib/src/stm32f10x_can.c ****     {
1216:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_TME:
1217:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_TSR_RQCPx bits */
1218:Libraries/FWlib/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1219:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1220:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FMP0:
1221:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FMP0 bit */
1222:Libraries/FWlib/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1223:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1224:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FF0:
1225:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FULL0 bit */
1226:Libraries/FWlib/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1227:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1228:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
1229:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FOVR0 bit */
1230:Libraries/FWlib/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1231:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
ARM GAS  /tmp/ccVLwjO0.s 			page 23


1232:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FMP1:
1233:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FMP1 bit */
1234:Libraries/FWlib/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1235:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1236:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FF1:
1237:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FULL1 bit */
1238:Libraries/FWlib/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1239:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1240:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
1241:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FOVR1 bit */
1242:Libraries/FWlib/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
1243:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1244:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_WKU:
1245:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_MSR_WKUI bit */
1246:Libraries/FWlib/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1247:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1248:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_SLK:
1249:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_MSR_SLAKI bit */
1250:Libraries/FWlib/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1251:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1252:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_EWG:
1253:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_ESR_EWGF bit */
1254:Libraries/FWlib/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1255:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1256:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_EPV:
1257:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_ESR_EPVF bit */
1258:Libraries/FWlib/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1259:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1260:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_BOF:
1261:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_ESR_BOFF bit */
1262:Libraries/FWlib/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1263:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1264:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_LEC:
1265:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_ESR_LEC bit */
1266:Libraries/FWlib/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1267:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1268:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_ERR:
1269:Libraries/FWlib/src/stm32f10x_can.c ****                /* Check CAN_MSR_ERRI bit */ 
1270:Libraries/FWlib/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1271:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1272:Libraries/FWlib/src/stm32f10x_can.c ****       default :
1273:Libraries/FWlib/src/stm32f10x_can.c ****                /* in case of error, return RESET */
1274:Libraries/FWlib/src/stm32f10x_can.c ****               itstatus = RESET;
1275:Libraries/FWlib/src/stm32f10x_can.c ****               break;
1276:Libraries/FWlib/src/stm32f10x_can.c ****     }
1277:Libraries/FWlib/src/stm32f10x_can.c ****   }
1278:Libraries/FWlib/src/stm32f10x_can.c ****   else
1279:Libraries/FWlib/src/stm32f10x_can.c ****   {
1280:Libraries/FWlib/src/stm32f10x_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1281:Libraries/FWlib/src/stm32f10x_can.c ****     itstatus  = RESET;
1282:Libraries/FWlib/src/stm32f10x_can.c ****   }
1283:Libraries/FWlib/src/stm32f10x_can.c ****   
1284:Libraries/FWlib/src/stm32f10x_can.c ****   /* Return the CAN_IT status */
1285:Libraries/FWlib/src/stm32f10x_can.c ****   return  itstatus;
1286:Libraries/FWlib/src/stm32f10x_can.c **** }
1287:Libraries/FWlib/src/stm32f10x_can.c **** 
1288:Libraries/FWlib/src/stm32f10x_can.c **** /**
ARM GAS  /tmp/ccVLwjO0.s 			page 24


1289:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1290:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
1291:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1292:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_TME                     
1293:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_FF0               
1294:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_FOV0                     
1295:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_FF1               
1296:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_FOV1              
1297:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_WKU  
1298:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_SLK  
1299:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_EWG    
1300:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_EPV    
1301:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_BOF    
1302:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_LEC    
1303:Libraries/FWlib/src/stm32f10x_can.c ****   *                  -  CAN_IT_ERR 
1304:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval None.
1305:Libraries/FWlib/src/stm32f10x_can.c ****   */
1306:Libraries/FWlib/src/stm32f10x_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1307:Libraries/FWlib/src/stm32f10x_can.c **** {
1308:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
1309:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1310:Libraries/FWlib/src/stm32f10x_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1311:Libraries/FWlib/src/stm32f10x_can.c **** 
1312:Libraries/FWlib/src/stm32f10x_can.c ****   switch (CAN_IT)
1313:Libraries/FWlib/src/stm32f10x_can.c ****   {
1314:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_TME:
1315:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_TSR_RQCPx (rc_w1)*/
1316:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1317:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1318:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FF0:
1319:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1320:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->RF0R = CAN_RF0R_FULL0; 
1321:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1322:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
1323:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1324:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->RF0R = CAN_RF0R_FOVR0; 
1325:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1326:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FF1:
1327:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1328:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->RF1R = CAN_RF1R_FULL1;  
1329:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1330:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
1331:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1332:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->RF1R = CAN_RF1R_FOVR1; 
1333:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1334:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_WKU:
1335:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_MSR_WKUI (rc_w1)*/
1336:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_WKUI;  
1337:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1338:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_SLK:
1339:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1340:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_SLAKI;   
1341:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1342:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_EWG:
1343:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1344:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI;
1345:Libraries/FWlib/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
ARM GAS  /tmp/ccVLwjO0.s 			page 25


1346:Libraries/FWlib/src/stm32f10x_can.c ****                         of the CAN Bus status*/ 
1347:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1348:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_EPV:
1349:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1350:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1351:Libraries/FWlib/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
1352:Libraries/FWlib/src/stm32f10x_can.c ****                         of the CAN Bus status*/
1353:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1354:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_BOF:
1355:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */ 
1356:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1357:Libraries/FWlib/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
1358:Libraries/FWlib/src/stm32f10x_can.c ****                         of the CAN Bus status*/
1359:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1360:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_LEC:
1361:Libraries/FWlib/src/stm32f10x_can.c ****               /*  Clear LEC bits */
1362:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->ESR = RESET; 
1363:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1364:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1365:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1366:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_ERR:
1367:Libraries/FWlib/src/stm32f10x_can.c ****               /*Clear LEC bits */
1368:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->ESR = RESET; 
1369:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1370:Libraries/FWlib/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1371:Libraries/FWlib/src/stm32f10x_can.c **** 	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
1372:Libraries/FWlib/src/stm32f10x_can.c ****                   of the CAN Bus status*/
1373:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1374:Libraries/FWlib/src/stm32f10x_can.c ****       default :
1375:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
1376:Libraries/FWlib/src/stm32f10x_can.c ****    }
1377:Libraries/FWlib/src/stm32f10x_can.c **** }
1378:Libraries/FWlib/src/stm32f10x_can.c **** 
1379:Libraries/FWlib/src/stm32f10x_can.c **** /**
1380:Libraries/FWlib/src/stm32f10x_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1381:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1382:Libraries/FWlib/src/stm32f10x_can.c ****   * @param  It_Bit:  specifies the interrupt source bit to check.
1383:Libraries/FWlib/src/stm32f10x_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1384:Libraries/FWlib/src/stm32f10x_can.c ****   */
1385:Libraries/FWlib/src/stm32f10x_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1386:Libraries/FWlib/src/stm32f10x_can.c **** {
  25              		.loc 1 1386 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1387:Libraries/FWlib/src/stm32f10x_can.c ****   ITStatus pendingbitstatus = RESET;
1388:Libraries/FWlib/src/stm32f10x_can.c ****   
1389:Libraries/FWlib/src/stm32f10x_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  31              		.loc 1 1389 0
  32 0000 0842     		tst	r0, r1
  33 0002 01D1     		bne	.L4
1390:Libraries/FWlib/src/stm32f10x_can.c ****   {
1391:Libraries/FWlib/src/stm32f10x_can.c ****     /* CAN_IT is set */
1392:Libraries/FWlib/src/stm32f10x_can.c ****     pendingbitstatus = SET;
1393:Libraries/FWlib/src/stm32f10x_can.c ****   }
ARM GAS  /tmp/ccVLwjO0.s 			page 26


1394:Libraries/FWlib/src/stm32f10x_can.c ****   else
1395:Libraries/FWlib/src/stm32f10x_can.c ****   {
1396:Libraries/FWlib/src/stm32f10x_can.c ****     /* CAN_IT is reset */
1397:Libraries/FWlib/src/stm32f10x_can.c ****     pendingbitstatus = RESET;
  34              		.loc 1 1397 0
  35 0004 0020     		movs	r0, #0
  36              	.LVL1:
1398:Libraries/FWlib/src/stm32f10x_can.c ****   }
1399:Libraries/FWlib/src/stm32f10x_can.c ****   return pendingbitstatus;
1400:Libraries/FWlib/src/stm32f10x_can.c **** }
  37              		.loc 1 1400 0
  38 0006 7047     		bx	lr
  39              	.LVL2:
  40              	.L4:
1392:Libraries/FWlib/src/stm32f10x_can.c ****   }
  41              		.loc 1 1392 0
  42 0008 0120     		movs	r0, #1
  43              	.LVL3:
  44 000a 7047     		bx	lr
  45              		.cfi_endproc
  46              	.LFE53:
  48              		.section	.text.CAN_DeInit,"ax",%progbits
  49              		.align	1
  50              		.global	CAN_DeInit
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  54              		.fpu softvfp
  56              	CAN_DeInit:
  57              	.LFB29:
 123:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
  58              		.loc 1 123 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              	.LVL4:
  63 0000 08B5     		push	{r3, lr}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 3, -8
  67              		.cfi_offset 14, -4
 127:Libraries/FWlib/src/stm32f10x_can.c ****   {
  68              		.loc 1 127 0
  69 0002 0C4B     		ldr	r3, .L10
  70 0004 9842     		cmp	r0, r3
  71 0006 0AD0     		beq	.L9
 137:Libraries/FWlib/src/stm32f10x_can.c ****     /* Release CAN2 from reset state */
  72              		.loc 1 137 0
  73 0008 0121     		movs	r1, #1
  74 000a 4FF08060 		mov	r0, #67108864
  75              	.LVL5:
  76 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  77              	.LVL6:
 139:Libraries/FWlib/src/stm32f10x_can.c ****   }
  78              		.loc 1 139 0
  79 0012 0021     		movs	r1, #0
  80 0014 4FF08060 		mov	r0, #67108864
ARM GAS  /tmp/ccVLwjO0.s 			page 27


  81 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  82              	.LVL7:
  83 001c 08BD     		pop	{r3, pc}
  84              	.LVL8:
  85              	.L9:
 130:Libraries/FWlib/src/stm32f10x_can.c ****     /* Release CAN1 from reset state */
  86              		.loc 1 130 0
  87 001e 0121     		movs	r1, #1
  88 0020 4FF00070 		mov	r0, #33554432
  89              	.LVL9:
  90 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  91              	.LVL10:
 132:Libraries/FWlib/src/stm32f10x_can.c ****   }
  92              		.loc 1 132 0
  93 0028 0021     		movs	r1, #0
  94 002a 4FF00070 		mov	r0, #33554432
  95 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  96              	.LVL11:
  97 0032 08BD     		pop	{r3, pc}
  98              	.L11:
  99              		.align	2
 100              	.L10:
 101 0034 00640040 		.word	1073767424
 102              		.cfi_endproc
 103              	.LFE29:
 105              		.section	.text.CAN_Init,"ax",%progbits
 106              		.align	1
 107              		.global	CAN_Init
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 111              		.fpu softvfp
 113              	CAN_Init:
 114              	.LFB30:
 155:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 115              		.loc 1 155 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL12:
 173:Libraries/FWlib/src/stm32f10x_can.c **** 
 121              		.loc 1 173 0
 122 0000 0368     		ldr	r3, [r0]
 123 0002 23F00203 		bic	r3, r3, #2
 124 0006 0360     		str	r3, [r0]
 176:Libraries/FWlib/src/stm32f10x_can.c **** 
 125              		.loc 1 176 0
 126 0008 0368     		ldr	r3, [r0]
 127 000a 43F00103 		orr	r3, r3, #1
 128 000e 0360     		str	r3, [r0]
 157:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 129              		.loc 1 157 0
 130 0010 0023     		movs	r3, #0
 179:Libraries/FWlib/src/stm32f10x_can.c ****   {
 131              		.loc 1 179 0
 132 0012 00E0     		b	.L13
ARM GAS  /tmp/ccVLwjO0.s 			page 28


 133              	.LVL13:
 134              	.L15:
 181:Libraries/FWlib/src/stm32f10x_can.c ****   }
 135              		.loc 1 181 0
 136 0014 0133     		adds	r3, r3, #1
 137              	.LVL14:
 138              	.L13:
 179:Libraries/FWlib/src/stm32f10x_can.c ****   {
 139              		.loc 1 179 0
 140 0016 4268     		ldr	r2, [r0, #4]
 141 0018 12F0010F 		tst	r2, #1
 142 001c 03D1     		bne	.L14
 179:Libraries/FWlib/src/stm32f10x_can.c ****   {
 143              		.loc 1 179 0 is_stmt 0 discriminator 1
 144 001e 4FF6FF72 		movw	r2, #65535
 145 0022 9342     		cmp	r3, r2
 146 0024 F6D1     		bne	.L15
 147              	.L14:
 185:Libraries/FWlib/src/stm32f10x_can.c ****   {
 148              		.loc 1 185 0 is_stmt 1
 149 0026 4368     		ldr	r3, [r0, #4]
 150              	.LVL15:
 151 0028 13F0010F 		tst	r3, #1
 152 002c 6DD0     		beq	.L32
 192:Libraries/FWlib/src/stm32f10x_can.c ****     {
 153              		.loc 1 192 0
 154 002e 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 155 0030 012B     		cmp	r3, #1
 156 0032 3BD0     		beq	.L34
 198:Libraries/FWlib/src/stm32f10x_can.c ****     }
 157              		.loc 1 198 0
 158 0034 0368     		ldr	r3, [r0]
 159 0036 23F08003 		bic	r3, r3, #128
 160 003a 0360     		str	r3, [r0]
 161              	.L18:
 202:Libraries/FWlib/src/stm32f10x_can.c ****     {
 162              		.loc 1 202 0
 163 003c CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 164 003e 012B     		cmp	r3, #1
 165 0040 39D0     		beq	.L35
 208:Libraries/FWlib/src/stm32f10x_can.c ****     }
 166              		.loc 1 208 0
 167 0042 0368     		ldr	r3, [r0]
 168 0044 23F04003 		bic	r3, r3, #64
 169 0048 0360     		str	r3, [r0]
 170              	.L20:
 212:Libraries/FWlib/src/stm32f10x_can.c ****     {
 171              		.loc 1 212 0
 172 004a 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 173 004c 012B     		cmp	r3, #1
 174 004e 37D0     		beq	.L36
 218:Libraries/FWlib/src/stm32f10x_can.c ****     }
 175              		.loc 1 218 0
 176 0050 0368     		ldr	r3, [r0]
 177 0052 23F02003 		bic	r3, r3, #32
 178 0056 0360     		str	r3, [r0]
 179              	.L22:
ARM GAS  /tmp/ccVLwjO0.s 			page 29


 222:Libraries/FWlib/src/stm32f10x_can.c ****     {
 180              		.loc 1 222 0
 181 0058 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 182 005a 012B     		cmp	r3, #1
 183 005c 35D0     		beq	.L37
 228:Libraries/FWlib/src/stm32f10x_can.c ****     }
 184              		.loc 1 228 0
 185 005e 0368     		ldr	r3, [r0]
 186 0060 23F01003 		bic	r3, r3, #16
 187 0064 0360     		str	r3, [r0]
 188              	.L24:
 232:Libraries/FWlib/src/stm32f10x_can.c ****     {
 189              		.loc 1 232 0
 190 0066 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 191 0068 012B     		cmp	r3, #1
 192 006a 33D0     		beq	.L38
 238:Libraries/FWlib/src/stm32f10x_can.c ****     }
 193              		.loc 1 238 0
 194 006c 0368     		ldr	r3, [r0]
 195 006e 23F00803 		bic	r3, r3, #8
 196 0072 0360     		str	r3, [r0]
 197              	.L26:
 242:Libraries/FWlib/src/stm32f10x_can.c ****     {
 198              		.loc 1 242 0
 199 0074 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 200 0076 012B     		cmp	r3, #1
 201 0078 31D0     		beq	.L39
 248:Libraries/FWlib/src/stm32f10x_can.c ****     }
 202              		.loc 1 248 0
 203 007a 0368     		ldr	r3, [r0]
 204 007c 23F00403 		bic	r3, r3, #4
 205 0080 0360     		str	r3, [r0]
 206              	.L28:
 252:Libraries/FWlib/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 207              		.loc 1 252 0
 208 0082 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 253:Libraries/FWlib/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 209              		.loc 1 253 0
 210 0084 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 211 0086 1B06     		lsls	r3, r3, #24
 252:Libraries/FWlib/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 212              		.loc 1 252 0
 213 0088 43EA8273 		orr	r3, r3, r2, lsl #30
 254:Libraries/FWlib/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 214              		.loc 1 254 0
 215 008c 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 253:Libraries/FWlib/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 216              		.loc 1 253 0
 217 008e 43EA0243 		orr	r3, r3, r2, lsl #16
 255:Libraries/FWlib/src/stm32f10x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 218              		.loc 1 255 0
 219 0092 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 254:Libraries/FWlib/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 220              		.loc 1 254 0
 221 0094 43EA0253 		orr	r3, r3, r2, lsl #20
 256:Libraries/FWlib/src/stm32f10x_can.c **** 
 222              		.loc 1 256 0
ARM GAS  /tmp/ccVLwjO0.s 			page 30


 223 0098 0A88     		ldrh	r2, [r1]
 224 009a 013A     		subs	r2, r2, #1
 255:Libraries/FWlib/src/stm32f10x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 225              		.loc 1 255 0
 226 009c 1343     		orrs	r3, r3, r2
 252:Libraries/FWlib/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 227              		.loc 1 252 0
 228 009e C361     		str	r3, [r0, #28]
 259:Libraries/FWlib/src/stm32f10x_can.c **** 
 229              		.loc 1 259 0
 230 00a0 0368     		ldr	r3, [r0]
 231 00a2 23F00103 		bic	r3, r3, #1
 232 00a6 0360     		str	r3, [r0]
 233              	.LVL16:
 262:Libraries/FWlib/src/stm32f10x_can.c **** 
 234              		.loc 1 262 0
 235 00a8 0023     		movs	r3, #0
 264:Libraries/FWlib/src/stm32f10x_can.c ****    {
 236              		.loc 1 264 0
 237 00aa 1EE0     		b	.L29
 238              	.LVL17:
 239              	.L34:
 194:Libraries/FWlib/src/stm32f10x_can.c ****     }
 240              		.loc 1 194 0
 241 00ac 0368     		ldr	r3, [r0]
 242 00ae 43F08003 		orr	r3, r3, #128
 243 00b2 0360     		str	r3, [r0]
 244 00b4 C2E7     		b	.L18
 245              	.L35:
 204:Libraries/FWlib/src/stm32f10x_can.c ****     }
 246              		.loc 1 204 0
 247 00b6 0368     		ldr	r3, [r0]
 248 00b8 43F04003 		orr	r3, r3, #64
 249 00bc 0360     		str	r3, [r0]
 250 00be C4E7     		b	.L20
 251              	.L36:
 214:Libraries/FWlib/src/stm32f10x_can.c ****     }
 252              		.loc 1 214 0
 253 00c0 0368     		ldr	r3, [r0]
 254 00c2 43F02003 		orr	r3, r3, #32
 255 00c6 0360     		str	r3, [r0]
 256 00c8 C6E7     		b	.L22
 257              	.L37:
 224:Libraries/FWlib/src/stm32f10x_can.c ****     }
 258              		.loc 1 224 0
 259 00ca 0368     		ldr	r3, [r0]
 260 00cc 43F01003 		orr	r3, r3, #16
 261 00d0 0360     		str	r3, [r0]
 262 00d2 C8E7     		b	.L24
 263              	.L38:
 234:Libraries/FWlib/src/stm32f10x_can.c ****     }
 264              		.loc 1 234 0
 265 00d4 0368     		ldr	r3, [r0]
 266 00d6 43F00803 		orr	r3, r3, #8
 267 00da 0360     		str	r3, [r0]
 268 00dc CAE7     		b	.L26
 269              	.L39:
ARM GAS  /tmp/ccVLwjO0.s 			page 31


 244:Libraries/FWlib/src/stm32f10x_can.c ****     }
 270              		.loc 1 244 0
 271 00de 0368     		ldr	r3, [r0]
 272 00e0 43F00403 		orr	r3, r3, #4
 273 00e4 0360     		str	r3, [r0]
 274 00e6 CCE7     		b	.L28
 275              	.LVL18:
 276              	.L31:
 266:Libraries/FWlib/src/stm32f10x_can.c ****    }
 277              		.loc 1 266 0
 278 00e8 0133     		adds	r3, r3, #1
 279              	.LVL19:
 280              	.L29:
 264:Libraries/FWlib/src/stm32f10x_can.c ****    {
 281              		.loc 1 264 0
 282 00ea 4268     		ldr	r2, [r0, #4]
 283 00ec 12F0010F 		tst	r2, #1
 284 00f0 03D0     		beq	.L30
 264:Libraries/FWlib/src/stm32f10x_can.c ****    {
 285              		.loc 1 264 0 is_stmt 0 discriminator 1
 286 00f2 4FF6FF72 		movw	r2, #65535
 287 00f6 9342     		cmp	r3, r2
 288 00f8 F6D1     		bne	.L31
 289              	.L30:
 270:Libraries/FWlib/src/stm32f10x_can.c ****     {
 290              		.loc 1 270 0 is_stmt 1
 291 00fa 4368     		ldr	r3, [r0, #4]
 292              	.LVL20:
 293 00fc 13F0010F 		tst	r3, #1
 294 0100 01D1     		bne	.L40
 276:Libraries/FWlib/src/stm32f10x_can.c ****     }
 295              		.loc 1 276 0
 296 0102 0120     		movs	r0, #1
 297              	.LVL21:
 282:Libraries/FWlib/src/stm32f10x_can.c **** 
 298              		.loc 1 282 0
 299 0104 7047     		bx	lr
 300              	.LVL22:
 301              	.L40:
 272:Libraries/FWlib/src/stm32f10x_can.c ****     }
 302              		.loc 1 272 0
 303 0106 0020     		movs	r0, #0
 304              	.LVL23:
 305 0108 7047     		bx	lr
 306              	.LVL24:
 307              	.L32:
 187:Libraries/FWlib/src/stm32f10x_can.c ****   }
 308              		.loc 1 187 0
 309 010a 0020     		movs	r0, #0
 310              	.LVL25:
 311 010c 7047     		bx	lr
 312              		.cfi_endproc
 313              	.LFE30:
 315              		.section	.text.CAN_FilterInit,"ax",%progbits
 316              		.align	1
 317              		.global	CAN_FilterInit
 318              		.syntax unified
ARM GAS  /tmp/ccVLwjO0.s 			page 32


 319              		.thumb
 320              		.thumb_func
 321              		.fpu softvfp
 323              	CAN_FilterInit:
 324              	.LFB31:
 293:Libraries/FWlib/src/stm32f10x_can.c ****   uint32_t filter_number_bit_pos = 0;
 325              		.loc 1 293 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              		@ link register save eliminated.
 330              	.LVL26:
 331 0000 70B4     		push	{r4, r5, r6}
 332              	.LCFI1:
 333              		.cfi_def_cfa_offset 12
 334              		.cfi_offset 4, -12
 335              		.cfi_offset 5, -8
 336              		.cfi_offset 6, -4
 337              	.LVL27:
 302:Libraries/FWlib/src/stm32f10x_can.c **** 
 338              		.loc 1 302 0
 339 0002 837A     		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 340 0004 0122     		movs	r2, #1
 341 0006 02FA03F3 		lsl	r3, r2, r3
 342              	.LVL28:
 305:Libraries/FWlib/src/stm32f10x_can.c **** 
 343              		.loc 1 305 0
 344 000a 3B4A     		ldr	r2, .L53
 345 000c D2F80012 		ldr	r1, [r2, #512]
 346 0010 41F00101 		orr	r1, r1, #1
 347 0014 C2F80012 		str	r1, [r2, #512]
 308:Libraries/FWlib/src/stm32f10x_can.c **** 
 348              		.loc 1 308 0
 349 0018 D2F81C42 		ldr	r4, [r2, #540]
 350 001c D943     		mvns	r1, r3
 351 001e 0C40     		ands	r4, r4, r1
 352 0020 C2F81C42 		str	r4, [r2, #540]
 311:Libraries/FWlib/src/stm32f10x_can.c ****   {
 353              		.loc 1 311 0
 354 0024 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 355 0026 B2B9     		cbnz	r2, .L42
 314:Libraries/FWlib/src/stm32f10x_can.c **** 
 356              		.loc 1 314 0
 357 0028 334A     		ldr	r2, .L53
 358 002a D2F80C42 		ldr	r4, [r2, #524]
 359 002e 0C40     		ands	r4, r4, r1
 360 0030 C2F80C42 		str	r4, [r2, #524]
 318:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 361              		.loc 1 318 0
 362 0034 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 319:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 363              		.loc 1 319 0
 364 0036 C688     		ldrh	r6, [r0, #6]
 320:Libraries/FWlib/src/stm32f10x_can.c **** 
 365              		.loc 1 320 0
 366 0038 4588     		ldrh	r5, [r0, #2]
 319:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
ARM GAS  /tmp/ccVLwjO0.s 			page 33


 367              		.loc 1 319 0
 368 003a 45EA0645 		orr	r5, r5, r6, lsl #16
 318:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 369              		.loc 1 318 0
 370 003e 4834     		adds	r4, r4, #72
 371 0040 42F83450 		str	r5, [r2, r4, lsl #3]
 324:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 372              		.loc 1 324 0
 373 0044 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 325:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 374              		.loc 1 325 0
 375 0046 8688     		ldrh	r6, [r0, #4]
 326:Libraries/FWlib/src/stm32f10x_can.c ****   }
 376              		.loc 1 326 0
 377 0048 0488     		ldrh	r4, [r0]
 325:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 378              		.loc 1 325 0
 379 004a 44EA0644 		orr	r4, r4, r6, lsl #16
 324:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 380              		.loc 1 324 0
 381 004e 4835     		adds	r5, r5, #72
 382 0050 02EBC502 		add	r2, r2, r5, lsl #3
 383 0054 5460     		str	r4, [r2, #4]
 384              	.L42:
 329:Libraries/FWlib/src/stm32f10x_can.c ****   {
 385              		.loc 1 329 0
 386 0056 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 387 0058 012A     		cmp	r2, #1
 388 005a 1FD0     		beq	.L50
 389              	.L43:
 344:Libraries/FWlib/src/stm32f10x_can.c ****   {
 390              		.loc 1 344 0
 391 005c C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 392 005e 002A     		cmp	r2, #0
 393 0060 34D1     		bne	.L44
 347:Libraries/FWlib/src/stm32f10x_can.c ****   }
 394              		.loc 1 347 0
 395 0062 254C     		ldr	r4, .L53
 396 0064 D4F80422 		ldr	r2, [r4, #516]
 397 0068 0A40     		ands	r2, r2, r1
 398 006a C4F80422 		str	r2, [r4, #516]
 399              	.L45:
 356:Libraries/FWlib/src/stm32f10x_can.c ****   {
 400              		.loc 1 356 0
 401 006e 0289     		ldrh	r2, [r0, #8]
 402 0070 2AB9     		cbnz	r2, .L46
 359:Libraries/FWlib/src/stm32f10x_can.c ****   }
 403              		.loc 1 359 0
 404 0072 214A     		ldr	r2, .L53
 405 0074 D2F81442 		ldr	r4, [r2, #532]
 406 0078 2140     		ands	r1, r1, r4
 407 007a C2F81412 		str	r1, [r2, #532]
 408              	.L46:
 362:Libraries/FWlib/src/stm32f10x_can.c ****   {
 409              		.loc 1 362 0
 410 007e 0289     		ldrh	r2, [r0, #8]
 411 0080 012A     		cmp	r2, #1
ARM GAS  /tmp/ccVLwjO0.s 			page 34


 412 0082 2AD0     		beq	.L51
 413              	.L47:
 369:Libraries/FWlib/src/stm32f10x_can.c ****   {
 414              		.loc 1 369 0
 415 0084 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 416 0086 012A     		cmp	r2, #1
 417 0088 2ED0     		beq	.L52
 418              	.LVL29:
 419              	.L48:
 375:Libraries/FWlib/src/stm32f10x_can.c **** }
 420              		.loc 1 375 0
 421 008a 1B4A     		ldr	r2, .L53
 422 008c D2F80032 		ldr	r3, [r2, #512]
 423 0090 23F00103 		bic	r3, r3, #1
 424 0094 C2F80032 		str	r3, [r2, #512]
 376:Libraries/FWlib/src/stm32f10x_can.c **** 
 425              		.loc 1 376 0
 426 0098 70BC     		pop	{r4, r5, r6}
 427              	.LCFI2:
 428              		.cfi_remember_state
 429              		.cfi_restore 6
 430              		.cfi_restore 5
 431              		.cfi_restore 4
 432              		.cfi_def_cfa_offset 0
 433 009a 7047     		bx	lr
 434              	.LVL30:
 435              	.L50:
 436              	.LCFI3:
 437              		.cfi_restore_state
 332:Libraries/FWlib/src/stm32f10x_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 438              		.loc 1 332 0
 439 009c 164A     		ldr	r2, .L53
 440 009e D2F80C42 		ldr	r4, [r2, #524]
 441 00a2 1C43     		orrs	r4, r4, r3
 442 00a4 C2F80C42 		str	r4, [r2, #524]
 334:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 443              		.loc 1 334 0
 444 00a8 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 335:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 445              		.loc 1 335 0
 446 00aa 0688     		ldrh	r6, [r0]
 336:Libraries/FWlib/src/stm32f10x_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 447              		.loc 1 336 0
 448 00ac 4588     		ldrh	r5, [r0, #2]
 335:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 449              		.loc 1 335 0
 450 00ae 45EA0645 		orr	r5, r5, r6, lsl #16
 334:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 451              		.loc 1 334 0
 452 00b2 4834     		adds	r4, r4, #72
 453 00b4 42F83450 		str	r5, [r2, r4, lsl #3]
 338:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 454              		.loc 1 338 0
 455 00b8 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 339:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 456              		.loc 1 339 0
 457 00ba 8688     		ldrh	r6, [r0, #4]
ARM GAS  /tmp/ccVLwjO0.s 			page 35


 340:Libraries/FWlib/src/stm32f10x_can.c ****   }
 458              		.loc 1 340 0
 459 00bc C488     		ldrh	r4, [r0, #6]
 339:Libraries/FWlib/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 460              		.loc 1 339 0
 461 00be 44EA0644 		orr	r4, r4, r6, lsl #16
 338:Libraries/FWlib/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 462              		.loc 1 338 0
 463 00c2 4835     		adds	r5, r5, #72
 464 00c4 02EBC502 		add	r2, r2, r5, lsl #3
 465 00c8 5460     		str	r4, [r2, #4]
 466 00ca C7E7     		b	.L43
 467              	.L44:
 352:Libraries/FWlib/src/stm32f10x_can.c ****   }
 468              		.loc 1 352 0
 469 00cc 0A4C     		ldr	r4, .L53
 470 00ce D4F80422 		ldr	r2, [r4, #516]
 471 00d2 1A43     		orrs	r2, r2, r3
 472 00d4 C4F80422 		str	r2, [r4, #516]
 473 00d8 C9E7     		b	.L45
 474              	.L51:
 365:Libraries/FWlib/src/stm32f10x_can.c ****   }
 475              		.loc 1 365 0
 476 00da 0749     		ldr	r1, .L53
 477 00dc D1F81422 		ldr	r2, [r1, #532]
 478 00e0 1A43     		orrs	r2, r2, r3
 479 00e2 C1F81422 		str	r2, [r1, #532]
 480 00e6 CDE7     		b	.L47
 481              	.L52:
 371:Libraries/FWlib/src/stm32f10x_can.c ****   }
 482              		.loc 1 371 0
 483 00e8 034A     		ldr	r2, .L53
 484 00ea D2F81C12 		ldr	r1, [r2, #540]
 485 00ee 0B43     		orrs	r3, r3, r1
 486              	.LVL31:
 487 00f0 C2F81C32 		str	r3, [r2, #540]
 488 00f4 C9E7     		b	.L48
 489              	.L54:
 490 00f6 00BF     		.align	2
 491              	.L53:
 492 00f8 00640040 		.word	1073767424
 493              		.cfi_endproc
 494              	.LFE31:
 496              		.section	.text.CAN_StructInit,"ax",%progbits
 497              		.align	1
 498              		.global	CAN_StructInit
 499              		.syntax unified
 500              		.thumb
 501              		.thumb_func
 502              		.fpu softvfp
 504              	CAN_StructInit:
 505              	.LFB32:
 385:Libraries/FWlib/src/stm32f10x_can.c ****   /* Reset CAN init structure parameters values */
 506              		.loc 1 385 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccVLwjO0.s 			page 36


 510              		@ link register save eliminated.
 511              	.LVL32:
 389:Libraries/FWlib/src/stm32f10x_can.c ****   
 512              		.loc 1 389 0
 513 0000 0023     		movs	r3, #0
 514 0002 8371     		strb	r3, [r0, #6]
 392:Libraries/FWlib/src/stm32f10x_can.c ****   
 515              		.loc 1 392 0
 516 0004 C371     		strb	r3, [r0, #7]
 395:Libraries/FWlib/src/stm32f10x_can.c ****   
 517              		.loc 1 395 0
 518 0006 0372     		strb	r3, [r0, #8]
 398:Libraries/FWlib/src/stm32f10x_can.c ****   
 519              		.loc 1 398 0
 520 0008 4372     		strb	r3, [r0, #9]
 401:Libraries/FWlib/src/stm32f10x_can.c ****   
 521              		.loc 1 401 0
 522 000a 8372     		strb	r3, [r0, #10]
 404:Libraries/FWlib/src/stm32f10x_can.c ****   
 523              		.loc 1 404 0
 524 000c C372     		strb	r3, [r0, #11]
 407:Libraries/FWlib/src/stm32f10x_can.c ****   
 525              		.loc 1 407 0
 526 000e 8370     		strb	r3, [r0, #2]
 410:Libraries/FWlib/src/stm32f10x_can.c ****   
 527              		.loc 1 410 0
 528 0010 C370     		strb	r3, [r0, #3]
 413:Libraries/FWlib/src/stm32f10x_can.c ****   
 529              		.loc 1 413 0
 530 0012 0323     		movs	r3, #3
 531 0014 0371     		strb	r3, [r0, #4]
 416:Libraries/FWlib/src/stm32f10x_can.c ****   
 532              		.loc 1 416 0
 533 0016 0223     		movs	r3, #2
 534 0018 4371     		strb	r3, [r0, #5]
 419:Libraries/FWlib/src/stm32f10x_can.c **** }
 535              		.loc 1 419 0
 536 001a 0123     		movs	r3, #1
 537 001c 0380     		strh	r3, [r0]	@ movhi
 538 001e 7047     		bx	lr
 539              		.cfi_endproc
 540              	.LFE32:
 542              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 543              		.align	1
 544              		.global	CAN_SlaveStartBank
 545              		.syntax unified
 546              		.thumb
 547              		.thumb_func
 548              		.fpu softvfp
 550              	CAN_SlaveStartBank:
 551              	.LFB33:
 429:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 552              		.loc 1 429 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 556              		@ link register save eliminated.
ARM GAS  /tmp/ccVLwjO0.s 			page 37


 557              	.LVL33:
 434:Libraries/FWlib/src/stm32f10x_can.c ****   
 558              		.loc 1 434 0
 559 0000 0D4B     		ldr	r3, .L57
 560 0002 D3F80022 		ldr	r2, [r3, #512]
 561 0006 42F00102 		orr	r2, r2, #1
 562 000a C3F80022 		str	r2, [r3, #512]
 437:Libraries/FWlib/src/stm32f10x_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 563              		.loc 1 437 0
 564 000e D3F80022 		ldr	r2, [r3, #512]
 565 0012 22F47C52 		bic	r2, r2, #16128
 566 0016 22F00E02 		bic	r2, r2, #14
 567 001a C3F80022 		str	r2, [r3, #512]
 438:Libraries/FWlib/src/stm32f10x_can.c ****   
 568              		.loc 1 438 0
 569 001e D3F80022 		ldr	r2, [r3, #512]
 570 0022 42EA0020 		orr	r0, r2, r0, lsl #8
 571              	.LVL34:
 572 0026 C3F80002 		str	r0, [r3, #512]
 441:Libraries/FWlib/src/stm32f10x_can.c **** }
 573              		.loc 1 441 0
 574 002a D3F80022 		ldr	r2, [r3, #512]
 575 002e 22F00102 		bic	r2, r2, #1
 576 0032 C3F80022 		str	r2, [r3, #512]
 577 0036 7047     		bx	lr
 578              	.L58:
 579              		.align	2
 580              	.L57:
 581 0038 00640040 		.word	1073767424
 582              		.cfi_endproc
 583              	.LFE33:
 585              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 586              		.align	1
 587              		.global	CAN_DBGFreeze
 588              		.syntax unified
 589              		.thumb
 590              		.thumb_func
 591              		.fpu softvfp
 593              	CAN_DBGFreeze:
 594              	.LFB34:
 452:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 595              		.loc 1 452 0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 0
 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599              		@ link register save eliminated.
 600              	.LVL35:
 457:Libraries/FWlib/src/stm32f10x_can.c ****   {
 601              		.loc 1 457 0
 602 0000 21B9     		cbnz	r1, .L62
 465:Libraries/FWlib/src/stm32f10x_can.c ****   }
 603              		.loc 1 465 0
 604 0002 0368     		ldr	r3, [r0]
 605 0004 23F48033 		bic	r3, r3, #65536
 606 0008 0360     		str	r3, [r0]
 607 000a 7047     		bx	lr
 608              	.L62:
ARM GAS  /tmp/ccVLwjO0.s 			page 38


 460:Libraries/FWlib/src/stm32f10x_can.c ****   }
 609              		.loc 1 460 0
 610 000c 0368     		ldr	r3, [r0]
 611 000e 43F48033 		orr	r3, r3, #65536
 612 0012 0360     		str	r3, [r0]
 613 0014 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE34:
 617              		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 618              		.align	1
 619              		.global	CAN_TTComModeCmd
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu softvfp
 625              	CAN_TTComModeCmd:
 626              	.LFB35:
 482:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 627              		.loc 1 482 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 632              	.LVL36:
 486:Libraries/FWlib/src/stm32f10x_can.c ****   {
 633              		.loc 1 486 0
 634 0000 B1B9     		cbnz	r1, .L66
 499:Libraries/FWlib/src/stm32f10x_can.c **** 
 635              		.loc 1 499 0
 636 0002 0368     		ldr	r3, [r0]
 637 0004 23F08003 		bic	r3, r3, #128
 638 0008 0360     		str	r3, [r0]
 502:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 639              		.loc 1 502 0
 640 000a D0F88431 		ldr	r3, [r0, #388]
 641 000e 23F48073 		bic	r3, r3, #256
 642 0012 C0F88431 		str	r3, [r0, #388]
 503:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 643              		.loc 1 503 0
 644 0016 D0F89431 		ldr	r3, [r0, #404]
 645 001a 23F48073 		bic	r3, r3, #256
 646 001e C0F89431 		str	r3, [r0, #404]
 504:Libraries/FWlib/src/stm32f10x_can.c ****   }
 647              		.loc 1 504 0
 648 0022 D0F8A431 		ldr	r3, [r0, #420]
 649 0026 23F48073 		bic	r3, r3, #256
 650 002a C0F8A431 		str	r3, [r0, #420]
 651 002e 7047     		bx	lr
 652              	.L66:
 489:Libraries/FWlib/src/stm32f10x_can.c **** 
 653              		.loc 1 489 0
 654 0030 0368     		ldr	r3, [r0]
 655 0032 43F08003 		orr	r3, r3, #128
 656 0036 0360     		str	r3, [r0]
 492:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 657              		.loc 1 492 0
 658 0038 D0F88431 		ldr	r3, [r0, #388]
ARM GAS  /tmp/ccVLwjO0.s 			page 39


 659 003c 43F48073 		orr	r3, r3, #256
 660 0040 C0F88431 		str	r3, [r0, #388]
 493:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 661              		.loc 1 493 0
 662 0044 D0F89431 		ldr	r3, [r0, #404]
 663 0048 43F48073 		orr	r3, r3, #256
 664 004c C0F89431 		str	r3, [r0, #404]
 494:Libraries/FWlib/src/stm32f10x_can.c ****   }
 665              		.loc 1 494 0
 666 0050 D0F8A431 		ldr	r3, [r0, #420]
 667 0054 43F48073 		orr	r3, r3, #256
 668 0058 C0F8A431 		str	r3, [r0, #420]
 669 005c 7047     		bx	lr
 670              		.cfi_endproc
 671              	.LFE35:
 673              		.section	.text.CAN_Transmit,"ax",%progbits
 674              		.align	1
 675              		.global	CAN_Transmit
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 679              		.fpu softvfp
 681              	CAN_Transmit:
 682              	.LFB36:
 516:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t transmit_mailbox = 0;
 683              		.loc 1 516 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 688              	.LVL37:
 689 0000 0346     		mov	r3, r0
 690              	.LVL38:
 525:Libraries/FWlib/src/stm32f10x_can.c ****   {
 691              		.loc 1 525 0
 692 0002 8268     		ldr	r2, [r0, #8]
 693 0004 12F0806F 		tst	r2, #67108864
 694 0008 09D1     		bne	.L72
 529:Libraries/FWlib/src/stm32f10x_can.c ****   {
 695              		.loc 1 529 0
 696 000a 8268     		ldr	r2, [r0, #8]
 697 000c 12F0006F 		tst	r2, #134217728
 698 0010 4ED1     		bne	.L73
 533:Libraries/FWlib/src/stm32f10x_can.c ****   {
 699              		.loc 1 533 0
 700 0012 8268     		ldr	r2, [r0, #8]
 701 0014 12F0805F 		tst	r2, #268435456
 702 0018 4CD0     		beq	.L74
 535:Libraries/FWlib/src/stm32f10x_can.c ****   }
 703              		.loc 1 535 0
 704 001a 0220     		movs	r0, #2
 705              	.LVL39:
 706 001c 00E0     		b	.L68
 707              	.LVL40:
 708              	.L72:
 527:Libraries/FWlib/src/stm32f10x_can.c ****   }
 709              		.loc 1 527 0
ARM GAS  /tmp/ccVLwjO0.s 			page 40


 710 001e 0020     		movs	r0, #0
 711              	.LVL41:
 712              	.L68:
 542:Libraries/FWlib/src/stm32f10x_can.c ****   {
 713              		.loc 1 542 0
 714 0020 0428     		cmp	r0, #4
 715 0022 44D0     		beq	.L79
 516:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t transmit_mailbox = 0;
 716              		.loc 1 516 0
 717 0024 F0B4     		push	{r4, r5, r6, r7}
 718              	.LCFI4:
 719              		.cfi_def_cfa_offset 16
 720              		.cfi_offset 4, -16
 721              		.cfi_offset 5, -12
 722              		.cfi_offset 6, -8
 723              		.cfi_offset 7, -4
 545:Libraries/FWlib/src/stm32f10x_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 724              		.loc 1 545 0
 725 0026 0546     		mov	r5, r0
 726 0028 00F11802 		add	r2, r0, #24
 727 002c 1201     		lsls	r2, r2, #4
 728 002e 9C58     		ldr	r4, [r3, r2]
 729 0030 04F00104 		and	r4, r4, #1
 730 0034 9C50     		str	r4, [r3, r2]
 546:Libraries/FWlib/src/stm32f10x_can.c ****     {
 731              		.loc 1 546 0
 732 0036 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 733 0038 002A     		cmp	r2, #0
 734 003a 3DD1     		bne	.L70
 549:Libraries/FWlib/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 735              		.loc 1 549 0
 736 003c 00F11802 		add	r2, r0, #24
 737 0040 1201     		lsls	r2, r2, #4
 738 0042 9C58     		ldr	r4, [r3, r2]
 739 0044 0F68     		ldr	r7, [r1]
 550:Libraries/FWlib/src/stm32f10x_can.c ****     }
 740              		.loc 1 550 0
 741 0046 4E7A     		ldrb	r6, [r1, #9]	@ zero_extendqisi2
 549:Libraries/FWlib/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 742              		.loc 1 549 0
 743 0048 46EA4756 		orr	r6, r6, r7, lsl #21
 744 004c 3443     		orrs	r4, r4, r6
 745 004e 9C50     		str	r4, [r3, r2]
 746              	.L71:
 561:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 747              		.loc 1 561 0
 748 0050 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 749 0052 02F00F02 		and	r2, r2, #15
 750 0056 8A72     		strb	r2, [r1, #10]
 562:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 751              		.loc 1 562 0
 752 0058 05F11804 		add	r4, r5, #24
 753 005c 2401     		lsls	r4, r4, #4
 754 005e 1A19     		adds	r2, r3, r4
 755 0060 5668     		ldr	r6, [r2, #4]
 756 0062 26F00F06 		bic	r6, r6, #15
 757 0066 5660     		str	r6, [r2, #4]
ARM GAS  /tmp/ccVLwjO0.s 			page 41


 563:Libraries/FWlib/src/stm32f10x_can.c **** 
 758              		.loc 1 563 0
 759 0068 5668     		ldr	r6, [r2, #4]
 760 006a 8F7A     		ldrb	r7, [r1, #10]	@ zero_extendqisi2
 761 006c 3E43     		orrs	r6, r6, r7
 762 006e 5660     		str	r6, [r2, #4]
 566:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 763              		.loc 1 566 0
 764 0070 8E7B     		ldrb	r6, [r1, #14]	@ zero_extendqisi2
 567:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 765              		.loc 1 567 0
 766 0072 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
 767 0074 1204     		lsls	r2, r2, #16
 566:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 768              		.loc 1 566 0
 769 0076 42EA0662 		orr	r2, r2, r6, lsl #24
 568:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 770              		.loc 1 568 0
 771 007a 0E7B     		ldrb	r6, [r1, #12]	@ zero_extendqisi2
 567:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 772              		.loc 1 567 0
 773 007c 42EA0622 		orr	r2, r2, r6, lsl #8
 569:Libraries/FWlib/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 774              		.loc 1 569 0
 775 0080 CE7A     		ldrb	r6, [r1, #11]	@ zero_extendqisi2
 568:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 776              		.loc 1 568 0
 777 0082 3243     		orrs	r2, r2, r6
 566:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 778              		.loc 1 566 0
 779 0084 03EB0515 		add	r5, r3, r5, lsl #4
 780 0088 C5F88821 		str	r2, [r5, #392]
 570:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 781              		.loc 1 570 0
 782 008c 8E7C     		ldrb	r6, [r1, #18]	@ zero_extendqisi2
 571:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 783              		.loc 1 571 0
 784 008e 4A7C     		ldrb	r2, [r1, #17]	@ zero_extendqisi2
 785 0090 1204     		lsls	r2, r2, #16
 570:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 786              		.loc 1 570 0
 787 0092 42EA0662 		orr	r2, r2, r6, lsl #24
 572:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 788              		.loc 1 572 0
 789 0096 0E7C     		ldrb	r6, [r1, #16]	@ zero_extendqisi2
 571:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 790              		.loc 1 571 0
 791 0098 42EA0622 		orr	r2, r2, r6, lsl #8
 573:Libraries/FWlib/src/stm32f10x_can.c ****     /* Request transmission */
 792              		.loc 1 573 0
 793 009c C97B     		ldrb	r1, [r1, #15]	@ zero_extendqisi2
 794              	.LVL42:
 572:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 795              		.loc 1 572 0
 796 009e 0A43     		orrs	r2, r2, r1
 570:Libraries/FWlib/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 797              		.loc 1 570 0
ARM GAS  /tmp/ccVLwjO0.s 			page 42


 798 00a0 C5F88C21 		str	r2, [r5, #396]
 575:Libraries/FWlib/src/stm32f10x_can.c ****   }
 799              		.loc 1 575 0
 800 00a4 1A59     		ldr	r2, [r3, r4]
 801 00a6 42F00102 		orr	r2, r2, #1
 802 00aa 1A51     		str	r2, [r3, r4]
 578:Libraries/FWlib/src/stm32f10x_can.c **** 
 803              		.loc 1 578 0
 804 00ac F0BC     		pop	{r4, r5, r6, r7}
 805              	.LCFI5:
 806              		.cfi_restore 7
 807              		.cfi_restore 6
 808              		.cfi_restore 5
 809              		.cfi_restore 4
 810              		.cfi_def_cfa_offset 0
 811              	.L79:
 812 00ae 7047     		bx	lr
 813              	.LVL43:
 814              	.L73:
 531:Libraries/FWlib/src/stm32f10x_can.c ****   }
 815              		.loc 1 531 0
 816 00b0 0120     		movs	r0, #1
 817              	.LVL44:
 818 00b2 B5E7     		b	.L68
 819              	.LVL45:
 820              	.L74:
 539:Libraries/FWlib/src/stm32f10x_can.c ****   }
 821              		.loc 1 539 0
 822 00b4 0420     		movs	r0, #4
 823              	.LVL46:
 824 00b6 B3E7     		b	.L68
 825              	.LVL47:
 826              	.L70:
 827              	.LCFI6:
 828              		.cfi_def_cfa_offset 16
 829              		.cfi_offset 4, -16
 830              		.cfi_offset 5, -12
 831              		.cfi_offset 6, -8
 832              		.cfi_offset 7, -4
 555:Libraries/FWlib/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 833              		.loc 1 555 0
 834 00b8 00F11804 		add	r4, r0, #24
 835 00bc 2401     		lsls	r4, r4, #4
 836 00be 1E59     		ldr	r6, [r3, r4]
 837 00c0 4F68     		ldr	r7, [r1, #4]
 838 00c2 42EAC702 		orr	r2, r2, r7, lsl #3
 557:Libraries/FWlib/src/stm32f10x_can.c ****     }
 839              		.loc 1 557 0
 840 00c6 4F7A     		ldrb	r7, [r1, #9]	@ zero_extendqisi2
 556:Libraries/FWlib/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 841              		.loc 1 556 0
 842 00c8 3A43     		orrs	r2, r2, r7
 555:Libraries/FWlib/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 843              		.loc 1 555 0
 844 00ca 3243     		orrs	r2, r2, r6
 845 00cc 1A51     		str	r2, [r3, r4]
 846 00ce BFE7     		b	.L71
ARM GAS  /tmp/ccVLwjO0.s 			page 43


 847              		.cfi_endproc
 848              	.LFE36:
 850              		.section	.text.CAN_TransmitStatus,"ax",%progbits
 851              		.align	1
 852              		.global	CAN_TransmitStatus
 853              		.syntax unified
 854              		.thumb
 855              		.thumb_func
 856              		.fpu softvfp
 858              	CAN_TransmitStatus:
 859              	.LFB37:
 590:Libraries/FWlib/src/stm32f10x_can.c ****   uint32_t state = 0;
 860              		.loc 1 590 0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 0
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 864              		@ link register save eliminated.
 865              	.LVL48:
 597:Libraries/FWlib/src/stm32f10x_can.c ****   {
 866              		.loc 1 597 0
 867 0000 0129     		cmp	r1, #1
 868 0002 19D0     		beq	.L82
 869 0004 19B1     		cbz	r1, .L83
 870 0006 0229     		cmp	r1, #2
 871 0008 1AD0     		beq	.L84
 609:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 872              		.loc 1 609 0
 873 000a 0023     		movs	r3, #0
 874 000c 08E0     		b	.L81
 875              	.L83:
 600:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 876              		.loc 1 600 0
 877 000e 8368     		ldr	r3, [r0, #8]
 878 0010 23F07B43 		bic	r3, r3, #-83886080
 879 0014 23F47F03 		bic	r3, r3, #16711680
 880 0018 23F47F43 		bic	r3, r3, #65280
 881 001c 23F0FC03 		bic	r3, r3, #252
 882              	.LVL49:
 883              	.L81:
 612:Libraries/FWlib/src/stm32f10x_can.c ****   {
 884              		.loc 1 612 0
 885 0020 104A     		ldr	r2, .L95
 886 0022 9342     		cmp	r3, r2
 887 0024 17D0     		beq	.L86
 888 0026 13D9     		bls	.L94
 889 0028 0F4A     		ldr	r2, .L95+4
 890 002a 9342     		cmp	r3, r2
 891 002c 15D0     		beq	.L89
 892 002e 0F4A     		ldr	r2, .L95+8
 893 0030 9342     		cmp	r3, r2
 894 0032 14D1     		bne	.L92
 895              	.LVL50:
 629:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 896              		.loc 1 629 0
 897 0034 0120     		movs	r0, #1
 898              	.LVL51:
 630:Libraries/FWlib/src/stm32f10x_can.c ****     default: state = CAN_TxStatus_Failed;
ARM GAS  /tmp/ccVLwjO0.s 			page 44


 899              		.loc 1 630 0
 900 0036 7047     		bx	lr
 901              	.LVL52:
 902              	.L82:
 603:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 903              		.loc 1 603 0
 904 0038 8268     		ldr	r2, [r0, #8]
 905 003a 0B4B     		ldr	r3, .L95+4
 906 003c 1340     		ands	r3, r3, r2
 907              	.LVL53:
 604:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): 
 908              		.loc 1 604 0
 909 003e EFE7     		b	.L81
 910              	.LVL54:
 911              	.L84:
 606:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 912              		.loc 1 606 0
 913 0040 8368     		ldr	r3, [r0, #8]
 914 0042 23F06F43 		bic	r3, r3, #-285212672
 915 0046 23F47C03 		bic	r3, r3, #16515072
 916 004a 1B0C     		lsrs	r3, r3, #16
 917 004c 1B04     		lsls	r3, r3, #16
 918              	.LVL55:
 607:Libraries/FWlib/src/stm32f10x_can.c ****     default:
 919              		.loc 1 607 0
 920 004e E7E7     		b	.L81
 921              	.L94:
 612:Libraries/FWlib/src/stm32f10x_can.c ****   {
 922              		.loc 1 612 0
 923 0050 2BB9     		cbnz	r3, .L92
 615:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 924              		.loc 1 615 0
 925 0052 0220     		movs	r0, #2
 926              	.LVL56:
 927 0054 7047     		bx	lr
 928              	.LVL57:
 929              	.L86:
 625:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 930              		.loc 1 625 0
 931 0056 0120     		movs	r0, #1
 932              	.LVL58:
 626:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 933              		.loc 1 626 0
 934 0058 7047     		bx	lr
 935              	.LVL59:
 936              	.L89:
 627:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 937              		.loc 1 627 0
 938 005a 0120     		movs	r0, #1
 939              	.LVL60:
 628:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 940              		.loc 1 628 0
 941 005c 7047     		bx	lr
 942              	.LVL61:
 943              	.L92:
 618:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 944              		.loc 1 618 0
ARM GAS  /tmp/ccVLwjO0.s 			page 45


 945 005e 0020     		movs	r0, #0
 946              	.LVL62:
 635:Libraries/FWlib/src/stm32f10x_can.c **** 
 947              		.loc 1 635 0
 948 0060 7047     		bx	lr
 949              	.L96:
 950 0062 00BF     		.align	2
 951              	.L95:
 952 0064 03000004 		.word	67108867
 953 0068 00030008 		.word	134218496
 954 006c 00000310 		.word	268632064
 955              		.cfi_endproc
 956              	.LFE37:
 958              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 959              		.align	1
 960              		.global	CAN_CancelTransmit
 961              		.syntax unified
 962              		.thumb
 963              		.thumb_func
 964              		.fpu softvfp
 966              	CAN_CancelTransmit:
 967              	.LFB38:
 644:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 968              		.loc 1 644 0
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 0
 971              		@ frame_needed = 0, uses_anonymous_args = 0
 972              		@ link register save eliminated.
 973              	.LVL63:
 649:Libraries/FWlib/src/stm32f10x_can.c ****   {
 974              		.loc 1 649 0
 975 0000 0129     		cmp	r1, #1
 976 0002 08D0     		beq	.L99
 977 0004 11B1     		cbz	r1, .L100
 978 0006 0229     		cmp	r1, #2
 979 0008 0AD0     		beq	.L101
 980 000a 7047     		bx	lr
 981              	.L100:
 651:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 982              		.loc 1 651 0
 983 000c 8368     		ldr	r3, [r0, #8]
 984 000e 43F08003 		orr	r3, r3, #128
 985 0012 8360     		str	r3, [r0, #8]
 652:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 986              		.loc 1 652 0
 987 0014 7047     		bx	lr
 988              	.L99:
 653:Libraries/FWlib/src/stm32f10x_can.c ****       break;
 989              		.loc 1 653 0
 990 0016 8368     		ldr	r3, [r0, #8]
 991 0018 43F40043 		orr	r3, r3, #32768
 992 001c 8360     		str	r3, [r0, #8]
 654:Libraries/FWlib/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 993              		.loc 1 654 0
 994 001e 7047     		bx	lr
 995              	.L101:
 655:Libraries/FWlib/src/stm32f10x_can.c ****       break;
ARM GAS  /tmp/ccVLwjO0.s 			page 46


 996              		.loc 1 655 0
 997 0020 8368     		ldr	r3, [r0, #8]
 998 0022 43F40003 		orr	r3, r3, #8388608
 999 0026 8360     		str	r3, [r0, #8]
 1000 0028 7047     		bx	lr
 1001              		.cfi_endproc
 1002              	.LFE38:
 1004              		.section	.text.CAN_Receive,"ax",%progbits
 1005              		.align	1
 1006              		.global	CAN_Receive
 1007              		.syntax unified
 1008              		.thumb
 1009              		.thumb_func
 1010              		.fpu softvfp
 1012              	CAN_Receive:
 1013              	.LFB39:
 672:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 1014              		.loc 1 672 0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 0
 1017              		@ frame_needed = 0, uses_anonymous_args = 0
 1018              		@ link register save eliminated.
 1019              	.LVL64:
 1020 0000 10B4     		push	{r4}
 1021              	.LCFI7:
 1022              		.cfi_def_cfa_offset 4
 1023              		.cfi_offset 4, -4
 677:Libraries/FWlib/src/stm32f10x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1024              		.loc 1 677 0
 1025 0002 01F11B03 		add	r3, r1, #27
 1026 0006 1B01     		lsls	r3, r3, #4
 1027 0008 C358     		ldr	r3, [r0, r3]
 1028 000a 03F00403 		and	r3, r3, #4
 1029 000e 1372     		strb	r3, [r2, #8]
 678:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1030              		.loc 1 678 0
 1031 0010 002B     		cmp	r3, #0
 1032 0012 3BD1     		bne	.L103
 680:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1033              		.loc 1 680 0
 1034 0014 01F11B03 		add	r3, r1, #27
 1035 0018 1B01     		lsls	r3, r3, #4
 1036 001a C358     		ldr	r3, [r0, r3]
 1037 001c 5B0D     		lsrs	r3, r3, #21
 1038 001e 1360     		str	r3, [r2]
 1039              	.L104:
 687:Libraries/FWlib/src/stm32f10x_can.c ****   /* Get the DLC */
 1040              		.loc 1 687 0
 1041 0020 01F11B03 		add	r3, r1, #27
 1042 0024 1B01     		lsls	r3, r3, #4
 1043 0026 C418     		adds	r4, r0, r3
 1044 0028 C358     		ldr	r3, [r0, r3]
 1045 002a 03F00203 		and	r3, r3, #2
 1046 002e 5372     		strb	r3, [r2, #9]
 689:Libraries/FWlib/src/stm32f10x_can.c ****   /* Get the FMI */
 1047              		.loc 1 689 0
 1048 0030 6368     		ldr	r3, [r4, #4]
ARM GAS  /tmp/ccVLwjO0.s 			page 47


 1049 0032 03F00F03 		and	r3, r3, #15
 1050 0036 9372     		strb	r3, [r2, #10]
 691:Libraries/FWlib/src/stm32f10x_can.c ****   /* Get the data field */
 1051              		.loc 1 691 0
 1052 0038 6368     		ldr	r3, [r4, #4]
 1053 003a 1B0A     		lsrs	r3, r3, #8
 1054 003c D374     		strb	r3, [r2, #19]
 693:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1055              		.loc 1 693 0
 1056 003e 00EB0113 		add	r3, r0, r1, lsl #4
 1057 0042 D3F8B841 		ldr	r4, [r3, #440]
 1058 0046 D472     		strb	r4, [r2, #11]
 694:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1059              		.loc 1 694 0
 1060 0048 D3F8B841 		ldr	r4, [r3, #440]
 1061 004c 240A     		lsrs	r4, r4, #8
 1062 004e 1473     		strb	r4, [r2, #12]
 695:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1063              		.loc 1 695 0
 1064 0050 D3F8B841 		ldr	r4, [r3, #440]
 1065 0054 240C     		lsrs	r4, r4, #16
 1066 0056 5473     		strb	r4, [r2, #13]
 696:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1067              		.loc 1 696 0
 1068 0058 D3F8B841 		ldr	r4, [r3, #440]
 1069 005c 240E     		lsrs	r4, r4, #24
 1070 005e 9473     		strb	r4, [r2, #14]
 697:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1071              		.loc 1 697 0
 1072 0060 D3F8BC41 		ldr	r4, [r3, #444]
 1073 0064 D473     		strb	r4, [r2, #15]
 698:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1074              		.loc 1 698 0
 1075 0066 D3F8BC41 		ldr	r4, [r3, #444]
 1076 006a 240A     		lsrs	r4, r4, #8
 1077 006c 1474     		strb	r4, [r2, #16]
 699:Libraries/FWlib/src/stm32f10x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1078              		.loc 1 699 0
 1079 006e D3F8BC41 		ldr	r4, [r3, #444]
 1080 0072 240C     		lsrs	r4, r4, #16
 1081 0074 5474     		strb	r4, [r2, #17]
 700:Libraries/FWlib/src/stm32f10x_can.c ****   /* Release the FIFO */
 1082              		.loc 1 700 0
 1083 0076 D3F8BC31 		ldr	r3, [r3, #444]
 1084 007a 1B0E     		lsrs	r3, r3, #24
 1085 007c 9374     		strb	r3, [r2, #18]
 703:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1086              		.loc 1 703 0
 1087 007e 61B1     		cbz	r1, .L108
 710:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1088              		.loc 1 710 0
 1089 0080 0369     		ldr	r3, [r0, #16]
 1090 0082 43F02003 		orr	r3, r3, #32
 1091 0086 0361     		str	r3, [r0, #16]
 1092              	.L102:
 712:Libraries/FWlib/src/stm32f10x_can.c **** 
 1093              		.loc 1 712 0
ARM GAS  /tmp/ccVLwjO0.s 			page 48


 1094 0088 10BC     		pop	{r4}
 1095              	.LCFI8:
 1096              		.cfi_remember_state
 1097              		.cfi_restore 4
 1098              		.cfi_def_cfa_offset 0
 1099 008a 7047     		bx	lr
 1100              	.L103:
 1101              	.LCFI9:
 1102              		.cfi_restore_state
 684:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1103              		.loc 1 684 0
 1104 008c 01F11B03 		add	r3, r1, #27
 1105 0090 1B01     		lsls	r3, r3, #4
 1106 0092 C358     		ldr	r3, [r0, r3]
 1107 0094 DB08     		lsrs	r3, r3, #3
 1108 0096 5360     		str	r3, [r2, #4]
 1109 0098 C2E7     		b	.L104
 1110              	.L108:
 705:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1111              		.loc 1 705 0
 1112 009a C368     		ldr	r3, [r0, #12]
 1113 009c 43F02003 		orr	r3, r3, #32
 1114 00a0 C360     		str	r3, [r0, #12]
 1115 00a2 F1E7     		b	.L102
 1116              		.cfi_endproc
 1117              	.LFE39:
 1119              		.section	.text.CAN_FIFORelease,"ax",%progbits
 1120              		.align	1
 1121              		.global	CAN_FIFORelease
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu softvfp
 1127              	CAN_FIFORelease:
 1128              	.LFB40:
 721:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 1129              		.loc 1 721 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133              		@ link register save eliminated.
 1134              	.LVL65:
 726:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1135              		.loc 1 726 0
 1136 0000 21B1     		cbz	r1, .L112
 733:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1137              		.loc 1 733 0
 1138 0002 0369     		ldr	r3, [r0, #16]
 1139 0004 43F02003 		orr	r3, r3, #32
 1140 0008 0361     		str	r3, [r0, #16]
 1141 000a 7047     		bx	lr
 1142              	.L112:
 728:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1143              		.loc 1 728 0
 1144 000c C368     		ldr	r3, [r0, #12]
 1145 000e 43F02003 		orr	r3, r3, #32
 1146 0012 C360     		str	r3, [r0, #12]
ARM GAS  /tmp/ccVLwjO0.s 			page 49


 1147 0014 7047     		bx	lr
 1148              		.cfi_endproc
 1149              	.LFE40:
 1151              		.section	.text.CAN_MessagePending,"ax",%progbits
 1152              		.align	1
 1153              		.global	CAN_MessagePending
 1154              		.syntax unified
 1155              		.thumb
 1156              		.thumb_func
 1157              		.fpu softvfp
 1159              	CAN_MessagePending:
 1160              	.LFB41:
 744:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t message_pending=0;
 1161              		.loc 1 744 0
 1162              		.cfi_startproc
 1163              		@ args = 0, pretend = 0, frame = 0
 1164              		@ frame_needed = 0, uses_anonymous_args = 0
 1165              		@ link register save eliminated.
 1166              	.LVL66:
 749:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1167              		.loc 1 749 0
 1168 0000 19B1     		cbz	r1, .L117
 753:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1169              		.loc 1 753 0
 1170 0002 0129     		cmp	r1, #1
 1171 0004 05D0     		beq	.L118
 759:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1172              		.loc 1 759 0
 1173 0006 0020     		movs	r0, #0
 1174              	.LVL67:
 762:Libraries/FWlib/src/stm32f10x_can.c **** 
 1175              		.loc 1 762 0
 1176 0008 7047     		bx	lr
 1177              	.LVL68:
 1178              	.L117:
 751:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1179              		.loc 1 751 0
 1180 000a C068     		ldr	r0, [r0, #12]
 1181              	.LVL69:
 1182 000c 00F00300 		and	r0, r0, #3
 1183              	.LVL70:
 1184 0010 7047     		bx	lr
 1185              	.LVL71:
 1186              	.L118:
 755:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1187              		.loc 1 755 0
 1188 0012 0069     		ldr	r0, [r0, #16]
 1189              	.LVL72:
 1190 0014 00F00300 		and	r0, r0, #3
 1191              	.LVL73:
 1192 0018 7047     		bx	lr
 1193              		.cfi_endproc
 1194              	.LFE41:
 1196              		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1197              		.align	1
 1198              		.global	CAN_OperatingModeRequest
 1199              		.syntax unified
ARM GAS  /tmp/ccVLwjO0.s 			page 50


 1200              		.thumb
 1201              		.thumb_func
 1202              		.fpu softvfp
 1204              	CAN_OperatingModeRequest:
 1205              	.LFB42:
 775:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 1206              		.loc 1 775 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210              		@ link register save eliminated.
 1211              	.LVL74:
 785:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1212              		.loc 1 785 0
 1213 0000 B9B9     		cbnz	r1, .L120
 788:Libraries/FWlib/src/stm32f10x_can.c **** 
 1214              		.loc 1 788 0
 1215 0002 0368     		ldr	r3, [r0]
 1216 0004 23F00303 		bic	r3, r3, #3
 1217 0008 43F00103 		orr	r3, r3, #1
 1218 000c 0360     		str	r3, [r0]
 779:Libraries/FWlib/src/stm32f10x_can.c **** 
 1219              		.loc 1 779 0
 1220 000e 4FF6FF72 		movw	r2, #65535
 791:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1221              		.loc 1 791 0
 1222 0012 00E0     		b	.L121
 1223              	.LVL75:
 1224              	.L123:
 793:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1225              		.loc 1 793 0
 1226 0014 013A     		subs	r2, r2, #1
 1227              	.LVL76:
 1228              	.L121:
 791:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1229              		.loc 1 791 0
 1230 0016 4368     		ldr	r3, [r0, #4]
 1231 0018 03F00303 		and	r3, r3, #3
 1232 001c 012B     		cmp	r3, #1
 1233 001e 01D0     		beq	.L122
 791:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1234              		.loc 1 791 0 is_stmt 0 discriminator 1
 1235 0020 002A     		cmp	r2, #0
 1236 0022 F7D1     		bne	.L123
 1237              	.L122:
 795:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1238              		.loc 1 795 0 is_stmt 1
 1239 0024 4368     		ldr	r3, [r0, #4]
 1240 0026 03F00303 		and	r3, r3, #3
 1241 002a 012B     		cmp	r3, #1
 1242 002c 32D0     		beq	.L132
 797:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1243              		.loc 1 797 0
 1244 002e 0020     		movs	r0, #0
 1245              	.LVL77:
 1246 0030 7047     		bx	lr
 1247              	.LVL78:
ARM GAS  /tmp/ccVLwjO0.s 			page 51


 1248              	.L120:
 804:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1249              		.loc 1 804 0
 1250 0032 0129     		cmp	r1, #1
 1251 0034 03D0     		beq	.L136
 823:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1252              		.loc 1 823 0
 1253 0036 0229     		cmp	r1, #2
 1254 0038 15D0     		beq	.L137
 844:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1255              		.loc 1 844 0
 1256 003a 0020     		movs	r0, #0
 1257              	.LVL79:
 1258 003c 7047     		bx	lr
 1259              	.LVL80:
 1260              	.L136:
 807:Libraries/FWlib/src/stm32f10x_can.c **** 
 1261              		.loc 1 807 0
 1262 003e 0368     		ldr	r3, [r0]
 1263 0040 23F00303 		bic	r3, r3, #3
 1264 0044 0360     		str	r3, [r0]
 779:Libraries/FWlib/src/stm32f10x_can.c **** 
 1265              		.loc 1 779 0
 1266 0046 4FF6FF73 		movw	r3, #65535
 810:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1267              		.loc 1 810 0
 1268 004a 00E0     		b	.L126
 1269              	.LVL81:
 1270              	.L128:
 812:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1271              		.loc 1 812 0
 1272 004c 013B     		subs	r3, r3, #1
 1273              	.LVL82:
 1274              	.L126:
 810:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1275              		.loc 1 810 0
 1276 004e 4268     		ldr	r2, [r0, #4]
 1277 0050 12F0030F 		tst	r2, #3
 1278 0054 01D0     		beq	.L127
 810:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1279              		.loc 1 810 0 is_stmt 0 discriminator 1
 1280 0056 002B     		cmp	r3, #0
 1281 0058 F8D1     		bne	.L128
 1282              	.L127:
 814:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1283              		.loc 1 814 0 is_stmt 1
 1284 005a 4368     		ldr	r3, [r0, #4]
 1285              	.LVL83:
 1286 005c 13F0030F 		tst	r3, #3
 1287 0060 1AD0     		beq	.L133
 816:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1288              		.loc 1 816 0
 1289 0062 0020     		movs	r0, #0
 1290              	.LVL84:
 1291 0064 7047     		bx	lr
 1292              	.LVL85:
 1293              	.L137:
ARM GAS  /tmp/ccVLwjO0.s 			page 52


 826:Libraries/FWlib/src/stm32f10x_can.c **** 
 1294              		.loc 1 826 0
 1295 0066 0368     		ldr	r3, [r0]
 1296 0068 23F00303 		bic	r3, r3, #3
 1297 006c 43F00203 		orr	r3, r3, #2
 1298 0070 0360     		str	r3, [r0]
 779:Libraries/FWlib/src/stm32f10x_can.c **** 
 1299              		.loc 1 779 0
 1300 0072 4FF6FF72 		movw	r2, #65535
 1301              	.LVL86:
 1302              	.L129:
 829:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1303              		.loc 1 829 0
 1304 0076 4368     		ldr	r3, [r0, #4]
 1305 0078 03F00303 		and	r3, r3, #3
 1306 007c 022B     		cmp	r3, #2
 1307 007e 02D0     		beq	.L130
 829:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1308              		.loc 1 829 0 is_stmt 0 discriminator 1
 1309 0080 0AB1     		cbz	r2, .L130
 831:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1310              		.loc 1 831 0 is_stmt 1
 1311 0082 013A     		subs	r2, r2, #1
 1312              	.LVL87:
 1313 0084 F7E7     		b	.L129
 1314              	.L130:
 833:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1315              		.loc 1 833 0
 1316 0086 4368     		ldr	r3, [r0, #4]
 1317 0088 03F00303 		and	r3, r3, #3
 1318 008c 022B     		cmp	r3, #2
 1319 008e 05D0     		beq	.L135
 835:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1320              		.loc 1 835 0
 1321 0090 0020     		movs	r0, #0
 1322              	.LVL88:
 1323 0092 7047     		bx	lr
 1324              	.LVL89:
 1325              	.L132:
 801:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1326              		.loc 1 801 0
 1327 0094 0120     		movs	r0, #1
 1328              	.LVL90:
 1329 0096 7047     		bx	lr
 1330              	.LVL91:
 1331              	.L133:
 820:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1332              		.loc 1 820 0
 1333 0098 0120     		movs	r0, #1
 1334              	.LVL92:
 1335 009a 7047     		bx	lr
 1336              	.LVL93:
 1337              	.L135:
 839:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1338              		.loc 1 839 0
 1339 009c 0120     		movs	r0, #1
 1340              	.LVL94:
ARM GAS  /tmp/ccVLwjO0.s 			page 53


 848:Libraries/FWlib/src/stm32f10x_can.c **** 
 1341              		.loc 1 848 0
 1342 009e 7047     		bx	lr
 1343              		.cfi_endproc
 1344              	.LFE42:
 1346              		.section	.text.CAN_Sleep,"ax",%progbits
 1347              		.align	1
 1348              		.global	CAN_Sleep
 1349              		.syntax unified
 1350              		.thumb
 1351              		.thumb_func
 1352              		.fpu softvfp
 1354              	CAN_Sleep:
 1355              	.LFB43:
 857:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1356              		.loc 1 857 0
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 0
 1359              		@ frame_needed = 0, uses_anonymous_args = 0
 1360              		@ link register save eliminated.
 1361              	.LVL95:
 864:Libraries/FWlib/src/stm32f10x_can.c ****    
 1362              		.loc 1 864 0
 1363 0000 0368     		ldr	r3, [r0]
 1364 0002 23F00303 		bic	r3, r3, #3
 1365 0006 43F00203 		orr	r3, r3, #2
 1366 000a 0360     		str	r3, [r0]
 867:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1367              		.loc 1 867 0
 1368 000c 4368     		ldr	r3, [r0, #4]
 1369 000e 03F00303 		and	r3, r3, #3
 1370 0012 022B     		cmp	r3, #2
 1371 0014 01D0     		beq	.L140
 858:Libraries/FWlib/src/stm32f10x_can.c ****   
 1372              		.loc 1 858 0
 1373 0016 0020     		movs	r0, #0
 1374              	.LVL96:
 1375 0018 7047     		bx	lr
 1376              	.LVL97:
 1377              	.L140:
 870:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1378              		.loc 1 870 0
 1379 001a 0120     		movs	r0, #1
 1380              	.LVL98:
 874:Libraries/FWlib/src/stm32f10x_can.c **** 
 1381              		.loc 1 874 0
 1382 001c 7047     		bx	lr
 1383              		.cfi_endproc
 1384              	.LFE43:
 1386              		.section	.text.CAN_WakeUp,"ax",%progbits
 1387              		.align	1
 1388              		.global	CAN_WakeUp
 1389              		.syntax unified
 1390              		.thumb
 1391              		.thumb_func
 1392              		.fpu softvfp
 1394              	CAN_WakeUp:
ARM GAS  /tmp/ccVLwjO0.s 			page 54


 1395              	.LFB44:
 883:Libraries/FWlib/src/stm32f10x_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 1396              		.loc 1 883 0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 0
 1399              		@ frame_needed = 0, uses_anonymous_args = 0
 1400              		@ link register save eliminated.
 1401              	.LVL99:
 891:Libraries/FWlib/src/stm32f10x_can.c ****     
 1402              		.loc 1 891 0
 1403 0000 0368     		ldr	r3, [r0]
 1404 0002 23F00203 		bic	r3, r3, #2
 1405 0006 0360     		str	r3, [r0]
 884:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1406              		.loc 1 884 0
 1407 0008 4FF6FF73 		movw	r3, #65535
 894:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1408              		.loc 1 894 0
 1409 000c 00E0     		b	.L142
 1410              	.LVL100:
 1411              	.L144:
 896:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1412              		.loc 1 896 0
 1413 000e 013B     		subs	r3, r3, #1
 1414              	.LVL101:
 1415              	.L142:
 894:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1416              		.loc 1 894 0
 1417 0010 4268     		ldr	r2, [r0, #4]
 1418 0012 12F0020F 		tst	r2, #2
 1419 0016 01D0     		beq	.L143
 894:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1420              		.loc 1 894 0 is_stmt 0 discriminator 1
 1421 0018 002B     		cmp	r3, #0
 1422 001a F8D1     		bne	.L144
 1423              	.L143:
 898:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1424              		.loc 1 898 0 is_stmt 1
 1425 001c 4368     		ldr	r3, [r0, #4]
 1426              	.LVL102:
 1427 001e 13F0020F 		tst	r3, #2
 1428 0022 01D1     		bne	.L147
 901:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1429              		.loc 1 901 0
 1430 0024 0120     		movs	r0, #1
 1431              	.LVL103:
 905:Libraries/FWlib/src/stm32f10x_can.c **** 
 1432              		.loc 1 905 0
 1433 0026 7047     		bx	lr
 1434              	.LVL104:
 1435              	.L147:
 885:Libraries/FWlib/src/stm32f10x_can.c ****   
 1436              		.loc 1 885 0
 1437 0028 0020     		movs	r0, #0
 1438              	.LVL105:
 1439 002a 7047     		bx	lr
 1440              		.cfi_endproc
ARM GAS  /tmp/ccVLwjO0.s 			page 55


 1441              	.LFE44:
 1443              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1444              		.align	1
 1445              		.global	CAN_GetLastErrorCode
 1446              		.syntax unified
 1447              		.thumb
 1448              		.thumb_func
 1449              		.fpu softvfp
 1451              	CAN_GetLastErrorCode:
 1452              	.LFB45:
 923:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t errorcode=0;
 1453              		.loc 1 923 0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 0
 1456              		@ frame_needed = 0, uses_anonymous_args = 0
 1457              		@ link register save eliminated.
 1458              	.LVL106:
 930:Libraries/FWlib/src/stm32f10x_can.c ****   
 1459              		.loc 1 930 0
 1460 0000 8069     		ldr	r0, [r0, #24]
 1461              	.LVL107:
 934:Libraries/FWlib/src/stm32f10x_can.c **** /**
 1462              		.loc 1 934 0
 1463 0002 00F07000 		and	r0, r0, #112
 1464              	.LVL108:
 1465 0006 7047     		bx	lr
 1466              		.cfi_endproc
 1467              	.LFE45:
 1469              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1470              		.align	1
 1471              		.global	CAN_GetReceiveErrorCounter
 1472              		.syntax unified
 1473              		.thumb
 1474              		.thumb_func
 1475              		.fpu softvfp
 1477              	CAN_GetReceiveErrorCounter:
 1478              	.LFB46:
 947:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t counter=0;
 1479              		.loc 1 947 0
 1480              		.cfi_startproc
 1481              		@ args = 0, pretend = 0, frame = 0
 1482              		@ frame_needed = 0, uses_anonymous_args = 0
 1483              		@ link register save eliminated.
 1484              	.LVL109:
 954:Libraries/FWlib/src/stm32f10x_can.c ****   
 1485              		.loc 1 954 0
 1486 0000 8069     		ldr	r0, [r0, #24]
 1487              	.LVL110:
 958:Libraries/FWlib/src/stm32f10x_can.c **** 
 1488              		.loc 1 958 0
 1489 0002 000E     		lsrs	r0, r0, #24
 1490              	.LVL111:
 1491 0004 7047     		bx	lr
 1492              		.cfi_endproc
 1493              	.LFE46:
 1495              		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 1496              		.align	1
ARM GAS  /tmp/ccVLwjO0.s 			page 56


 1497              		.global	CAN_GetLSBTransmitErrorCounter
 1498              		.syntax unified
 1499              		.thumb
 1500              		.thumb_func
 1501              		.fpu softvfp
 1503              	CAN_GetLSBTransmitErrorCounter:
 1504              	.LFB47:
 967:Libraries/FWlib/src/stm32f10x_can.c ****   uint8_t counter=0;
 1505              		.loc 1 967 0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 0
 1508              		@ frame_needed = 0, uses_anonymous_args = 0
 1509              		@ link register save eliminated.
 1510              	.LVL112:
 974:Libraries/FWlib/src/stm32f10x_can.c ****   
 1511              		.loc 1 974 0
 1512 0000 8069     		ldr	r0, [r0, #24]
 1513              	.LVL113:
 978:Libraries/FWlib/src/stm32f10x_can.c **** 
 1514              		.loc 1 978 0
 1515 0002 C0F30740 		ubfx	r0, r0, #16, #8
 1516              	.LVL114:
 1517 0006 7047     		bx	lr
 1518              		.cfi_endproc
 1519              	.LFE47:
 1521              		.section	.text.CAN_ITConfig,"ax",%progbits
 1522              		.align	1
 1523              		.global	CAN_ITConfig
 1524              		.syntax unified
 1525              		.thumb
 1526              		.thumb_func
 1527              		.fpu softvfp
 1529              	CAN_ITConfig:
 1530              	.LFB48:
1004:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 1531              		.loc 1 1004 0
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 0
 1534              		@ frame_needed = 0, uses_anonymous_args = 0
 1535              		@ link register save eliminated.
 1536              	.LVL115:
1010:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1537              		.loc 1 1010 0
 1538 0000 22B9     		cbnz	r2, .L154
1018:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1539              		.loc 1 1018 0
 1540 0002 4369     		ldr	r3, [r0, #20]
 1541 0004 23EA0101 		bic	r1, r3, r1
 1542              	.LVL116:
 1543 0008 4161     		str	r1, [r0, #20]
 1544 000a 7047     		bx	lr
 1545              	.LVL117:
 1546              	.L154:
1013:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1547              		.loc 1 1013 0
 1548 000c 4369     		ldr	r3, [r0, #20]
 1549 000e 1943     		orrs	r1, r1, r3
ARM GAS  /tmp/ccVLwjO0.s 			page 57


 1550              	.LVL118:
 1551 0010 4161     		str	r1, [r0, #20]
 1552 0012 7047     		bx	lr
 1553              		.cfi_endproc
 1554              	.LFE48:
 1556              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 1557              		.align	1
 1558              		.global	CAN_GetFlagStatus
 1559              		.syntax unified
 1560              		.thumb
 1561              		.thumb_func
 1562              		.fpu softvfp
 1564              	CAN_GetFlagStatus:
 1565              	.LFB49:
1044:Libraries/FWlib/src/stm32f10x_can.c ****   FlagStatus bitstatus = RESET;
 1566              		.loc 1 1044 0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              		@ link register save eliminated.
 1571              	.LVL119:
1052:Libraries/FWlib/src/stm32f10x_can.c ****   { 
 1572              		.loc 1 1052 0
 1573 0000 11F4700F 		tst	r1, #15728640
 1574 0004 06D0     		beq	.L156
1055:Libraries/FWlib/src/stm32f10x_can.c ****     { 
 1575              		.loc 1 1055 0
 1576 0006 8369     		ldr	r3, [r0, #24]
 1577 0008 1940     		ands	r1, r1, r3
 1578              	.LVL120:
 1579 000a C1F31301 		ubfx	r1, r1, #0, #20
 1580 000e 41B3     		cbz	r1, .L161
1058:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1581              		.loc 1 1058 0
 1582 0010 0120     		movs	r0, #1
 1583              	.LVL121:
 1584 0012 7047     		bx	lr
 1585              	.LVL122:
 1586              	.L156:
1066:Libraries/FWlib/src/stm32f10x_can.c ****   { 
 1587              		.loc 1 1066 0
 1588 0014 11F0807F 		tst	r1, #16777216
 1589 0018 06D0     		beq	.L158
1069:Libraries/FWlib/src/stm32f10x_can.c ****     { 
 1590              		.loc 1 1069 0
 1591 001a 4368     		ldr	r3, [r0, #4]
 1592 001c 1940     		ands	r1, r1, r3
 1593              	.LVL123:
 1594 001e C1F31301 		ubfx	r1, r1, #0, #20
 1595 0022 01B3     		cbz	r1, .L162
1072:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1596              		.loc 1 1072 0
 1597 0024 0120     		movs	r0, #1
 1598              	.LVL124:
 1599 0026 7047     		bx	lr
 1600              	.LVL125:
 1601              	.L158:
ARM GAS  /tmp/ccVLwjO0.s 			page 58


1080:Libraries/FWlib/src/stm32f10x_can.c ****   { 
 1602              		.loc 1 1080 0
 1603 0028 11F0006F 		tst	r1, #134217728
 1604 002c 06D0     		beq	.L159
1083:Libraries/FWlib/src/stm32f10x_can.c ****     { 
 1605              		.loc 1 1083 0
 1606 002e 8368     		ldr	r3, [r0, #8]
 1607 0030 1940     		ands	r1, r1, r3
 1608              	.LVL126:
 1609 0032 C1F31301 		ubfx	r1, r1, #0, #20
 1610 0036 C1B1     		cbz	r1, .L163
1086:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1611              		.loc 1 1086 0
 1612 0038 0120     		movs	r0, #1
 1613              	.LVL127:
 1614 003a 7047     		bx	lr
 1615              	.LVL128:
 1616              	.L159:
1094:Libraries/FWlib/src/stm32f10x_can.c ****   { 
 1617              		.loc 1 1094 0
 1618 003c 11F0007F 		tst	r1, #33554432
 1619 0040 06D0     		beq	.L160
1097:Libraries/FWlib/src/stm32f10x_can.c ****     { 
 1620              		.loc 1 1097 0
 1621 0042 C368     		ldr	r3, [r0, #12]
 1622 0044 1940     		ands	r1, r1, r3
 1623              	.LVL129:
 1624 0046 C1F31301 		ubfx	r1, r1, #0, #20
 1625 004a 81B1     		cbz	r1, .L164
1100:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1626              		.loc 1 1100 0
 1627 004c 0120     		movs	r0, #1
 1628              	.LVL130:
 1629 004e 7047     		bx	lr
 1630              	.LVL131:
 1631              	.L160:
1111:Libraries/FWlib/src/stm32f10x_can.c ****     { 
 1632              		.loc 1 1111 0
 1633 0050 0369     		ldr	r3, [r0, #16]
 1634 0052 1940     		ands	r1, r1, r3
 1635              	.LVL132:
 1636 0054 C1F31301 		ubfx	r1, r1, #0, #20
 1637 0058 09B9     		cbnz	r1, .L166
1119:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1638              		.loc 1 1119 0
 1639 005a 0020     		movs	r0, #0
 1640              	.LVL133:
1124:Libraries/FWlib/src/stm32f10x_can.c **** 
 1641              		.loc 1 1124 0
 1642 005c 7047     		bx	lr
 1643              	.LVL134:
 1644              	.L166:
1114:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1645              		.loc 1 1114 0
 1646 005e 0120     		movs	r0, #1
 1647              	.LVL135:
 1648 0060 7047     		bx	lr
ARM GAS  /tmp/ccVLwjO0.s 			page 59


 1649              	.LVL136:
 1650              	.L161:
1063:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1651              		.loc 1 1063 0
 1652 0062 0020     		movs	r0, #0
 1653              	.LVL137:
 1654 0064 7047     		bx	lr
 1655              	.LVL138:
 1656              	.L162:
1077:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1657              		.loc 1 1077 0
 1658 0066 0020     		movs	r0, #0
 1659              	.LVL139:
 1660 0068 7047     		bx	lr
 1661              	.LVL140:
 1662              	.L163:
1091:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1663              		.loc 1 1091 0
 1664 006a 0020     		movs	r0, #0
 1665              	.LVL141:
 1666 006c 7047     		bx	lr
 1667              	.LVL142:
 1668              	.L164:
1105:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1669              		.loc 1 1105 0
 1670 006e 0020     		movs	r0, #0
 1671              	.LVL143:
 1672 0070 7047     		bx	lr
 1673              		.cfi_endproc
 1674              	.LFE49:
 1676              		.section	.text.CAN_ClearFlag,"ax",%progbits
 1677              		.align	1
 1678              		.global	CAN_ClearFlag
 1679              		.syntax unified
 1680              		.thumb
 1681              		.thumb_func
 1682              		.fpu softvfp
 1684              	CAN_ClearFlag:
 1685              	.LFB50:
1144:Libraries/FWlib/src/stm32f10x_can.c ****   uint32_t flagtmp=0;
 1686              		.loc 1 1144 0
 1687              		.cfi_startproc
 1688              		@ args = 0, pretend = 0, frame = 0
 1689              		@ frame_needed = 0, uses_anonymous_args = 0
 1690              		@ link register save eliminated.
 1691              	.LVL144:
1150:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1692              		.loc 1 1150 0
 1693 0000 0C4B     		ldr	r3, .L177
 1694 0002 9942     		cmp	r1, r3
 1695 0004 0CD0     		beq	.L173
1157:Libraries/FWlib/src/stm32f10x_can.c **** 
 1696              		.loc 1 1157 0
 1697 0006 C1F31303 		ubfx	r3, r1, #0, #20
 1698              	.LVL145:
1159:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1699              		.loc 1 1159 0
ARM GAS  /tmp/ccVLwjO0.s 			page 60


 1700 000a 11F0007F 		tst	r1, #33554432
 1701 000e 0AD1     		bne	.L174
1164:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1702              		.loc 1 1164 0
 1703 0010 11F0806F 		tst	r1, #67108864
 1704 0014 09D1     		bne	.L175
1169:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1705              		.loc 1 1169 0
 1706 0016 11F0006F 		tst	r1, #134217728
 1707 001a 08D1     		bne	.L176
1177:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1708              		.loc 1 1177 0
 1709 001c 4360     		str	r3, [r0, #4]
 1710 001e 7047     		bx	lr
 1711              	.LVL146:
 1712              	.L173:
1153:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1713              		.loc 1 1153 0
 1714 0020 0023     		movs	r3, #0
 1715 0022 8361     		str	r3, [r0, #24]
 1716 0024 7047     		bx	lr
 1717              	.LVL147:
 1718              	.L174:
1162:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1719              		.loc 1 1162 0
 1720 0026 C360     		str	r3, [r0, #12]
 1721 0028 7047     		bx	lr
 1722              	.L175:
1167:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1723              		.loc 1 1167 0
 1724 002a 0361     		str	r3, [r0, #16]
 1725 002c 7047     		bx	lr
 1726              	.L176:
1172:Libraries/FWlib/src/stm32f10x_can.c ****     }
 1727              		.loc 1 1172 0
 1728 002e 8360     		str	r3, [r0, #8]
 1729 0030 7047     		bx	lr
 1730              	.L178:
 1731 0032 00BF     		.align	2
 1732              	.L177:
 1733 0034 7000F030 		.word	821035120
 1734              		.cfi_endproc
 1735              	.LFE50:
 1737              		.section	.text.CAN_GetITStatus,"ax",%progbits
 1738              		.align	1
 1739              		.global	CAN_GetITStatus
 1740              		.syntax unified
 1741              		.thumb
 1742              		.thumb_func
 1743              		.fpu softvfp
 1745              	CAN_GetITStatus:
 1746              	.LFB51:
1204:Libraries/FWlib/src/stm32f10x_can.c ****   ITStatus itstatus = RESET;
 1747              		.loc 1 1204 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccVLwjO0.s 			page 61


 1751              	.LVL148:
 1752 0000 08B5     		push	{r3, lr}
 1753              	.LCFI10:
 1754              		.cfi_def_cfa_offset 8
 1755              		.cfi_offset 3, -8
 1756              		.cfi_offset 14, -4
 1757              	.LVL149:
1211:Libraries/FWlib/src/stm32f10x_can.c ****  {
 1758              		.loc 1 1211 0
 1759 0002 4369     		ldr	r3, [r0, #20]
 1760 0004 0B42     		tst	r3, r1
 1761 0006 6DD0     		beq	.L198
1214:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1762              		.loc 1 1214 0
 1763 0008 4029     		cmp	r1, #64
 1764 000a 4DD0     		beq	.L181
 1765 000c 11D9     		bls	.L201
 1766 000e B1F5006F 		cmp	r1, #2048
 1767 0012 62D0     		beq	.L190
 1768 0014 21D8     		bhi	.L191
 1769 0016 B1F5007F 		cmp	r1, #512
 1770 001a 54D0     		beq	.L192
 1771 001c B1F5806F 		cmp	r1, #1024
 1772 0020 56D0     		beq	.L193
 1773 0022 B1F5807F 		cmp	r1, #256
 1774 0026 0DD1     		bne	.L199
1254:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1775              		.loc 1 1254 0
 1776 0028 8069     		ldr	r0, [r0, #24]
 1777              	.LVL150:
 1778 002a 0121     		movs	r1, #1
 1779              	.LVL151:
 1780 002c FFF7FEFF 		bl	CheckITStatus
 1781              	.LVL152:
1255:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_EPV:
 1782              		.loc 1 1255 0
 1783 0030 08BD     		pop	{r3, pc}
 1784              	.LVL153:
 1785              	.L201:
1214:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1786              		.loc 1 1214 0
 1787 0032 0429     		cmp	r1, #4
 1788 0034 24D0     		beq	.L183
 1789 0036 07D9     		bls	.L202
 1790 0038 1029     		cmp	r1, #16
 1791 003a 2BD0     		beq	.L187
 1792 003c 2029     		cmp	r1, #32
 1793 003e 2ED0     		beq	.L188
 1794 0040 0829     		cmp	r1, #8
 1795 0042 22D0     		beq	.L203
 1796              	.L199:
1274:Libraries/FWlib/src/stm32f10x_can.c ****               break;
 1797              		.loc 1 1274 0
 1798 0044 0020     		movs	r0, #0
 1799              	.LVL154:
1286:Libraries/FWlib/src/stm32f10x_can.c **** 
 1800              		.loc 1 1286 0
ARM GAS  /tmp/ccVLwjO0.s 			page 62


 1801 0046 08BD     		pop	{r3, pc}
 1802              	.LVL155:
 1803              	.L202:
1214:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1804              		.loc 1 1214 0
 1805 0048 0129     		cmp	r1, #1
 1806 004a 14D0     		beq	.L185
 1807 004c 0229     		cmp	r1, #2
 1808 004e F9D1     		bne	.L199
1222:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1809              		.loc 1 1222 0
 1810 0050 C068     		ldr	r0, [r0, #12]
 1811              	.LVL156:
 1812 0052 0321     		movs	r1, #3
 1813              	.LVL157:
 1814 0054 FFF7FEFF 		bl	CheckITStatus
 1815              	.LVL158:
1223:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FF0:
 1816              		.loc 1 1223 0
 1817 0058 08BD     		pop	{r3, pc}
 1818              	.LVL159:
 1819              	.L191:
1214:Libraries/FWlib/src/stm32f10x_can.c ****     {
 1820              		.loc 1 1214 0
 1821 005a B1F5803F 		cmp	r1, #65536
 1822 005e 28D0     		beq	.L195
 1823 0060 B1F5003F 		cmp	r1, #131072
 1824 0064 2AD0     		beq	.L196
 1825 0066 B1F5004F 		cmp	r1, #32768
 1826 006a EBD1     		bne	.L199
1270:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1827              		.loc 1 1270 0
 1828 006c 4068     		ldr	r0, [r0, #4]
 1829              	.LVL160:
 1830 006e 0421     		movs	r1, #4
 1831              	.LVL161:
 1832 0070 FFF7FEFF 		bl	CheckITStatus
 1833              	.LVL162:
1271:Libraries/FWlib/src/stm32f10x_can.c ****       default :
 1834              		.loc 1 1271 0
 1835 0074 08BD     		pop	{r3, pc}
 1836              	.LVL163:
 1837              	.L185:
1218:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1838              		.loc 1 1218 0
 1839 0076 8068     		ldr	r0, [r0, #8]
 1840              	.LVL164:
 1841 0078 1B49     		ldr	r1, .L204
 1842              	.LVL165:
 1843 007a FFF7FEFF 		bl	CheckITStatus
 1844              	.LVL166:
1219:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FMP0:
 1845              		.loc 1 1219 0
 1846 007e 08BD     		pop	{r3, pc}
 1847              	.LVL167:
 1848              	.L183:
1226:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
ARM GAS  /tmp/ccVLwjO0.s 			page 63


 1849              		.loc 1 1226 0
 1850 0080 C068     		ldr	r0, [r0, #12]
 1851              	.LVL168:
 1852 0082 0821     		movs	r1, #8
 1853              	.LVL169:
 1854 0084 FFF7FEFF 		bl	CheckITStatus
 1855              	.LVL170:
1227:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
 1856              		.loc 1 1227 0
 1857 0088 08BD     		pop	{r3, pc}
 1858              	.LVL171:
 1859              	.L203:
1230:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1860              		.loc 1 1230 0
 1861 008a C068     		ldr	r0, [r0, #12]
 1862              	.LVL172:
 1863 008c 1021     		movs	r1, #16
 1864              	.LVL173:
 1865 008e FFF7FEFF 		bl	CheckITStatus
 1866              	.LVL174:
1231:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FMP1:
 1867              		.loc 1 1231 0
 1868 0092 08BD     		pop	{r3, pc}
 1869              	.LVL175:
 1870              	.L187:
1234:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1871              		.loc 1 1234 0
 1872 0094 0069     		ldr	r0, [r0, #16]
 1873              	.LVL176:
 1874 0096 0321     		movs	r1, #3
 1875              	.LVL177:
 1876 0098 FFF7FEFF 		bl	CheckITStatus
 1877              	.LVL178:
1235:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FF1:
 1878              		.loc 1 1235 0
 1879 009c 08BD     		pop	{r3, pc}
 1880              	.LVL179:
 1881              	.L188:
1238:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1882              		.loc 1 1238 0
 1883 009e 0069     		ldr	r0, [r0, #16]
 1884              	.LVL180:
 1885 00a0 0821     		movs	r1, #8
 1886              	.LVL181:
 1887 00a2 FFF7FEFF 		bl	CheckITStatus
 1888              	.LVL182:
1239:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
 1889              		.loc 1 1239 0
 1890 00a6 08BD     		pop	{r3, pc}
 1891              	.LVL183:
 1892              	.L181:
1242:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1893              		.loc 1 1242 0
 1894 00a8 0069     		ldr	r0, [r0, #16]
 1895              	.LVL184:
 1896 00aa 1021     		movs	r1, #16
 1897              	.LVL185:
ARM GAS  /tmp/ccVLwjO0.s 			page 64


 1898 00ac FFF7FEFF 		bl	CheckITStatus
 1899              	.LVL186:
1243:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_WKU:
 1900              		.loc 1 1243 0
 1901 00b0 08BD     		pop	{r3, pc}
 1902              	.LVL187:
 1903              	.L195:
1246:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1904              		.loc 1 1246 0
 1905 00b2 4068     		ldr	r0, [r0, #4]
 1906              	.LVL188:
 1907 00b4 0821     		movs	r1, #8
 1908              	.LVL189:
 1909 00b6 FFF7FEFF 		bl	CheckITStatus
 1910              	.LVL190:
1247:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_SLK:
 1911              		.loc 1 1247 0
 1912 00ba 08BD     		pop	{r3, pc}
 1913              	.LVL191:
 1914              	.L196:
1250:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1915              		.loc 1 1250 0
 1916 00bc 4068     		ldr	r0, [r0, #4]
 1917              	.LVL192:
 1918 00be 1021     		movs	r1, #16
 1919              	.LVL193:
 1920 00c0 FFF7FEFF 		bl	CheckITStatus
 1921              	.LVL194:
1251:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_EWG:
 1922              		.loc 1 1251 0
 1923 00c4 08BD     		pop	{r3, pc}
 1924              	.LVL195:
 1925              	.L192:
1258:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1926              		.loc 1 1258 0
 1927 00c6 8069     		ldr	r0, [r0, #24]
 1928              	.LVL196:
 1929 00c8 0221     		movs	r1, #2
 1930              	.LVL197:
 1931 00ca FFF7FEFF 		bl	CheckITStatus
 1932              	.LVL198:
1259:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_BOF:
 1933              		.loc 1 1259 0
 1934 00ce 08BD     		pop	{r3, pc}
 1935              	.LVL199:
 1936              	.L193:
1262:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1937              		.loc 1 1262 0
 1938 00d0 8069     		ldr	r0, [r0, #24]
 1939              	.LVL200:
 1940 00d2 0421     		movs	r1, #4
 1941              	.LVL201:
 1942 00d4 FFF7FEFF 		bl	CheckITStatus
 1943              	.LVL202:
1263:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_LEC:
 1944              		.loc 1 1263 0
 1945 00d8 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccVLwjO0.s 			page 65


 1946              	.LVL203:
 1947              	.L190:
1266:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 1948              		.loc 1 1266 0
 1949 00da 8069     		ldr	r0, [r0, #24]
 1950              	.LVL204:
 1951 00dc 7021     		movs	r1, #112
 1952              	.LVL205:
 1953 00de FFF7FEFF 		bl	CheckITStatus
 1954              	.LVL206:
1267:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_ERR:
 1955              		.loc 1 1267 0
 1956 00e2 08BD     		pop	{r3, pc}
 1957              	.LVL207:
 1958              	.L198:
1281:Libraries/FWlib/src/stm32f10x_can.c ****   }
 1959              		.loc 1 1281 0
 1960 00e4 0020     		movs	r0, #0
 1961              	.LVL208:
 1962 00e6 08BD     		pop	{r3, pc}
 1963              	.L205:
 1964              		.align	2
 1965              	.L204:
 1966 00e8 01010100 		.word	65793
 1967              		.cfi_endproc
 1968              	.LFE51:
 1970              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 1971              		.align	1
 1972              		.global	CAN_ClearITPendingBit
 1973              		.syntax unified
 1974              		.thumb
 1975              		.thumb_func
 1976              		.fpu softvfp
 1978              	CAN_ClearITPendingBit:
 1979              	.LFB52:
1307:Libraries/FWlib/src/stm32f10x_can.c ****   /* Check the parameters */
 1980              		.loc 1 1307 0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 0
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 1984              		@ link register save eliminated.
 1985              	.LVL209:
1312:Libraries/FWlib/src/stm32f10x_can.c ****   {
 1986              		.loc 1 1312 0
 1987 0000 B1F5807F 		cmp	r1, #256
 1988 0004 3ED0     		beq	.L208
 1989 0006 11D9     		bls	.L223
 1990 0008 B1F5006F 		cmp	r1, #2048
 1991 000c 40D0     		beq	.L216
 1992 000e 20D9     		bls	.L224
 1993 0010 B1F5803F 		cmp	r1, #65536
 1994 0014 30D0     		beq	.L220
 1995 0016 B1F5003F 		cmp	r1, #131072
 1996 001a 30D0     		beq	.L221
 1997 001c B1F5004F 		cmp	r1, #32768
 1998 0020 03D1     		bne	.L206
1368:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
ARM GAS  /tmp/ccVLwjO0.s 			page 66


 1999              		.loc 1 1368 0
 2000 0022 0023     		movs	r3, #0
 2001 0024 8361     		str	r3, [r0, #24]
1370:Libraries/FWlib/src/stm32f10x_can.c **** 	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
 2002              		.loc 1 1370 0
 2003 0026 0423     		movs	r3, #4
 2004 0028 4360     		str	r3, [r0, #4]
 2005              	.L206:
 2006 002a 7047     		bx	lr
 2007              	.L223:
1312:Libraries/FWlib/src/stm32f10x_can.c ****   {
 2008              		.loc 1 1312 0
 2009 002c 0829     		cmp	r1, #8
 2010 002e 1DD0     		beq	.L210
 2011 0030 07D8     		bhi	.L211
 2012 0032 0129     		cmp	r1, #1
 2013 0034 17D0     		beq	.L212
 2014 0036 0429     		cmp	r1, #4
 2015 0038 02D1     		bne	.L225
1320:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 2016              		.loc 1 1320 0
 2017 003a 0823     		movs	r3, #8
 2018 003c C360     		str	r3, [r0, #12]
1321:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
 2019              		.loc 1 1321 0
 2020 003e 7047     		bx	lr
 2021              	.L225:
 2022 0040 7047     		bx	lr
 2023              	.L211:
1312:Libraries/FWlib/src/stm32f10x_can.c ****   {
 2024              		.loc 1 1312 0
 2025 0042 2029     		cmp	r1, #32
 2026 0044 15D0     		beq	.L214
 2027 0046 4029     		cmp	r1, #64
 2028 0048 02D1     		bne	.L226
1332:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 2029              		.loc 1 1332 0
 2030 004a 1023     		movs	r3, #16
 2031 004c 0361     		str	r3, [r0, #16]
1333:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_WKU:
 2032              		.loc 1 1333 0
 2033 004e 7047     		bx	lr
 2034              	.L226:
 2035 0050 7047     		bx	lr
 2036              	.L224:
1312:Libraries/FWlib/src/stm32f10x_can.c ****   {
 2037              		.loc 1 1312 0
 2038 0052 B1F5007F 		cmp	r1, #512
 2039 0056 18D0     		beq	.L218
 2040 0058 B1F5806F 		cmp	r1, #1024
 2041 005c 02D1     		bne	.L227
1356:Libraries/FWlib/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2042              		.loc 1 1356 0
 2043 005e 0423     		movs	r3, #4
 2044 0060 4360     		str	r3, [r0, #4]
1359:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_LEC:
 2045              		.loc 1 1359 0
ARM GAS  /tmp/ccVLwjO0.s 			page 67


 2046 0062 7047     		bx	lr
 2047              	.L227:
 2048 0064 7047     		bx	lr
 2049              	.L212:
1316:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 2050              		.loc 1 1316 0
 2051 0066 0D4B     		ldr	r3, .L228
 2052 0068 8360     		str	r3, [r0, #8]
1317:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FF0:
 2053              		.loc 1 1317 0
 2054 006a 7047     		bx	lr
 2055              	.L210:
1324:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 2056              		.loc 1 1324 0
 2057 006c 1023     		movs	r3, #16
 2058 006e C360     		str	r3, [r0, #12]
1325:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FF1:
 2059              		.loc 1 1325 0
 2060 0070 7047     		bx	lr
 2061              	.L214:
1328:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 2062              		.loc 1 1328 0
 2063 0072 0823     		movs	r3, #8
 2064 0074 0361     		str	r3, [r0, #16]
1329:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
 2065              		.loc 1 1329 0
 2066 0076 7047     		bx	lr
 2067              	.L220:
1336:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 2068              		.loc 1 1336 0
 2069 0078 0823     		movs	r3, #8
 2070 007a 4360     		str	r3, [r0, #4]
1337:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_SLK:
 2071              		.loc 1 1337 0
 2072 007c 7047     		bx	lr
 2073              	.L221:
1340:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 2074              		.loc 1 1340 0
 2075 007e 1023     		movs	r3, #16
 2076 0080 4360     		str	r3, [r0, #4]
1341:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_EWG:
 2077              		.loc 1 1341 0
 2078 0082 7047     		bx	lr
 2079              	.L208:
1344:Libraries/FWlib/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2080              		.loc 1 1344 0
 2081 0084 0423     		movs	r3, #4
 2082 0086 4360     		str	r3, [r0, #4]
1347:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_EPV:
 2083              		.loc 1 1347 0
 2084 0088 7047     		bx	lr
 2085              	.L218:
1350:Libraries/FWlib/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2086              		.loc 1 1350 0
 2087 008a 0423     		movs	r3, #4
 2088 008c 4360     		str	r3, [r0, #4]
1353:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_BOF:
ARM GAS  /tmp/ccVLwjO0.s 			page 68


 2089              		.loc 1 1353 0
 2090 008e 7047     		bx	lr
 2091              	.L216:
1362:Libraries/FWlib/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
 2092              		.loc 1 1362 0
 2093 0090 0023     		movs	r3, #0
 2094 0092 8361     		str	r3, [r0, #24]
1364:Libraries/FWlib/src/stm32f10x_can.c **** 	      break;
 2095              		.loc 1 1364 0
 2096 0094 0423     		movs	r3, #4
 2097 0096 4360     		str	r3, [r0, #4]
1365:Libraries/FWlib/src/stm32f10x_can.c ****       case CAN_IT_ERR:
 2098              		.loc 1 1365 0
 2099 0098 7047     		bx	lr
 2100              	.L229:
 2101 009a 00BF     		.align	2
 2102              	.L228:
 2103 009c 01010100 		.word	65793
 2104              		.cfi_endproc
 2105              	.LFE52:
 2107              		.text
 2108              	.Letext0:
 2109              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2110              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2111              		.file 4 "Libraries/CMSIS/core_cm3.h"
 2112              		.file 5 "Libraries/CMSIS/system_stm32f10x.h"
 2113              		.file 6 "Libraries/CMSIS/stm32f10x.h"
 2114              		.file 7 "Libraries/FWlib/inc/stm32f10x_can.h"
 2115              		.file 8 "Libraries/FWlib/inc/stm32f10x_rcc.h"
ARM GAS  /tmp/ccVLwjO0.s 			page 69


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_can.c
     /tmp/ccVLwjO0.s:16     .text.CheckITStatus:0000000000000000 $t
     /tmp/ccVLwjO0.s:22     .text.CheckITStatus:0000000000000000 CheckITStatus
     /tmp/ccVLwjO0.s:49     .text.CAN_DeInit:0000000000000000 $t
     /tmp/ccVLwjO0.s:56     .text.CAN_DeInit:0000000000000000 CAN_DeInit
     /tmp/ccVLwjO0.s:101    .text.CAN_DeInit:0000000000000034 $d
     /tmp/ccVLwjO0.s:106    .text.CAN_Init:0000000000000000 $t
     /tmp/ccVLwjO0.s:113    .text.CAN_Init:0000000000000000 CAN_Init
     /tmp/ccVLwjO0.s:316    .text.CAN_FilterInit:0000000000000000 $t
     /tmp/ccVLwjO0.s:323    .text.CAN_FilterInit:0000000000000000 CAN_FilterInit
     /tmp/ccVLwjO0.s:492    .text.CAN_FilterInit:00000000000000f8 $d
     /tmp/ccVLwjO0.s:497    .text.CAN_StructInit:0000000000000000 $t
     /tmp/ccVLwjO0.s:504    .text.CAN_StructInit:0000000000000000 CAN_StructInit
     /tmp/ccVLwjO0.s:543    .text.CAN_SlaveStartBank:0000000000000000 $t
     /tmp/ccVLwjO0.s:550    .text.CAN_SlaveStartBank:0000000000000000 CAN_SlaveStartBank
     /tmp/ccVLwjO0.s:581    .text.CAN_SlaveStartBank:0000000000000038 $d
     /tmp/ccVLwjO0.s:586    .text.CAN_DBGFreeze:0000000000000000 $t
     /tmp/ccVLwjO0.s:593    .text.CAN_DBGFreeze:0000000000000000 CAN_DBGFreeze
     /tmp/ccVLwjO0.s:618    .text.CAN_TTComModeCmd:0000000000000000 $t
     /tmp/ccVLwjO0.s:625    .text.CAN_TTComModeCmd:0000000000000000 CAN_TTComModeCmd
     /tmp/ccVLwjO0.s:674    .text.CAN_Transmit:0000000000000000 $t
     /tmp/ccVLwjO0.s:681    .text.CAN_Transmit:0000000000000000 CAN_Transmit
     /tmp/ccVLwjO0.s:851    .text.CAN_TransmitStatus:0000000000000000 $t
     /tmp/ccVLwjO0.s:858    .text.CAN_TransmitStatus:0000000000000000 CAN_TransmitStatus
     /tmp/ccVLwjO0.s:952    .text.CAN_TransmitStatus:0000000000000064 $d
     /tmp/ccVLwjO0.s:959    .text.CAN_CancelTransmit:0000000000000000 $t
     /tmp/ccVLwjO0.s:966    .text.CAN_CancelTransmit:0000000000000000 CAN_CancelTransmit
     /tmp/ccVLwjO0.s:1005   .text.CAN_Receive:0000000000000000 $t
     /tmp/ccVLwjO0.s:1012   .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/ccVLwjO0.s:1120   .text.CAN_FIFORelease:0000000000000000 $t
     /tmp/ccVLwjO0.s:1127   .text.CAN_FIFORelease:0000000000000000 CAN_FIFORelease
     /tmp/ccVLwjO0.s:1152   .text.CAN_MessagePending:0000000000000000 $t
     /tmp/ccVLwjO0.s:1159   .text.CAN_MessagePending:0000000000000000 CAN_MessagePending
     /tmp/ccVLwjO0.s:1197   .text.CAN_OperatingModeRequest:0000000000000000 $t
     /tmp/ccVLwjO0.s:1204   .text.CAN_OperatingModeRequest:0000000000000000 CAN_OperatingModeRequest
     /tmp/ccVLwjO0.s:1347   .text.CAN_Sleep:0000000000000000 $t
     /tmp/ccVLwjO0.s:1354   .text.CAN_Sleep:0000000000000000 CAN_Sleep
     /tmp/ccVLwjO0.s:1387   .text.CAN_WakeUp:0000000000000000 $t
     /tmp/ccVLwjO0.s:1394   .text.CAN_WakeUp:0000000000000000 CAN_WakeUp
     /tmp/ccVLwjO0.s:1444   .text.CAN_GetLastErrorCode:0000000000000000 $t
     /tmp/ccVLwjO0.s:1451   .text.CAN_GetLastErrorCode:0000000000000000 CAN_GetLastErrorCode
     /tmp/ccVLwjO0.s:1470   .text.CAN_GetReceiveErrorCounter:0000000000000000 $t
     /tmp/ccVLwjO0.s:1477   .text.CAN_GetReceiveErrorCounter:0000000000000000 CAN_GetReceiveErrorCounter
     /tmp/ccVLwjO0.s:1496   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 $t
     /tmp/ccVLwjO0.s:1503   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 CAN_GetLSBTransmitErrorCounter
     /tmp/ccVLwjO0.s:1522   .text.CAN_ITConfig:0000000000000000 $t
     /tmp/ccVLwjO0.s:1529   .text.CAN_ITConfig:0000000000000000 CAN_ITConfig
     /tmp/ccVLwjO0.s:1557   .text.CAN_GetFlagStatus:0000000000000000 $t
     /tmp/ccVLwjO0.s:1564   .text.CAN_GetFlagStatus:0000000000000000 CAN_GetFlagStatus
     /tmp/ccVLwjO0.s:1677   .text.CAN_ClearFlag:0000000000000000 $t
     /tmp/ccVLwjO0.s:1684   .text.CAN_ClearFlag:0000000000000000 CAN_ClearFlag
     /tmp/ccVLwjO0.s:1733   .text.CAN_ClearFlag:0000000000000034 $d
     /tmp/ccVLwjO0.s:1738   .text.CAN_GetITStatus:0000000000000000 $t
     /tmp/ccVLwjO0.s:1745   .text.CAN_GetITStatus:0000000000000000 CAN_GetITStatus
     /tmp/ccVLwjO0.s:1966   .text.CAN_GetITStatus:00000000000000e8 $d
     /tmp/ccVLwjO0.s:1971   .text.CAN_ClearITPendingBit:0000000000000000 $t
ARM GAS  /tmp/ccVLwjO0.s 			page 70


     /tmp/ccVLwjO0.s:1978   .text.CAN_ClearITPendingBit:0000000000000000 CAN_ClearITPendingBit
     /tmp/ccVLwjO0.s:2103   .text.CAN_ClearITPendingBit:000000000000009c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
