ARM GAS  /tmp/cco5yOG0.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f4xx_rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.RCC_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	RCC_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	RCC_DeInit:
  24              	.LFB112:
  25              		.file 1 "FWLIB/src/stm32f4xx_rcc.c"
   1:FWLIB/src/stm32f4xx_rcc.c **** /**
   2:FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:FWLIB/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_rcc.c ****   * @version V1.4.0
   6:FWLIB/src/stm32f4xx_rcc.c ****   * @date    04-August-2014
   7:FWLIB/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:FWLIB/src/stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:FWLIB/src/stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:FWLIB/src/stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:FWLIB/src/stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:FWLIB/src/stm32f4xx_rcc.c ****   *
  14:FWLIB/src/stm32f4xx_rcc.c ****  @verbatim                
  15:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
  16:FWLIB/src/stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
  18:FWLIB/src/stm32f4xx_rcc.c ****     [..]  
  19:FWLIB/src/stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:FWLIB/src/stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:FWLIB/src/stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:FWLIB/src/stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
  23:FWLIB/src/stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:FWLIB/src/stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:FWLIB/src/stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:FWLIB/src/stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:FWLIB/src/stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:FWLIB/src/stm32f4xx_rcc.c ****     [..]          
  29:FWLIB/src/stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:        
  30:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:FWLIB/src/stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
  32:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
ARM GAS  /tmp/cco5yOG0.s 			page 2


  34:FWLIB/src/stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:FWLIB/src/stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)                       
  37:FWLIB/src/stm32f4xx_rcc.c ****  @endverbatim    
  38:FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
  39:FWLIB/src/stm32f4xx_rcc.c ****   * @attention
  40:FWLIB/src/stm32f4xx_rcc.c ****   *
  41:FWLIB/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  42:FWLIB/src/stm32f4xx_rcc.c ****   *
  43:FWLIB/src/stm32f4xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:FWLIB/src/stm32f4xx_rcc.c ****   * You may not use this file except in compliance with the License.
  45:FWLIB/src/stm32f4xx_rcc.c ****   * You may obtain a copy of the License at:
  46:FWLIB/src/stm32f4xx_rcc.c ****   *
  47:FWLIB/src/stm32f4xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:FWLIB/src/stm32f4xx_rcc.c ****   *
  49:FWLIB/src/stm32f4xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  50:FWLIB/src/stm32f4xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  51:FWLIB/src/stm32f4xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:FWLIB/src/stm32f4xx_rcc.c ****   * See the License for the specific language governing permissions and
  53:FWLIB/src/stm32f4xx_rcc.c ****   * limitations under the License.
  54:FWLIB/src/stm32f4xx_rcc.c ****   *
  55:FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
  56:FWLIB/src/stm32f4xx_rcc.c ****   */
  57:FWLIB/src/stm32f4xx_rcc.c **** 
  58:FWLIB/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  59:FWLIB/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  60:FWLIB/src/stm32f4xx_rcc.c **** 
  61:FWLIB/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  62:FWLIB/src/stm32f4xx_rcc.c ****   * @{
  63:FWLIB/src/stm32f4xx_rcc.c ****   */
  64:FWLIB/src/stm32f4xx_rcc.c **** 
  65:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  66:FWLIB/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  67:FWLIB/src/stm32f4xx_rcc.c ****   * @{
  68:FWLIB/src/stm32f4xx_rcc.c ****   */ 
  69:FWLIB/src/stm32f4xx_rcc.c **** 
  70:FWLIB/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  71:FWLIB/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  72:FWLIB/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  73:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  74:FWLIB/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  75:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  76:FWLIB/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  77:FWLIB/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  78:FWLIB/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  79:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  80:FWLIB/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  81:FWLIB/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  82:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  83:FWLIB/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  84:FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  85:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  86:FWLIB/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  87:FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  88:FWLIB/src/stm32f4xx_rcc.c **** 
  89:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLSAION bit */
  90:FWLIB/src/stm32f4xx_rcc.c **** #define PLLSAION_BitNumber        0x1C
ARM GAS  /tmp/cco5yOG0.s 			page 3


  91:FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLSAION_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLSAION_BitNumber * 4))
  92:FWLIB/src/stm32f4xx_rcc.c **** 
  93:FWLIB/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  94:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  95:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  96:FWLIB/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  97:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  98:FWLIB/src/stm32f4xx_rcc.c **** 
  99:FWLIB/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
 100:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
 101:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
 102:FWLIB/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
 103:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
 104:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
 105:FWLIB/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
 106:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 107:FWLIB/src/stm32f4xx_rcc.c **** 
 108:FWLIB/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 109:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 110:FWLIB/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 111:FWLIB/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 112:FWLIB/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 113:FWLIB/src/stm32f4xx_rcc.c **** 
 114:FWLIB/src/stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 115:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 116:FWLIB/src/stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 117:FWLIB/src/stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 118:FWLIB/src/stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 119:FWLIB/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 120:FWLIB/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 121:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 122:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 123:FWLIB/src/stm32f4xx_rcc.c **** 
 124:FWLIB/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 125:FWLIB/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 126:FWLIB/src/stm32f4xx_rcc.c **** 
 127:FWLIB/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 128:FWLIB/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 129:FWLIB/src/stm32f4xx_rcc.c **** 
 130:FWLIB/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 131:FWLIB/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 132:FWLIB/src/stm32f4xx_rcc.c **** 
 133:FWLIB/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 134:FWLIB/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 135:FWLIB/src/stm32f4xx_rcc.c **** 
 136:FWLIB/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 137:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 138:FWLIB/src/stm32f4xx_rcc.c **** 
 139:FWLIB/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 140:FWLIB/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 141:FWLIB/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 142:FWLIB/src/stm32f4xx_rcc.c **** 
 143:FWLIB/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 144:FWLIB/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 145:FWLIB/src/stm32f4xx_rcc.c **** 
 146:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 147:FWLIB/src/stm32f4xx_rcc.c ****   * @{
ARM GAS  /tmp/cco5yOG0.s 			page 4


 148:FWLIB/src/stm32f4xx_rcc.c ****   */ 
 149:FWLIB/src/stm32f4xx_rcc.c **** 
 150:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 151:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 152:FWLIB/src/stm32f4xx_rcc.c ****  *
 153:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
 154:FWLIB/src/stm32f4xx_rcc.c ****  ===================================================================================
 155:FWLIB/src/stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 156:FWLIB/src/stm32f4xx_rcc.c ****  ===================================================================================  
 157:FWLIB/src/stm32f4xx_rcc.c ****     [..]
 158:FWLIB/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 159:FWLIB/src/stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 160:FWLIB/src/stm32f4xx_rcc.c ****   
 161:FWLIB/src/stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 162:FWLIB/src/stm32f4xx_rcc.c ****           the PLL as System clock source.
 163:FWLIB/src/stm32f4xx_rcc.c **** 
 164:FWLIB/src/stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 165:FWLIB/src/stm32f4xx_rcc.c ****           clock source.
 166:FWLIB/src/stm32f4xx_rcc.c **** 
 167:FWLIB/src/stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 168:FWLIB/src/stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 169:FWLIB/src/stm32f4xx_rcc.c **** 
 170:FWLIB/src/stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 171:FWLIB/src/stm32f4xx_rcc.c **** 
 172:FWLIB/src/stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 173:FWLIB/src/stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 174:FWLIB/src/stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 175:FWLIB/src/stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 176:FWLIB/src/stm32f4xx_rcc.c **** 
 177:FWLIB/src/stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 178:FWLIB/src/stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface or SAI interface in case 
 179:FWLIB/src/stm32f4xx_rcc.c ****           of STM32F429x/439x devices.
 180:FWLIB/src/stm32f4xx_rcc.c ****      
 181:FWLIB/src/stm32f4xx_rcc.c ****       (#) PLLSAI clocked by (HSI or HSE), used to generate an accurate clock to SAI 
 182:FWLIB/src/stm32f4xx_rcc.c ****           interface and LCD TFT controller available only for STM32F42xxx/43xxx devices.
 183:FWLIB/src/stm32f4xx_rcc.c ****   
 184:FWLIB/src/stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 185:FWLIB/src/stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 186:FWLIB/src/stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 187:FWLIB/src/stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 188:FWLIB/src/stm32f4xx_rcc.c ****          exception vector.   
 189:FWLIB/src/stm32f4xx_rcc.c **** 
 190:FWLIB/src/stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 191:FWLIB/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 192:FWLIB/src/stm32f4xx_rcc.c **** 
 193:FWLIB/src/stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 194:FWLIB/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 195:FWLIB/src/stm32f4xx_rcc.c ****  @endverbatim
 196:FWLIB/src/stm32f4xx_rcc.c ****   * @{
 197:FWLIB/src/stm32f4xx_rcc.c ****   */
 198:FWLIB/src/stm32f4xx_rcc.c **** 
 199:FWLIB/src/stm32f4xx_rcc.c **** /**
 200:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 201:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 202:FWLIB/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 203:FWLIB/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 204:FWLIB/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
ARM GAS  /tmp/cco5yOG0.s 			page 5


 205:FWLIB/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 206:FWLIB/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 207:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 208:FWLIB/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 209:FWLIB/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 210:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 211:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 212:FWLIB/src/stm32f4xx_rcc.c ****   */
 213:FWLIB/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 214:FWLIB/src/stm32f4xx_rcc.c **** {
  26              		.loc 1 214 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 215:FWLIB/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 216:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  31              		.loc 1 216 0
  32 0000 0E4B     		ldr	r3, .L2
  33 0002 1A68     		ldr	r2, [r3]
  34 0004 42F00102 		orr	r2, r2, #1
  35 0008 1A60     		str	r2, [r3]
 217:FWLIB/src/stm32f4xx_rcc.c **** 
 218:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 219:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  36              		.loc 1 219 0
  37 000a 0021     		movs	r1, #0
  38 000c 9960     		str	r1, [r3, #8]
 220:FWLIB/src/stm32f4xx_rcc.c **** 
 221:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
 222:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xEAF6FFFF;
  39              		.loc 1 222 0
  40 000e 1A68     		ldr	r2, [r3]
  41 0010 22F0A852 		bic	r2, r2, #352321536
  42 0014 22F41022 		bic	r2, r2, #589824
  43 0018 1A60     		str	r2, [r3]
 223:FWLIB/src/stm32f4xx_rcc.c **** 
 224:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 225:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  44              		.loc 1 225 0
  45 001a 094A     		ldr	r2, .L2+4
  46 001c 5A60     		str	r2, [r3, #4]
 226:FWLIB/src/stm32f4xx_rcc.c **** 
 227:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 228:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
  47              		.loc 1 228 0
  48 001e 094A     		ldr	r2, .L2+8
  49 0020 C3F88420 		str	r2, [r3, #132]
 229:FWLIB/src/stm32f4xx_rcc.c **** 
 230:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
 231:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = 0x24003000;
  50              		.loc 1 231 0
  51 0024 02F18062 		add	r2, r2, #67108864
  52 0028 C3F88820 		str	r2, [r3, #136]
 232:FWLIB/src/stm32f4xx_rcc.c ****  
 233:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 234:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
ARM GAS  /tmp/cco5yOG0.s 			page 6


  53              		.loc 1 234 0
  54 002c 1A68     		ldr	r2, [r3]
  55 002e 22F48022 		bic	r2, r2, #262144
  56 0032 1A60     		str	r2, [r3]
 235:FWLIB/src/stm32f4xx_rcc.c **** 
 236:FWLIB/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 237:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  57              		.loc 1 237 0
  58 0034 D960     		str	r1, [r3, #12]
 238:FWLIB/src/stm32f4xx_rcc.c **** 
 239:FWLIB/src/stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
 240:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000; 
  59              		.loc 1 240 0
  60 0036 C3F88C10 		str	r1, [r3, #140]
  61 003a 7047     		bx	lr
  62              	.L3:
  63              		.align	2
  64              	.L2:
  65 003c 00380240 		.word	1073887232
  66 0040 10300024 		.word	603992080
  67 0044 00300020 		.word	536883200
  68              		.cfi_endproc
  69              	.LFE112:
  71              		.section	.text.RCC_HSEConfig,"ax",%progbits
  72              		.align	1
  73              		.global	RCC_HSEConfig
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu softvfp
  79              	RCC_HSEConfig:
  80              	.LFB113:
 241:FWLIB/src/stm32f4xx_rcc.c **** }
 242:FWLIB/src/stm32f4xx_rcc.c **** 
 243:FWLIB/src/stm32f4xx_rcc.c **** /**
 244:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 245:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 246:FWLIB/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 247:FWLIB/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 248:FWLIB/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 249:FWLIB/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 250:FWLIB/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 251:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 252:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 253:FWLIB/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 254:FWLIB/src/stm32f4xx_rcc.c ****   *         function.    
 255:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 256:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 257:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 258:FWLIB/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 259:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 260:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 261:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 262:FWLIB/src/stm32f4xx_rcc.c ****   */
 263:FWLIB/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 264:FWLIB/src/stm32f4xx_rcc.c **** {
  81              		.loc 1 264 0
ARM GAS  /tmp/cco5yOG0.s 			page 7


  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86              	.LVL0:
 265:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 266:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 267:FWLIB/src/stm32f4xx_rcc.c **** 
 268:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 269:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
  87              		.loc 1 269 0
  88 0000 024B     		ldr	r3, .L5
  89 0002 0022     		movs	r2, #0
  90 0004 1A70     		strb	r2, [r3]
 270:FWLIB/src/stm32f4xx_rcc.c **** 
 271:FWLIB/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 272:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
  91              		.loc 1 272 0
  92 0006 1870     		strb	r0, [r3]
  93 0008 7047     		bx	lr
  94              	.L6:
  95 000a 00BF     		.align	2
  96              	.L5:
  97 000c 02380240 		.word	1073887234
  98              		.cfi_endproc
  99              	.LFE113:
 101              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 102              		.align	1
 103              		.global	RCC_AdjustHSICalibrationValue
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 107              		.fpu softvfp
 109              	RCC_AdjustHSICalibrationValue:
 110              	.LFB115:
 273:FWLIB/src/stm32f4xx_rcc.c **** }
 274:FWLIB/src/stm32f4xx_rcc.c **** 
 275:FWLIB/src/stm32f4xx_rcc.c **** /**
 276:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 277:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 278:FWLIB/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 279:FWLIB/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 280:FWLIB/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 281:FWLIB/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 282:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 283:FWLIB/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 284:FWLIB/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 285:FWLIB/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 286:FWLIB/src/stm32f4xx_rcc.c ****   */
 287:FWLIB/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 288:FWLIB/src/stm32f4xx_rcc.c **** {
 289:FWLIB/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 290:FWLIB/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 291:FWLIB/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 292:FWLIB/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 293:FWLIB/src/stm32f4xx_rcc.c ****   do
 294:FWLIB/src/stm32f4xx_rcc.c ****   {
ARM GAS  /tmp/cco5yOG0.s 			page 8


 295:FWLIB/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 296:FWLIB/src/stm32f4xx_rcc.c ****     startupcounter++;
 297:FWLIB/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 298:FWLIB/src/stm32f4xx_rcc.c **** 
 299:FWLIB/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 300:FWLIB/src/stm32f4xx_rcc.c ****   {
 301:FWLIB/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 302:FWLIB/src/stm32f4xx_rcc.c ****   }
 303:FWLIB/src/stm32f4xx_rcc.c ****   else
 304:FWLIB/src/stm32f4xx_rcc.c ****   {
 305:FWLIB/src/stm32f4xx_rcc.c ****     status = ERROR;
 306:FWLIB/src/stm32f4xx_rcc.c ****   }
 307:FWLIB/src/stm32f4xx_rcc.c ****   return (status);
 308:FWLIB/src/stm32f4xx_rcc.c **** }
 309:FWLIB/src/stm32f4xx_rcc.c **** 
 310:FWLIB/src/stm32f4xx_rcc.c **** /**
 311:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 312:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 313:FWLIB/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 314:FWLIB/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 315:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 316:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 317:FWLIB/src/stm32f4xx_rcc.c ****   */
 318:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 319:FWLIB/src/stm32f4xx_rcc.c **** {
 111              		.loc 1 319 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115              		@ link register save eliminated.
 116              	.LVL1:
 320:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 321:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 322:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 323:FWLIB/src/stm32f4xx_rcc.c **** 
 324:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 117              		.loc 1 324 0
 118 0000 034A     		ldr	r2, .L8
 119 0002 1368     		ldr	r3, [r2]
 120              	.LVL2:
 325:FWLIB/src/stm32f4xx_rcc.c **** 
 326:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 327:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 121              		.loc 1 327 0
 122 0004 23F0F803 		bic	r3, r3, #248
 123              	.LVL3:
 328:FWLIB/src/stm32f4xx_rcc.c **** 
 329:FWLIB/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 330:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 124              		.loc 1 330 0
 125 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 126              	.LVL4:
 331:FWLIB/src/stm32f4xx_rcc.c **** 
 332:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 333:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 127              		.loc 1 333 0
 128 000c 1060     		str	r0, [r2]
ARM GAS  /tmp/cco5yOG0.s 			page 9


 129 000e 7047     		bx	lr
 130              	.L9:
 131              		.align	2
 132              	.L8:
 133 0010 00380240 		.word	1073887232
 134              		.cfi_endproc
 135              	.LFE115:
 137              		.section	.text.RCC_HSICmd,"ax",%progbits
 138              		.align	1
 139              		.global	RCC_HSICmd
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu softvfp
 145              	RCC_HSICmd:
 146              	.LFB116:
 334:FWLIB/src/stm32f4xx_rcc.c **** }
 335:FWLIB/src/stm32f4xx_rcc.c **** 
 336:FWLIB/src/stm32f4xx_rcc.c **** /**
 337:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 338:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 339:FWLIB/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 340:FWLIB/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 341:FWLIB/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 342:FWLIB/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 343:FWLIB/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 344:FWLIB/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 345:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 346:FWLIB/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 347:FWLIB/src/stm32f4xx_rcc.c ****   *         system clock source.  
 348:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 349:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 350:FWLIB/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 351:FWLIB/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 352:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 353:FWLIB/src/stm32f4xx_rcc.c ****   */
 354:FWLIB/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:FWLIB/src/stm32f4xx_rcc.c **** {
 147              		.loc 1 355 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 152              	.LVL5:
 356:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 357:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 358:FWLIB/src/stm32f4xx_rcc.c **** 
 359:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 153              		.loc 1 359 0
 154 0000 014B     		ldr	r3, .L11
 155 0002 1860     		str	r0, [r3]
 156 0004 7047     		bx	lr
 157              	.L12:
 158 0006 00BF     		.align	2
 159              	.L11:
 160 0008 00004742 		.word	1111949312
 161              		.cfi_endproc
ARM GAS  /tmp/cco5yOG0.s 			page 10


 162              	.LFE116:
 164              		.section	.text.RCC_LSEConfig,"ax",%progbits
 165              		.align	1
 166              		.global	RCC_LSEConfig
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu softvfp
 172              	RCC_LSEConfig:
 173              	.LFB117:
 360:FWLIB/src/stm32f4xx_rcc.c **** }
 361:FWLIB/src/stm32f4xx_rcc.c **** 
 362:FWLIB/src/stm32f4xx_rcc.c **** /**
 363:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 364:FWLIB/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 365:FWLIB/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 366:FWLIB/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 367:FWLIB/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 368:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 369:FWLIB/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 370:FWLIB/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 371:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 372:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 373:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 374:FWLIB/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 375:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 376:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 377:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 378:FWLIB/src/stm32f4xx_rcc.c ****   */
 379:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 380:FWLIB/src/stm32f4xx_rcc.c **** {
 174              		.loc 1 380 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              		@ link register save eliminated.
 179              	.LVL6:
 381:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 382:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 383:FWLIB/src/stm32f4xx_rcc.c **** 
 384:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 385:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 386:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 180              		.loc 1 386 0
 181 0000 084B     		ldr	r3, .L17
 182 0002 0022     		movs	r2, #0
 183 0004 1A70     		strb	r2, [r3]
 387:FWLIB/src/stm32f4xx_rcc.c **** 
 388:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 389:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 184              		.loc 1 389 0
 185 0006 1A70     		strb	r2, [r3]
 390:FWLIB/src/stm32f4xx_rcc.c **** 
 391:FWLIB/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 392:FWLIB/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 186              		.loc 1 392 0
 187 0008 0128     		cmp	r0, #1
ARM GAS  /tmp/cco5yOG0.s 			page 11


 188 000a 02D0     		beq	.L15
 189 000c 0428     		cmp	r0, #4
 190 000e 04D0     		beq	.L16
 191 0010 7047     		bx	lr
 192              	.L15:
 393:FWLIB/src/stm32f4xx_rcc.c ****   {
 394:FWLIB/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 395:FWLIB/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 396:FWLIB/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 193              		.loc 1 396 0
 194 0012 0122     		movs	r2, #1
 195 0014 034B     		ldr	r3, .L17
 196 0016 1A70     		strb	r2, [r3]
 397:FWLIB/src/stm32f4xx_rcc.c ****       break;
 197              		.loc 1 397 0
 198 0018 7047     		bx	lr
 199              	.L16:
 398:FWLIB/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 399:FWLIB/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 400:FWLIB/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 200              		.loc 1 400 0
 201 001a 0522     		movs	r2, #5
 202 001c 014B     		ldr	r3, .L17
 203 001e 1A70     		strb	r2, [r3]
 204 0020 7047     		bx	lr
 205              	.L18:
 206 0022 00BF     		.align	2
 207              	.L17:
 208 0024 70380240 		.word	1073887344
 209              		.cfi_endproc
 210              	.LFE117:
 212              		.section	.text.RCC_LSICmd,"ax",%progbits
 213              		.align	1
 214              		.global	RCC_LSICmd
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu softvfp
 220              	RCC_LSICmd:
 221              	.LFB118:
 401:FWLIB/src/stm32f4xx_rcc.c ****       break;
 402:FWLIB/src/stm32f4xx_rcc.c ****     default:
 403:FWLIB/src/stm32f4xx_rcc.c ****       break;
 404:FWLIB/src/stm32f4xx_rcc.c ****   }
 405:FWLIB/src/stm32f4xx_rcc.c **** }
 406:FWLIB/src/stm32f4xx_rcc.c **** 
 407:FWLIB/src/stm32f4xx_rcc.c **** /**
 408:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 409:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 410:FWLIB/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 411:FWLIB/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 412:FWLIB/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 413:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 414:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 415:FWLIB/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 416:FWLIB/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 417:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
ARM GAS  /tmp/cco5yOG0.s 			page 12


 418:FWLIB/src/stm32f4xx_rcc.c ****   */
 419:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 420:FWLIB/src/stm32f4xx_rcc.c **** {
 222              		.loc 1 420 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              		@ link register save eliminated.
 227              	.LVL7:
 421:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 422:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 423:FWLIB/src/stm32f4xx_rcc.c **** 
 424:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 228              		.loc 1 424 0
 229 0000 014B     		ldr	r3, .L20
 230 0002 1860     		str	r0, [r3]
 231 0004 7047     		bx	lr
 232              	.L21:
 233 0006 00BF     		.align	2
 234              	.L20:
 235 0008 800E4742 		.word	1111953024
 236              		.cfi_endproc
 237              	.LFE118:
 239              		.section	.text.RCC_PLLConfig,"ax",%progbits
 240              		.align	1
 241              		.global	RCC_PLLConfig
 242              		.syntax unified
 243              		.thumb
 244              		.thumb_func
 245              		.fpu softvfp
 247              	RCC_PLLConfig:
 248              	.LFB119:
 425:FWLIB/src/stm32f4xx_rcc.c **** }
 426:FWLIB/src/stm32f4xx_rcc.c **** 
 427:FWLIB/src/stm32f4xx_rcc.c **** /**
 428:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 429:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 430:FWLIB/src/stm32f4xx_rcc.c ****   *  
 431:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 432:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 433:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 434:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 435:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 436:FWLIB/src/stm32f4xx_rcc.c ****   *  
 437:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 438:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 439:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 440:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 441:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 442:FWLIB/src/stm32f4xx_rcc.c ****   *  
 443:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 444:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 445:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 446:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 447:FWLIB/src/stm32f4xx_rcc.c ****   *   
 448:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 449:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
ARM GAS  /tmp/cco5yOG0.s 			page 13


 450:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 451:FWLIB/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 452:FWLIB/src/stm32f4xx_rcc.c ****   *  
 453:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 454:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 455:FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 456:FWLIB/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 457:FWLIB/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 458:FWLIB/src/stm32f4xx_rcc.c ****   *         correctly.
 459:FWLIB/src/stm32f4xx_rcc.c ****   *   
 460:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 461:FWLIB/src/stm32f4xx_rcc.c ****   */
 462:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 463:FWLIB/src/stm32f4xx_rcc.c **** {
 249              		.loc 1 463 0
 250              		.cfi_startproc
 251              		@ args = 4, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 254              	.LVL8:
 464:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 465:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 466:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 467:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 468:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 469:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 470:FWLIB/src/stm32f4xx_rcc.c **** 
 471:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 255              		.loc 1 471 0
 256 0000 41EA8211 		orr	r1, r1, r2, lsl #6
 257              	.LVL9:
 258 0004 5B08     		lsrs	r3, r3, #1
 259              	.LVL10:
 260 0006 013B     		subs	r3, r3, #1
 261 0008 41EA0341 		orr	r1, r1, r3, lsl #16
 262 000c 0143     		orrs	r1, r1, r0
 263 000e 0098     		ldr	r0, [sp]
 264              	.LVL11:
 265 0010 41EA0061 		orr	r1, r1, r0, lsl #24
 266 0014 014B     		ldr	r3, .L23
 267 0016 5960     		str	r1, [r3, #4]
 268              	.LVL12:
 269 0018 7047     		bx	lr
 270              	.L24:
 271 001a 00BF     		.align	2
 272              	.L23:
 273 001c 00380240 		.word	1073887232
 274              		.cfi_endproc
 275              	.LFE119:
 277              		.section	.text.RCC_PLLCmd,"ax",%progbits
 278              		.align	1
 279              		.global	RCC_PLLCmd
 280              		.syntax unified
 281              		.thumb
 282              		.thumb_func
 283              		.fpu softvfp
 285              	RCC_PLLCmd:
ARM GAS  /tmp/cco5yOG0.s 			page 14


 286              	.LFB120:
 472:FWLIB/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 473:FWLIB/src/stm32f4xx_rcc.c **** }
 474:FWLIB/src/stm32f4xx_rcc.c **** 
 475:FWLIB/src/stm32f4xx_rcc.c **** /**
 476:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 477:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 478:FWLIB/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 479:FWLIB/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 480:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 481:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 482:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 483:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 484:FWLIB/src/stm32f4xx_rcc.c ****   */
 485:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 486:FWLIB/src/stm32f4xx_rcc.c **** {
 287              		.loc 1 486 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 292              	.LVL13:
 487:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 488:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 489:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 293              		.loc 1 489 0
 294 0000 014B     		ldr	r3, .L26
 295 0002 1860     		str	r0, [r3]
 296 0004 7047     		bx	lr
 297              	.L27:
 298 0006 00BF     		.align	2
 299              	.L26:
 300 0008 60004742 		.word	1111949408
 301              		.cfi_endproc
 302              	.LFE120:
 304              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 305              		.align	1
 306              		.global	RCC_PLLI2SConfig
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu softvfp
 312              	RCC_PLLI2SConfig:
 313              	.LFB121:
 490:FWLIB/src/stm32f4xx_rcc.c **** }
 491:FWLIB/src/stm32f4xx_rcc.c **** 
 492:FWLIB/src/stm32f4xx_rcc.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx)
 493:FWLIB/src/stm32f4xx_rcc.c **** /**
 494:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 495:FWLIB/src/stm32f4xx_rcc.c ****   *  
 496:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F405xx/407xx, STM32F415xx/417xx 
 497:FWLIB/src/stm32f4xx_rcc.c ****   *         or STM32F401xx devices. 
 498:FWLIB/src/stm32f4xx_rcc.c ****   *    
 499:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 500:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 501:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 502:FWLIB/src/stm32f4xx_rcc.c ****   *             
ARM GAS  /tmp/cco5yOG0.s 			page 15


 503:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 504:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 505:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 506:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 507:FWLIB/src/stm32f4xx_rcc.c ****   *    
 508:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 509:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 510:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 511:FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 512:FWLIB/src/stm32f4xx_rcc.c ****   *   
 513:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 514:FWLIB/src/stm32f4xx_rcc.c ****   */
 515:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 516:FWLIB/src/stm32f4xx_rcc.c **** {
 314              		.loc 1 516 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319              	.LVL14:
 517:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 518:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 519:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 520:FWLIB/src/stm32f4xx_rcc.c **** 
 521:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 320              		.loc 1 521 0
 321 0000 0907     		lsls	r1, r1, #28
 322              	.LVL15:
 323 0002 41EA8011 		orr	r1, r1, r0, lsl #6
 324 0006 024B     		ldr	r3, .L29
 325 0008 C3F88410 		str	r1, [r3, #132]
 326 000c 7047     		bx	lr
 327              	.L30:
 328 000e 00BF     		.align	2
 329              	.L29:
 330 0010 00380240 		.word	1073887232
 331              		.cfi_endproc
 332              	.LFE121:
 334              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 335              		.align	1
 336              		.global	RCC_PLLI2SCmd
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 340              		.fpu softvfp
 342              	RCC_PLLI2SCmd:
 343              	.LFB122:
 522:FWLIB/src/stm32f4xx_rcc.c **** }
 523:FWLIB/src/stm32f4xx_rcc.c **** 
 524:FWLIB/src/stm32f4xx_rcc.c **** #elif defined (STM32F411xE)
 525:FWLIB/src/stm32f4xx_rcc.c **** /**
 526:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 527:FWLIB/src/stm32f4xx_rcc.c ****   *  
 528:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F411xE devices. 
 529:FWLIB/src/stm32f4xx_rcc.c ****   *    
 530:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 531:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
ARM GAS  /tmp/cco5yOG0.s 			page 16


 532:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 533:FWLIB/src/stm32f4xx_rcc.c ****   *
 534:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 535:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 536:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 537:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 538:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 539:FWLIB/src/stm32f4xx_rcc.c ****   *
 540:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 541:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 542:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 543:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 544:FWLIB/src/stm32f4xx_rcc.c ****   *    
 545:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 546:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 547:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 548:FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 549:FWLIB/src/stm32f4xx_rcc.c ****   *   
 550:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 551:FWLIB/src/stm32f4xx_rcc.c ****   */
 552:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
 553:FWLIB/src/stm32f4xx_rcc.c **** {
 554:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 555:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 556:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 557:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 558:FWLIB/src/stm32f4xx_rcc.c **** 
 559:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
 560:FWLIB/src/stm32f4xx_rcc.c **** }
 561:FWLIB/src/stm32f4xx_rcc.c **** 
 562:FWLIB/src/stm32f4xx_rcc.c **** #elif defined (STM32F427_437xx) || defined (STM32F429_439xx)
 563:FWLIB/src/stm32f4xx_rcc.c **** /**
 564:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 565:FWLIB/src/stm32f4xx_rcc.c ****   * 
 566:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 567:FWLIB/src/stm32f4xx_rcc.c ****   *         
 568:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 569:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 570:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 571:FWLIB/src/stm32f4xx_rcc.c ****   *             
 572:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 573:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 574:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 575:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 576:FWLIB/src/stm32f4xx_rcc.c ****   * 
 577:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 578:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 579:FWLIB/src/stm32f4xx_rcc.c ****   *                 
 580:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 581:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 582:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 583:FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 584:FWLIB/src/stm32f4xx_rcc.c ****   * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
 585:FWLIB/src/stm32f4xx_rcc.c ****   *   
 586:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 587:FWLIB/src/stm32f4xx_rcc.c ****   */
 588:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
ARM GAS  /tmp/cco5yOG0.s 			page 17


 589:FWLIB/src/stm32f4xx_rcc.c **** {
 590:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 591:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 592:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 593:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 594:FWLIB/src/stm32f4xx_rcc.c **** 
 595:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 596:FWLIB/src/stm32f4xx_rcc.c **** }
 597:FWLIB/src/stm32f4xx_rcc.c **** #else
 598:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F401xx */
 599:FWLIB/src/stm32f4xx_rcc.c **** 
 600:FWLIB/src/stm32f4xx_rcc.c **** /**
 601:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
 602:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 603:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 604:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 605:FWLIB/src/stm32f4xx_rcc.c ****   */
 606:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 607:FWLIB/src/stm32f4xx_rcc.c **** {
 344              		.loc 1 607 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              		@ link register save eliminated.
 349              	.LVL16:
 608:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 609:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 610:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 350              		.loc 1 610 0
 351 0000 014B     		ldr	r3, .L32
 352 0002 1860     		str	r0, [r3]
 353 0004 7047     		bx	lr
 354              	.L33:
 355 0006 00BF     		.align	2
 356              	.L32:
 357 0008 68004742 		.word	1111949416
 358              		.cfi_endproc
 359              	.LFE122:
 361              		.section	.text.RCC_PLLSAIConfig,"ax",%progbits
 362              		.align	1
 363              		.global	RCC_PLLSAIConfig
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu softvfp
 369              	RCC_PLLSAIConfig:
 370              	.LFB123:
 611:FWLIB/src/stm32f4xx_rcc.c **** }
 612:FWLIB/src/stm32f4xx_rcc.c **** 
 613:FWLIB/src/stm32f4xx_rcc.c **** /**
 614:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 615:FWLIB/src/stm32f4xx_rcc.c ****   *
 616:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 617:FWLIB/src/stm32f4xx_rcc.c ****   *        
 618:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 619:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 620:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
ARM GAS  /tmp/cco5yOG0.s 			page 18


 621:FWLIB/src/stm32f4xx_rcc.c ****   *             
 622:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 623:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 624:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 625:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 626:FWLIB/src/stm32f4xx_rcc.c ****   *           
 627:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 628:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 629:FWLIB/src/stm32f4xx_rcc.c ****   *            
 630:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 631:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 632:FWLIB/src/stm32f4xx_rcc.c ****   *   
 633:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 634:FWLIB/src/stm32f4xx_rcc.c ****   */
 635:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 636:FWLIB/src/stm32f4xx_rcc.c **** {
 371              		.loc 1 636 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              		@ link register save eliminated.
 376              	.LVL17:
 637:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 638:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 639:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 640:FWLIB/src/stm32f4xx_rcc.c **** 
 641:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 377              		.loc 1 641 0
 378 0000 0906     		lsls	r1, r1, #24
 379              	.LVL18:
 380 0002 41EA8011 		orr	r1, r1, r0, lsl #6
 381 0006 41EA0271 		orr	r1, r1, r2, lsl #28
 382 000a 024B     		ldr	r3, .L35
 383 000c C3F88810 		str	r1, [r3, #136]
 384 0010 7047     		bx	lr
 385              	.L36:
 386 0012 00BF     		.align	2
 387              	.L35:
 388 0014 00380240 		.word	1073887232
 389              		.cfi_endproc
 390              	.LFE123:
 392              		.section	.text.RCC_PLLSAICmd,"ax",%progbits
 393              		.align	1
 394              		.global	RCC_PLLSAICmd
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu softvfp
 400              	RCC_PLLSAICmd:
 401              	.LFB124:
 642:FWLIB/src/stm32f4xx_rcc.c **** }
 643:FWLIB/src/stm32f4xx_rcc.c **** 
 644:FWLIB/src/stm32f4xx_rcc.c **** /**
 645:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLSAI. 
 646:FWLIB/src/stm32f4xx_rcc.c ****   * 
 647:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 648:FWLIB/src/stm32f4xx_rcc.c ****   *       
ARM GAS  /tmp/cco5yOG0.s 			page 19


 649:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
 650:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
 651:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 652:FWLIB/src/stm32f4xx_rcc.c ****   */
 653:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAICmd(FunctionalState NewState)
 654:FWLIB/src/stm32f4xx_rcc.c **** {
 402              		.loc 1 654 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              		@ link register save eliminated.
 407              	.LVL19:
 655:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 656:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 657:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 408              		.loc 1 657 0
 409 0000 014B     		ldr	r3, .L38
 410 0002 1860     		str	r0, [r3]
 411 0004 7047     		bx	lr
 412              	.L39:
 413 0006 00BF     		.align	2
 414              	.L38:
 415 0008 70004742 		.word	1111949424
 416              		.cfi_endproc
 417              	.LFE124:
 419              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 420              		.align	1
 421              		.global	RCC_ClockSecuritySystemCmd
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 425              		.fpu softvfp
 427              	RCC_ClockSecuritySystemCmd:
 428              	.LFB125:
 658:FWLIB/src/stm32f4xx_rcc.c **** }
 659:FWLIB/src/stm32f4xx_rcc.c **** 
 660:FWLIB/src/stm32f4xx_rcc.c **** /**
 661:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 662:FWLIB/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 663:FWLIB/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 664:FWLIB/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 665:FWLIB/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 666:FWLIB/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 667:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 668:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 669:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 670:FWLIB/src/stm32f4xx_rcc.c ****   */
 671:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 672:FWLIB/src/stm32f4xx_rcc.c **** {
 429              		.loc 1 672 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434              	.LVL20:
 673:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 674:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/cco5yOG0.s 			page 20


 675:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 435              		.loc 1 675 0
 436 0000 014B     		ldr	r3, .L41
 437 0002 1860     		str	r0, [r3]
 438 0004 7047     		bx	lr
 439              	.L42:
 440 0006 00BF     		.align	2
 441              	.L41:
 442 0008 4C004742 		.word	1111949388
 443              		.cfi_endproc
 444              	.LFE125:
 446              		.section	.text.RCC_MCO1Config,"ax",%progbits
 447              		.align	1
 448              		.global	RCC_MCO1Config
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu softvfp
 454              	RCC_MCO1Config:
 455              	.LFB126:
 676:FWLIB/src/stm32f4xx_rcc.c **** }
 677:FWLIB/src/stm32f4xx_rcc.c **** 
 678:FWLIB/src/stm32f4xx_rcc.c **** /**
 679:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 680:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 681:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 682:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 684:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 685:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 686:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 687:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 688:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 689:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 690:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 691:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 692:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 693:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 694:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 695:FWLIB/src/stm32f4xx_rcc.c ****   */
 696:FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 697:FWLIB/src/stm32f4xx_rcc.c **** {
 456              		.loc 1 697 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 0
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              		@ link register save eliminated.
 461              	.LVL21:
 698:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 699:FWLIB/src/stm32f4xx_rcc.c ****   
 700:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 701:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 702:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 703:FWLIB/src/stm32f4xx_rcc.c **** 
 704:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 462              		.loc 1 704 0
 463 0000 034A     		ldr	r2, .L44
ARM GAS  /tmp/cco5yOG0.s 			page 21


 464 0002 9368     		ldr	r3, [r2, #8]
 465              	.LVL22:
 705:FWLIB/src/stm32f4xx_rcc.c **** 
 706:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 707:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 466              		.loc 1 707 0
 467 0004 23F0EC63 		bic	r3, r3, #123731968
 468              	.LVL23:
 708:FWLIB/src/stm32f4xx_rcc.c **** 
 709:FWLIB/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 710:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 469              		.loc 1 710 0
 470 0008 0143     		orrs	r1, r1, r0
 471              	.LVL24:
 472 000a 0B43     		orrs	r3, r3, r1
 473              	.LVL25:
 711:FWLIB/src/stm32f4xx_rcc.c **** 
 712:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 713:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 474              		.loc 1 713 0
 475 000c 9360     		str	r3, [r2, #8]
 476 000e 7047     		bx	lr
 477              	.L45:
 478              		.align	2
 479              	.L44:
 480 0010 00380240 		.word	1073887232
 481              		.cfi_endproc
 482              	.LFE126:
 484              		.section	.text.RCC_MCO2Config,"ax",%progbits
 485              		.align	1
 486              		.global	RCC_MCO2Config
 487              		.syntax unified
 488              		.thumb
 489              		.thumb_func
 490              		.fpu softvfp
 492              	RCC_MCO2Config:
 493              	.LFB127:
 714:FWLIB/src/stm32f4xx_rcc.c **** }
 715:FWLIB/src/stm32f4xx_rcc.c **** 
 716:FWLIB/src/stm32f4xx_rcc.c **** /**
 717:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 718:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 719:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 720:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 721:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 722:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 723:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 724:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 725:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 726:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 727:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 728:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 729:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 730:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 731:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 732:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 733:FWLIB/src/stm32f4xx_rcc.c ****   */
ARM GAS  /tmp/cco5yOG0.s 			page 22


 734:FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 735:FWLIB/src/stm32f4xx_rcc.c **** {
 494              		.loc 1 735 0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498              		@ link register save eliminated.
 499              	.LVL26:
 736:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 737:FWLIB/src/stm32f4xx_rcc.c ****   
 738:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 739:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 740:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 741:FWLIB/src/stm32f4xx_rcc.c ****   
 742:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 500              		.loc 1 742 0
 501 0000 034A     		ldr	r2, .L47
 502 0002 9368     		ldr	r3, [r2, #8]
 503              	.LVL27:
 743:FWLIB/src/stm32f4xx_rcc.c ****   
 744:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 745:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 504              		.loc 1 745 0
 505 0004 23F07843 		bic	r3, r3, #-134217728
 506              	.LVL28:
 746:FWLIB/src/stm32f4xx_rcc.c **** 
 747:FWLIB/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 748:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 507              		.loc 1 748 0
 508 0008 0143     		orrs	r1, r1, r0
 509              	.LVL29:
 510 000a 0B43     		orrs	r3, r3, r1
 511              	.LVL30:
 749:FWLIB/src/stm32f4xx_rcc.c **** 
 750:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 751:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 512              		.loc 1 751 0
 513 000c 9360     		str	r3, [r2, #8]
 514 000e 7047     		bx	lr
 515              	.L48:
 516              		.align	2
 517              	.L47:
 518 0010 00380240 		.word	1073887232
 519              		.cfi_endproc
 520              	.LFE127:
 522              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 523              		.align	1
 524              		.global	RCC_SYSCLKConfig
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 528              		.fpu softvfp
 530              	RCC_SYSCLKConfig:
 531              	.LFB128:
 752:FWLIB/src/stm32f4xx_rcc.c **** }
 753:FWLIB/src/stm32f4xx_rcc.c **** 
 754:FWLIB/src/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/cco5yOG0.s 			page 23


 755:FWLIB/src/stm32f4xx_rcc.c ****   * @}
 756:FWLIB/src/stm32f4xx_rcc.c ****   */
 757:FWLIB/src/stm32f4xx_rcc.c **** 
 758:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 759:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 760:FWLIB/src/stm32f4xx_rcc.c ****  *
 761:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
 762:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
 763:FWLIB/src/stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 764:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
 765:FWLIB/src/stm32f4xx_rcc.c ****     [..]
 766:FWLIB/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 767:FWLIB/src/stm32f4xx_rcc.c ****       APB2 busses clocks.
 768:FWLIB/src/stm32f4xx_rcc.c ****   
 769:FWLIB/src/stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 770:FWLIB/src/stm32f4xx_rcc.c ****           HSE and PLL.
 771:FWLIB/src/stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 772:FWLIB/src/stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 773:FWLIB/src/stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 774:FWLIB/src/stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 775:FWLIB/src/stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 776:FWLIB/src/stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 777:FWLIB/src/stm32f4xx_rcc.c **** 
 778:FWLIB/src/stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 779:FWLIB/src/stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 780:FWLIB/src/stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
 781:FWLIB/src/stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
 782:FWLIB/src/stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 783:FWLIB/src/stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 784:FWLIB/src/stm32f4xx_rcc.c ****              functions to configure this clock. 
 785:FWLIB/src/stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 786:FWLIB/src/stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
 787:FWLIB/src/stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
 788:FWLIB/src/stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
 789:FWLIB/src/stm32f4xx_rcc.c ****        
 790:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F405xx/407xx and STM32F415xx/417xx devices, the maximum frequency 
 791:FWLIB/src/stm32f4xx_rcc.c ****          of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. Depending 
 792:FWLIB/src/stm32f4xx_rcc.c ****          on the device voltage range, the maximum frequency should be adapted accordingly:
 793:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 794:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 795:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 796:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 797:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 798:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 799:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 800:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 801:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 802:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 803:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 804:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 805:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 806:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 807:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 808:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 809:FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
 810:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 811:FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
ARM GAS  /tmp/cco5yOG0.s 			page 24


 812:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 813:FWLIB/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 814:FWLIB/src/stm32f4xx_rcc.c ****  +---------------|----------------|----------------|-----------------|-----------------+ 
 815:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F42xxx/43xxx devices, the maximum frequency of the SYSCLK and HCLK is 180 MHz, 
 816:FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 90 MHz and PCLK1 45 MHz. Depending on the device voltage range, the maximum 
 817:FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 818:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 819:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 820:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 821:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 822:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 823:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 824:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 825:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 826:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 827:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 828:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 829:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 830:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 831:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 832:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 833:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 834:FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
 835:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 836:FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
 837:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 838:FWLIB/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 839:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 840:FWLIB/src/stm32f4xx_rcc.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 841:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 842:FWLIB/src/stm32f4xx_rcc.c ****    
 843:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F401xx devices, the maximum frequency of the SYSCLK and HCLK is 84 MHz, 
 844:FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 84 MHz and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
 845:FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 846:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 847:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 848:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 849:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 850:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 851:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 852:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 853:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 854:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 855:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 856:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 857:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 858:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
 859:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 860:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  | 
 861:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 862:FWLIB/src/stm32f4xx_rcc.c **** 
 863:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F411xE devices, the maximum frequency of the SYSCLK and HCLK is 100 MHz, 
 864:FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 100 MHz and PCLK1 50 MHz. Depending on the device voltage range, the maximum 
 865:FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 866:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 867:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 868:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
ARM GAS  /tmp/cco5yOG0.s 			page 25


 869:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 870:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 871:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 872:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 873:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 874:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
 875:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 876:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 877:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 878:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 879:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 880:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
 881:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 882:FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
 883:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 884:FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
 885:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 886:FWLIB/src/stm32f4xx_rcc.c ****   
 887:FWLIB/src/stm32f4xx_rcc.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
 888:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS = '0', the maximum value of fHCLK = 144MHz. 
 889:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS = '1', the maximum value of fHCLK = 168MHz. 
 890:FWLIB/src/stm32f4xx_rcc.c ****           [..] 
 891:FWLIB/src/stm32f4xx_rcc.c ****           On STM32F42xxx/43xxx devices:
 892:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 120MHz.
 893:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 144MHz.
 894:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11', the maximum value of f  is 168MHz 
 895:FWLIB/src/stm32f4xx_rcc.c ****           [..]  
 896:FWLIB/src/stm32f4xx_rcc.c ****           On STM32F401x devices:
 897:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 64MHz.
 898:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 84MHz.
 899:FWLIB/src/stm32f4xx_rcc.c ****           On STM32F411xE devices:
 900:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01' the maximum value of fHCLK is 64MHz.
 901:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10' the maximum value of fHCLK is 84MHz.
 902:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11' the maximum value of fHCLK is 100MHz.
 903:FWLIB/src/stm32f4xx_rcc.c **** 
 904:FWLIB/src/stm32f4xx_rcc.c ****        You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
 905:FWLIB/src/stm32f4xx_rcc.c **** 
 906:FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
 907:FWLIB/src/stm32f4xx_rcc.c ****   * @{
 908:FWLIB/src/stm32f4xx_rcc.c ****   */
 909:FWLIB/src/stm32f4xx_rcc.c **** 
 910:FWLIB/src/stm32f4xx_rcc.c **** /**
 911:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 912:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 913:FWLIB/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 914:FWLIB/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 915:FWLIB/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 916:FWLIB/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 917:FWLIB/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 918:FWLIB/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 919:FWLIB/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 920:FWLIB/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 921:FWLIB/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 922:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 923:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 924:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 925:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
ARM GAS  /tmp/cco5yOG0.s 			page 26


 926:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 927:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 928:FWLIB/src/stm32f4xx_rcc.c ****   */
 929:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 930:FWLIB/src/stm32f4xx_rcc.c **** {
 532              		.loc 1 930 0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 0
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 536              		@ link register save eliminated.
 537              	.LVL31:
 931:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 932:FWLIB/src/stm32f4xx_rcc.c **** 
 933:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 934:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 935:FWLIB/src/stm32f4xx_rcc.c **** 
 936:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 538              		.loc 1 936 0
 539 0000 034A     		ldr	r2, .L50
 540 0002 9368     		ldr	r3, [r2, #8]
 541              	.LVL32:
 937:FWLIB/src/stm32f4xx_rcc.c **** 
 938:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 939:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 542              		.loc 1 939 0
 543 0004 23F00303 		bic	r3, r3, #3
 544              	.LVL33:
 940:FWLIB/src/stm32f4xx_rcc.c **** 
 941:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 942:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 545              		.loc 1 942 0
 546 0008 1843     		orrs	r0, r0, r3
 547              	.LVL34:
 943:FWLIB/src/stm32f4xx_rcc.c **** 
 944:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 945:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 548              		.loc 1 945 0
 549 000a 9060     		str	r0, [r2, #8]
 550 000c 7047     		bx	lr
 551              	.L51:
 552 000e 00BF     		.align	2
 553              	.L50:
 554 0010 00380240 		.word	1073887232
 555              		.cfi_endproc
 556              	.LFE128:
 558              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 559              		.align	1
 560              		.global	RCC_GetSYSCLKSource
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu softvfp
 566              	RCC_GetSYSCLKSource:
 567              	.LFB129:
 946:FWLIB/src/stm32f4xx_rcc.c **** }
 947:FWLIB/src/stm32f4xx_rcc.c **** 
 948:FWLIB/src/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/cco5yOG0.s 			page 27


 949:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 950:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 951:FWLIB/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 952:FWLIB/src/stm32f4xx_rcc.c ****   *         of the following:
 953:FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 954:FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 955:FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 956:FWLIB/src/stm32f4xx_rcc.c ****   */
 957:FWLIB/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 958:FWLIB/src/stm32f4xx_rcc.c **** {
 568              		.loc 1 958 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 572              		@ link register save eliminated.
 959:FWLIB/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 573              		.loc 1 959 0
 574 0000 024B     		ldr	r3, .L53
 575 0002 9868     		ldr	r0, [r3, #8]
 960:FWLIB/src/stm32f4xx_rcc.c **** }
 576              		.loc 1 960 0
 577 0004 00F00C00 		and	r0, r0, #12
 578 0008 7047     		bx	lr
 579              	.L54:
 580 000a 00BF     		.align	2
 581              	.L53:
 582 000c 00380240 		.word	1073887232
 583              		.cfi_endproc
 584              	.LFE129:
 586              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 587              		.align	1
 588              		.global	RCC_HCLKConfig
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
 592              		.fpu softvfp
 594              	RCC_HCLKConfig:
 595              	.LFB130:
 961:FWLIB/src/stm32f4xx_rcc.c **** 
 962:FWLIB/src/stm32f4xx_rcc.c **** /**
 963:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 964:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 965:FWLIB/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 966:FWLIB/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 967:FWLIB/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 968:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 969:FWLIB/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 970:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 971:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 972:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 973:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 974:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 975:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 976:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 977:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 978:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 979:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
ARM GAS  /tmp/cco5yOG0.s 			page 28


 980:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 981:FWLIB/src/stm32f4xx_rcc.c ****   */
 982:FWLIB/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 983:FWLIB/src/stm32f4xx_rcc.c **** {
 596              		.loc 1 983 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 0
 599              		@ frame_needed = 0, uses_anonymous_args = 0
 600              		@ link register save eliminated.
 601              	.LVL35:
 984:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 985:FWLIB/src/stm32f4xx_rcc.c ****   
 986:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 987:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 988:FWLIB/src/stm32f4xx_rcc.c **** 
 989:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 602              		.loc 1 989 0
 603 0000 034A     		ldr	r2, .L56
 604 0002 9368     		ldr	r3, [r2, #8]
 605              	.LVL36:
 990:FWLIB/src/stm32f4xx_rcc.c **** 
 991:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 992:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 606              		.loc 1 992 0
 607 0004 23F0F003 		bic	r3, r3, #240
 608              	.LVL37:
 993:FWLIB/src/stm32f4xx_rcc.c **** 
 994:FWLIB/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 995:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 609              		.loc 1 995 0
 610 0008 1843     		orrs	r0, r0, r3
 611              	.LVL38:
 996:FWLIB/src/stm32f4xx_rcc.c **** 
 997:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 998:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 612              		.loc 1 998 0
 613 000a 9060     		str	r0, [r2, #8]
 614 000c 7047     		bx	lr
 615              	.L57:
 616 000e 00BF     		.align	2
 617              	.L56:
 618 0010 00380240 		.word	1073887232
 619              		.cfi_endproc
 620              	.LFE130:
 622              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 623              		.align	1
 624              		.global	RCC_PCLK1Config
 625              		.syntax unified
 626              		.thumb
 627              		.thumb_func
 628              		.fpu softvfp
 630              	RCC_PCLK1Config:
 631              	.LFB131:
 999:FWLIB/src/stm32f4xx_rcc.c **** }
1000:FWLIB/src/stm32f4xx_rcc.c **** 
1001:FWLIB/src/stm32f4xx_rcc.c **** 
1002:FWLIB/src/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/cco5yOG0.s 			page 29


1003:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
1004:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
1005:FWLIB/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1006:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1007:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
1008:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
1009:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
1010:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
1011:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
1012:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1013:FWLIB/src/stm32f4xx_rcc.c ****   */
1014:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
1015:FWLIB/src/stm32f4xx_rcc.c **** {
 632              		.loc 1 1015 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637              	.LVL39:
1016:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1017:FWLIB/src/stm32f4xx_rcc.c **** 
1018:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1019:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1020:FWLIB/src/stm32f4xx_rcc.c **** 
1021:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 638              		.loc 1 1021 0
 639 0000 034A     		ldr	r2, .L59
 640 0002 9368     		ldr	r3, [r2, #8]
 641              	.LVL40:
1022:FWLIB/src/stm32f4xx_rcc.c **** 
1023:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
1024:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 642              		.loc 1 1024 0
 643 0004 23F4E053 		bic	r3, r3, #7168
 644              	.LVL41:
1025:FWLIB/src/stm32f4xx_rcc.c **** 
1026:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
1027:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 645              		.loc 1 1027 0
 646 0008 1843     		orrs	r0, r0, r3
 647              	.LVL42:
1028:FWLIB/src/stm32f4xx_rcc.c **** 
1029:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1030:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 648              		.loc 1 1030 0
 649 000a 9060     		str	r0, [r2, #8]
 650 000c 7047     		bx	lr
 651              	.L60:
 652 000e 00BF     		.align	2
 653              	.L59:
 654 0010 00380240 		.word	1073887232
 655              		.cfi_endproc
 656              	.LFE131:
 658              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 659              		.align	1
 660              		.global	RCC_PCLK2Config
 661              		.syntax unified
ARM GAS  /tmp/cco5yOG0.s 			page 30


 662              		.thumb
 663              		.thumb_func
 664              		.fpu softvfp
 666              	RCC_PCLK2Config:
 667              	.LFB132:
1031:FWLIB/src/stm32f4xx_rcc.c **** }
1032:FWLIB/src/stm32f4xx_rcc.c **** 
1033:FWLIB/src/stm32f4xx_rcc.c **** /**
1034:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
1035:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
1036:FWLIB/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1037:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1038:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
1039:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
1040:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
1041:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
1042:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
1043:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1044:FWLIB/src/stm32f4xx_rcc.c ****   */
1045:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
1046:FWLIB/src/stm32f4xx_rcc.c **** {
 668              		.loc 1 1046 0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672              		@ link register save eliminated.
 673              	.LVL43:
1047:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1048:FWLIB/src/stm32f4xx_rcc.c **** 
1049:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1050:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1051:FWLIB/src/stm32f4xx_rcc.c **** 
1052:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 674              		.loc 1 1052 0
 675 0000 034A     		ldr	r2, .L62
 676 0002 9368     		ldr	r3, [r2, #8]
 677              	.LVL44:
1053:FWLIB/src/stm32f4xx_rcc.c **** 
1054:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
1055:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 678              		.loc 1 1055 0
 679 0004 23F46043 		bic	r3, r3, #57344
 680              	.LVL45:
1056:FWLIB/src/stm32f4xx_rcc.c **** 
1057:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
1058:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 681              		.loc 1 1058 0
 682 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 683              	.LVL46:
1059:FWLIB/src/stm32f4xx_rcc.c **** 
1060:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1061:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 684              		.loc 1 1061 0
 685 000c 9060     		str	r0, [r2, #8]
 686 000e 7047     		bx	lr
 687              	.L63:
 688              		.align	2
ARM GAS  /tmp/cco5yOG0.s 			page 31


 689              	.L62:
 690 0010 00380240 		.word	1073887232
 691              		.cfi_endproc
 692              	.LFE132:
 694              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 695              		.align	1
 696              		.global	RCC_GetClocksFreq
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 700              		.fpu softvfp
 702              	RCC_GetClocksFreq:
 703              	.LFB133:
1062:FWLIB/src/stm32f4xx_rcc.c **** }
1063:FWLIB/src/stm32f4xx_rcc.c **** 
1064:FWLIB/src/stm32f4xx_rcc.c **** /**
1065:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
1066:FWLIB/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
1067:FWLIB/src/stm32f4xx_rcc.c ****   * 
1068:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1069:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1070:FWLIB/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
1071:FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1072:FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1073:FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
1074:FWLIB/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
1075:FWLIB/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
1076:FWLIB/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1077:FWLIB/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
1078:FWLIB/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
1079:FWLIB/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1080:FWLIB/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1081:FWLIB/src/stm32f4xx_rcc.c ****   *                have wrong result.
1082:FWLIB/src/stm32f4xx_rcc.c ****   *                
1083:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1084:FWLIB/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
1085:FWLIB/src/stm32f4xx_rcc.c ****   *   
1086:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
1087:FWLIB/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
1088:FWLIB/src/stm32f4xx_rcc.c ****   *     
1089:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1090:FWLIB/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1091:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
1092:FWLIB/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1093:FWLIB/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
1094:FWLIB/src/stm32f4xx_rcc.c ****   *    
1095:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1096:FWLIB/src/stm32f4xx_rcc.c ****   */
1097:FWLIB/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1098:FWLIB/src/stm32f4xx_rcc.c **** {
 704              		.loc 1 1098 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 708              		@ link register save eliminated.
 709              	.LVL47:
 710 0000 10B4     		push	{r4}
ARM GAS  /tmp/cco5yOG0.s 			page 32


 711              	.LCFI0:
 712              		.cfi_def_cfa_offset 4
 713              		.cfi_offset 4, -4
 714              	.LVL48:
1099:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
1100:FWLIB/src/stm32f4xx_rcc.c **** 
1101:FWLIB/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1102:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 715              		.loc 1 1102 0
 716 0002 284B     		ldr	r3, .L75
 717 0004 9B68     		ldr	r3, [r3, #8]
 718 0006 03F00C03 		and	r3, r3, #12
 719              	.LVL49:
1103:FWLIB/src/stm32f4xx_rcc.c **** 
1104:FWLIB/src/stm32f4xx_rcc.c ****   switch (tmp)
 720              		.loc 1 1104 0
 721 000a 042B     		cmp	r3, #4
 722 000c 22D0     		beq	.L66
 723 000e 082B     		cmp	r3, #8
 724 0010 23D0     		beq	.L67
 725 0012 13B1     		cbz	r3, .L74
1105:FWLIB/src/stm32f4xx_rcc.c ****   {
1106:FWLIB/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
1107:FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1108:FWLIB/src/stm32f4xx_rcc.c ****       break;
1109:FWLIB/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
1110:FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
1111:FWLIB/src/stm32f4xx_rcc.c ****       break;
1112:FWLIB/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
1113:FWLIB/src/stm32f4xx_rcc.c **** 
1114:FWLIB/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1115:FWLIB/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
1116:FWLIB/src/stm32f4xx_rcc.c ****          */    
1117:FWLIB/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1118:FWLIB/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1119:FWLIB/src/stm32f4xx_rcc.c ****       
1120:FWLIB/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
1121:FWLIB/src/stm32f4xx_rcc.c ****       {
1122:FWLIB/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
1123:FWLIB/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1124:FWLIB/src/stm32f4xx_rcc.c ****       }
1125:FWLIB/src/stm32f4xx_rcc.c ****       else
1126:FWLIB/src/stm32f4xx_rcc.c ****       {
1127:FWLIB/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
1128:FWLIB/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1129:FWLIB/src/stm32f4xx_rcc.c ****       }
1130:FWLIB/src/stm32f4xx_rcc.c **** 
1131:FWLIB/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
1132:FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
1133:FWLIB/src/stm32f4xx_rcc.c ****       break;
1134:FWLIB/src/stm32f4xx_rcc.c ****     default:
1135:FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 726              		.loc 1 1135 0
 727 0014 244B     		ldr	r3, .L75+4
 728              	.LVL50:
 729 0016 0360     		str	r3, [r0]
1136:FWLIB/src/stm32f4xx_rcc.c ****       break;
ARM GAS  /tmp/cco5yOG0.s 			page 33


 730              		.loc 1 1136 0
 731 0018 01E0     		b	.L69
 732              	.LVL51:
 733              	.L74:
1107:FWLIB/src/stm32f4xx_rcc.c ****       break;
 734              		.loc 1 1107 0
 735 001a 234B     		ldr	r3, .L75+4
 736              	.LVL52:
 737 001c 0360     		str	r3, [r0]
 738              	.LVL53:
 739              	.L69:
1137:FWLIB/src/stm32f4xx_rcc.c ****   }
1138:FWLIB/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
1139:FWLIB/src/stm32f4xx_rcc.c **** 
1140:FWLIB/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
1141:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 740              		.loc 1 1141 0
 741 001e 214C     		ldr	r4, .L75
 742 0020 A368     		ldr	r3, [r4, #8]
 743              	.LVL54:
1142:FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 744              		.loc 1 1142 0
 745 0022 C3F30313 		ubfx	r3, r3, #4, #4
 746              	.LVL55:
1143:FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 747              		.loc 1 1143 0
 748 0026 2149     		ldr	r1, .L75+8
 749 0028 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 750              	.LVL56:
 751 002a DAB2     		uxtb	r2, r3
 752              	.LVL57:
1144:FWLIB/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
1145:FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 753              		.loc 1 1145 0
 754 002c 0368     		ldr	r3, [r0]
 755 002e D340     		lsrs	r3, r3, r2
 756 0030 4360     		str	r3, [r0, #4]
1146:FWLIB/src/stm32f4xx_rcc.c **** 
1147:FWLIB/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
1148:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 757              		.loc 1 1148 0
 758 0032 A268     		ldr	r2, [r4, #8]
 759              	.LVL58:
1149:FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 760              		.loc 1 1149 0
 761 0034 C2F38222 		ubfx	r2, r2, #10, #3
 762              	.LVL59:
1150:FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 763              		.loc 1 1150 0
 764 0038 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 765              	.LVL60:
 766 003a D2B2     		uxtb	r2, r2
 767              	.LVL61:
1151:FWLIB/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
1152:FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 768              		.loc 1 1152 0
 769 003c 23FA02F2 		lsr	r2, r3, r2
ARM GAS  /tmp/cco5yOG0.s 			page 34


 770              	.LVL62:
 771 0040 8260     		str	r2, [r0, #8]
1153:FWLIB/src/stm32f4xx_rcc.c **** 
1154:FWLIB/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
1155:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 772              		.loc 1 1155 0
 773 0042 A268     		ldr	r2, [r4, #8]
 774              	.LVL63:
1156:FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 775              		.loc 1 1156 0
 776 0044 C2F34232 		ubfx	r2, r2, #13, #3
 777              	.LVL64:
1157:FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 778              		.loc 1 1157 0
 779 0048 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 780              	.LVL65:
 781 004a D2B2     		uxtb	r2, r2
 782              	.LVL66:
1158:FWLIB/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
1159:FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 783              		.loc 1 1159 0
 784 004c D340     		lsrs	r3, r3, r2
 785 004e C360     		str	r3, [r0, #12]
1160:FWLIB/src/stm32f4xx_rcc.c **** }
 786              		.loc 1 1160 0
 787 0050 10BC     		pop	{r4}
 788              	.LCFI1:
 789              		.cfi_remember_state
 790              		.cfi_restore 4
 791              		.cfi_def_cfa_offset 0
 792 0052 7047     		bx	lr
 793              	.LVL67:
 794              	.L66:
 795              	.LCFI2:
 796              		.cfi_restore_state
1110:FWLIB/src/stm32f4xx_rcc.c ****       break;
 797              		.loc 1 1110 0
 798 0054 164B     		ldr	r3, .L75+12
 799              	.LVL68:
 800 0056 0360     		str	r3, [r0]
1111:FWLIB/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 801              		.loc 1 1111 0
 802 0058 E1E7     		b	.L69
 803              	.LVL69:
 804              	.L67:
1117:FWLIB/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 805              		.loc 1 1117 0
 806 005a 124B     		ldr	r3, .L75
 807              	.LVL70:
 808 005c 5A68     		ldr	r2, [r3, #4]
 809              	.LVL71:
1118:FWLIB/src/stm32f4xx_rcc.c ****       
 810              		.loc 1 1118 0
 811 005e 5B68     		ldr	r3, [r3, #4]
 812 0060 03F03F03 		and	r3, r3, #63
 813              	.LVL72:
1120:FWLIB/src/stm32f4xx_rcc.c ****       {
ARM GAS  /tmp/cco5yOG0.s 			page 35


 814              		.loc 1 1120 0
 815 0064 12F4800F 		tst	r2, #4194304
 816 0068 12D0     		beq	.L70
1123:FWLIB/src/stm32f4xx_rcc.c ****       }
 817              		.loc 1 1123 0
 818 006a 114A     		ldr	r2, .L75+12
 819              	.LVL73:
 820 006c B2FBF3F2 		udiv	r2, r2, r3
 821 0070 0C4B     		ldr	r3, .L75
 822              	.LVL74:
 823 0072 5B68     		ldr	r3, [r3, #4]
 824 0074 C3F38813 		ubfx	r3, r3, #6, #9
 825 0078 03FB02F3 		mul	r3, r3, r2
 826              	.LVL75:
 827              	.L71:
1131:FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 828              		.loc 1 1131 0
 829 007c 094A     		ldr	r2, .L75
 830 007e 5268     		ldr	r2, [r2, #4]
 831 0080 C2F30142 		ubfx	r2, r2, #16, #2
 832 0084 0132     		adds	r2, r2, #1
 833 0086 5200     		lsls	r2, r2, #1
 834              	.LVL76:
1132:FWLIB/src/stm32f4xx_rcc.c ****       break;
 835              		.loc 1 1132 0
 836 0088 B3FBF2F3 		udiv	r3, r3, r2
 837              	.LVL77:
 838 008c 0360     		str	r3, [r0]
1133:FWLIB/src/stm32f4xx_rcc.c ****     default:
 839              		.loc 1 1133 0
 840 008e C6E7     		b	.L69
 841              	.LVL78:
 842              	.L70:
1128:FWLIB/src/stm32f4xx_rcc.c ****       }
 843              		.loc 1 1128 0
 844 0090 054A     		ldr	r2, .L75+4
 845              	.LVL79:
 846 0092 B2FBF3F2 		udiv	r2, r2, r3
 847 0096 034B     		ldr	r3, .L75
 848              	.LVL80:
 849 0098 5B68     		ldr	r3, [r3, #4]
 850 009a C3F38813 		ubfx	r3, r3, #6, #9
 851 009e 03FB02F3 		mul	r3, r3, r2
 852              	.LVL81:
 853 00a2 EBE7     		b	.L71
 854              	.L76:
 855              		.align	2
 856              	.L75:
 857 00a4 00380240 		.word	1073887232
 858 00a8 0024F400 		.word	16000000
 859 00ac 00000000 		.word	.LANCHOR0
 860 00b0 00127A00 		.word	8000000
 861              		.cfi_endproc
 862              	.LFE133:
 864              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 865              		.align	1
 866              		.global	RCC_RTCCLKConfig
ARM GAS  /tmp/cco5yOG0.s 			page 36


 867              		.syntax unified
 868              		.thumb
 869              		.thumb_func
 870              		.fpu softvfp
 872              	RCC_RTCCLKConfig:
 873              	.LFB134:
1161:FWLIB/src/stm32f4xx_rcc.c **** 
1162:FWLIB/src/stm32f4xx_rcc.c **** /**
1163:FWLIB/src/stm32f4xx_rcc.c ****   * @}
1164:FWLIB/src/stm32f4xx_rcc.c ****   */
1165:FWLIB/src/stm32f4xx_rcc.c **** 
1166:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1167:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1168:FWLIB/src/stm32f4xx_rcc.c ****  *
1169:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
1170:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
1171:FWLIB/src/stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
1172:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
1173:FWLIB/src/stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1174:FWLIB/src/stm32f4xx_rcc.c ****   
1175:FWLIB/src/stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
1176:FWLIB/src/stm32f4xx_rcc.c ****           by 2 to 31.
1177:FWLIB/src/stm32f4xx_rcc.c ****      
1178:FWLIB/src/stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1179:FWLIB/src/stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
1180:FWLIB/src/stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
1181:FWLIB/src/stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1182:FWLIB/src/stm32f4xx_rcc.c **** 
1183:FWLIB/src/stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
1184:FWLIB/src/stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1185:FWLIB/src/stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
1186:FWLIB/src/stm32f4xx_rcc.c ****      
1187:FWLIB/src/stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
1188:FWLIB/src/stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
1189:FWLIB/src/stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
1190:FWLIB/src/stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
1191:FWLIB/src/stm32f4xx_rcc.c **** 
1192:FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
1193:FWLIB/src/stm32f4xx_rcc.c ****   * @{
1194:FWLIB/src/stm32f4xx_rcc.c ****   */
1195:FWLIB/src/stm32f4xx_rcc.c **** 
1196:FWLIB/src/stm32f4xx_rcc.c **** /**
1197:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1198:FWLIB/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1199:FWLIB/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1200:FWLIB/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1201:FWLIB/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1202:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
1203:FWLIB/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
1204:FWLIB/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
1205:FWLIB/src/stm32f4xx_rcc.c ****   *    
1206:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1207:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1208:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1209:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1210:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
1211:FWLIB/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
ARM GAS  /tmp/cco5yOG0.s 			page 37


1212:FWLIB/src/stm32f4xx_rcc.c ****   *  
1213:FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1214:FWLIB/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1215:FWLIB/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1216:FWLIB/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
1217:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
1218:FWLIB/src/stm32f4xx_rcc.c ****   *         RTC clock source).
1219:FWLIB/src/stm32f4xx_rcc.c ****   *  
1220:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1221:FWLIB/src/stm32f4xx_rcc.c ****   */
1222:FWLIB/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1223:FWLIB/src/stm32f4xx_rcc.c **** {
 874              		.loc 1 1223 0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 0
 877              		@ frame_needed = 0, uses_anonymous_args = 0
 878              		@ link register save eliminated.
 879              	.LVL82:
1224:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1225:FWLIB/src/stm32f4xx_rcc.c **** 
1226:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1227:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1228:FWLIB/src/stm32f4xx_rcc.c **** 
1229:FWLIB/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 880              		.loc 1 1229 0
 881 0000 00F44073 		and	r3, r0, #768
 882 0004 B3F5407F 		cmp	r3, #768
 883 0008 06D0     		beq	.L79
 884              	.LVL83:
 885              	.L78:
1230:FWLIB/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
1231:FWLIB/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
1232:FWLIB/src/stm32f4xx_rcc.c **** 
1233:FWLIB/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1234:FWLIB/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
1235:FWLIB/src/stm32f4xx_rcc.c **** 
1236:FWLIB/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1237:FWLIB/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
1238:FWLIB/src/stm32f4xx_rcc.c **** 
1239:FWLIB/src/stm32f4xx_rcc.c ****     /* Store the new value */
1240:FWLIB/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
1241:FWLIB/src/stm32f4xx_rcc.c ****   }
1242:FWLIB/src/stm32f4xx_rcc.c ****     
1243:FWLIB/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1244:FWLIB/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 886              		.loc 1 1244 0
 887 000a 094A     		ldr	r2, .L80
 888 000c 136F     		ldr	r3, [r2, #112]
 889 000e C0F30B00 		ubfx	r0, r0, #0, #12
 890              	.LVL84:
 891 0012 1843     		orrs	r0, r0, r3
 892 0014 1067     		str	r0, [r2, #112]
 893 0016 7047     		bx	lr
 894              	.LVL85:
 895              	.L79:
1231:FWLIB/src/stm32f4xx_rcc.c **** 
 896              		.loc 1 1231 0
ARM GAS  /tmp/cco5yOG0.s 			page 38


 897 0018 0549     		ldr	r1, .L80
 898 001a 8B68     		ldr	r3, [r1, #8]
 899              	.LVL86:
1234:FWLIB/src/stm32f4xx_rcc.c **** 
 900              		.loc 1 1234 0
 901 001c 23F4F813 		bic	r3, r3, #2031616
 902              	.LVL87:
1237:FWLIB/src/stm32f4xx_rcc.c **** 
 903              		.loc 1 1237 0
 904 0020 20F07042 		bic	r2, r0, #-268435456
 905 0024 22F44072 		bic	r2, r2, #768
 906 0028 1343     		orrs	r3, r3, r2
 907              	.LVL88:
1240:FWLIB/src/stm32f4xx_rcc.c ****   }
 908              		.loc 1 1240 0
 909 002a 8B60     		str	r3, [r1, #8]
 910 002c EDE7     		b	.L78
 911              	.L81:
 912 002e 00BF     		.align	2
 913              	.L80:
 914 0030 00380240 		.word	1073887232
 915              		.cfi_endproc
 916              	.LFE134:
 918              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 919              		.align	1
 920              		.global	RCC_RTCCLKCmd
 921              		.syntax unified
 922              		.thumb
 923              		.thumb_func
 924              		.fpu softvfp
 926              	RCC_RTCCLKCmd:
 927              	.LFB135:
1245:FWLIB/src/stm32f4xx_rcc.c **** }
1246:FWLIB/src/stm32f4xx_rcc.c **** 
1247:FWLIB/src/stm32f4xx_rcc.c **** /**
1248:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1249:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1250:FWLIB/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1251:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1252:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1253:FWLIB/src/stm32f4xx_rcc.c ****   */
1254:FWLIB/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1255:FWLIB/src/stm32f4xx_rcc.c **** {
 928              		.loc 1 1255 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 0, uses_anonymous_args = 0
 932              		@ link register save eliminated.
 933              	.LVL89:
1256:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1257:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1258:FWLIB/src/stm32f4xx_rcc.c **** 
1259:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 934              		.loc 1 1259 0
 935 0000 014B     		ldr	r3, .L83
 936 0002 1860     		str	r0, [r3]
 937 0004 7047     		bx	lr
ARM GAS  /tmp/cco5yOG0.s 			page 39


 938              	.L84:
 939 0006 00BF     		.align	2
 940              	.L83:
 941 0008 3C0E4742 		.word	1111952956
 942              		.cfi_endproc
 943              	.LFE135:
 945              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 946              		.align	1
 947              		.global	RCC_BackupResetCmd
 948              		.syntax unified
 949              		.thumb
 950              		.thumb_func
 951              		.fpu softvfp
 953              	RCC_BackupResetCmd:
 954              	.LFB136:
1260:FWLIB/src/stm32f4xx_rcc.c **** }
1261:FWLIB/src/stm32f4xx_rcc.c **** 
1262:FWLIB/src/stm32f4xx_rcc.c **** /**
1263:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1264:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1265:FWLIB/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1266:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1267:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1268:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1269:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1270:FWLIB/src/stm32f4xx_rcc.c ****   */
1271:FWLIB/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1272:FWLIB/src/stm32f4xx_rcc.c **** {
 955              		.loc 1 1272 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 959              		@ link register save eliminated.
 960              	.LVL90:
1273:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1274:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1275:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 961              		.loc 1 1275 0
 962 0000 014B     		ldr	r3, .L86
 963 0002 1860     		str	r0, [r3]
 964 0004 7047     		bx	lr
 965              	.L87:
 966 0006 00BF     		.align	2
 967              	.L86:
 968 0008 400E4742 		.word	1111952960
 969              		.cfi_endproc
 970              	.LFE136:
 972              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 973              		.align	1
 974              		.global	RCC_I2SCLKConfig
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 978              		.fpu softvfp
 980              	RCC_I2SCLKConfig:
 981              	.LFB137:
1276:FWLIB/src/stm32f4xx_rcc.c **** }
ARM GAS  /tmp/cco5yOG0.s 			page 40


1277:FWLIB/src/stm32f4xx_rcc.c **** 
1278:FWLIB/src/stm32f4xx_rcc.c **** /**
1279:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1280:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1281:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1282:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1283:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1284:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1285:FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1286:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1287:FWLIB/src/stm32f4xx_rcc.c ****   */
1288:FWLIB/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1289:FWLIB/src/stm32f4xx_rcc.c **** {
 982              		.loc 1 1289 0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 0
 985              		@ frame_needed = 0, uses_anonymous_args = 0
 986              		@ link register save eliminated.
 987              	.LVL91:
1290:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1291:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1292:FWLIB/src/stm32f4xx_rcc.c **** 
1293:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 988              		.loc 1 1293 0
 989 0000 014B     		ldr	r3, .L89
 990 0002 1860     		str	r0, [r3]
 991 0004 7047     		bx	lr
 992              	.L90:
 993 0006 00BF     		.align	2
 994              	.L89:
 995 0008 5C014742 		.word	1111949660
 996              		.cfi_endproc
 997              	.LFE137:
 999              		.section	.text.RCC_SAIPLLI2SClkDivConfig,"ax",%progbits
 1000              		.align	1
 1001              		.global	RCC_SAIPLLI2SClkDivConfig
 1002              		.syntax unified
 1003              		.thumb
 1004              		.thumb_func
 1005              		.fpu softvfp
 1007              	RCC_SAIPLLI2SClkDivConfig:
 1008              	.LFB138:
1294:FWLIB/src/stm32f4xx_rcc.c **** }
1295:FWLIB/src/stm32f4xx_rcc.c **** 
1296:FWLIB/src/stm32f4xx_rcc.c **** /**
1297:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1298:FWLIB/src/stm32f4xx_rcc.c ****   * 
1299:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1300:FWLIB/src/stm32f4xx_rcc.c ****   *   
1301:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLI2S.
1302:FWLIB/src/stm32f4xx_rcc.c ****   *              
1303:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLI2SDivQ: specifies the PLLI2S division factor for SAI1 clock .
1304:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1305:FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
1306:FWLIB/src/stm32f4xx_rcc.c ****   *              
1307:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1308:FWLIB/src/stm32f4xx_rcc.c ****   */
ARM GAS  /tmp/cco5yOG0.s 			page 41


1309:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
1310:FWLIB/src/stm32f4xx_rcc.c **** {
 1009              		.loc 1 1310 0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 0
 1012              		@ frame_needed = 0, uses_anonymous_args = 0
 1013              		@ link register save eliminated.
 1014              	.LVL92:
1311:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1312:FWLIB/src/stm32f4xx_rcc.c ****   
1313:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1314:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
1315:FWLIB/src/stm32f4xx_rcc.c ****   
1316:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1015              		.loc 1 1316 0
 1016 0000 044A     		ldr	r2, .L92
 1017 0002 D2F88C30 		ldr	r3, [r2, #140]
 1018              	.LVL93:
1317:FWLIB/src/stm32f4xx_rcc.c **** 
1318:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] bits */
1319:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 1019              		.loc 1 1319 0
 1020 0006 23F01F03 		bic	r3, r3, #31
 1021              	.LVL94:
1320:FWLIB/src/stm32f4xx_rcc.c **** 
1321:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVQ values */
1322:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivQ - 1);
 1022              		.loc 1 1322 0
 1023 000a 0138     		subs	r0, r0, #1
 1024              	.LVL95:
 1025 000c 0343     		orrs	r3, r3, r0
 1026              	.LVL96:
1323:FWLIB/src/stm32f4xx_rcc.c **** 
1324:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1325:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1027              		.loc 1 1325 0
 1028 000e C2F88C30 		str	r3, [r2, #140]
 1029 0012 7047     		bx	lr
 1030              	.L93:
 1031              		.align	2
 1032              	.L92:
 1033 0014 00380240 		.word	1073887232
 1034              		.cfi_endproc
 1035              	.LFE138:
 1037              		.section	.text.RCC_SAIPLLSAIClkDivConfig,"ax",%progbits
 1038              		.align	1
 1039              		.global	RCC_SAIPLLSAIClkDivConfig
 1040              		.syntax unified
 1041              		.thumb
 1042              		.thumb_func
 1043              		.fpu softvfp
 1045              	RCC_SAIPLLSAIClkDivConfig:
 1046              	.LFB139:
1326:FWLIB/src/stm32f4xx_rcc.c **** }
1327:FWLIB/src/stm32f4xx_rcc.c **** 
1328:FWLIB/src/stm32f4xx_rcc.c **** /**
1329:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLSAI.
ARM GAS  /tmp/cco5yOG0.s 			page 42


1330:FWLIB/src/stm32f4xx_rcc.c ****   * 
1331:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1332:FWLIB/src/stm32f4xx_rcc.c ****   *        
1333:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1334:FWLIB/src/stm32f4xx_rcc.c ****   *   
1335:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivQ: specifies the PLLSAI division factor for SAI1 clock .
1336:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1337:FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
1338:FWLIB/src/stm32f4xx_rcc.c ****   *              
1339:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1340:FWLIB/src/stm32f4xx_rcc.c ****   */
1341:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
1342:FWLIB/src/stm32f4xx_rcc.c **** {
 1047              		.loc 1 1342 0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 0
 1050              		@ frame_needed = 0, uses_anonymous_args = 0
 1051              		@ link register save eliminated.
 1052              	.LVL97:
1343:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1344:FWLIB/src/stm32f4xx_rcc.c ****   
1345:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1346:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
1347:FWLIB/src/stm32f4xx_rcc.c ****   
1348:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1053              		.loc 1 1348 0
 1054 0000 054A     		ldr	r2, .L95
 1055 0002 D2F88C30 		ldr	r3, [r2, #140]
 1056              	.LVL98:
1349:FWLIB/src/stm32f4xx_rcc.c **** 
1350:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
1351:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 1057              		.loc 1 1351 0
 1058 0006 23F4F853 		bic	r3, r3, #7936
 1059              	.LVL99:
1352:FWLIB/src/stm32f4xx_rcc.c **** 
1353:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVQ values */
1354:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 1060              		.loc 1 1354 0
 1061 000a 0138     		subs	r0, r0, #1
 1062              	.LVL100:
 1063 000c 43EA0023 		orr	r3, r3, r0, lsl #8
 1064              	.LVL101:
1355:FWLIB/src/stm32f4xx_rcc.c **** 
1356:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1357:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1065              		.loc 1 1357 0
 1066 0010 C2F88C30 		str	r3, [r2, #140]
 1067 0014 7047     		bx	lr
 1068              	.L96:
 1069 0016 00BF     		.align	2
 1070              	.L95:
 1071 0018 00380240 		.word	1073887232
 1072              		.cfi_endproc
 1073              	.LFE139:
 1075              		.section	.text.RCC_SAIBlockACLKConfig,"ax",%progbits
 1076              		.align	1
ARM GAS  /tmp/cco5yOG0.s 			page 43


 1077              		.global	RCC_SAIBlockACLKConfig
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu softvfp
 1083              	RCC_SAIBlockACLKConfig:
 1084              	.LFB140:
1358:FWLIB/src/stm32f4xx_rcc.c **** }
1359:FWLIB/src/stm32f4xx_rcc.c **** 
1360:FWLIB/src/stm32f4xx_rcc.c **** /**
1361:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.
1362:FWLIB/src/stm32f4xx_rcc.c ****   * 
1363:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1364:FWLIB/src/stm32f4xx_rcc.c ****   *       
1365:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1366:FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1367:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1368:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1369:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1370:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1371:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1372:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1373:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
1374:FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block A clock
1375:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1376:FWLIB/src/stm32f4xx_rcc.c ****   */
1377:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1378:FWLIB/src/stm32f4xx_rcc.c **** {
 1085              		.loc 1 1378 0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 1090              	.LVL102:
1379:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1380:FWLIB/src/stm32f4xx_rcc.c ****   
1381:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1382:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1383:FWLIB/src/stm32f4xx_rcc.c ****   
1384:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1091              		.loc 1 1384 0
 1092 0000 044A     		ldr	r2, .L98
 1093 0002 D2F88C30 		ldr	r3, [r2, #140]
 1094              	.LVL103:
1385:FWLIB/src/stm32f4xx_rcc.c **** 
1386:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1387:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 1095              		.loc 1 1387 0
 1096 0006 23F44013 		bic	r3, r3, #3145728
 1097              	.LVL104:
1388:FWLIB/src/stm32f4xx_rcc.c **** 
1389:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1390:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
 1098              		.loc 1 1390 0
 1099 000a 1843     		orrs	r0, r0, r3
 1100              	.LVL105:
1391:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cco5yOG0.s 			page 44


1392:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1393:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1101              		.loc 1 1393 0
 1102 000c C2F88C00 		str	r0, [r2, #140]
 1103 0010 7047     		bx	lr
 1104              	.L99:
 1105 0012 00BF     		.align	2
 1106              	.L98:
 1107 0014 00380240 		.word	1073887232
 1108              		.cfi_endproc
 1109              	.LFE140:
 1111              		.section	.text.RCC_SAIBlockBCLKConfig,"ax",%progbits
 1112              		.align	1
 1113              		.global	RCC_SAIBlockBCLKConfig
 1114              		.syntax unified
 1115              		.thumb
 1116              		.thumb_func
 1117              		.fpu softvfp
 1119              	RCC_SAIBlockBCLKConfig:
 1120              	.LFB141:
1394:FWLIB/src/stm32f4xx_rcc.c **** }
1395:FWLIB/src/stm32f4xx_rcc.c **** 
1396:FWLIB/src/stm32f4xx_rcc.c **** /**
1397:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.
1398:FWLIB/src/stm32f4xx_rcc.c ****   * 
1399:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1400:FWLIB/src/stm32f4xx_rcc.c ****   *       
1401:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1402:FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1403:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1404:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1405:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1406:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1407:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1408:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1409:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1410:FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block B clock
1411:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1412:FWLIB/src/stm32f4xx_rcc.c ****   */
1413:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1414:FWLIB/src/stm32f4xx_rcc.c **** {
 1121              		.loc 1 1414 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 0
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 1125              		@ link register save eliminated.
 1126              	.LVL106:
1415:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1416:FWLIB/src/stm32f4xx_rcc.c ****   
1417:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1418:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1419:FWLIB/src/stm32f4xx_rcc.c ****   
1420:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1127              		.loc 1 1420 0
 1128 0000 044A     		ldr	r2, .L101
 1129 0002 D2F88C30 		ldr	r3, [r2, #140]
 1130              	.LVL107:
ARM GAS  /tmp/cco5yOG0.s 			page 45


1421:FWLIB/src/stm32f4xx_rcc.c **** 
1422:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
1423:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 1131              		.loc 1 1423 0
 1132 0006 23F44003 		bic	r3, r3, #12582912
 1133              	.LVL108:
1424:FWLIB/src/stm32f4xx_rcc.c **** 
1425:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1426:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
 1134              		.loc 1 1426 0
 1135 000a 1843     		orrs	r0, r0, r3
 1136              	.LVL109:
1427:FWLIB/src/stm32f4xx_rcc.c **** 
1428:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1429:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1137              		.loc 1 1429 0
 1138 000c C2F88C00 		str	r0, [r2, #140]
 1139 0010 7047     		bx	lr
 1140              	.L102:
 1141 0012 00BF     		.align	2
 1142              	.L101:
 1143 0014 00380240 		.word	1073887232
 1144              		.cfi_endproc
 1145              	.LFE141:
 1147              		.section	.text.RCC_LTDCCLKDivConfig,"ax",%progbits
 1148              		.align	1
 1149              		.global	RCC_LTDCCLKDivConfig
 1150              		.syntax unified
 1151              		.thumb
 1152              		.thumb_func
 1153              		.fpu softvfp
 1155              	RCC_LTDCCLKDivConfig:
 1156              	.LFB142:
1430:FWLIB/src/stm32f4xx_rcc.c **** }
1431:FWLIB/src/stm32f4xx_rcc.c **** 
1432:FWLIB/src/stm32f4xx_rcc.c **** 
1433:FWLIB/src/stm32f4xx_rcc.c **** /**
1434:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the LTDC clock Divider coming from PLLSAI.
1435:FWLIB/src/stm32f4xx_rcc.c ****   * 
1436:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The LTDC peripheral is only available with STM32F429xx/439xx Devices.
1437:FWLIB/src/stm32f4xx_rcc.c ****   *      
1438:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1439:FWLIB/src/stm32f4xx_rcc.c ****   *   
1440:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivR: specifies the PLLSAI division factor for LTDC clock .
1441:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 16.
1442:FWLIB/src/stm32f4xx_rcc.c ****   *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
1443:FWLIB/src/stm32f4xx_rcc.c ****   *            
1444:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1445:FWLIB/src/stm32f4xx_rcc.c ****   */
1446:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
1447:FWLIB/src/stm32f4xx_rcc.c **** {
 1157              		.loc 1 1447 0
 1158              		.cfi_startproc
 1159              		@ args = 0, pretend = 0, frame = 0
 1160              		@ frame_needed = 0, uses_anonymous_args = 0
 1161              		@ link register save eliminated.
 1162              	.LVL110:
ARM GAS  /tmp/cco5yOG0.s 			page 46


1448:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1449:FWLIB/src/stm32f4xx_rcc.c ****   
1450:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1451:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
1452:FWLIB/src/stm32f4xx_rcc.c ****   
1453:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1163              		.loc 1 1453 0
 1164 0000 044A     		ldr	r2, .L104
 1165 0002 D2F88C30 		ldr	r3, [r2, #140]
 1166              	.LVL111:
1454:FWLIB/src/stm32f4xx_rcc.c **** 
1455:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLSAIDIVR[2:0] bits */
1456:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 1167              		.loc 1 1456 0
 1168 0006 23F44033 		bic	r3, r3, #196608
 1169              	.LVL112:
1457:FWLIB/src/stm32f4xx_rcc.c **** 
1458:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVR values */
1459:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_PLLSAIDivR;
 1170              		.loc 1 1459 0
 1171 000a 1843     		orrs	r0, r0, r3
 1172              	.LVL113:
1460:FWLIB/src/stm32f4xx_rcc.c **** 
1461:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1462:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1173              		.loc 1 1462 0
 1174 000c C2F88C00 		str	r0, [r2, #140]
 1175 0010 7047     		bx	lr
 1176              	.L105:
 1177 0012 00BF     		.align	2
 1178              	.L104:
 1179 0014 00380240 		.word	1073887232
 1180              		.cfi_endproc
 1181              	.LFE142:
 1183              		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 1184              		.align	1
 1185              		.global	RCC_TIMCLKPresConfig
 1186              		.syntax unified
 1187              		.thumb
 1188              		.thumb_func
 1189              		.fpu softvfp
 1191              	RCC_TIMCLKPresConfig:
 1192              	.LFB143:
1463:FWLIB/src/stm32f4xx_rcc.c **** }
1464:FWLIB/src/stm32f4xx_rcc.c **** 
1465:FWLIB/src/stm32f4xx_rcc.c **** /**
1466:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
1467:FWLIB/src/stm32f4xx_rcc.c ****   * 
1468:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
1469:FWLIB/src/stm32f4xx_rcc.c ****   *   
1470:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
1471:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1472:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
1473:FWLIB/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
1474:FWLIB/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
1475:FWLIB/src/stm32f4xx_rcc.c ****   *                 division by 4 or more.
1476:FWLIB/src/stm32f4xx_rcc.c ****   *                   
ARM GAS  /tmp/cco5yOG0.s 			page 47


1477:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
1478:FWLIB/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
1479:FWLIB/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
1480:FWLIB/src/stm32f4xx_rcc.c ****   *                 to division by 8 or more.
1481:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1482:FWLIB/src/stm32f4xx_rcc.c ****   */
1483:FWLIB/src/stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
1484:FWLIB/src/stm32f4xx_rcc.c **** {
 1193              		.loc 1 1484 0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 0
 1196              		@ frame_needed = 0, uses_anonymous_args = 0
 1197              		@ link register save eliminated.
 1198              	.LVL114:
1485:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1486:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
1487:FWLIB/src/stm32f4xx_rcc.c **** 
1488:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 1199              		.loc 1 1488 0
 1200 0000 014B     		ldr	r3, .L107
 1201 0002 1860     		str	r0, [r3]
 1202 0004 7047     		bx	lr
 1203              	.L108:
 1204 0006 00BF     		.align	2
 1205              	.L107:
 1206 0008 E0114742 		.word	1111953888
 1207              		.cfi_endproc
 1208              	.LFE143:
 1210              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1211              		.align	1
 1212              		.global	RCC_AHB1PeriphClockCmd
 1213              		.syntax unified
 1214              		.thumb
 1215              		.thumb_func
 1216              		.fpu softvfp
 1218              	RCC_AHB1PeriphClockCmd:
 1219              	.LFB144:
1489:FWLIB/src/stm32f4xx_rcc.c ****   
1490:FWLIB/src/stm32f4xx_rcc.c **** }
1491:FWLIB/src/stm32f4xx_rcc.c **** 
1492:FWLIB/src/stm32f4xx_rcc.c **** /**
1493:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1494:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1495:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1496:FWLIB/src/stm32f4xx_rcc.c ****   *         using it.   
1497:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1498:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1499:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1500:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1501:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1502:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1503:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1504:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1505:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1506:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1507:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1508:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
ARM GAS  /tmp/cco5yOG0.s 			page 48


1509:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)  
1510:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1511:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1512:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
1513:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1514:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1515:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices)  
1516:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1517:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1518:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1519:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1520:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1521:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1522:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1523:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1524:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1525:FWLIB/src/stm32f4xx_rcc.c ****   */
1526:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1527:FWLIB/src/stm32f4xx_rcc.c **** {
 1220              		.loc 1 1527 0
 1221              		.cfi_startproc
 1222              		@ args = 0, pretend = 0, frame = 0
 1223              		@ frame_needed = 0, uses_anonymous_args = 0
 1224              		@ link register save eliminated.
 1225              	.LVL115:
1528:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1529:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1530:FWLIB/src/stm32f4xx_rcc.c **** 
1531:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1532:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1226              		.loc 1 1532 0
 1227 0000 29B9     		cbnz	r1, .L112
1533:FWLIB/src/stm32f4xx_rcc.c ****   {
1534:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
1535:FWLIB/src/stm32f4xx_rcc.c ****   }
1536:FWLIB/src/stm32f4xx_rcc.c ****   else
1537:FWLIB/src/stm32f4xx_rcc.c ****   {
1538:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1228              		.loc 1 1538 0
 1229 0002 054A     		ldr	r2, .L113
 1230 0004 136B     		ldr	r3, [r2, #48]
 1231 0006 23EA0000 		bic	r0, r3, r0
 1232              	.LVL116:
 1233 000a 1063     		str	r0, [r2, #48]
 1234 000c 7047     		bx	lr
 1235              	.LVL117:
 1236              	.L112:
1534:FWLIB/src/stm32f4xx_rcc.c ****   }
 1237              		.loc 1 1534 0
 1238 000e 024A     		ldr	r2, .L113
 1239 0010 136B     		ldr	r3, [r2, #48]
 1240 0012 1843     		orrs	r0, r0, r3
 1241              	.LVL118:
 1242 0014 1063     		str	r0, [r2, #48]
 1243 0016 7047     		bx	lr
 1244              	.L114:
 1245              		.align	2
ARM GAS  /tmp/cco5yOG0.s 			page 49


 1246              	.L113:
 1247 0018 00380240 		.word	1073887232
 1248              		.cfi_endproc
 1249              	.LFE144:
 1251              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1252              		.align	1
 1253              		.global	RCC_AHB2PeriphClockCmd
 1254              		.syntax unified
 1255              		.thumb
 1256              		.thumb_func
 1257              		.fpu softvfp
 1259              	RCC_AHB2PeriphClockCmd:
 1260              	.LFB145:
1539:FWLIB/src/stm32f4xx_rcc.c ****   }
1540:FWLIB/src/stm32f4xx_rcc.c **** }
1541:FWLIB/src/stm32f4xx_rcc.c **** 
1542:FWLIB/src/stm32f4xx_rcc.c **** /**
1543:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1544:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1545:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1546:FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
1547:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1548:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1549:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1550:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1551:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1552:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1553:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1554:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1555:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1556:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1557:FWLIB/src/stm32f4xx_rcc.c ****   */
1558:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1559:FWLIB/src/stm32f4xx_rcc.c **** {
 1261              		.loc 1 1559 0
 1262              		.cfi_startproc
 1263              		@ args = 0, pretend = 0, frame = 0
 1264              		@ frame_needed = 0, uses_anonymous_args = 0
 1265              		@ link register save eliminated.
 1266              	.LVL119:
1560:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1561:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1562:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1563:FWLIB/src/stm32f4xx_rcc.c **** 
1564:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1267              		.loc 1 1564 0
 1268 0000 29B9     		cbnz	r1, .L118
1565:FWLIB/src/stm32f4xx_rcc.c ****   {
1566:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
1567:FWLIB/src/stm32f4xx_rcc.c ****   }
1568:FWLIB/src/stm32f4xx_rcc.c ****   else
1569:FWLIB/src/stm32f4xx_rcc.c ****   {
1570:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1269              		.loc 1 1570 0
 1270 0002 054A     		ldr	r2, .L119
 1271 0004 536B     		ldr	r3, [r2, #52]
 1272 0006 23EA0000 		bic	r0, r3, r0
ARM GAS  /tmp/cco5yOG0.s 			page 50


 1273              	.LVL120:
 1274 000a 5063     		str	r0, [r2, #52]
 1275 000c 7047     		bx	lr
 1276              	.LVL121:
 1277              	.L118:
1566:FWLIB/src/stm32f4xx_rcc.c ****   }
 1278              		.loc 1 1566 0
 1279 000e 024A     		ldr	r2, .L119
 1280 0010 536B     		ldr	r3, [r2, #52]
 1281 0012 1843     		orrs	r0, r0, r3
 1282              	.LVL122:
 1283 0014 5063     		str	r0, [r2, #52]
 1284 0016 7047     		bx	lr
 1285              	.L120:
 1286              		.align	2
 1287              	.L119:
 1288 0018 00380240 		.word	1073887232
 1289              		.cfi_endproc
 1290              	.LFE145:
 1292              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1293              		.align	1
 1294              		.global	RCC_AHB3PeriphClockCmd
 1295              		.syntax unified
 1296              		.thumb
 1297              		.thumb_func
 1298              		.fpu softvfp
 1300              	RCC_AHB3PeriphClockCmd:
 1301              	.LFB146:
1571:FWLIB/src/stm32f4xx_rcc.c ****   }
1572:FWLIB/src/stm32f4xx_rcc.c **** }
1573:FWLIB/src/stm32f4xx_rcc.c **** 
1574:FWLIB/src/stm32f4xx_rcc.c **** /**
1575:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1576:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1577:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1578:FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
1579:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1580:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1581:FWLIB/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F42xxx/43xxx devices)  
1582:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1583:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1584:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1585:FWLIB/src/stm32f4xx_rcc.c ****   */
1586:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1587:FWLIB/src/stm32f4xx_rcc.c **** {
 1302              		.loc 1 1587 0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 0, uses_anonymous_args = 0
 1306              		@ link register save eliminated.
 1307              	.LVL123:
1588:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1589:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1590:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1591:FWLIB/src/stm32f4xx_rcc.c **** 
1592:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1308              		.loc 1 1592 0
ARM GAS  /tmp/cco5yOG0.s 			page 51


 1309 0000 29B9     		cbnz	r1, .L124
1593:FWLIB/src/stm32f4xx_rcc.c ****   {
1594:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
1595:FWLIB/src/stm32f4xx_rcc.c ****   }
1596:FWLIB/src/stm32f4xx_rcc.c ****   else
1597:FWLIB/src/stm32f4xx_rcc.c ****   {
1598:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1310              		.loc 1 1598 0
 1311 0002 054A     		ldr	r2, .L125
 1312 0004 936B     		ldr	r3, [r2, #56]
 1313 0006 23EA0000 		bic	r0, r3, r0
 1314              	.LVL124:
 1315 000a 9063     		str	r0, [r2, #56]
 1316 000c 7047     		bx	lr
 1317              	.LVL125:
 1318              	.L124:
1594:FWLIB/src/stm32f4xx_rcc.c ****   }
 1319              		.loc 1 1594 0
 1320 000e 024A     		ldr	r2, .L125
 1321 0010 936B     		ldr	r3, [r2, #56]
 1322 0012 1843     		orrs	r0, r0, r3
 1323              	.LVL126:
 1324 0014 9063     		str	r0, [r2, #56]
 1325 0016 7047     		bx	lr
 1326              	.L126:
 1327              		.align	2
 1328              	.L125:
 1329 0018 00380240 		.word	1073887232
 1330              		.cfi_endproc
 1331              	.LFE146:
 1333              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1334              		.align	1
 1335              		.global	RCC_APB1PeriphClockCmd
 1336              		.syntax unified
 1337              		.thumb
 1338              		.thumb_func
 1339              		.fpu softvfp
 1341              	RCC_APB1PeriphClockCmd:
 1342              	.LFB147:
1599:FWLIB/src/stm32f4xx_rcc.c ****   }
1600:FWLIB/src/stm32f4xx_rcc.c **** }
1601:FWLIB/src/stm32f4xx_rcc.c **** 
1602:FWLIB/src/stm32f4xx_rcc.c **** /**
1603:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1604:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1605:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1606:FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
1607:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1608:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1609:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1610:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1611:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1612:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1613:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1614:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1615:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1616:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
ARM GAS  /tmp/cco5yOG0.s 			page 52


1617:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1618:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1619:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1620:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1621:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1622:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1623:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1624:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1625:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1626:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1627:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1628:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1629:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1630:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1631:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1632:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1633:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
1634:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1635:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1636:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1637:FWLIB/src/stm32f4xx_rcc.c ****   */
1638:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1639:FWLIB/src/stm32f4xx_rcc.c **** {
 1343              		.loc 1 1639 0
 1344              		.cfi_startproc
 1345              		@ args = 0, pretend = 0, frame = 0
 1346              		@ frame_needed = 0, uses_anonymous_args = 0
 1347              		@ link register save eliminated.
 1348              	.LVL127:
1640:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1641:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1642:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1643:FWLIB/src/stm32f4xx_rcc.c **** 
1644:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1349              		.loc 1 1644 0
 1350 0000 29B9     		cbnz	r1, .L130
1645:FWLIB/src/stm32f4xx_rcc.c ****   {
1646:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
1647:FWLIB/src/stm32f4xx_rcc.c ****   }
1648:FWLIB/src/stm32f4xx_rcc.c ****   else
1649:FWLIB/src/stm32f4xx_rcc.c ****   {
1650:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1351              		.loc 1 1650 0
 1352 0002 054A     		ldr	r2, .L131
 1353 0004 136C     		ldr	r3, [r2, #64]
 1354 0006 23EA0000 		bic	r0, r3, r0
 1355              	.LVL128:
 1356 000a 1064     		str	r0, [r2, #64]
 1357 000c 7047     		bx	lr
 1358              	.LVL129:
 1359              	.L130:
1646:FWLIB/src/stm32f4xx_rcc.c ****   }
 1360              		.loc 1 1646 0
 1361 000e 024A     		ldr	r2, .L131
 1362 0010 136C     		ldr	r3, [r2, #64]
 1363 0012 1843     		orrs	r0, r0, r3
 1364              	.LVL130:
ARM GAS  /tmp/cco5yOG0.s 			page 53


 1365 0014 1064     		str	r0, [r2, #64]
 1366 0016 7047     		bx	lr
 1367              	.L132:
 1368              		.align	2
 1369              	.L131:
 1370 0018 00380240 		.word	1073887232
 1371              		.cfi_endproc
 1372              	.LFE147:
 1374              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1375              		.align	1
 1376              		.global	RCC_APB2PeriphClockCmd
 1377              		.syntax unified
 1378              		.thumb
 1379              		.thumb_func
 1380              		.fpu softvfp
 1382              	RCC_APB2PeriphClockCmd:
 1383              	.LFB148:
1651:FWLIB/src/stm32f4xx_rcc.c ****   }
1652:FWLIB/src/stm32f4xx_rcc.c **** }
1653:FWLIB/src/stm32f4xx_rcc.c **** 
1654:FWLIB/src/stm32f4xx_rcc.c **** /**
1655:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1656:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1657:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1658:FWLIB/src/stm32f4xx_rcc.c ****   *         using it.
1659:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1660:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1661:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1662:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1663:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1664:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1665:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1666:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1667:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1668:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1669:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1670:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
1671:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1672:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1673:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1674:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1675:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1676:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
1677:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
1678:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices) 
1679:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1680:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1681:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1682:FWLIB/src/stm32f4xx_rcc.c ****   */
1683:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1684:FWLIB/src/stm32f4xx_rcc.c **** {
 1384              		.loc 1 1684 0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 0
 1387              		@ frame_needed = 0, uses_anonymous_args = 0
 1388              		@ link register save eliminated.
 1389              	.LVL131:
ARM GAS  /tmp/cco5yOG0.s 			page 54


1685:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1686:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1687:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1688:FWLIB/src/stm32f4xx_rcc.c **** 
1689:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1390              		.loc 1 1689 0
 1391 0000 29B9     		cbnz	r1, .L136
1690:FWLIB/src/stm32f4xx_rcc.c ****   {
1691:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
1692:FWLIB/src/stm32f4xx_rcc.c ****   }
1693:FWLIB/src/stm32f4xx_rcc.c ****   else
1694:FWLIB/src/stm32f4xx_rcc.c ****   {
1695:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1392              		.loc 1 1695 0
 1393 0002 054A     		ldr	r2, .L137
 1394 0004 536C     		ldr	r3, [r2, #68]
 1395 0006 23EA0000 		bic	r0, r3, r0
 1396              	.LVL132:
 1397 000a 5064     		str	r0, [r2, #68]
 1398 000c 7047     		bx	lr
 1399              	.LVL133:
 1400              	.L136:
1691:FWLIB/src/stm32f4xx_rcc.c ****   }
 1401              		.loc 1 1691 0
 1402 000e 024A     		ldr	r2, .L137
 1403 0010 536C     		ldr	r3, [r2, #68]
 1404 0012 1843     		orrs	r0, r0, r3
 1405              	.LVL134:
 1406 0014 5064     		str	r0, [r2, #68]
 1407 0016 7047     		bx	lr
 1408              	.L138:
 1409              		.align	2
 1410              	.L137:
 1411 0018 00380240 		.word	1073887232
 1412              		.cfi_endproc
 1413              	.LFE148:
 1415              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1416              		.align	1
 1417              		.global	RCC_AHB1PeriphResetCmd
 1418              		.syntax unified
 1419              		.thumb
 1420              		.thumb_func
 1421              		.fpu softvfp
 1423              	RCC_AHB1PeriphResetCmd:
 1424              	.LFB149:
1696:FWLIB/src/stm32f4xx_rcc.c ****   }
1697:FWLIB/src/stm32f4xx_rcc.c **** }
1698:FWLIB/src/stm32f4xx_rcc.c **** 
1699:FWLIB/src/stm32f4xx_rcc.c **** /**
1700:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1701:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1702:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1703:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1704:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1705:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1706:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1707:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
ARM GAS  /tmp/cco5yOG0.s 			page 55


1708:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1709:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1710:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1711:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1712:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:   GPIOJ clock (STM32F42xxx/43xxx devices) 
1713:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:   GPIOK clock (STM32F42xxx/43xxxdevices)   
1714:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1715:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1716:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1717:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:   DMA2D clock (STM32F429xx/439xx devices)   
1718:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1719:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1720:FWLIB/src/stm32f4xx_rcc.c ****   *                  
1721:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1722:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1723:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1724:FWLIB/src/stm32f4xx_rcc.c ****   */
1725:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1726:FWLIB/src/stm32f4xx_rcc.c **** {
 1425              		.loc 1 1726 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 0
 1428              		@ frame_needed = 0, uses_anonymous_args = 0
 1429              		@ link register save eliminated.
 1430              	.LVL135:
1727:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1728:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1729:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1730:FWLIB/src/stm32f4xx_rcc.c **** 
1731:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1431              		.loc 1 1731 0
 1432 0000 29B9     		cbnz	r1, .L142
1732:FWLIB/src/stm32f4xx_rcc.c ****   {
1733:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
1734:FWLIB/src/stm32f4xx_rcc.c ****   }
1735:FWLIB/src/stm32f4xx_rcc.c ****   else
1736:FWLIB/src/stm32f4xx_rcc.c ****   {
1737:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1433              		.loc 1 1737 0
 1434 0002 054A     		ldr	r2, .L143
 1435 0004 1369     		ldr	r3, [r2, #16]
 1436 0006 23EA0000 		bic	r0, r3, r0
 1437              	.LVL136:
 1438 000a 1061     		str	r0, [r2, #16]
 1439 000c 7047     		bx	lr
 1440              	.LVL137:
 1441              	.L142:
1733:FWLIB/src/stm32f4xx_rcc.c ****   }
 1442              		.loc 1 1733 0
 1443 000e 024A     		ldr	r2, .L143
 1444 0010 1369     		ldr	r3, [r2, #16]
 1445 0012 1843     		orrs	r0, r0, r3
 1446              	.LVL138:
 1447 0014 1061     		str	r0, [r2, #16]
 1448 0016 7047     		bx	lr
 1449              	.L144:
 1450              		.align	2
ARM GAS  /tmp/cco5yOG0.s 			page 56


 1451              	.L143:
 1452 0018 00380240 		.word	1073887232
 1453              		.cfi_endproc
 1454              	.LFE149:
 1456              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1457              		.align	1
 1458              		.global	RCC_AHB2PeriphResetCmd
 1459              		.syntax unified
 1460              		.thumb
 1461              		.thumb_func
 1462              		.fpu softvfp
 1464              	RCC_AHB2PeriphResetCmd:
 1465              	.LFB150:
1738:FWLIB/src/stm32f4xx_rcc.c ****   }
1739:FWLIB/src/stm32f4xx_rcc.c **** }
1740:FWLIB/src/stm32f4xx_rcc.c **** 
1741:FWLIB/src/stm32f4xx_rcc.c **** /**
1742:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1743:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1744:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1745:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1746:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1747:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1748:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1749:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1750:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1751:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1752:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1753:FWLIB/src/stm32f4xx_rcc.c ****   */
1754:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1755:FWLIB/src/stm32f4xx_rcc.c **** {
 1466              		.loc 1 1755 0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 0
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 1470              		@ link register save eliminated.
 1471              	.LVL139:
1756:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1758:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1759:FWLIB/src/stm32f4xx_rcc.c **** 
1760:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1472              		.loc 1 1760 0
 1473 0000 29B9     		cbnz	r1, .L148
1761:FWLIB/src/stm32f4xx_rcc.c ****   {
1762:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
1763:FWLIB/src/stm32f4xx_rcc.c ****   }
1764:FWLIB/src/stm32f4xx_rcc.c ****   else
1765:FWLIB/src/stm32f4xx_rcc.c ****   {
1766:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1474              		.loc 1 1766 0
 1475 0002 054A     		ldr	r2, .L149
 1476 0004 5369     		ldr	r3, [r2, #20]
 1477 0006 23EA0000 		bic	r0, r3, r0
 1478              	.LVL140:
 1479 000a 5061     		str	r0, [r2, #20]
 1480 000c 7047     		bx	lr
ARM GAS  /tmp/cco5yOG0.s 			page 57


 1481              	.LVL141:
 1482              	.L148:
1762:FWLIB/src/stm32f4xx_rcc.c ****   }
 1483              		.loc 1 1762 0
 1484 000e 024A     		ldr	r2, .L149
 1485 0010 5369     		ldr	r3, [r2, #20]
 1486 0012 1843     		orrs	r0, r0, r3
 1487              	.LVL142:
 1488 0014 5061     		str	r0, [r2, #20]
 1489 0016 7047     		bx	lr
 1490              	.L150:
 1491              		.align	2
 1492              	.L149:
 1493 0018 00380240 		.word	1073887232
 1494              		.cfi_endproc
 1495              	.LFE150:
 1497              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1498              		.align	1
 1499              		.global	RCC_AHB3PeriphResetCmd
 1500              		.syntax unified
 1501              		.thumb
 1502              		.thumb_func
 1503              		.fpu softvfp
 1505              	RCC_AHB3PeriphResetCmd:
 1506              	.LFB151:
1767:FWLIB/src/stm32f4xx_rcc.c ****   }
1768:FWLIB/src/stm32f4xx_rcc.c **** }
1769:FWLIB/src/stm32f4xx_rcc.c **** 
1770:FWLIB/src/stm32f4xx_rcc.c **** /**
1771:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1772:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1773:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1774:FWLIB/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F42xxx/43xxx devices)  
1775:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1776:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1777:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1778:FWLIB/src/stm32f4xx_rcc.c ****   */
1779:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1780:FWLIB/src/stm32f4xx_rcc.c **** {
 1507              		.loc 1 1780 0
 1508              		.cfi_startproc
 1509              		@ args = 0, pretend = 0, frame = 0
 1510              		@ frame_needed = 0, uses_anonymous_args = 0
 1511              		@ link register save eliminated.
 1512              	.LVL143:
1781:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1782:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1783:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1784:FWLIB/src/stm32f4xx_rcc.c **** 
1785:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1513              		.loc 1 1785 0
 1514 0000 29B9     		cbnz	r1, .L154
1786:FWLIB/src/stm32f4xx_rcc.c ****   {
1787:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
1788:FWLIB/src/stm32f4xx_rcc.c ****   }
1789:FWLIB/src/stm32f4xx_rcc.c ****   else
1790:FWLIB/src/stm32f4xx_rcc.c ****   {
ARM GAS  /tmp/cco5yOG0.s 			page 58


1791:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1515              		.loc 1 1791 0
 1516 0002 054A     		ldr	r2, .L155
 1517 0004 9369     		ldr	r3, [r2, #24]
 1518 0006 23EA0000 		bic	r0, r3, r0
 1519              	.LVL144:
 1520 000a 9061     		str	r0, [r2, #24]
 1521 000c 7047     		bx	lr
 1522              	.LVL145:
 1523              	.L154:
1787:FWLIB/src/stm32f4xx_rcc.c ****   }
 1524              		.loc 1 1787 0
 1525 000e 024A     		ldr	r2, .L155
 1526 0010 9369     		ldr	r3, [r2, #24]
 1527 0012 1843     		orrs	r0, r0, r3
 1528              	.LVL146:
 1529 0014 9061     		str	r0, [r2, #24]
 1530 0016 7047     		bx	lr
 1531              	.L156:
 1532              		.align	2
 1533              	.L155:
 1534 0018 00380240 		.word	1073887232
 1535              		.cfi_endproc
 1536              	.LFE151:
 1538              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1539              		.align	1
 1540              		.global	RCC_APB1PeriphResetCmd
 1541              		.syntax unified
 1542              		.thumb
 1543              		.thumb_func
 1544              		.fpu softvfp
 1546              	RCC_APB1PeriphResetCmd:
 1547              	.LFB152:
1792:FWLIB/src/stm32f4xx_rcc.c ****   }
1793:FWLIB/src/stm32f4xx_rcc.c **** }
1794:FWLIB/src/stm32f4xx_rcc.c **** 
1795:FWLIB/src/stm32f4xx_rcc.c **** /**
1796:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1797:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1798:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1799:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1800:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1801:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1802:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1803:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1804:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1805:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1806:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1807:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1808:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1809:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1810:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1811:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1812:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1813:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1814:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1815:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
ARM GAS  /tmp/cco5yOG0.s 			page 59


1816:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1817:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1818:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1819:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1820:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1821:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1822:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1823:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
1824:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1825:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1826:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1827:FWLIB/src/stm32f4xx_rcc.c ****   */
1828:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1829:FWLIB/src/stm32f4xx_rcc.c **** {
 1548              		.loc 1 1829 0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 0
 1551              		@ frame_needed = 0, uses_anonymous_args = 0
 1552              		@ link register save eliminated.
 1553              	.LVL147:
1830:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1831:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1832:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1833:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1554              		.loc 1 1833 0
 1555 0000 29B9     		cbnz	r1, .L160
1834:FWLIB/src/stm32f4xx_rcc.c ****   {
1835:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
1836:FWLIB/src/stm32f4xx_rcc.c ****   }
1837:FWLIB/src/stm32f4xx_rcc.c ****   else
1838:FWLIB/src/stm32f4xx_rcc.c ****   {
1839:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1556              		.loc 1 1839 0
 1557 0002 054A     		ldr	r2, .L161
 1558 0004 136A     		ldr	r3, [r2, #32]
 1559 0006 23EA0000 		bic	r0, r3, r0
 1560              	.LVL148:
 1561 000a 1062     		str	r0, [r2, #32]
 1562 000c 7047     		bx	lr
 1563              	.LVL149:
 1564              	.L160:
1835:FWLIB/src/stm32f4xx_rcc.c ****   }
 1565              		.loc 1 1835 0
 1566 000e 024A     		ldr	r2, .L161
 1567 0010 136A     		ldr	r3, [r2, #32]
 1568 0012 1843     		orrs	r0, r0, r3
 1569              	.LVL150:
 1570 0014 1062     		str	r0, [r2, #32]
 1571 0016 7047     		bx	lr
 1572              	.L162:
 1573              		.align	2
 1574              	.L161:
 1575 0018 00380240 		.word	1073887232
 1576              		.cfi_endproc
 1577              	.LFE152:
 1579              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1580              		.align	1
ARM GAS  /tmp/cco5yOG0.s 			page 60


 1581              		.global	RCC_APB2PeriphResetCmd
 1582              		.syntax unified
 1583              		.thumb
 1584              		.thumb_func
 1585              		.fpu softvfp
 1587              	RCC_APB2PeriphResetCmd:
 1588              	.LFB153:
1840:FWLIB/src/stm32f4xx_rcc.c ****   }
1841:FWLIB/src/stm32f4xx_rcc.c **** }
1842:FWLIB/src/stm32f4xx_rcc.c **** 
1843:FWLIB/src/stm32f4xx_rcc.c **** /**
1844:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1845:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1846:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1847:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1848:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1849:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1850:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1851:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1852:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1853:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1854:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1855:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1856:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
1857:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1858:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1859:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1860:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1861:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1862:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
1863:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
1864:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)   
1865:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1866:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1867:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1868:FWLIB/src/stm32f4xx_rcc.c ****   */
1869:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1870:FWLIB/src/stm32f4xx_rcc.c **** {
 1589              		.loc 1 1870 0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 0
 1592              		@ frame_needed = 0, uses_anonymous_args = 0
 1593              		@ link register save eliminated.
 1594              	.LVL151:
1871:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1872:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1873:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1874:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1595              		.loc 1 1874 0
 1596 0000 29B9     		cbnz	r1, .L166
1875:FWLIB/src/stm32f4xx_rcc.c ****   {
1876:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
1877:FWLIB/src/stm32f4xx_rcc.c ****   }
1878:FWLIB/src/stm32f4xx_rcc.c ****   else
1879:FWLIB/src/stm32f4xx_rcc.c ****   {
1880:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1597              		.loc 1 1880 0
ARM GAS  /tmp/cco5yOG0.s 			page 61


 1598 0002 054A     		ldr	r2, .L167
 1599 0004 536A     		ldr	r3, [r2, #36]
 1600 0006 23EA0000 		bic	r0, r3, r0
 1601              	.LVL152:
 1602 000a 5062     		str	r0, [r2, #36]
 1603 000c 7047     		bx	lr
 1604              	.LVL153:
 1605              	.L166:
1876:FWLIB/src/stm32f4xx_rcc.c ****   }
 1606              		.loc 1 1876 0
 1607 000e 024A     		ldr	r2, .L167
 1608 0010 536A     		ldr	r3, [r2, #36]
 1609 0012 1843     		orrs	r0, r0, r3
 1610              	.LVL154:
 1611 0014 5062     		str	r0, [r2, #36]
 1612 0016 7047     		bx	lr
 1613              	.L168:
 1614              		.align	2
 1615              	.L167:
 1616 0018 00380240 		.word	1073887232
 1617              		.cfi_endproc
 1618              	.LFE153:
 1620              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 1621              		.align	1
 1622              		.global	RCC_AHB1PeriphClockLPModeCmd
 1623              		.syntax unified
 1624              		.thumb
 1625              		.thumb_func
 1626              		.fpu softvfp
 1628              	RCC_AHB1PeriphClockLPModeCmd:
 1629              	.LFB154:
1881:FWLIB/src/stm32f4xx_rcc.c ****   }
1882:FWLIB/src/stm32f4xx_rcc.c **** }
1883:FWLIB/src/stm32f4xx_rcc.c **** 
1884:FWLIB/src/stm32f4xx_rcc.c **** /**
1885:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1886:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1887:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
1888:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1889:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1890:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1891:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1892:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1893:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1894:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1895:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1896:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1897:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1898:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1899:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1900:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1901:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
1902:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)   
1903:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1904:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1905:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1906:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
ARM GAS  /tmp/cco5yOG0.s 			page 62


1907:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices) 
1908:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1909:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1910:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1911:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1912:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1913:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1914:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1915:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1916:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1917:FWLIB/src/stm32f4xx_rcc.c ****   */
1918:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1919:FWLIB/src/stm32f4xx_rcc.c **** {
 1630              		.loc 1 1919 0
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 0
 1633              		@ frame_needed = 0, uses_anonymous_args = 0
 1634              		@ link register save eliminated.
 1635              	.LVL155:
1920:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1921:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1922:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1923:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1636              		.loc 1 1923 0
 1637 0000 29B9     		cbnz	r1, .L172
1924:FWLIB/src/stm32f4xx_rcc.c ****   {
1925:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
1926:FWLIB/src/stm32f4xx_rcc.c ****   }
1927:FWLIB/src/stm32f4xx_rcc.c ****   else
1928:FWLIB/src/stm32f4xx_rcc.c ****   {
1929:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 1638              		.loc 1 1929 0
 1639 0002 054A     		ldr	r2, .L173
 1640 0004 136D     		ldr	r3, [r2, #80]
 1641 0006 23EA0000 		bic	r0, r3, r0
 1642              	.LVL156:
 1643 000a 1065     		str	r0, [r2, #80]
 1644 000c 7047     		bx	lr
 1645              	.LVL157:
 1646              	.L172:
1925:FWLIB/src/stm32f4xx_rcc.c ****   }
 1647              		.loc 1 1925 0
 1648 000e 024A     		ldr	r2, .L173
 1649 0010 136D     		ldr	r3, [r2, #80]
 1650 0012 1843     		orrs	r0, r0, r3
 1651              	.LVL158:
 1652 0014 1065     		str	r0, [r2, #80]
 1653 0016 7047     		bx	lr
 1654              	.L174:
 1655              		.align	2
 1656              	.L173:
 1657 0018 00380240 		.word	1073887232
 1658              		.cfi_endproc
 1659              	.LFE154:
 1661              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 1662              		.align	1
 1663              		.global	RCC_AHB2PeriphClockLPModeCmd
ARM GAS  /tmp/cco5yOG0.s 			page 63


 1664              		.syntax unified
 1665              		.thumb
 1666              		.thumb_func
 1667              		.fpu softvfp
 1669              	RCC_AHB2PeriphClockLPModeCmd:
 1670              	.LFB155:
1930:FWLIB/src/stm32f4xx_rcc.c ****   }
1931:FWLIB/src/stm32f4xx_rcc.c **** }
1932:FWLIB/src/stm32f4xx_rcc.c **** 
1933:FWLIB/src/stm32f4xx_rcc.c **** /**
1934:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1935:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1936:FWLIB/src/stm32f4xx_rcc.c ****   *           power consumption.
1937:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1938:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1939:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1940:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1941:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1942:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1943:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1944:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1945:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1946:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1947:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1948:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1949:FWLIB/src/stm32f4xx_rcc.c ****   */
1950:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1951:FWLIB/src/stm32f4xx_rcc.c **** {
 1671              		.loc 1 1951 0
 1672              		.cfi_startproc
 1673              		@ args = 0, pretend = 0, frame = 0
 1674              		@ frame_needed = 0, uses_anonymous_args = 0
 1675              		@ link register save eliminated.
 1676              	.LVL159:
1952:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1953:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1954:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1955:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1677              		.loc 1 1955 0
 1678 0000 29B9     		cbnz	r1, .L178
1956:FWLIB/src/stm32f4xx_rcc.c ****   {
1957:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
1958:FWLIB/src/stm32f4xx_rcc.c ****   }
1959:FWLIB/src/stm32f4xx_rcc.c ****   else
1960:FWLIB/src/stm32f4xx_rcc.c ****   {
1961:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 1679              		.loc 1 1961 0
 1680 0002 054A     		ldr	r2, .L179
 1681 0004 536D     		ldr	r3, [r2, #84]
 1682 0006 23EA0000 		bic	r0, r3, r0
 1683              	.LVL160:
 1684 000a 5065     		str	r0, [r2, #84]
 1685 000c 7047     		bx	lr
 1686              	.LVL161:
 1687              	.L178:
1957:FWLIB/src/stm32f4xx_rcc.c ****   }
 1688              		.loc 1 1957 0
ARM GAS  /tmp/cco5yOG0.s 			page 64


 1689 000e 024A     		ldr	r2, .L179
 1690 0010 536D     		ldr	r3, [r2, #84]
 1691 0012 1843     		orrs	r0, r0, r3
 1692              	.LVL162:
 1693 0014 5065     		str	r0, [r2, #84]
 1694 0016 7047     		bx	lr
 1695              	.L180:
 1696              		.align	2
 1697              	.L179:
 1698 0018 00380240 		.word	1073887232
 1699              		.cfi_endproc
 1700              	.LFE155:
 1702              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 1703              		.align	1
 1704              		.global	RCC_AHB3PeriphClockLPModeCmd
 1705              		.syntax unified
 1706              		.thumb
 1707              		.thumb_func
 1708              		.fpu softvfp
 1710              	RCC_AHB3PeriphClockLPModeCmd:
 1711              	.LFB156:
1962:FWLIB/src/stm32f4xx_rcc.c ****   }
1963:FWLIB/src/stm32f4xx_rcc.c **** }
1964:FWLIB/src/stm32f4xx_rcc.c **** 
1965:FWLIB/src/stm32f4xx_rcc.c **** /**
1966:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1967:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1968:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
1969:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1970:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1971:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1972:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1973:FWLIB/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F429x/439x devices) 
1974:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1975:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1976:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1977:FWLIB/src/stm32f4xx_rcc.c ****   */
1978:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1979:FWLIB/src/stm32f4xx_rcc.c **** {
 1712              		.loc 1 1979 0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 0
 1715              		@ frame_needed = 0, uses_anonymous_args = 0
 1716              		@ link register save eliminated.
 1717              	.LVL163:
1980:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1981:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1982:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1983:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1718              		.loc 1 1983 0
 1719 0000 29B9     		cbnz	r1, .L184
1984:FWLIB/src/stm32f4xx_rcc.c ****   {
1985:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
1986:FWLIB/src/stm32f4xx_rcc.c ****   }
1987:FWLIB/src/stm32f4xx_rcc.c ****   else
1988:FWLIB/src/stm32f4xx_rcc.c ****   {
1989:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
ARM GAS  /tmp/cco5yOG0.s 			page 65


 1720              		.loc 1 1989 0
 1721 0002 054A     		ldr	r2, .L185
 1722 0004 936D     		ldr	r3, [r2, #88]
 1723 0006 23EA0000 		bic	r0, r3, r0
 1724              	.LVL164:
 1725 000a 9065     		str	r0, [r2, #88]
 1726 000c 7047     		bx	lr
 1727              	.LVL165:
 1728              	.L184:
1985:FWLIB/src/stm32f4xx_rcc.c ****   }
 1729              		.loc 1 1985 0
 1730 000e 024A     		ldr	r2, .L185
 1731 0010 936D     		ldr	r3, [r2, #88]
 1732 0012 1843     		orrs	r0, r0, r3
 1733              	.LVL166:
 1734 0014 9065     		str	r0, [r2, #88]
 1735 0016 7047     		bx	lr
 1736              	.L186:
 1737              		.align	2
 1738              	.L185:
 1739 0018 00380240 		.word	1073887232
 1740              		.cfi_endproc
 1741              	.LFE156:
 1743              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 1744              		.align	1
 1745              		.global	RCC_APB1PeriphClockLPModeCmd
 1746              		.syntax unified
 1747              		.thumb
 1748              		.thumb_func
 1749              		.fpu softvfp
 1751              	RCC_APB1PeriphClockLPModeCmd:
 1752              	.LFB157:
1990:FWLIB/src/stm32f4xx_rcc.c ****   }
1991:FWLIB/src/stm32f4xx_rcc.c **** }
1992:FWLIB/src/stm32f4xx_rcc.c **** 
1993:FWLIB/src/stm32f4xx_rcc.c **** /**
1994:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1995:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1996:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
1997:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1998:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1999:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2000:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2001:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2002:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2003:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2004:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2005:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2006:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2007:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2008:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2009:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2010:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2011:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2012:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2013:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2014:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
ARM GAS  /tmp/cco5yOG0.s 			page 66


2015:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2016:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2017:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2018:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2019:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2020:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2021:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2022:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2023:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2024:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2025:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2026:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2027:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2028:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2029:FWLIB/src/stm32f4xx_rcc.c ****   */
2030:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2031:FWLIB/src/stm32f4xx_rcc.c **** {
 1753              		.loc 1 2031 0
 1754              		.cfi_startproc
 1755              		@ args = 0, pretend = 0, frame = 0
 1756              		@ frame_needed = 0, uses_anonymous_args = 0
 1757              		@ link register save eliminated.
 1758              	.LVL167:
2032:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2033:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2034:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2035:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1759              		.loc 1 2035 0
 1760 0000 29B9     		cbnz	r1, .L190
2036:FWLIB/src/stm32f4xx_rcc.c ****   {
2037:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
2038:FWLIB/src/stm32f4xx_rcc.c ****   }
2039:FWLIB/src/stm32f4xx_rcc.c ****   else
2040:FWLIB/src/stm32f4xx_rcc.c ****   {
2041:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 1761              		.loc 1 2041 0
 1762 0002 054A     		ldr	r2, .L191
 1763 0004 136E     		ldr	r3, [r2, #96]
 1764 0006 23EA0000 		bic	r0, r3, r0
 1765              	.LVL168:
 1766 000a 1066     		str	r0, [r2, #96]
 1767 000c 7047     		bx	lr
 1768              	.LVL169:
 1769              	.L190:
2037:FWLIB/src/stm32f4xx_rcc.c ****   }
 1770              		.loc 1 2037 0
 1771 000e 024A     		ldr	r2, .L191
 1772 0010 136E     		ldr	r3, [r2, #96]
 1773 0012 1843     		orrs	r0, r0, r3
 1774              	.LVL170:
 1775 0014 1066     		str	r0, [r2, #96]
 1776 0016 7047     		bx	lr
 1777              	.L192:
 1778              		.align	2
 1779              	.L191:
 1780 0018 00380240 		.word	1073887232
 1781              		.cfi_endproc
ARM GAS  /tmp/cco5yOG0.s 			page 67


 1782              	.LFE157:
 1784              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 1785              		.align	1
 1786              		.global	RCC_APB2PeriphClockLPModeCmd
 1787              		.syntax unified
 1788              		.thumb
 1789              		.thumb_func
 1790              		.fpu softvfp
 1792              	RCC_APB2PeriphClockLPModeCmd:
 1793              	.LFB158:
2042:FWLIB/src/stm32f4xx_rcc.c ****   }
2043:FWLIB/src/stm32f4xx_rcc.c **** }
2044:FWLIB/src/stm32f4xx_rcc.c **** 
2045:FWLIB/src/stm32f4xx_rcc.c **** /**
2046:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
2047:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2048:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
2049:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2050:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2051:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2052:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2053:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2054:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2055:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2056:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2057:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2058:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2059:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2060:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2061:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2062:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2063:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2064:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2065:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2066:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2067:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2068:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2069:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
2070:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)   
2071:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2072:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2073:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2074:FWLIB/src/stm32f4xx_rcc.c ****   */
2075:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2076:FWLIB/src/stm32f4xx_rcc.c **** {
 1794              		.loc 1 2076 0
 1795              		.cfi_startproc
 1796              		@ args = 0, pretend = 0, frame = 0
 1797              		@ frame_needed = 0, uses_anonymous_args = 0
 1798              		@ link register save eliminated.
 1799              	.LVL171:
2077:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2078:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2079:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2080:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1800              		.loc 1 2080 0
 1801 0000 29B9     		cbnz	r1, .L196
ARM GAS  /tmp/cco5yOG0.s 			page 68


2081:FWLIB/src/stm32f4xx_rcc.c ****   {
2082:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
2083:FWLIB/src/stm32f4xx_rcc.c ****   }
2084:FWLIB/src/stm32f4xx_rcc.c ****   else
2085:FWLIB/src/stm32f4xx_rcc.c ****   {
2086:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 1802              		.loc 1 2086 0
 1803 0002 054A     		ldr	r2, .L197
 1804 0004 536E     		ldr	r3, [r2, #100]
 1805 0006 23EA0000 		bic	r0, r3, r0
 1806              	.LVL172:
 1807 000a 5066     		str	r0, [r2, #100]
 1808 000c 7047     		bx	lr
 1809              	.LVL173:
 1810              	.L196:
2082:FWLIB/src/stm32f4xx_rcc.c ****   }
 1811              		.loc 1 2082 0
 1812 000e 024A     		ldr	r2, .L197
 1813 0010 536E     		ldr	r3, [r2, #100]
 1814 0012 1843     		orrs	r0, r0, r3
 1815              	.LVL174:
 1816 0014 5066     		str	r0, [r2, #100]
 1817 0016 7047     		bx	lr
 1818              	.L198:
 1819              		.align	2
 1820              	.L197:
 1821 0018 00380240 		.word	1073887232
 1822              		.cfi_endproc
 1823              	.LFE158:
 1825              		.section	.text.RCC_LSEModeConfig,"ax",%progbits
 1826              		.align	1
 1827              		.global	RCC_LSEModeConfig
 1828              		.syntax unified
 1829              		.thumb
 1830              		.thumb_func
 1831              		.fpu softvfp
 1833              	RCC_LSEModeConfig:
 1834              	.LFB159:
2087:FWLIB/src/stm32f4xx_rcc.c ****   }
2088:FWLIB/src/stm32f4xx_rcc.c **** }
2089:FWLIB/src/stm32f4xx_rcc.c **** 
2090:FWLIB/src/stm32f4xx_rcc.c **** /**
2091:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the External Low Speed oscillator mode (LSE mode).
2092:FWLIB/src/stm32f4xx_rcc.c ****   * @note This mode is only available for STM32F411xx devices.
2093:FWLIB/src/stm32f4xx_rcc.c ****   * @param  Mode: specifies the LSE mode.
2094:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2095:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
2096:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
2097:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2098:FWLIB/src/stm32f4xx_rcc.c ****   */
2099:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSEModeConfig(uint8_t Mode)
2100:FWLIB/src/stm32f4xx_rcc.c **** {
 1835              		.loc 1 2100 0
 1836              		.cfi_startproc
 1837              		@ args = 0, pretend = 0, frame = 0
 1838              		@ frame_needed = 0, uses_anonymous_args = 0
 1839              		@ link register save eliminated.
ARM GAS  /tmp/cco5yOG0.s 			page 69


 1840              	.LVL175:
2101:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2102:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE_MODE(Mode));
2103:FWLIB/src/stm32f4xx_rcc.c ****   
2104:FWLIB/src/stm32f4xx_rcc.c ****   if(Mode == RCC_LSE_HIGHDRIVE_MODE)
 1841              		.loc 1 2104 0
 1842 0000 0128     		cmp	r0, #1
 1843 0002 05D0     		beq	.L202
2105:FWLIB/src/stm32f4xx_rcc.c ****   {
2106:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2107:FWLIB/src/stm32f4xx_rcc.c ****   }
2108:FWLIB/src/stm32f4xx_rcc.c ****   else
2109:FWLIB/src/stm32f4xx_rcc.c ****   {
2110:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 1844              		.loc 1 2110 0
 1845 0004 054A     		ldr	r2, .L203
 1846 0006 136F     		ldr	r3, [r2, #112]
 1847 0008 23F00803 		bic	r3, r3, #8
 1848 000c 1367     		str	r3, [r2, #112]
 1849 000e 7047     		bx	lr
 1850              	.L202:
2106:FWLIB/src/stm32f4xx_rcc.c ****   }
 1851              		.loc 1 2106 0
 1852 0010 024A     		ldr	r2, .L203
 1853 0012 136F     		ldr	r3, [r2, #112]
 1854 0014 43F00803 		orr	r3, r3, #8
 1855 0018 1367     		str	r3, [r2, #112]
 1856 001a 7047     		bx	lr
 1857              	.L204:
 1858              		.align	2
 1859              	.L203:
 1860 001c 00380240 		.word	1073887232
 1861              		.cfi_endproc
 1862              	.LFE159:
 1864              		.section	.text.RCC_ITConfig,"ax",%progbits
 1865              		.align	1
 1866              		.global	RCC_ITConfig
 1867              		.syntax unified
 1868              		.thumb
 1869              		.thumb_func
 1870              		.fpu softvfp
 1872              	RCC_ITConfig:
 1873              	.LFB160:
2111:FWLIB/src/stm32f4xx_rcc.c ****   }
2112:FWLIB/src/stm32f4xx_rcc.c **** }
2113:FWLIB/src/stm32f4xx_rcc.c **** 
2114:FWLIB/src/stm32f4xx_rcc.c **** /**
2115:FWLIB/src/stm32f4xx_rcc.c ****   * @}
2116:FWLIB/src/stm32f4xx_rcc.c ****   */
2117:FWLIB/src/stm32f4xx_rcc.c **** 
2118:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
2119:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
2120:FWLIB/src/stm32f4xx_rcc.c ****  *
2121:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
2122:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
2123:FWLIB/src/stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
2124:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
ARM GAS  /tmp/cco5yOG0.s 			page 70


2125:FWLIB/src/stm32f4xx_rcc.c **** 
2126:FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
2127:FWLIB/src/stm32f4xx_rcc.c ****   * @{
2128:FWLIB/src/stm32f4xx_rcc.c ****   */
2129:FWLIB/src/stm32f4xx_rcc.c **** 
2130:FWLIB/src/stm32f4xx_rcc.c **** /**
2131:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
2132:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
2133:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2134:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2135:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2136:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2137:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2138:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2139:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
2140:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)
2141:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
2142:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2143:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2144:FWLIB/src/stm32f4xx_rcc.c ****   */
2145:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
2146:FWLIB/src/stm32f4xx_rcc.c **** {
 1874              		.loc 1 2146 0
 1875              		.cfi_startproc
 1876              		@ args = 0, pretend = 0, frame = 0
 1877              		@ frame_needed = 0, uses_anonymous_args = 0
 1878              		@ link register save eliminated.
 1879              	.LVL176:
2147:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2148:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
2149:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2150:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1880              		.loc 1 2150 0
 1881 0000 29B9     		cbnz	r1, .L208
2151:FWLIB/src/stm32f4xx_rcc.c ****   {
2152:FWLIB/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
2153:FWLIB/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
2154:FWLIB/src/stm32f4xx_rcc.c ****   }
2155:FWLIB/src/stm32f4xx_rcc.c ****   else
2156:FWLIB/src/stm32f4xx_rcc.c ****   {
2157:FWLIB/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
2158:FWLIB/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1882              		.loc 1 2158 0
 1883 0002 054A     		ldr	r2, .L209
 1884 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1885 0006 23EA0000 		bic	r0, r3, r0
 1886              	.LVL177:
 1887 000a 1070     		strb	r0, [r2]
 1888 000c 7047     		bx	lr
 1889              	.LVL178:
 1890              	.L208:
2153:FWLIB/src/stm32f4xx_rcc.c ****   }
 1891              		.loc 1 2153 0
 1892 000e 024A     		ldr	r2, .L209
 1893 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1894 0012 1843     		orrs	r0, r0, r3
 1895              	.LVL179:
ARM GAS  /tmp/cco5yOG0.s 			page 71


 1896 0014 1070     		strb	r0, [r2]
 1897 0016 7047     		bx	lr
 1898              	.L210:
 1899              		.align	2
 1900              	.L209:
 1901 0018 0D380240 		.word	1073887245
 1902              		.cfi_endproc
 1903              	.LFE160:
 1905              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1906              		.align	1
 1907              		.global	RCC_GetFlagStatus
 1908              		.syntax unified
 1909              		.thumb
 1910              		.thumb_func
 1911              		.fpu softvfp
 1913              	RCC_GetFlagStatus:
 1914              	.LFB161:
2159:FWLIB/src/stm32f4xx_rcc.c ****   }
2160:FWLIB/src/stm32f4xx_rcc.c **** }
2161:FWLIB/src/stm32f4xx_rcc.c **** 
2162:FWLIB/src/stm32f4xx_rcc.c **** /**
2163:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
2164:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
2165:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2166:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
2167:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
2168:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
2169:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
2170:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLSAIRDY: PLLSAI clock ready (only for STM32F42xxx/43xxx devices)
2171:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
2172:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
2173:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
2174:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
2175:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
2176:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
2177:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
2178:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
2179:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
2180:FWLIB/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
2181:FWLIB/src/stm32f4xx_rcc.c ****   */
2182:FWLIB/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
2183:FWLIB/src/stm32f4xx_rcc.c **** {
 1915              		.loc 1 2183 0
 1916              		.cfi_startproc
 1917              		@ args = 0, pretend = 0, frame = 0
 1918              		@ frame_needed = 0, uses_anonymous_args = 0
 1919              		@ link register save eliminated.
 1920              	.LVL180:
2184:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
2185:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
2186:FWLIB/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
2187:FWLIB/src/stm32f4xx_rcc.c **** 
2188:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2189:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
2190:FWLIB/src/stm32f4xx_rcc.c **** 
2191:FWLIB/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
2192:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
ARM GAS  /tmp/cco5yOG0.s 			page 72


 1921              		.loc 1 2192 0
 1922 0000 4309     		lsrs	r3, r0, #5
 1923              	.LVL181:
2193:FWLIB/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1924              		.loc 1 2193 0
 1925 0002 012B     		cmp	r3, #1
 1926 0004 0CD0     		beq	.L217
2194:FWLIB/src/stm32f4xx_rcc.c ****   {
2195:FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
2196:FWLIB/src/stm32f4xx_rcc.c ****   }
2197:FWLIB/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1927              		.loc 1 2197 0
 1928 0006 022B     		cmp	r3, #2
 1929 0008 0DD0     		beq	.L218
2198:FWLIB/src/stm32f4xx_rcc.c ****   {
2199:FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
2200:FWLIB/src/stm32f4xx_rcc.c ****   }
2201:FWLIB/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
2202:FWLIB/src/stm32f4xx_rcc.c ****   {
2203:FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 1930              		.loc 1 2203 0
 1931 000a 094B     		ldr	r3, .L220
 1932              	.LVL182:
 1933 000c 5B6F     		ldr	r3, [r3, #116]
 1934              	.LVL183:
 1935              	.L213:
2204:FWLIB/src/stm32f4xx_rcc.c ****   }
2205:FWLIB/src/stm32f4xx_rcc.c **** 
2206:FWLIB/src/stm32f4xx_rcc.c ****   /* Get the flag position */
2207:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 1936              		.loc 1 2207 0
 1937 000e 00F01F00 		and	r0, r0, #31
 1938              	.LVL184:
2208:FWLIB/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1939              		.loc 1 2208 0
 1940 0012 23FA00F0 		lsr	r0, r3, r0
 1941              	.LVL185:
 1942 0016 10F0010F 		tst	r0, #1
 1943 001a 07D1     		bne	.L219
2209:FWLIB/src/stm32f4xx_rcc.c ****   {
2210:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = SET;
2211:FWLIB/src/stm32f4xx_rcc.c ****   }
2212:FWLIB/src/stm32f4xx_rcc.c ****   else
2213:FWLIB/src/stm32f4xx_rcc.c ****   {
2214:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 1944              		.loc 1 2214 0
 1945 001c 0020     		movs	r0, #0
 1946              	.LVL186:
2215:FWLIB/src/stm32f4xx_rcc.c ****   }
2216:FWLIB/src/stm32f4xx_rcc.c ****   /* Return the flag status */
2217:FWLIB/src/stm32f4xx_rcc.c ****   return bitstatus;
2218:FWLIB/src/stm32f4xx_rcc.c **** }
 1947              		.loc 1 2218 0
 1948 001e 7047     		bx	lr
 1949              	.LVL187:
 1950              	.L217:
2195:FWLIB/src/stm32f4xx_rcc.c ****   }
ARM GAS  /tmp/cco5yOG0.s 			page 73


 1951              		.loc 1 2195 0
 1952 0020 034B     		ldr	r3, .L220
 1953              	.LVL188:
 1954 0022 1B68     		ldr	r3, [r3]
 1955              	.LVL189:
 1956 0024 F3E7     		b	.L213
 1957              	.LVL190:
 1958              	.L218:
2199:FWLIB/src/stm32f4xx_rcc.c ****   }
 1959              		.loc 1 2199 0
 1960 0026 024B     		ldr	r3, .L220
 1961              	.LVL191:
 1962 0028 1B6F     		ldr	r3, [r3, #112]
 1963              	.LVL192:
 1964 002a F0E7     		b	.L213
 1965              	.LVL193:
 1966              	.L219:
2210:FWLIB/src/stm32f4xx_rcc.c ****   }
 1967              		.loc 1 2210 0
 1968 002c 0120     		movs	r0, #1
 1969 002e 7047     		bx	lr
 1970              	.L221:
 1971              		.align	2
 1972              	.L220:
 1973 0030 00380240 		.word	1073887232
 1974              		.cfi_endproc
 1975              	.LFE161:
 1977              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1978              		.align	1
 1979              		.global	RCC_WaitForHSEStartUp
 1980              		.syntax unified
 1981              		.thumb
 1982              		.thumb_func
 1983              		.fpu softvfp
 1985              	RCC_WaitForHSEStartUp:
 1986              	.LFB114:
 288:FWLIB/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 1987              		.loc 1 288 0
 1988              		.cfi_startproc
 1989              		@ args = 0, pretend = 0, frame = 8
 1990              		@ frame_needed = 0, uses_anonymous_args = 0
 1991 0000 00B5     		push	{lr}
 1992              	.LCFI3:
 1993              		.cfi_def_cfa_offset 4
 1994              		.cfi_offset 14, -4
 1995 0002 83B0     		sub	sp, sp, #12
 1996              	.LCFI4:
 1997              		.cfi_def_cfa_offset 16
 289:FWLIB/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 1998              		.loc 1 289 0
 1999 0004 0023     		movs	r3, #0
 2000 0006 0193     		str	r3, [sp, #4]
 2001              	.LVL194:
 2002              	.L224:
 295:FWLIB/src/stm32f4xx_rcc.c ****     startupcounter++;
 2003              		.loc 1 295 0 discriminator 2
 2004 0008 3120     		movs	r0, #49
ARM GAS  /tmp/cco5yOG0.s 			page 74


 2005 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 2006              	.LVL195:
 296:FWLIB/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 2007              		.loc 1 296 0 discriminator 2
 2008 000e 019B     		ldr	r3, [sp, #4]
 2009 0010 0133     		adds	r3, r3, #1
 2010 0012 0193     		str	r3, [sp, #4]
 297:FWLIB/src/stm32f4xx_rcc.c **** 
 2011              		.loc 1 297 0 discriminator 2
 2012 0014 019B     		ldr	r3, [sp, #4]
 2013 0016 B3F5A04F 		cmp	r3, #20480
 2014 001a 01D0     		beq	.L223
 297:FWLIB/src/stm32f4xx_rcc.c **** 
 2015              		.loc 1 297 0 is_stmt 0 discriminator 1
 2016 001c 0028     		cmp	r0, #0
 2017 001e F3D0     		beq	.L224
 2018              	.L223:
 299:FWLIB/src/stm32f4xx_rcc.c ****   {
 2019              		.loc 1 299 0 is_stmt 1
 2020 0020 3120     		movs	r0, #49
 2021              	.LVL196:
 2022 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 2023              	.LVL197:
 2024 0026 18B9     		cbnz	r0, .L228
 305:FWLIB/src/stm32f4xx_rcc.c ****   }
 2025              		.loc 1 305 0
 2026 0028 0020     		movs	r0, #0
 2027              	.L225:
 2028              	.LVL198:
 308:FWLIB/src/stm32f4xx_rcc.c **** 
 2029              		.loc 1 308 0
 2030 002a 03B0     		add	sp, sp, #12
 2031              	.LCFI5:
 2032              		.cfi_remember_state
 2033              		.cfi_def_cfa_offset 4
 2034              		@ sp needed
 2035 002c 5DF804FB 		ldr	pc, [sp], #4
 2036              	.LVL199:
 2037              	.L228:
 2038              	.LCFI6:
 2039              		.cfi_restore_state
 301:FWLIB/src/stm32f4xx_rcc.c ****   }
 2040              		.loc 1 301 0
 2041 0030 0120     		movs	r0, #1
 2042 0032 FAE7     		b	.L225
 2043              		.cfi_endproc
 2044              	.LFE114:
 2046              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2047              		.align	1
 2048              		.global	RCC_ClearFlag
 2049              		.syntax unified
 2050              		.thumb
 2051              		.thumb_func
 2052              		.fpu softvfp
 2054              	RCC_ClearFlag:
 2055              	.LFB162:
2219:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cco5yOG0.s 			page 75


2220:FWLIB/src/stm32f4xx_rcc.c **** /**
2221:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
2222:FWLIB/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
2223:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
2224:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
2225:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2226:FWLIB/src/stm32f4xx_rcc.c ****   */
2227:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
2228:FWLIB/src/stm32f4xx_rcc.c **** {
 2056              		.loc 1 2228 0
 2057              		.cfi_startproc
 2058              		@ args = 0, pretend = 0, frame = 0
 2059              		@ frame_needed = 0, uses_anonymous_args = 0
 2060              		@ link register save eliminated.
2229:FWLIB/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
2230:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2061              		.loc 1 2230 0
 2062 0000 024A     		ldr	r2, .L230
 2063 0002 536F     		ldr	r3, [r2, #116]
 2064 0004 43F08073 		orr	r3, r3, #16777216
 2065 0008 5367     		str	r3, [r2, #116]
 2066 000a 7047     		bx	lr
 2067              	.L231:
 2068              		.align	2
 2069              	.L230:
 2070 000c 00380240 		.word	1073887232
 2071              		.cfi_endproc
 2072              	.LFE162:
 2074              		.section	.text.RCC_GetITStatus,"ax",%progbits
 2075              		.align	1
 2076              		.global	RCC_GetITStatus
 2077              		.syntax unified
 2078              		.thumb
 2079              		.thumb_func
 2080              		.fpu softvfp
 2082              	RCC_GetITStatus:
 2083              	.LFB163:
2231:FWLIB/src/stm32f4xx_rcc.c **** }
2232:FWLIB/src/stm32f4xx_rcc.c **** 
2233:FWLIB/src/stm32f4xx_rcc.c **** /**
2234:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
2235:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
2236:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2237:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2238:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2239:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2240:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2241:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2242:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt           
2243:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devi
2244:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
2245:FWLIB/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
2246:FWLIB/src/stm32f4xx_rcc.c ****   */
2247:FWLIB/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
2248:FWLIB/src/stm32f4xx_rcc.c **** {
 2084              		.loc 1 2248 0
 2085              		.cfi_startproc
ARM GAS  /tmp/cco5yOG0.s 			page 76


 2086              		@ args = 0, pretend = 0, frame = 0
 2087              		@ frame_needed = 0, uses_anonymous_args = 0
 2088              		@ link register save eliminated.
 2089              	.LVL200:
2249:FWLIB/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
2250:FWLIB/src/stm32f4xx_rcc.c **** 
2251:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2252:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
2253:FWLIB/src/stm32f4xx_rcc.c **** 
2254:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
2255:FWLIB/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2090              		.loc 1 2255 0
 2091 0000 034B     		ldr	r3, .L236
 2092 0002 DB68     		ldr	r3, [r3, #12]
 2093 0004 1842     		tst	r0, r3
 2094 0006 01D1     		bne	.L235
2256:FWLIB/src/stm32f4xx_rcc.c ****   {
2257:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = SET;
2258:FWLIB/src/stm32f4xx_rcc.c ****   }
2259:FWLIB/src/stm32f4xx_rcc.c ****   else
2260:FWLIB/src/stm32f4xx_rcc.c ****   {
2261:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2095              		.loc 1 2261 0
 2096 0008 0020     		movs	r0, #0
 2097              	.LVL201:
2262:FWLIB/src/stm32f4xx_rcc.c ****   }
2263:FWLIB/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
2264:FWLIB/src/stm32f4xx_rcc.c ****   return  bitstatus;
2265:FWLIB/src/stm32f4xx_rcc.c **** }
 2098              		.loc 1 2265 0
 2099 000a 7047     		bx	lr
 2100              	.LVL202:
 2101              	.L235:
2257:FWLIB/src/stm32f4xx_rcc.c ****   }
 2102              		.loc 1 2257 0
 2103 000c 0120     		movs	r0, #1
 2104              	.LVL203:
 2105 000e 7047     		bx	lr
 2106              	.L237:
 2107              		.align	2
 2108              	.L236:
 2109 0010 00380240 		.word	1073887232
 2110              		.cfi_endproc
 2111              	.LFE163:
 2113              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2114              		.align	1
 2115              		.global	RCC_ClearITPendingBit
 2116              		.syntax unified
 2117              		.thumb
 2118              		.thumb_func
 2119              		.fpu softvfp
 2121              	RCC_ClearITPendingBit:
 2122              	.LFB164:
2266:FWLIB/src/stm32f4xx_rcc.c **** 
2267:FWLIB/src/stm32f4xx_rcc.c **** /**
2268:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
2269:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
ARM GAS  /tmp/cco5yOG0.s 			page 77


2270:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2271:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2272:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2273:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2274:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2275:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2276:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
2277:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)  
2278:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
2279:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2280:FWLIB/src/stm32f4xx_rcc.c ****   */
2281:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
2282:FWLIB/src/stm32f4xx_rcc.c **** {
 2123              		.loc 1 2282 0
 2124              		.cfi_startproc
 2125              		@ args = 0, pretend = 0, frame = 0
 2126              		@ frame_needed = 0, uses_anonymous_args = 0
 2127              		@ link register save eliminated.
 2128              	.LVL204:
2283:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2284:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
2285:FWLIB/src/stm32f4xx_rcc.c **** 
2286:FWLIB/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
2287:FWLIB/src/stm32f4xx_rcc.c ****      pending bits */
2288:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2129              		.loc 1 2288 0
 2130 0000 014B     		ldr	r3, .L239
 2131 0002 1870     		strb	r0, [r3]
 2132 0004 7047     		bx	lr
 2133              	.L240:
 2134 0006 00BF     		.align	2
 2135              	.L239:
 2136 0008 0E380240 		.word	1073887246
 2137              		.cfi_endproc
 2138              	.LFE164:
 2140              		.section	.data.APBAHBPrescTable,"aw",%progbits
 2141              		.align	2
 2142              		.set	.LANCHOR0,. + 0
 2145              	APBAHBPrescTable:
 2146 0000 00       		.byte	0
 2147 0001 00       		.byte	0
 2148 0002 00       		.byte	0
 2149 0003 00       		.byte	0
 2150 0004 01       		.byte	1
 2151 0005 02       		.byte	2
 2152 0006 03       		.byte	3
 2153 0007 04       		.byte	4
 2154 0008 01       		.byte	1
 2155 0009 02       		.byte	2
 2156 000a 03       		.byte	3
 2157 000b 04       		.byte	4
 2158 000c 06       		.byte	6
 2159 000d 07       		.byte	7
 2160 000e 08       		.byte	8
 2161 000f 09       		.byte	9
 2162              		.text
 2163              	.Letext0:
ARM GAS  /tmp/cco5yOG0.s 			page 78


 2164              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2165              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2166              		.file 4 "CORE/core_cm4.h"
 2167              		.file 5 "USER/system_stm32f4xx.h"
 2168              		.file 6 "USER/stm32f4xx.h"
 2169              		.file 7 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/cco5yOG0.s 			page 79


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rcc.c
     /tmp/cco5yOG0.s:16     .text.RCC_DeInit:0000000000000000 $t
     /tmp/cco5yOG0.s:23     .text.RCC_DeInit:0000000000000000 RCC_DeInit
     /tmp/cco5yOG0.s:65     .text.RCC_DeInit:000000000000003c $d
     /tmp/cco5yOG0.s:72     .text.RCC_HSEConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:79     .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
     /tmp/cco5yOG0.s:97     .text.RCC_HSEConfig:000000000000000c $d
     /tmp/cco5yOG0.s:102    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
     /tmp/cco5yOG0.s:109    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
     /tmp/cco5yOG0.s:133    .text.RCC_AdjustHSICalibrationValue:0000000000000010 $d
     /tmp/cco5yOG0.s:138    .text.RCC_HSICmd:0000000000000000 $t
     /tmp/cco5yOG0.s:145    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
     /tmp/cco5yOG0.s:160    .text.RCC_HSICmd:0000000000000008 $d
     /tmp/cco5yOG0.s:165    .text.RCC_LSEConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:172    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
     /tmp/cco5yOG0.s:208    .text.RCC_LSEConfig:0000000000000024 $d
     /tmp/cco5yOG0.s:213    .text.RCC_LSICmd:0000000000000000 $t
     /tmp/cco5yOG0.s:220    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
     /tmp/cco5yOG0.s:235    .text.RCC_LSICmd:0000000000000008 $d
     /tmp/cco5yOG0.s:240    .text.RCC_PLLConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:247    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
     /tmp/cco5yOG0.s:273    .text.RCC_PLLConfig:000000000000001c $d
     /tmp/cco5yOG0.s:278    .text.RCC_PLLCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:285    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
     /tmp/cco5yOG0.s:300    .text.RCC_PLLCmd:0000000000000008 $d
     /tmp/cco5yOG0.s:305    .text.RCC_PLLI2SConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:312    .text.RCC_PLLI2SConfig:0000000000000000 RCC_PLLI2SConfig
     /tmp/cco5yOG0.s:330    .text.RCC_PLLI2SConfig:0000000000000010 $d
     /tmp/cco5yOG0.s:335    .text.RCC_PLLI2SCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:342    .text.RCC_PLLI2SCmd:0000000000000000 RCC_PLLI2SCmd
     /tmp/cco5yOG0.s:357    .text.RCC_PLLI2SCmd:0000000000000008 $d
     /tmp/cco5yOG0.s:362    .text.RCC_PLLSAIConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:369    .text.RCC_PLLSAIConfig:0000000000000000 RCC_PLLSAIConfig
     /tmp/cco5yOG0.s:388    .text.RCC_PLLSAIConfig:0000000000000014 $d
     /tmp/cco5yOG0.s:393    .text.RCC_PLLSAICmd:0000000000000000 $t
     /tmp/cco5yOG0.s:400    .text.RCC_PLLSAICmd:0000000000000000 RCC_PLLSAICmd
     /tmp/cco5yOG0.s:415    .text.RCC_PLLSAICmd:0000000000000008 $d
     /tmp/cco5yOG0.s:420    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:427    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
     /tmp/cco5yOG0.s:442    .text.RCC_ClockSecuritySystemCmd:0000000000000008 $d
     /tmp/cco5yOG0.s:447    .text.RCC_MCO1Config:0000000000000000 $t
     /tmp/cco5yOG0.s:454    .text.RCC_MCO1Config:0000000000000000 RCC_MCO1Config
     /tmp/cco5yOG0.s:480    .text.RCC_MCO1Config:0000000000000010 $d
     /tmp/cco5yOG0.s:485    .text.RCC_MCO2Config:0000000000000000 $t
     /tmp/cco5yOG0.s:492    .text.RCC_MCO2Config:0000000000000000 RCC_MCO2Config
     /tmp/cco5yOG0.s:518    .text.RCC_MCO2Config:0000000000000010 $d
     /tmp/cco5yOG0.s:523    .text.RCC_SYSCLKConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:530    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
     /tmp/cco5yOG0.s:554    .text.RCC_SYSCLKConfig:0000000000000010 $d
     /tmp/cco5yOG0.s:559    .text.RCC_GetSYSCLKSource:0000000000000000 $t
     /tmp/cco5yOG0.s:566    .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
     /tmp/cco5yOG0.s:582    .text.RCC_GetSYSCLKSource:000000000000000c $d
     /tmp/cco5yOG0.s:587    .text.RCC_HCLKConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:594    .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
     /tmp/cco5yOG0.s:618    .text.RCC_HCLKConfig:0000000000000010 $d
     /tmp/cco5yOG0.s:623    .text.RCC_PCLK1Config:0000000000000000 $t
ARM GAS  /tmp/cco5yOG0.s 			page 80


     /tmp/cco5yOG0.s:630    .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
     /tmp/cco5yOG0.s:654    .text.RCC_PCLK1Config:0000000000000010 $d
     /tmp/cco5yOG0.s:659    .text.RCC_PCLK2Config:0000000000000000 $t
     /tmp/cco5yOG0.s:666    .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
     /tmp/cco5yOG0.s:690    .text.RCC_PCLK2Config:0000000000000010 $d
     /tmp/cco5yOG0.s:695    .text.RCC_GetClocksFreq:0000000000000000 $t
     /tmp/cco5yOG0.s:702    .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
     /tmp/cco5yOG0.s:857    .text.RCC_GetClocksFreq:00000000000000a4 $d
     /tmp/cco5yOG0.s:865    .text.RCC_RTCCLKConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:872    .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
     /tmp/cco5yOG0.s:914    .text.RCC_RTCCLKConfig:0000000000000030 $d
     /tmp/cco5yOG0.s:919    .text.RCC_RTCCLKCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:926    .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
     /tmp/cco5yOG0.s:941    .text.RCC_RTCCLKCmd:0000000000000008 $d
     /tmp/cco5yOG0.s:946    .text.RCC_BackupResetCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:953    .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
     /tmp/cco5yOG0.s:968    .text.RCC_BackupResetCmd:0000000000000008 $d
     /tmp/cco5yOG0.s:973    .text.RCC_I2SCLKConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:980    .text.RCC_I2SCLKConfig:0000000000000000 RCC_I2SCLKConfig
     /tmp/cco5yOG0.s:995    .text.RCC_I2SCLKConfig:0000000000000008 $d
     /tmp/cco5yOG0.s:1000   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:1007   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 RCC_SAIPLLI2SClkDivConfig
     /tmp/cco5yOG0.s:1033   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000014 $d
     /tmp/cco5yOG0.s:1038   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:1045   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 RCC_SAIPLLSAIClkDivConfig
     /tmp/cco5yOG0.s:1071   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000018 $d
     /tmp/cco5yOG0.s:1076   .text.RCC_SAIBlockACLKConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:1083   .text.RCC_SAIBlockACLKConfig:0000000000000000 RCC_SAIBlockACLKConfig
     /tmp/cco5yOG0.s:1107   .text.RCC_SAIBlockACLKConfig:0000000000000014 $d
     /tmp/cco5yOG0.s:1112   .text.RCC_SAIBlockBCLKConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:1119   .text.RCC_SAIBlockBCLKConfig:0000000000000000 RCC_SAIBlockBCLKConfig
     /tmp/cco5yOG0.s:1143   .text.RCC_SAIBlockBCLKConfig:0000000000000014 $d
     /tmp/cco5yOG0.s:1148   .text.RCC_LTDCCLKDivConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:1155   .text.RCC_LTDCCLKDivConfig:0000000000000000 RCC_LTDCCLKDivConfig
     /tmp/cco5yOG0.s:1179   .text.RCC_LTDCCLKDivConfig:0000000000000014 $d
     /tmp/cco5yOG0.s:1184   .text.RCC_TIMCLKPresConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:1191   .text.RCC_TIMCLKPresConfig:0000000000000000 RCC_TIMCLKPresConfig
     /tmp/cco5yOG0.s:1206   .text.RCC_TIMCLKPresConfig:0000000000000008 $d
     /tmp/cco5yOG0.s:1211   .text.RCC_AHB1PeriphClockCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1218   .text.RCC_AHB1PeriphClockCmd:0000000000000000 RCC_AHB1PeriphClockCmd
     /tmp/cco5yOG0.s:1247   .text.RCC_AHB1PeriphClockCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1252   .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1259   .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
     /tmp/cco5yOG0.s:1288   .text.RCC_AHB2PeriphClockCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1293   .text.RCC_AHB3PeriphClockCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1300   .text.RCC_AHB3PeriphClockCmd:0000000000000000 RCC_AHB3PeriphClockCmd
     /tmp/cco5yOG0.s:1329   .text.RCC_AHB3PeriphClockCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1334   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1341   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
     /tmp/cco5yOG0.s:1370   .text.RCC_APB1PeriphClockCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1375   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1382   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
     /tmp/cco5yOG0.s:1411   .text.RCC_APB2PeriphClockCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1416   .text.RCC_AHB1PeriphResetCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1423   .text.RCC_AHB1PeriphResetCmd:0000000000000000 RCC_AHB1PeriphResetCmd
     /tmp/cco5yOG0.s:1452   .text.RCC_AHB1PeriphResetCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1457   .text.RCC_AHB2PeriphResetCmd:0000000000000000 $t
ARM GAS  /tmp/cco5yOG0.s 			page 81


     /tmp/cco5yOG0.s:1464   .text.RCC_AHB2PeriphResetCmd:0000000000000000 RCC_AHB2PeriphResetCmd
     /tmp/cco5yOG0.s:1493   .text.RCC_AHB2PeriphResetCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1498   .text.RCC_AHB3PeriphResetCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1505   .text.RCC_AHB3PeriphResetCmd:0000000000000000 RCC_AHB3PeriphResetCmd
     /tmp/cco5yOG0.s:1534   .text.RCC_AHB3PeriphResetCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1539   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1546   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
     /tmp/cco5yOG0.s:1575   .text.RCC_APB1PeriphResetCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1580   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1587   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
     /tmp/cco5yOG0.s:1616   .text.RCC_APB2PeriphResetCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1621   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1628   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/cco5yOG0.s:1657   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1662   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1669   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/cco5yOG0.s:1698   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1703   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1710   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 RCC_AHB3PeriphClockLPModeCmd
     /tmp/cco5yOG0.s:1739   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1744   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1751   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/cco5yOG0.s:1780   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1785   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cco5yOG0.s:1792   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/cco5yOG0.s:1821   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/cco5yOG0.s:1826   .text.RCC_LSEModeConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:1833   .text.RCC_LSEModeConfig:0000000000000000 RCC_LSEModeConfig
     /tmp/cco5yOG0.s:1860   .text.RCC_LSEModeConfig:000000000000001c $d
     /tmp/cco5yOG0.s:1865   .text.RCC_ITConfig:0000000000000000 $t
     /tmp/cco5yOG0.s:1872   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
     /tmp/cco5yOG0.s:1901   .text.RCC_ITConfig:0000000000000018 $d
     /tmp/cco5yOG0.s:1906   .text.RCC_GetFlagStatus:0000000000000000 $t
     /tmp/cco5yOG0.s:1913   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
     /tmp/cco5yOG0.s:1973   .text.RCC_GetFlagStatus:0000000000000030 $d
     /tmp/cco5yOG0.s:1978   .text.RCC_WaitForHSEStartUp:0000000000000000 $t
     /tmp/cco5yOG0.s:1985   .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
     /tmp/cco5yOG0.s:2047   .text.RCC_ClearFlag:0000000000000000 $t
     /tmp/cco5yOG0.s:2054   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
     /tmp/cco5yOG0.s:2070   .text.RCC_ClearFlag:000000000000000c $d
     /tmp/cco5yOG0.s:2075   .text.RCC_GetITStatus:0000000000000000 $t
     /tmp/cco5yOG0.s:2082   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
     /tmp/cco5yOG0.s:2109   .text.RCC_GetITStatus:0000000000000010 $d
     /tmp/cco5yOG0.s:2114   .text.RCC_ClearITPendingBit:0000000000000000 $t
     /tmp/cco5yOG0.s:2121   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
     /tmp/cco5yOG0.s:2136   .text.RCC_ClearITPendingBit:0000000000000008 $d
     /tmp/cco5yOG0.s:2141   .data.APBAHBPrescTable:0000000000000000 $d
     /tmp/cco5yOG0.s:2145   .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
