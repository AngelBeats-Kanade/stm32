ARM GAS  /tmp/ccgXhnD7.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f4xx_tim.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.TI1_Config,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	TI1_Config:
  23              	.LFB200:
  24              		.file 1 "FWLIB/src/stm32f4xx_tim.c"
   1:FWLIB/src/stm32f4xx_tim.c **** /**
   2:FWLIB/src/stm32f4xx_tim.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_tim.c ****   * @file    stm32f4xx_tim.c
   4:FWLIB/src/stm32f4xx_tim.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_tim.c ****   * @version V1.4.0
   6:FWLIB/src/stm32f4xx_tim.c ****   * @date    04-August-2014
   7:FWLIB/src/stm32f4xx_tim.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_tim.c ****   *          functionalities of the TIM peripheral:
   9:FWLIB/src/stm32f4xx_tim.c ****   *            + TimeBase management
  10:FWLIB/src/stm32f4xx_tim.c ****   *            + Output Compare management
  11:FWLIB/src/stm32f4xx_tim.c ****   *            + Input Capture management
  12:FWLIB/src/stm32f4xx_tim.c ****   *            + Advanced-control timers (TIM1 and TIM8) specific features  
  13:FWLIB/src/stm32f4xx_tim.c ****   *            + Interrupts, DMA and flags management
  14:FWLIB/src/stm32f4xx_tim.c ****   *            + Clocks management
  15:FWLIB/src/stm32f4xx_tim.c ****   *            + Synchronization management
  16:FWLIB/src/stm32f4xx_tim.c ****   *            + Specific interface management
  17:FWLIB/src/stm32f4xx_tim.c ****   *            + Specific remapping management      
  18:FWLIB/src/stm32f4xx_tim.c ****   *              
  19:FWLIB/src/stm32f4xx_tim.c ****   @verbatim   
  20:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
  21:FWLIB/src/stm32f4xx_tim.c ****                    #####  How to use this driver #####
  22:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
  23:FWLIB/src/stm32f4xx_tim.c ****     [..]
  24:FWLIB/src/stm32f4xx_tim.c ****     This driver provides functions to configure and program the TIM 
  25:FWLIB/src/stm32f4xx_tim.c ****     of all STM32F4xx devices.
  26:FWLIB/src/stm32f4xx_tim.c ****     These functions are split in 9 groups: 
  27:FWLIB/src/stm32f4xx_tim.c ****      
  28:FWLIB/src/stm32f4xx_tim.c ****       (#) TIM TimeBase management: this group includes all needed functions 
  29:FWLIB/src/stm32f4xx_tim.c ****           to configure the TM Timebase unit:
  30:FWLIB/src/stm32f4xx_tim.c ****         (++) Set/Get Prescaler
  31:FWLIB/src/stm32f4xx_tim.c ****         (++) Set/Get Autoreload  
  32:FWLIB/src/stm32f4xx_tim.c ****         (++) Counter modes configuration
  33:FWLIB/src/stm32f4xx_tim.c ****         (++) Set Clock division  
  34:FWLIB/src/stm32f4xx_tim.c ****         (++) Select the One Pulse mode
ARM GAS  /tmp/ccgXhnD7.s 			page 2


  35:FWLIB/src/stm32f4xx_tim.c ****         (++) Update Request Configuration
  36:FWLIB/src/stm32f4xx_tim.c ****         (++) Update Disable Configuration
  37:FWLIB/src/stm32f4xx_tim.c ****         (++) Auto-Preload Configuration 
  38:FWLIB/src/stm32f4xx_tim.c ****         (++) Enable/Disable the counter     
  39:FWLIB/src/stm32f4xx_tim.c ****                    
  40:FWLIB/src/stm32f4xx_tim.c ****       (#) TIM Output Compare management: this group includes all needed 
  41:FWLIB/src/stm32f4xx_tim.c ****           functions to configure the Capture/Compare unit used in Output 
  42:FWLIB/src/stm32f4xx_tim.c ****           compare mode: 
  43:FWLIB/src/stm32f4xx_tim.c ****         (++) Configure each channel, independently, in Output Compare mode
  44:FWLIB/src/stm32f4xx_tim.c ****         (++) Select the output compare modes
  45:FWLIB/src/stm32f4xx_tim.c ****         (++) Select the Polarities of each channel
  46:FWLIB/src/stm32f4xx_tim.c ****         (++) Set/Get the Capture/Compare register values
  47:FWLIB/src/stm32f4xx_tim.c ****         (++) Select the Output Compare Fast mode 
  48:FWLIB/src/stm32f4xx_tim.c ****         (++) Select the Output Compare Forced mode  
  49:FWLIB/src/stm32f4xx_tim.c ****         (++) Output Compare-Preload Configuration 
  50:FWLIB/src/stm32f4xx_tim.c ****         (++) Clear Output Compare Reference
  51:FWLIB/src/stm32f4xx_tim.c ****         (++) Select the OCREF Clear signal
  52:FWLIB/src/stm32f4xx_tim.c ****         (++) Enable/Disable the Capture/Compare Channels    
  53:FWLIB/src/stm32f4xx_tim.c ****                      
  54:FWLIB/src/stm32f4xx_tim.c ****       (#) TIM Input Capture management: this group includes all needed 
  55:FWLIB/src/stm32f4xx_tim.c ****           functions to configure the Capture/Compare unit used in 
  56:FWLIB/src/stm32f4xx_tim.c ****           Input Capture mode:
  57:FWLIB/src/stm32f4xx_tim.c ****         (++) Configure each channel in input capture mode
  58:FWLIB/src/stm32f4xx_tim.c ****         (++) Configure Channel1/2 in PWM Input mode
  59:FWLIB/src/stm32f4xx_tim.c ****         (++) Set the Input Capture Prescaler
  60:FWLIB/src/stm32f4xx_tim.c ****         (++) Get the Capture/Compare values      
  61:FWLIB/src/stm32f4xx_tim.c ****                      
  62:FWLIB/src/stm32f4xx_tim.c ****       (#) Advanced-control timers (TIM1 and TIM8) specific features
  63:FWLIB/src/stm32f4xx_tim.c ****         (++) Configures the Break input, dead time, Lock level, the OSSI,
  64:FWLIB/src/stm32f4xx_tim.c ****              the OSSR State and the AOE(automatic output enable)
  65:FWLIB/src/stm32f4xx_tim.c ****         (++) Enable/Disable the TIM peripheral Main Outputs
  66:FWLIB/src/stm32f4xx_tim.c ****         (++) Select the Commutation event
  67:FWLIB/src/stm32f4xx_tim.c ****         (++) Set/Reset the Capture Compare Preload Control bit
  68:FWLIB/src/stm32f4xx_tim.c ****                                 
  69:FWLIB/src/stm32f4xx_tim.c ****       (#) TIM interrupts, DMA and flags management
  70:FWLIB/src/stm32f4xx_tim.c ****         (++) Enable/Disable interrupt sources
  71:FWLIB/src/stm32f4xx_tim.c ****         (++) Get flags status
  72:FWLIB/src/stm32f4xx_tim.c ****         (++) Clear flags/ Pending bits
  73:FWLIB/src/stm32f4xx_tim.c ****         (++) Enable/Disable DMA requests 
  74:FWLIB/src/stm32f4xx_tim.c ****         (++) Configure DMA burst mode
  75:FWLIB/src/stm32f4xx_tim.c ****         (++) Select CaptureCompare DMA request  
  76:FWLIB/src/stm32f4xx_tim.c ****                 
  77:FWLIB/src/stm32f4xx_tim.c ****       (#) TIM clocks management: this group includes all needed functions 
  78:FWLIB/src/stm32f4xx_tim.c ****           to configure the clock controller unit:
  79:FWLIB/src/stm32f4xx_tim.c ****         (++) Select internal/External clock
  80:FWLIB/src/stm32f4xx_tim.c ****         (++) Select the external clock mode: ETR(Mode1/Mode2), TIx or ITRx
  81:FWLIB/src/stm32f4xx_tim.c ****            
  82:FWLIB/src/stm32f4xx_tim.c ****       (#) TIM synchronization management: this group includes all needed 
  83:FWLIB/src/stm32f4xx_tim.c ****           functions to configure the Synchronization unit:
  84:FWLIB/src/stm32f4xx_tim.c ****         (++) Select Input Trigger  
  85:FWLIB/src/stm32f4xx_tim.c ****         (++) Select Output Trigger  
  86:FWLIB/src/stm32f4xx_tim.c ****         (++) Select Master Slave Mode 
  87:FWLIB/src/stm32f4xx_tim.c ****         (++) ETR Configuration when used as external trigger   
  88:FWLIB/src/stm32f4xx_tim.c ****        
  89:FWLIB/src/stm32f4xx_tim.c ****       (#) TIM specific interface management, this group includes all 
  90:FWLIB/src/stm32f4xx_tim.c ****           needed functions to use the specific TIM interface:
  91:FWLIB/src/stm32f4xx_tim.c ****         (++) Encoder Interface Configuration
ARM GAS  /tmp/ccgXhnD7.s 			page 3


  92:FWLIB/src/stm32f4xx_tim.c ****         (++) Select Hall Sensor   
  93:FWLIB/src/stm32f4xx_tim.c ****            
  94:FWLIB/src/stm32f4xx_tim.c ****       (#) TIM specific remapping management includes the Remapping 
  95:FWLIB/src/stm32f4xx_tim.c ****           configuration of specific timers               
  96:FWLIB/src/stm32f4xx_tim.c ****      
  97:FWLIB/src/stm32f4xx_tim.c ****   @endverbatim    
  98:FWLIB/src/stm32f4xx_tim.c ****   ******************************************************************************
  99:FWLIB/src/stm32f4xx_tim.c ****   * @attention
 100:FWLIB/src/stm32f4xx_tim.c ****   *
 101:FWLIB/src/stm32f4xx_tim.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 102:FWLIB/src/stm32f4xx_tim.c ****   *
 103:FWLIB/src/stm32f4xx_tim.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 104:FWLIB/src/stm32f4xx_tim.c ****   * You may not use this file except in compliance with the License.
 105:FWLIB/src/stm32f4xx_tim.c ****   * You may obtain a copy of the License at:
 106:FWLIB/src/stm32f4xx_tim.c ****   *
 107:FWLIB/src/stm32f4xx_tim.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 108:FWLIB/src/stm32f4xx_tim.c ****   *
 109:FWLIB/src/stm32f4xx_tim.c ****   * Unless required by applicable law or agreed to in writing, software 
 110:FWLIB/src/stm32f4xx_tim.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 111:FWLIB/src/stm32f4xx_tim.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 112:FWLIB/src/stm32f4xx_tim.c ****   * See the License for the specific language governing permissions and
 113:FWLIB/src/stm32f4xx_tim.c ****   * limitations under the License.
 114:FWLIB/src/stm32f4xx_tim.c ****   *
 115:FWLIB/src/stm32f4xx_tim.c ****   ******************************************************************************
 116:FWLIB/src/stm32f4xx_tim.c ****   */
 117:FWLIB/src/stm32f4xx_tim.c **** 
 118:FWLIB/src/stm32f4xx_tim.c **** /* Includes ------------------------------------------------------------------*/
 119:FWLIB/src/stm32f4xx_tim.c **** #include "stm32f4xx_tim.h"
 120:FWLIB/src/stm32f4xx_tim.c **** #include "stm32f4xx_rcc.h"
 121:FWLIB/src/stm32f4xx_tim.c **** 
 122:FWLIB/src/stm32f4xx_tim.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 123:FWLIB/src/stm32f4xx_tim.c ****   * @{
 124:FWLIB/src/stm32f4xx_tim.c ****   */
 125:FWLIB/src/stm32f4xx_tim.c **** 
 126:FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM 
 127:FWLIB/src/stm32f4xx_tim.c ****   * @brief TIM driver modules
 128:FWLIB/src/stm32f4xx_tim.c ****   * @{
 129:FWLIB/src/stm32f4xx_tim.c ****   */
 130:FWLIB/src/stm32f4xx_tim.c **** 
 131:FWLIB/src/stm32f4xx_tim.c **** /* Private typedef -----------------------------------------------------------*/
 132:FWLIB/src/stm32f4xx_tim.c **** /* Private define ------------------------------------------------------------*/
 133:FWLIB/src/stm32f4xx_tim.c **** 
 134:FWLIB/src/stm32f4xx_tim.c **** /* ---------------------- TIM registers bit mask ------------------------ */
 135:FWLIB/src/stm32f4xx_tim.c **** #define SMCR_ETR_MASK      ((uint16_t)0x00FF) 
 136:FWLIB/src/stm32f4xx_tim.c **** #define CCMR_OFFSET        ((uint16_t)0x0018)
 137:FWLIB/src/stm32f4xx_tim.c **** #define CCER_CCE_SET       ((uint16_t)0x0001)  
 138:FWLIB/src/stm32f4xx_tim.c **** #define	CCER_CCNE_SET      ((uint16_t)0x0004) 
 139:FWLIB/src/stm32f4xx_tim.c **** #define CCMR_OC13M_MASK    ((uint16_t)0xFF8F)
 140:FWLIB/src/stm32f4xx_tim.c **** #define CCMR_OC24M_MASK    ((uint16_t)0x8FFF) 
 141:FWLIB/src/stm32f4xx_tim.c **** 
 142:FWLIB/src/stm32f4xx_tim.c **** /* Private macro -------------------------------------------------------------*/
 143:FWLIB/src/stm32f4xx_tim.c **** /* Private variables ---------------------------------------------------------*/
 144:FWLIB/src/stm32f4xx_tim.c **** /* Private function prototypes -----------------------------------------------*/
 145:FWLIB/src/stm32f4xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 146:FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
 147:FWLIB/src/stm32f4xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 148:FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
ARM GAS  /tmp/ccgXhnD7.s 			page 4


 149:FWLIB/src/stm32f4xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 150:FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
 151:FWLIB/src/stm32f4xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 152:FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
 153:FWLIB/src/stm32f4xx_tim.c **** 
 154:FWLIB/src/stm32f4xx_tim.c **** /* Private functions ---------------------------------------------------------*/
 155:FWLIB/src/stm32f4xx_tim.c **** 
 156:FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Private_Functions
 157:FWLIB/src/stm32f4xx_tim.c ****   * @{
 158:FWLIB/src/stm32f4xx_tim.c ****   */
 159:FWLIB/src/stm32f4xx_tim.c **** 
 160:FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group1 TimeBase management functions
 161:FWLIB/src/stm32f4xx_tim.c ****  *  @brief   TimeBase management functions 
 162:FWLIB/src/stm32f4xx_tim.c ****  *
 163:FWLIB/src/stm32f4xx_tim.c **** @verbatim   
 164:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
 165:FWLIB/src/stm32f4xx_tim.c ****                      ##### TimeBase management functions #####
 166:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
 167:FWLIB/src/stm32f4xx_tim.c ****   
 168:FWLIB/src/stm32f4xx_tim.c ****      
 169:FWLIB/src/stm32f4xx_tim.c ****             ##### TIM Driver: how to use it in Timing(Time base) Mode #####
 170:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
 171:FWLIB/src/stm32f4xx_tim.c ****     [..] 
 172:FWLIB/src/stm32f4xx_tim.c ****     To use the Timer in Timing(Time base) mode, the following steps are mandatory:
 173:FWLIB/src/stm32f4xx_tim.c ****        
 174:FWLIB/src/stm32f4xx_tim.c ****       (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function
 175:FWLIB/src/stm32f4xx_tim.c ****                     
 176:FWLIB/src/stm32f4xx_tim.c ****       (#) Fill the TIM_TimeBaseInitStruct with the desired parameters.
 177:FWLIB/src/stm32f4xx_tim.c ****        
 178:FWLIB/src/stm32f4xx_tim.c ****       (#) Call TIM_TimeBaseInit(TIMx, &TIM_TimeBaseInitStruct) to configure the Time Base unit
 179:FWLIB/src/stm32f4xx_tim.c ****           with the corresponding configuration
 180:FWLIB/src/stm32f4xx_tim.c ****           
 181:FWLIB/src/stm32f4xx_tim.c ****       (#) Enable the NVIC if you need to generate the update interrupt. 
 182:FWLIB/src/stm32f4xx_tim.c ****           
 183:FWLIB/src/stm32f4xx_tim.c ****       (#) Enable the corresponding interrupt using the function TIM_ITConfig(TIMx, TIM_IT_Update) 
 184:FWLIB/src/stm32f4xx_tim.c ****        
 185:FWLIB/src/stm32f4xx_tim.c ****       (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 186:FWLIB/src/stm32f4xx_tim.c ****              
 187:FWLIB/src/stm32f4xx_tim.c ****        -@- All other functions can be used separately to modify, if needed,
 188:FWLIB/src/stm32f4xx_tim.c ****            a specific feature of the Timer. 
 189:FWLIB/src/stm32f4xx_tim.c **** 
 190:FWLIB/src/stm32f4xx_tim.c **** @endverbatim
 191:FWLIB/src/stm32f4xx_tim.c ****   * @{
 192:FWLIB/src/stm32f4xx_tim.c ****   */
 193:FWLIB/src/stm32f4xx_tim.c ****   
 194:FWLIB/src/stm32f4xx_tim.c **** /**
 195:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
 196:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 197:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 198:FWLIB/src/stm32f4xx_tim.c **** 
 199:FWLIB/src/stm32f4xx_tim.c ****   */
 200:FWLIB/src/stm32f4xx_tim.c **** void TIM_DeInit(TIM_TypeDef* TIMx)
 201:FWLIB/src/stm32f4xx_tim.c **** {
 202:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 203:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 204:FWLIB/src/stm32f4xx_tim.c ****  
 205:FWLIB/src/stm32f4xx_tim.c ****   if (TIMx == TIM1)
ARM GAS  /tmp/ccgXhnD7.s 			page 5


 206:FWLIB/src/stm32f4xx_tim.c ****   {
 207:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 208:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 209:FWLIB/src/stm32f4xx_tim.c ****   } 
 210:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM2) 
 211:FWLIB/src/stm32f4xx_tim.c ****   {     
 212:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 213:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 214:FWLIB/src/stm32f4xx_tim.c ****   }  
 215:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM3)
 216:FWLIB/src/stm32f4xx_tim.c ****   { 
 217:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 218:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 219:FWLIB/src/stm32f4xx_tim.c ****   }  
 220:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM4)
 221:FWLIB/src/stm32f4xx_tim.c ****   { 
 222:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 223:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 224:FWLIB/src/stm32f4xx_tim.c ****   }  
 225:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM5)
 226:FWLIB/src/stm32f4xx_tim.c ****   {      
 227:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 228:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 229:FWLIB/src/stm32f4xx_tim.c ****   }  
 230:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM6)  
 231:FWLIB/src/stm32f4xx_tim.c ****   {    
 232:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 233:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 234:FWLIB/src/stm32f4xx_tim.c ****   }  
 235:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM7)
 236:FWLIB/src/stm32f4xx_tim.c ****   {      
 237:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 238:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 239:FWLIB/src/stm32f4xx_tim.c ****   }  
 240:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM8)
 241:FWLIB/src/stm32f4xx_tim.c ****   {      
 242:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 243:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 244:FWLIB/src/stm32f4xx_tim.c ****   }  
 245:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM9)
 246:FWLIB/src/stm32f4xx_tim.c ****   {      
 247:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 248:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 249:FWLIB/src/stm32f4xx_tim.c ****    }  
 250:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM10)
 251:FWLIB/src/stm32f4xx_tim.c ****   {      
 252:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 253:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 254:FWLIB/src/stm32f4xx_tim.c ****   }  
 255:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM11) 
 256:FWLIB/src/stm32f4xx_tim.c ****   {     
 257:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 258:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 259:FWLIB/src/stm32f4xx_tim.c ****   }  
 260:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM12)
 261:FWLIB/src/stm32f4xx_tim.c ****   {      
 262:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
ARM GAS  /tmp/ccgXhnD7.s 			page 6


 263:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 264:FWLIB/src/stm32f4xx_tim.c ****   }  
 265:FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM13) 
 266:FWLIB/src/stm32f4xx_tim.c ****   {       
 267:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 268:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 269:FWLIB/src/stm32f4xx_tim.c ****   }  
 270:FWLIB/src/stm32f4xx_tim.c ****   else
 271:FWLIB/src/stm32f4xx_tim.c ****   { 
 272:FWLIB/src/stm32f4xx_tim.c ****     if (TIMx == TIM14) 
 273:FWLIB/src/stm32f4xx_tim.c ****     {     
 274:FWLIB/src/stm32f4xx_tim.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 275:FWLIB/src/stm32f4xx_tim.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 276:FWLIB/src/stm32f4xx_tim.c ****     }   
 277:FWLIB/src/stm32f4xx_tim.c ****   }
 278:FWLIB/src/stm32f4xx_tim.c **** }
 279:FWLIB/src/stm32f4xx_tim.c **** 
 280:FWLIB/src/stm32f4xx_tim.c **** /**
 281:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Time Base Unit peripheral according to 
 282:FWLIB/src/stm32f4xx_tim.c ****   *         the specified parameters in the TIM_TimeBaseInitStruct.
 283:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 to 14 to select the TIM peripheral.
 284:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
 285:FWLIB/src/stm32f4xx_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 286:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 287:FWLIB/src/stm32f4xx_tim.c ****   */
 288:FWLIB/src/stm32f4xx_tim.c **** void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 289:FWLIB/src/stm32f4xx_tim.c **** {
 290:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpcr1 = 0;
 291:FWLIB/src/stm32f4xx_tim.c **** 
 292:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 293:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 294:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
 295:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
 296:FWLIB/src/stm32f4xx_tim.c **** 
 297:FWLIB/src/stm32f4xx_tim.c ****   tmpcr1 = TIMx->CR1;  
 298:FWLIB/src/stm32f4xx_tim.c **** 
 299:FWLIB/src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8)||
 300:FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM2) || (TIMx == TIM3)||
 301:FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM4) || (TIMx == TIM5)) 
 302:FWLIB/src/stm32f4xx_tim.c ****   {
 303:FWLIB/src/stm32f4xx_tim.c ****     /* Select the Counter Mode */
 304:FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 305:FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 306:FWLIB/src/stm32f4xx_tim.c ****   }
 307:FWLIB/src/stm32f4xx_tim.c ****  
 308:FWLIB/src/stm32f4xx_tim.c ****   if((TIMx != TIM6) && (TIMx != TIM7))
 309:FWLIB/src/stm32f4xx_tim.c ****   {
 310:FWLIB/src/stm32f4xx_tim.c ****     /* Set the clock division */
 311:FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 312:FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 313:FWLIB/src/stm32f4xx_tim.c ****   }
 314:FWLIB/src/stm32f4xx_tim.c **** 
 315:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 = tmpcr1;
 316:FWLIB/src/stm32f4xx_tim.c **** 
 317:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Autoreload value */
 318:FWLIB/src/stm32f4xx_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 319:FWLIB/src/stm32f4xx_tim.c ****  
ARM GAS  /tmp/ccgXhnD7.s 			page 7


 320:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Prescaler value */
 321:FWLIB/src/stm32f4xx_tim.c ****   TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 322:FWLIB/src/stm32f4xx_tim.c ****     
 323:FWLIB/src/stm32f4xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM8))  
 324:FWLIB/src/stm32f4xx_tim.c ****   {
 325:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Repetition Counter value */
 326:FWLIB/src/stm32f4xx_tim.c ****     TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 327:FWLIB/src/stm32f4xx_tim.c ****   }
 328:FWLIB/src/stm32f4xx_tim.c **** 
 329:FWLIB/src/stm32f4xx_tim.c ****   /* Generate an update event to reload the Prescaler 
 330:FWLIB/src/stm32f4xx_tim.c ****      and the repetition counter(only for TIM1 and TIM8) value immediatly */
 331:FWLIB/src/stm32f4xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 332:FWLIB/src/stm32f4xx_tim.c **** }
 333:FWLIB/src/stm32f4xx_tim.c **** 
 334:FWLIB/src/stm32f4xx_tim.c **** /**
 335:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_TimeBaseInitStruct member with its default value.
 336:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
 337:FWLIB/src/stm32f4xx_tim.c ****   *         structure which will be initialized.
 338:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 339:FWLIB/src/stm32f4xx_tim.c ****   */
 340:FWLIB/src/stm32f4xx_tim.c **** void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 341:FWLIB/src/stm32f4xx_tim.c **** {
 342:FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 343:FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 344:FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 345:FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 346:FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 347:FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 348:FWLIB/src/stm32f4xx_tim.c **** }
 349:FWLIB/src/stm32f4xx_tim.c **** 
 350:FWLIB/src/stm32f4xx_tim.c **** /**
 351:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Prescaler.
 352:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 to 14 to select the TIM peripheral.
 353:FWLIB/src/stm32f4xx_tim.c ****   * @param  Prescaler: specifies the Prescaler Register value
 354:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_PSCReloadMode: specifies the TIM Prescaler Reload mode
 355:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 356:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
 357:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
 358:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 359:FWLIB/src/stm32f4xx_tim.c ****   */
 360:FWLIB/src/stm32f4xx_tim.c **** void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
 361:FWLIB/src/stm32f4xx_tim.c **** {
 362:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 363:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 364:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
 365:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Prescaler value */
 366:FWLIB/src/stm32f4xx_tim.c ****   TIMx->PSC = Prescaler;
 367:FWLIB/src/stm32f4xx_tim.c ****   /* Set or reset the UG Bit */
 368:FWLIB/src/stm32f4xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode;
 369:FWLIB/src/stm32f4xx_tim.c **** }
 370:FWLIB/src/stm32f4xx_tim.c **** 
 371:FWLIB/src/stm32f4xx_tim.c **** /**
 372:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Specifies the TIMx Counter Mode to be used.
 373:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 374:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_CounterMode: specifies the Counter Mode to be used
 375:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 376:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_Up: TIM Up Counting Mode
ARM GAS  /tmp/ccgXhnD7.s 			page 8


 377:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_Down: TIM Down Counting Mode
 378:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned1: TIM Center Aligned Mode1
 379:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
 380:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
 381:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 382:FWLIB/src/stm32f4xx_tim.c ****   */
 383:FWLIB/src/stm32f4xx_tim.c **** void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
 384:FWLIB/src/stm32f4xx_tim.c **** {
 385:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpcr1 = 0;
 386:FWLIB/src/stm32f4xx_tim.c **** 
 387:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 388:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
 389:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
 390:FWLIB/src/stm32f4xx_tim.c **** 
 391:FWLIB/src/stm32f4xx_tim.c ****   tmpcr1 = TIMx->CR1;
 392:FWLIB/src/stm32f4xx_tim.c **** 
 393:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the CMS and DIR Bits */
 394:FWLIB/src/stm32f4xx_tim.c ****   tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 395:FWLIB/src/stm32f4xx_tim.c **** 
 396:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Counter Mode */
 397:FWLIB/src/stm32f4xx_tim.c ****   tmpcr1 |= TIM_CounterMode;
 398:FWLIB/src/stm32f4xx_tim.c **** 
 399:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CR1 register */
 400:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 = tmpcr1;
 401:FWLIB/src/stm32f4xx_tim.c **** }
 402:FWLIB/src/stm32f4xx_tim.c **** 
 403:FWLIB/src/stm32f4xx_tim.c **** /**
 404:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Counter Register value
 405:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 406:FWLIB/src/stm32f4xx_tim.c ****   * @param  Counter: specifies the Counter register new value.
 407:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 408:FWLIB/src/stm32f4xx_tim.c ****   */
 409:FWLIB/src/stm32f4xx_tim.c **** void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
 410:FWLIB/src/stm32f4xx_tim.c **** {
 411:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 412:FWLIB/src/stm32f4xx_tim.c ****    assert_param(IS_TIM_ALL_PERIPH(TIMx));
 413:FWLIB/src/stm32f4xx_tim.c **** 
 414:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Counter Register value */
 415:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CNT = Counter;
 416:FWLIB/src/stm32f4xx_tim.c **** }
 417:FWLIB/src/stm32f4xx_tim.c **** 
 418:FWLIB/src/stm32f4xx_tim.c **** /**
 419:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Autoreload Register value
 420:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 421:FWLIB/src/stm32f4xx_tim.c ****   * @param  Autoreload: specifies the Autoreload register new value.
 422:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 423:FWLIB/src/stm32f4xx_tim.c ****   */
 424:FWLIB/src/stm32f4xx_tim.c **** void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
 425:FWLIB/src/stm32f4xx_tim.c **** {
 426:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 427:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 428:FWLIB/src/stm32f4xx_tim.c ****   
 429:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Autoreload Register value */
 430:FWLIB/src/stm32f4xx_tim.c ****   TIMx->ARR = Autoreload;
 431:FWLIB/src/stm32f4xx_tim.c **** }
 432:FWLIB/src/stm32f4xx_tim.c **** 
 433:FWLIB/src/stm32f4xx_tim.c **** /**
ARM GAS  /tmp/ccgXhnD7.s 			page 9


 434:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Counter value.
 435:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 436:FWLIB/src/stm32f4xx_tim.c ****   * @retval Counter Register value
 437:FWLIB/src/stm32f4xx_tim.c ****   */
 438:FWLIB/src/stm32f4xx_tim.c **** uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
 439:FWLIB/src/stm32f4xx_tim.c **** {
 440:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 441:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 442:FWLIB/src/stm32f4xx_tim.c **** 
 443:FWLIB/src/stm32f4xx_tim.c ****   /* Get the Counter Register value */
 444:FWLIB/src/stm32f4xx_tim.c ****   return TIMx->CNT;
 445:FWLIB/src/stm32f4xx_tim.c **** }
 446:FWLIB/src/stm32f4xx_tim.c **** 
 447:FWLIB/src/stm32f4xx_tim.c **** /**
 448:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Prescaler value.
 449:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 450:FWLIB/src/stm32f4xx_tim.c ****   * @retval Prescaler Register value.
 451:FWLIB/src/stm32f4xx_tim.c ****   */
 452:FWLIB/src/stm32f4xx_tim.c **** uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
 453:FWLIB/src/stm32f4xx_tim.c **** {
 454:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 455:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 456:FWLIB/src/stm32f4xx_tim.c **** 
 457:FWLIB/src/stm32f4xx_tim.c ****   /* Get the Prescaler Register value */
 458:FWLIB/src/stm32f4xx_tim.c ****   return TIMx->PSC;
 459:FWLIB/src/stm32f4xx_tim.c **** }
 460:FWLIB/src/stm32f4xx_tim.c **** 
 461:FWLIB/src/stm32f4xx_tim.c **** /**
 462:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or Disables the TIMx Update event.
 463:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 464:FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx UDIS bit
 465:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 466:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 467:FWLIB/src/stm32f4xx_tim.c ****   */
 468:FWLIB/src/stm32f4xx_tim.c **** void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 469:FWLIB/src/stm32f4xx_tim.c **** {
 470:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 471:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 472:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 473:FWLIB/src/stm32f4xx_tim.c **** 
 474:FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 475:FWLIB/src/stm32f4xx_tim.c ****   {
 476:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Update Disable Bit */
 477:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 478:FWLIB/src/stm32f4xx_tim.c ****   }
 479:FWLIB/src/stm32f4xx_tim.c ****   else
 480:FWLIB/src/stm32f4xx_tim.c ****   {
 481:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Update Disable Bit */
 482:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 483:FWLIB/src/stm32f4xx_tim.c ****   }
 484:FWLIB/src/stm32f4xx_tim.c **** }
 485:FWLIB/src/stm32f4xx_tim.c **** 
 486:FWLIB/src/stm32f4xx_tim.c **** /**
 487:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Update Request Interrupt source.
 488:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 489:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_UpdateSource: specifies the Update source.
 490:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccgXhnD7.s 			page 10


 491:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_UpdateSource_Global: Source of update is the counter
 492:FWLIB/src/stm32f4xx_tim.c ****   *                 overflow/underflow or the setting of UG bit, or an update
 493:FWLIB/src/stm32f4xx_tim.c ****   *                 generation through the slave mode controller.
 494:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
 495:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 496:FWLIB/src/stm32f4xx_tim.c ****   */
 497:FWLIB/src/stm32f4xx_tim.c **** void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
 498:FWLIB/src/stm32f4xx_tim.c **** {
 499:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 500:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 501:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
 502:FWLIB/src/stm32f4xx_tim.c **** 
 503:FWLIB/src/stm32f4xx_tim.c ****   if (TIM_UpdateSource != TIM_UpdateSource_Global)
 504:FWLIB/src/stm32f4xx_tim.c ****   {
 505:FWLIB/src/stm32f4xx_tim.c ****     /* Set the URS Bit */
 506:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 507:FWLIB/src/stm32f4xx_tim.c ****   }
 508:FWLIB/src/stm32f4xx_tim.c ****   else
 509:FWLIB/src/stm32f4xx_tim.c ****   {
 510:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the URS Bit */
 511:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 512:FWLIB/src/stm32f4xx_tim.c ****   }
 513:FWLIB/src/stm32f4xx_tim.c **** }
 514:FWLIB/src/stm32f4xx_tim.c **** 
 515:FWLIB/src/stm32f4xx_tim.c **** /**
 516:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables TIMx peripheral Preload register on ARR.
 517:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 518:FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral Preload register
 519:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 520:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 521:FWLIB/src/stm32f4xx_tim.c ****   */
 522:FWLIB/src/stm32f4xx_tim.c **** void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 523:FWLIB/src/stm32f4xx_tim.c **** {
 524:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 525:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 526:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 527:FWLIB/src/stm32f4xx_tim.c **** 
 528:FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 529:FWLIB/src/stm32f4xx_tim.c ****   {
 530:FWLIB/src/stm32f4xx_tim.c ****     /* Set the ARR Preload Bit */
 531:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 532:FWLIB/src/stm32f4xx_tim.c ****   }
 533:FWLIB/src/stm32f4xx_tim.c ****   else
 534:FWLIB/src/stm32f4xx_tim.c ****   {
 535:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the ARR Preload Bit */
 536:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 537:FWLIB/src/stm32f4xx_tim.c ****   }
 538:FWLIB/src/stm32f4xx_tim.c **** }
 539:FWLIB/src/stm32f4xx_tim.c **** 
 540:FWLIB/src/stm32f4xx_tim.c **** /**
 541:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx's One Pulse Mode.
 542:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 543:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OPMode: specifies the OPM Mode to be used.
 544:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 545:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OPMode_Single
 546:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OPMode_Repetitive
 547:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
ARM GAS  /tmp/ccgXhnD7.s 			page 11


 548:FWLIB/src/stm32f4xx_tim.c ****   */
 549:FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
 550:FWLIB/src/stm32f4xx_tim.c **** {
 551:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 552:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 553:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
 554:FWLIB/src/stm32f4xx_tim.c **** 
 555:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OPM Bit */
 556:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 557:FWLIB/src/stm32f4xx_tim.c **** 
 558:FWLIB/src/stm32f4xx_tim.c ****   /* Configure the OPM Mode */
 559:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 |= TIM_OPMode;
 560:FWLIB/src/stm32f4xx_tim.c **** }
 561:FWLIB/src/stm32f4xx_tim.c **** 
 562:FWLIB/src/stm32f4xx_tim.c **** /**
 563:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Clock Division value.
 564:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
 565:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_CKD: specifies the clock division value.
 566:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following value:
 567:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CKD_DIV1: TDTS = Tck_tim
 568:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
 569:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
 570:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 571:FWLIB/src/stm32f4xx_tim.c ****   */
 572:FWLIB/src/stm32f4xx_tim.c **** void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
 573:FWLIB/src/stm32f4xx_tim.c **** {
 574:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 575:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
 576:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_CKD));
 577:FWLIB/src/stm32f4xx_tim.c **** 
 578:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the CKD Bits */
 579:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 580:FWLIB/src/stm32f4xx_tim.c **** 
 581:FWLIB/src/stm32f4xx_tim.c ****   /* Set the CKD value */
 582:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 |= TIM_CKD;
 583:FWLIB/src/stm32f4xx_tim.c **** }
 584:FWLIB/src/stm32f4xx_tim.c **** 
 585:FWLIB/src/stm32f4xx_tim.c **** /**
 586:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the specified TIM peripheral.
 587:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIMx peripheral.
 588:FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral.
 589:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 590:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 591:FWLIB/src/stm32f4xx_tim.c ****   */
 592:FWLIB/src/stm32f4xx_tim.c **** void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
 593:FWLIB/src/stm32f4xx_tim.c **** {
 594:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 595:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 596:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 597:FWLIB/src/stm32f4xx_tim.c ****   
 598:FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 599:FWLIB/src/stm32f4xx_tim.c ****   {
 600:FWLIB/src/stm32f4xx_tim.c ****     /* Enable the TIM Counter */
 601:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 602:FWLIB/src/stm32f4xx_tim.c ****   }
 603:FWLIB/src/stm32f4xx_tim.c ****   else
 604:FWLIB/src/stm32f4xx_tim.c ****   {
ARM GAS  /tmp/ccgXhnD7.s 			page 12


 605:FWLIB/src/stm32f4xx_tim.c ****     /* Disable the TIM Counter */
 606:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 607:FWLIB/src/stm32f4xx_tim.c ****   }
 608:FWLIB/src/stm32f4xx_tim.c **** }
 609:FWLIB/src/stm32f4xx_tim.c **** /**
 610:FWLIB/src/stm32f4xx_tim.c ****   * @}
 611:FWLIB/src/stm32f4xx_tim.c ****   */
 612:FWLIB/src/stm32f4xx_tim.c **** 
 613:FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group2 Output Compare management functions
 614:FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Output Compare management functions 
 615:FWLIB/src/stm32f4xx_tim.c ****  *
 616:FWLIB/src/stm32f4xx_tim.c **** @verbatim   
 617:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
 618:FWLIB/src/stm32f4xx_tim.c ****               ##### Output Compare management functions #####
 619:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
 620:FWLIB/src/stm32f4xx_tim.c ****    
 621:FWLIB/src/stm32f4xx_tim.c ****       
 622:FWLIB/src/stm32f4xx_tim.c ****         ##### TIM Driver: how to use it in Output Compare Mode #####
 623:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
 624:FWLIB/src/stm32f4xx_tim.c ****     [..] 
 625:FWLIB/src/stm32f4xx_tim.c ****     To use the Timer in Output Compare mode, the following steps are mandatory:
 626:FWLIB/src/stm32f4xx_tim.c ****        
 627:FWLIB/src/stm32f4xx_tim.c ****       (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) 
 628:FWLIB/src/stm32f4xx_tim.c ****           function
 629:FWLIB/src/stm32f4xx_tim.c ****        
 630:FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the TIM pins by configuring the corresponding GPIO pins
 631:FWLIB/src/stm32f4xx_tim.c ****        
 632:FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the Time base unit as described in the first part of this driver, 
 633:FWLIB/src/stm32f4xx_tim.c ****         (++) if needed, else the Timer will run with the default configuration:
 634:FWLIB/src/stm32f4xx_tim.c ****             Autoreload value = 0xFFFF
 635:FWLIB/src/stm32f4xx_tim.c ****         (++) Prescaler value = 0x0000
 636:FWLIB/src/stm32f4xx_tim.c ****         (++) Counter mode = Up counting
 637:FWLIB/src/stm32f4xx_tim.c ****         (++) Clock Division = TIM_CKD_DIV1
 638:FWLIB/src/stm32f4xx_tim.c ****           
 639:FWLIB/src/stm32f4xx_tim.c ****       (#) Fill the TIM_OCInitStruct with the desired parameters including:
 640:FWLIB/src/stm32f4xx_tim.c ****         (++) The TIM Output Compare mode: TIM_OCMode
 641:FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Output State: TIM_OutputState
 642:FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Pulse value: TIM_Pulse
 643:FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Output Compare Polarity : TIM_OCPolarity
 644:FWLIB/src/stm32f4xx_tim.c ****        
 645:FWLIB/src/stm32f4xx_tim.c ****       (#) Call TIM_OCxInit(TIMx, &TIM_OCInitStruct) to configure the desired 
 646:FWLIB/src/stm32f4xx_tim.c ****           channel with the corresponding configuration
 647:FWLIB/src/stm32f4xx_tim.c ****        
 648:FWLIB/src/stm32f4xx_tim.c ****       (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 649:FWLIB/src/stm32f4xx_tim.c ****        
 650:FWLIB/src/stm32f4xx_tim.c ****       -@- All other functions can be used separately to modify, if needed,
 651:FWLIB/src/stm32f4xx_tim.c ****           a specific feature of the Timer. 
 652:FWLIB/src/stm32f4xx_tim.c ****           
 653:FWLIB/src/stm32f4xx_tim.c ****       -@- In case of PWM mode, this function is mandatory:
 654:FWLIB/src/stm32f4xx_tim.c ****           TIM_OCxPreloadConfig(TIMx, TIM_OCPreload_ENABLE); 
 655:FWLIB/src/stm32f4xx_tim.c ****               
 656:FWLIB/src/stm32f4xx_tim.c ****       -@- If the corresponding interrupt or DMA request are needed, the user should:
 657:FWLIB/src/stm32f4xx_tim.c ****         (+@) Enable the NVIC (or the DMA) to use the TIM interrupts (or DMA requests). 
 658:FWLIB/src/stm32f4xx_tim.c ****         (+@) Enable the corresponding interrupt (or DMA request) using the function 
 659:FWLIB/src/stm32f4xx_tim.c ****              TIM_ITConfig(TIMx, TIM_IT_CCx) (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx))   
 660:FWLIB/src/stm32f4xx_tim.c **** 
 661:FWLIB/src/stm32f4xx_tim.c **** @endverbatim
ARM GAS  /tmp/ccgXhnD7.s 			page 13


 662:FWLIB/src/stm32f4xx_tim.c ****   * @{
 663:FWLIB/src/stm32f4xx_tim.c ****   */
 664:FWLIB/src/stm32f4xx_tim.c **** 
 665:FWLIB/src/stm32f4xx_tim.c **** /**
 666:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel1 according to the specified parameters in
 667:FWLIB/src/stm32f4xx_tim.c ****   *         the TIM_OCInitStruct.
 668:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
 669:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 670:FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
 671:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 672:FWLIB/src/stm32f4xx_tim.c ****   */
 673:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 674:FWLIB/src/stm32f4xx_tim.c **** {
 675:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 676:FWLIB/src/stm32f4xx_tim.c ****    
 677:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 678:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
 679:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 680:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 681:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 682:FWLIB/src/stm32f4xx_tim.c **** 
 683:FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
 684:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 685:FWLIB/src/stm32f4xx_tim.c ****   
 686:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
 687:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 688:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 689:FWLIB/src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 690:FWLIB/src/stm32f4xx_tim.c ****   
 691:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 692:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 693:FWLIB/src/stm32f4xx_tim.c ****     
 694:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Compare Mode Bits */
 695:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 696:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 697:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 698:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 699:FWLIB/src/stm32f4xx_tim.c ****   
 700:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 701:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 702:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 703:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 704:FWLIB/src/stm32f4xx_tim.c ****   
 705:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output State */
 706:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 707:FWLIB/src/stm32f4xx_tim.c ****     
 708:FWLIB/src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 709:FWLIB/src/stm32f4xx_tim.c ****   {
 710:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 711:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 712:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 713:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 714:FWLIB/src/stm32f4xx_tim.c ****     
 715:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N Polarity level */
 716:FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 717:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 718:FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
ARM GAS  /tmp/ccgXhnD7.s 			page 14


 719:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 720:FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 721:FWLIB/src/stm32f4xx_tim.c ****     
 722:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N State */
 723:FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 724:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 725:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 726:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 727:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 728:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 729:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 730:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 731:FWLIB/src/stm32f4xx_tim.c ****   }
 732:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 733:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 734:FWLIB/src/stm32f4xx_tim.c ****   
 735:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
 736:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 737:FWLIB/src/stm32f4xx_tim.c ****   
 738:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 739:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 740:FWLIB/src/stm32f4xx_tim.c ****   
 741:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 742:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 743:FWLIB/src/stm32f4xx_tim.c **** }
 744:FWLIB/src/stm32f4xx_tim.c **** 
 745:FWLIB/src/stm32f4xx_tim.c **** /**
 746:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel2 according to the specified parameters 
 747:FWLIB/src/stm32f4xx_tim.c ****   *         in the TIM_OCInitStruct.
 748:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
 749:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
 750:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 751:FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
 752:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 753:FWLIB/src/stm32f4xx_tim.c ****   */
 754:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 755:FWLIB/src/stm32f4xx_tim.c **** {
 756:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 757:FWLIB/src/stm32f4xx_tim.c ****    
 758:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 759:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
 760:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 761:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 762:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 763:FWLIB/src/stm32f4xx_tim.c **** 
 764:FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
 765:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 766:FWLIB/src/stm32f4xx_tim.c ****   
 767:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */  
 768:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 769:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 770:FWLIB/src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 771:FWLIB/src/stm32f4xx_tim.c ****   
 772:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 773:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 774:FWLIB/src/stm32f4xx_tim.c ****     
 775:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
ARM GAS  /tmp/ccgXhnD7.s 			page 15


 776:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 777:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 778:FWLIB/src/stm32f4xx_tim.c ****   
 779:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 780:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 781:FWLIB/src/stm32f4xx_tim.c ****   
 782:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 783:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 784:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 785:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 786:FWLIB/src/stm32f4xx_tim.c ****   
 787:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output State */
 788:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 789:FWLIB/src/stm32f4xx_tim.c ****     
 790:FWLIB/src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 791:FWLIB/src/stm32f4xx_tim.c ****   {
 792:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 793:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 794:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 795:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 796:FWLIB/src/stm32f4xx_tim.c ****     
 797:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N Polarity level */
 798:FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 799:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 800:FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 801:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 802:FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 803:FWLIB/src/stm32f4xx_tim.c ****     
 804:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N State */
 805:FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 806:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 807:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 808:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 809:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 810:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 811:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 812:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 813:FWLIB/src/stm32f4xx_tim.c ****   }
 814:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 815:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 816:FWLIB/src/stm32f4xx_tim.c ****   
 817:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
 818:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 819:FWLIB/src/stm32f4xx_tim.c ****   
 820:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 821:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 822:FWLIB/src/stm32f4xx_tim.c ****   
 823:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 824:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 825:FWLIB/src/stm32f4xx_tim.c **** }
 826:FWLIB/src/stm32f4xx_tim.c **** 
 827:FWLIB/src/stm32f4xx_tim.c **** /**
 828:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel3 according to the specified parameters
 829:FWLIB/src/stm32f4xx_tim.c ****   *         in the TIM_OCInitStruct.
 830:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 831:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 832:FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
ARM GAS  /tmp/ccgXhnD7.s 			page 16


 833:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 834:FWLIB/src/stm32f4xx_tim.c ****   */
 835:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 836:FWLIB/src/stm32f4xx_tim.c **** {
 837:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 838:FWLIB/src/stm32f4xx_tim.c ****    
 839:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 840:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 841:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 842:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 843:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 844:FWLIB/src/stm32f4xx_tim.c **** 
 845:FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 3: Reset the CC2E Bit */
 846:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 847:FWLIB/src/stm32f4xx_tim.c ****   
 848:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
 849:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 850:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 851:FWLIB/src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 852:FWLIB/src/stm32f4xx_tim.c ****   
 853:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
 854:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 855:FWLIB/src/stm32f4xx_tim.c ****     
 856:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 857:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 858:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 859:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 860:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 861:FWLIB/src/stm32f4xx_tim.c ****   
 862:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 863:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 864:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 865:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 866:FWLIB/src/stm32f4xx_tim.c ****   
 867:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output State */
 868:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 869:FWLIB/src/stm32f4xx_tim.c ****     
 870:FWLIB/src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 871:FWLIB/src/stm32f4xx_tim.c ****   {
 872:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 873:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 874:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 875:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 876:FWLIB/src/stm32f4xx_tim.c ****     
 877:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N Polarity level */
 878:FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 879:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 880:FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 881:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 882:FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 883:FWLIB/src/stm32f4xx_tim.c ****     
 884:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N State */
 885:FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 886:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 887:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 888:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 889:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
ARM GAS  /tmp/ccgXhnD7.s 			page 17


 890:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 891:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 892:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 893:FWLIB/src/stm32f4xx_tim.c ****   }
 894:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 895:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 896:FWLIB/src/stm32f4xx_tim.c ****   
 897:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */
 898:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 899:FWLIB/src/stm32f4xx_tim.c ****   
 900:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 901:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 902:FWLIB/src/stm32f4xx_tim.c ****   
 903:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 904:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 905:FWLIB/src/stm32f4xx_tim.c **** }
 906:FWLIB/src/stm32f4xx_tim.c **** 
 907:FWLIB/src/stm32f4xx_tim.c **** /**
 908:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel4 according to the specified parameters
 909:FWLIB/src/stm32f4xx_tim.c ****   *         in the TIM_OCInitStruct.
 910:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 911:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 912:FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
 913:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 914:FWLIB/src/stm32f4xx_tim.c ****   */
 915:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 916:FWLIB/src/stm32f4xx_tim.c **** {
 917:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 918:FWLIB/src/stm32f4xx_tim.c ****    
 919:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 920:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 921:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 922:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 923:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 924:FWLIB/src/stm32f4xx_tim.c **** 
 925:FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 4: Reset the CC4E Bit */
 926:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 927:FWLIB/src/stm32f4xx_tim.c ****   
 928:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
 929:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 930:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 931:FWLIB/src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 932:FWLIB/src/stm32f4xx_tim.c ****   
 933:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
 934:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 935:FWLIB/src/stm32f4xx_tim.c ****     
 936:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 937:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 938:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 939:FWLIB/src/stm32f4xx_tim.c ****   
 940:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 941:FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 942:FWLIB/src/stm32f4xx_tim.c ****   
 943:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 944:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 945:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 946:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
ARM GAS  /tmp/ccgXhnD7.s 			page 18


 947:FWLIB/src/stm32f4xx_tim.c ****   
 948:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output State */
 949:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 950:FWLIB/src/stm32f4xx_tim.c ****   
 951:FWLIB/src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 952:FWLIB/src/stm32f4xx_tim.c ****   {
 953:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 954:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare IDLE State */
 955:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 956:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 957:FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 958:FWLIB/src/stm32f4xx_tim.c ****   }
 959:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 960:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 961:FWLIB/src/stm32f4xx_tim.c ****   
 962:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */  
 963:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 964:FWLIB/src/stm32f4xx_tim.c ****     
 965:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 966:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 967:FWLIB/src/stm32f4xx_tim.c ****   
 968:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 969:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 970:FWLIB/src/stm32f4xx_tim.c **** }
 971:FWLIB/src/stm32f4xx_tim.c **** 
 972:FWLIB/src/stm32f4xx_tim.c **** /**
 973:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_OCInitStruct member with its default value.
 974:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
 975:FWLIB/src/stm32f4xx_tim.c ****   *         be initialized.
 976:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 977:FWLIB/src/stm32f4xx_tim.c ****   */
 978:FWLIB/src/stm32f4xx_tim.c **** void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
 979:FWLIB/src/stm32f4xx_tim.c **** {
 980:FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 981:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 982:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 983:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 984:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 985:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 986:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 987:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 988:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 989:FWLIB/src/stm32f4xx_tim.c **** }
 990:FWLIB/src/stm32f4xx_tim.c **** 
 991:FWLIB/src/stm32f4xx_tim.c **** /**
 992:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIM Output Compare Mode.
 993:FWLIB/src/stm32f4xx_tim.c ****   * @note   This function disables the selected channel before changing the Output
 994:FWLIB/src/stm32f4xx_tim.c ****   *         Compare Mode. If needed, user has to enable this channel using
 995:FWLIB/src/stm32f4xx_tim.c ****   *         TIM_CCxCmd() and TIM_CCxNCmd() functions.
 996:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
 997:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
 998:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 999:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1000:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1001:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1002:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
1003:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCMode: specifies the TIM Output Compare Mode.
ARM GAS  /tmp/ccgXhnD7.s 			page 19


1004:FWLIB/src/stm32f4xx_tim.c ****   *           This parameter can be one of the following values:
1005:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_Timing
1006:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_Active
1007:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_Toggle
1008:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_PWM1
1009:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_PWM2
1010:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active
1011:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive
1012:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1013:FWLIB/src/stm32f4xx_tim.c ****   */
1014:FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
1015:FWLIB/src/stm32f4xx_tim.c **** {
1016:FWLIB/src/stm32f4xx_tim.c ****   uint32_t tmp = 0;
1017:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmp1 = 0;
1018:FWLIB/src/stm32f4xx_tim.c **** 
1019:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1020:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1021:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_Channel));
1022:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCM(TIM_OCMode));
1023:FWLIB/src/stm32f4xx_tim.c **** 
1024:FWLIB/src/stm32f4xx_tim.c ****   tmp = (uint32_t) TIMx;
1025:FWLIB/src/stm32f4xx_tim.c ****   tmp += CCMR_OFFSET;
1026:FWLIB/src/stm32f4xx_tim.c **** 
1027:FWLIB/src/stm32f4xx_tim.c ****   tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
1028:FWLIB/src/stm32f4xx_tim.c **** 
1029:FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel: Reset the CCxE Bit */
1030:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
1031:FWLIB/src/stm32f4xx_tim.c **** 
1032:FWLIB/src/stm32f4xx_tim.c ****   if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
1033:FWLIB/src/stm32f4xx_tim.c ****   {
1034:FWLIB/src/stm32f4xx_tim.c ****     tmp += (TIM_Channel>>1);
1035:FWLIB/src/stm32f4xx_tim.c **** 
1036:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1037:FWLIB/src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
1038:FWLIB/src/stm32f4xx_tim.c ****    
1039:FWLIB/src/stm32f4xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1040:FWLIB/src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp |= TIM_OCMode;
1041:FWLIB/src/stm32f4xx_tim.c ****   }
1042:FWLIB/src/stm32f4xx_tim.c ****   else
1043:FWLIB/src/stm32f4xx_tim.c ****   {
1044:FWLIB/src/stm32f4xx_tim.c ****     tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
1045:FWLIB/src/stm32f4xx_tim.c **** 
1046:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1047:FWLIB/src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
1048:FWLIB/src/stm32f4xx_tim.c ****     
1049:FWLIB/src/stm32f4xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1050:FWLIB/src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
1051:FWLIB/src/stm32f4xx_tim.c ****   }
1052:FWLIB/src/stm32f4xx_tim.c **** }
1053:FWLIB/src/stm32f4xx_tim.c **** 
1054:FWLIB/src/stm32f4xx_tim.c **** /**
1055:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare1 Register value
1056:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1057:FWLIB/src/stm32f4xx_tim.c ****   * @param  Compare1: specifies the Capture Compare1 register new value.
1058:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1059:FWLIB/src/stm32f4xx_tim.c ****   */
1060:FWLIB/src/stm32f4xx_tim.c **** void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
ARM GAS  /tmp/ccgXhnD7.s 			page 20


1061:FWLIB/src/stm32f4xx_tim.c **** {
1062:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1063:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1064:FWLIB/src/stm32f4xx_tim.c **** 
1065:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare1 Register value */
1066:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR1 = Compare1;
1067:FWLIB/src/stm32f4xx_tim.c **** }
1068:FWLIB/src/stm32f4xx_tim.c **** 
1069:FWLIB/src/stm32f4xx_tim.c **** /**
1070:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare2 Register value
1071:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1072:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1073:FWLIB/src/stm32f4xx_tim.c ****   * @param  Compare2: specifies the Capture Compare2 register new value.
1074:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1075:FWLIB/src/stm32f4xx_tim.c ****   */
1076:FWLIB/src/stm32f4xx_tim.c **** void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
1077:FWLIB/src/stm32f4xx_tim.c **** {
1078:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1079:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1080:FWLIB/src/stm32f4xx_tim.c **** 
1081:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare2 Register value */
1082:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR2 = Compare2;
1083:FWLIB/src/stm32f4xx_tim.c **** }
1084:FWLIB/src/stm32f4xx_tim.c **** 
1085:FWLIB/src/stm32f4xx_tim.c **** /**
1086:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare3 Register value
1087:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1088:FWLIB/src/stm32f4xx_tim.c ****   * @param  Compare3: specifies the Capture Compare3 register new value.
1089:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1090:FWLIB/src/stm32f4xx_tim.c ****   */
1091:FWLIB/src/stm32f4xx_tim.c **** void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
1092:FWLIB/src/stm32f4xx_tim.c **** {
1093:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1094:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1095:FWLIB/src/stm32f4xx_tim.c **** 
1096:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare3 Register value */
1097:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR3 = Compare3;
1098:FWLIB/src/stm32f4xx_tim.c **** }
1099:FWLIB/src/stm32f4xx_tim.c **** 
1100:FWLIB/src/stm32f4xx_tim.c **** /**
1101:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare4 Register value
1102:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1103:FWLIB/src/stm32f4xx_tim.c ****   * @param  Compare4: specifies the Capture Compare4 register new value.
1104:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1105:FWLIB/src/stm32f4xx_tim.c ****   */
1106:FWLIB/src/stm32f4xx_tim.c **** void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
1107:FWLIB/src/stm32f4xx_tim.c **** {
1108:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1109:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1110:FWLIB/src/stm32f4xx_tim.c **** 
1111:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare4 Register value */
1112:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR4 = Compare4;
1113:FWLIB/src/stm32f4xx_tim.c **** }
1114:FWLIB/src/stm32f4xx_tim.c **** 
1115:FWLIB/src/stm32f4xx_tim.c **** /**
1116:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 1 waveform to active or inactive level.
1117:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
ARM GAS  /tmp/ccgXhnD7.s 			page 21


1118:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1119:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1120:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
1121:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
1122:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1123:FWLIB/src/stm32f4xx_tim.c ****   */
1124:FWLIB/src/stm32f4xx_tim.c **** void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1125:FWLIB/src/stm32f4xx_tim.c **** {
1126:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1127:FWLIB/src/stm32f4xx_tim.c **** 
1128:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1129:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1130:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1131:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1132:FWLIB/src/stm32f4xx_tim.c **** 
1133:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC1M Bits */
1134:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
1135:FWLIB/src/stm32f4xx_tim.c **** 
1136:FWLIB/src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1137:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_ForcedAction;
1138:FWLIB/src/stm32f4xx_tim.c **** 
1139:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1140:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1141:FWLIB/src/stm32f4xx_tim.c **** }
1142:FWLIB/src/stm32f4xx_tim.c **** 
1143:FWLIB/src/stm32f4xx_tim.c **** /**
1144:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 2 waveform to active or inactive level.
1145:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1146:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1147:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1148:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1149:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
1150:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
1151:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1152:FWLIB/src/stm32f4xx_tim.c ****   */
1153:FWLIB/src/stm32f4xx_tim.c **** void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1154:FWLIB/src/stm32f4xx_tim.c **** {
1155:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1156:FWLIB/src/stm32f4xx_tim.c **** 
1157:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1158:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1159:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1160:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1161:FWLIB/src/stm32f4xx_tim.c **** 
1162:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC2M Bits */
1163:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
1164:FWLIB/src/stm32f4xx_tim.c **** 
1165:FWLIB/src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1166:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
1167:FWLIB/src/stm32f4xx_tim.c **** 
1168:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1169:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1170:FWLIB/src/stm32f4xx_tim.c **** }
1171:FWLIB/src/stm32f4xx_tim.c **** 
1172:FWLIB/src/stm32f4xx_tim.c **** /**
1173:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 3 waveform to active or inactive level.
1174:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
ARM GAS  /tmp/ccgXhnD7.s 			page 22


1175:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1176:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1177:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
1178:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
1179:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1180:FWLIB/src/stm32f4xx_tim.c ****   */
1181:FWLIB/src/stm32f4xx_tim.c **** void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1182:FWLIB/src/stm32f4xx_tim.c **** {
1183:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1184:FWLIB/src/stm32f4xx_tim.c **** 
1185:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1186:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1187:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1188:FWLIB/src/stm32f4xx_tim.c **** 
1189:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1190:FWLIB/src/stm32f4xx_tim.c **** 
1191:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC1M Bits */
1192:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
1193:FWLIB/src/stm32f4xx_tim.c **** 
1194:FWLIB/src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1195:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_ForcedAction;
1196:FWLIB/src/stm32f4xx_tim.c **** 
1197:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1198:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1199:FWLIB/src/stm32f4xx_tim.c **** }
1200:FWLIB/src/stm32f4xx_tim.c **** 
1201:FWLIB/src/stm32f4xx_tim.c **** /**
1202:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 4 waveform to active or inactive level.
1203:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1204:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1205:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1206:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
1207:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
1208:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1209:FWLIB/src/stm32f4xx_tim.c ****   */
1210:FWLIB/src/stm32f4xx_tim.c **** void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1211:FWLIB/src/stm32f4xx_tim.c **** {
1212:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1213:FWLIB/src/stm32f4xx_tim.c **** 
1214:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1215:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1216:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1217:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1218:FWLIB/src/stm32f4xx_tim.c **** 
1219:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC2M Bits */
1220:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
1221:FWLIB/src/stm32f4xx_tim.c **** 
1222:FWLIB/src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1223:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
1224:FWLIB/src/stm32f4xx_tim.c **** 
1225:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1226:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1227:FWLIB/src/stm32f4xx_tim.c **** }
1228:FWLIB/src/stm32f4xx_tim.c **** 
1229:FWLIB/src/stm32f4xx_tim.c **** /**
1230:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR1.
1231:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
ARM GAS  /tmp/ccgXhnD7.s 			page 23


1232:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1233:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1234:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1235:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1236:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1237:FWLIB/src/stm32f4xx_tim.c ****   */
1238:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1239:FWLIB/src/stm32f4xx_tim.c **** {
1240:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1241:FWLIB/src/stm32f4xx_tim.c **** 
1242:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1243:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1244:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1245:FWLIB/src/stm32f4xx_tim.c **** 
1246:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1247:FWLIB/src/stm32f4xx_tim.c **** 
1248:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC1PE Bit */
1249:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
1250:FWLIB/src/stm32f4xx_tim.c **** 
1251:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1252:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_OCPreload;
1253:FWLIB/src/stm32f4xx_tim.c **** 
1254:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1255:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1256:FWLIB/src/stm32f4xx_tim.c **** }
1257:FWLIB/src/stm32f4xx_tim.c **** 
1258:FWLIB/src/stm32f4xx_tim.c **** /**
1259:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR2.
1260:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1261:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1262:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1263:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1264:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1265:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1266:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1267:FWLIB/src/stm32f4xx_tim.c ****   */
1268:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1269:FWLIB/src/stm32f4xx_tim.c **** {
1270:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1271:FWLIB/src/stm32f4xx_tim.c **** 
1272:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1273:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1274:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1275:FWLIB/src/stm32f4xx_tim.c **** 
1276:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1277:FWLIB/src/stm32f4xx_tim.c **** 
1278:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC2PE Bit */
1279:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
1280:FWLIB/src/stm32f4xx_tim.c **** 
1281:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1282:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
1283:FWLIB/src/stm32f4xx_tim.c **** 
1284:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1285:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1286:FWLIB/src/stm32f4xx_tim.c **** }
1287:FWLIB/src/stm32f4xx_tim.c **** 
1288:FWLIB/src/stm32f4xx_tim.c **** /**
ARM GAS  /tmp/ccgXhnD7.s 			page 24


1289:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR3.
1290:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1291:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1292:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1293:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1294:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1295:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1296:FWLIB/src/stm32f4xx_tim.c ****   */
1297:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1298:FWLIB/src/stm32f4xx_tim.c **** {
1299:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1300:FWLIB/src/stm32f4xx_tim.c **** 
1301:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1302:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1303:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1304:FWLIB/src/stm32f4xx_tim.c **** 
1305:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1306:FWLIB/src/stm32f4xx_tim.c **** 
1307:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC3PE Bit */
1308:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
1309:FWLIB/src/stm32f4xx_tim.c **** 
1310:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1311:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_OCPreload;
1312:FWLIB/src/stm32f4xx_tim.c **** 
1313:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1314:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1315:FWLIB/src/stm32f4xx_tim.c **** }
1316:FWLIB/src/stm32f4xx_tim.c **** 
1317:FWLIB/src/stm32f4xx_tim.c **** /**
1318:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR4.
1319:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1320:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1321:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1322:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1323:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1324:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1325:FWLIB/src/stm32f4xx_tim.c ****   */
1326:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1327:FWLIB/src/stm32f4xx_tim.c **** {
1328:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1329:FWLIB/src/stm32f4xx_tim.c **** 
1330:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1331:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1332:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1333:FWLIB/src/stm32f4xx_tim.c **** 
1334:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1335:FWLIB/src/stm32f4xx_tim.c **** 
1336:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC4PE Bit */
1337:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
1338:FWLIB/src/stm32f4xx_tim.c **** 
1339:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1340:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
1341:FWLIB/src/stm32f4xx_tim.c **** 
1342:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1343:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1344:FWLIB/src/stm32f4xx_tim.c **** }
1345:FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccgXhnD7.s 			page 25


1346:FWLIB/src/stm32f4xx_tim.c **** /**
1347:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 1 Fast feature.
1348:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1349:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1350:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1351:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1352:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1353:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1354:FWLIB/src/stm32f4xx_tim.c ****   */
1355:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1356:FWLIB/src/stm32f4xx_tim.c **** {
1357:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1358:FWLIB/src/stm32f4xx_tim.c **** 
1359:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1360:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1361:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1362:FWLIB/src/stm32f4xx_tim.c **** 
1363:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1364:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1365:FWLIB/src/stm32f4xx_tim.c **** 
1366:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC1FE Bit */
1367:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
1368:FWLIB/src/stm32f4xx_tim.c **** 
1369:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1370:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_OCFast;
1371:FWLIB/src/stm32f4xx_tim.c **** 
1372:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
1373:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1374:FWLIB/src/stm32f4xx_tim.c **** }
1375:FWLIB/src/stm32f4xx_tim.c **** 
1376:FWLIB/src/stm32f4xx_tim.c **** /**
1377:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 2 Fast feature.
1378:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1379:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1380:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1381:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1382:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1383:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1384:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1385:FWLIB/src/stm32f4xx_tim.c ****   */
1386:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1387:FWLIB/src/stm32f4xx_tim.c **** {
1388:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1389:FWLIB/src/stm32f4xx_tim.c **** 
1390:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1391:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1392:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1393:FWLIB/src/stm32f4xx_tim.c **** 
1394:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1395:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1396:FWLIB/src/stm32f4xx_tim.c **** 
1397:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC2FE Bit */
1398:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
1399:FWLIB/src/stm32f4xx_tim.c **** 
1400:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1401:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
1402:FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccgXhnD7.s 			page 26


1403:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
1404:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1405:FWLIB/src/stm32f4xx_tim.c **** }
1406:FWLIB/src/stm32f4xx_tim.c **** 
1407:FWLIB/src/stm32f4xx_tim.c **** /**
1408:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 3 Fast feature.
1409:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1410:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1411:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1412:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1413:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1414:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1415:FWLIB/src/stm32f4xx_tim.c ****   */
1416:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1417:FWLIB/src/stm32f4xx_tim.c **** {
1418:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1419:FWLIB/src/stm32f4xx_tim.c ****   
1420:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1421:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1422:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1423:FWLIB/src/stm32f4xx_tim.c **** 
1424:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1425:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1426:FWLIB/src/stm32f4xx_tim.c **** 
1427:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC3FE Bit */
1428:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
1429:FWLIB/src/stm32f4xx_tim.c **** 
1430:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1431:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_OCFast;
1432:FWLIB/src/stm32f4xx_tim.c **** 
1433:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */
1434:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1435:FWLIB/src/stm32f4xx_tim.c **** }
1436:FWLIB/src/stm32f4xx_tim.c **** 
1437:FWLIB/src/stm32f4xx_tim.c **** /**
1438:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 4 Fast feature.
1439:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1440:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1441:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1442:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1443:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1444:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1445:FWLIB/src/stm32f4xx_tim.c ****   */
1446:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1447:FWLIB/src/stm32f4xx_tim.c **** {
1448:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1449:FWLIB/src/stm32f4xx_tim.c **** 
1450:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1451:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1452:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1453:FWLIB/src/stm32f4xx_tim.c **** 
1454:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1455:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1456:FWLIB/src/stm32f4xx_tim.c **** 
1457:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC4FE Bit */
1458:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
1459:FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccgXhnD7.s 			page 27


1460:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1461:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
1462:FWLIB/src/stm32f4xx_tim.c **** 
1463:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */
1464:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1465:FWLIB/src/stm32f4xx_tim.c **** }
1466:FWLIB/src/stm32f4xx_tim.c **** 
1467:FWLIB/src/stm32f4xx_tim.c **** /**
1468:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF1 signal on an external event
1469:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1470:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1471:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1472:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1473:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1474:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1475:FWLIB/src/stm32f4xx_tim.c ****   */
1476:FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1477:FWLIB/src/stm32f4xx_tim.c **** {
1478:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1479:FWLIB/src/stm32f4xx_tim.c **** 
1480:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1481:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1482:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1483:FWLIB/src/stm32f4xx_tim.c **** 
1484:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1485:FWLIB/src/stm32f4xx_tim.c **** 
1486:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC1CE Bit */
1487:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
1488:FWLIB/src/stm32f4xx_tim.c **** 
1489:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1490:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_OCClear;
1491:FWLIB/src/stm32f4xx_tim.c **** 
1492:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1493:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1494:FWLIB/src/stm32f4xx_tim.c **** }
1495:FWLIB/src/stm32f4xx_tim.c **** 
1496:FWLIB/src/stm32f4xx_tim.c **** /**
1497:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF2 signal on an external event
1498:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1499:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1500:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1501:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1502:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1503:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1504:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1505:FWLIB/src/stm32f4xx_tim.c ****   */
1506:FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1507:FWLIB/src/stm32f4xx_tim.c **** {
1508:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1509:FWLIB/src/stm32f4xx_tim.c **** 
1510:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1511:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1512:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1513:FWLIB/src/stm32f4xx_tim.c **** 
1514:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1515:FWLIB/src/stm32f4xx_tim.c **** 
1516:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC2CE Bit */
ARM GAS  /tmp/ccgXhnD7.s 			page 28


1517:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
1518:FWLIB/src/stm32f4xx_tim.c **** 
1519:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1520:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
1521:FWLIB/src/stm32f4xx_tim.c **** 
1522:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1523:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1524:FWLIB/src/stm32f4xx_tim.c **** }
1525:FWLIB/src/stm32f4xx_tim.c **** 
1526:FWLIB/src/stm32f4xx_tim.c **** /**
1527:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF3 signal on an external event
1528:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1529:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1530:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1531:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1532:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1533:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1534:FWLIB/src/stm32f4xx_tim.c ****   */
1535:FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1536:FWLIB/src/stm32f4xx_tim.c **** {
1537:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1538:FWLIB/src/stm32f4xx_tim.c **** 
1539:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1540:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1541:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1542:FWLIB/src/stm32f4xx_tim.c **** 
1543:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1544:FWLIB/src/stm32f4xx_tim.c **** 
1545:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC3CE Bit */
1546:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
1547:FWLIB/src/stm32f4xx_tim.c **** 
1548:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1549:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_OCClear;
1550:FWLIB/src/stm32f4xx_tim.c **** 
1551:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1552:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1553:FWLIB/src/stm32f4xx_tim.c **** }
1554:FWLIB/src/stm32f4xx_tim.c **** 
1555:FWLIB/src/stm32f4xx_tim.c **** /**
1556:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF4 signal on an external event
1557:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1558:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1559:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1560:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1561:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1562:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1563:FWLIB/src/stm32f4xx_tim.c ****   */
1564:FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1565:FWLIB/src/stm32f4xx_tim.c **** {
1566:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1567:FWLIB/src/stm32f4xx_tim.c **** 
1568:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1569:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1570:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1571:FWLIB/src/stm32f4xx_tim.c **** 
1572:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1573:FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccgXhnD7.s 			page 29


1574:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC4CE Bit */
1575:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
1576:FWLIB/src/stm32f4xx_tim.c **** 
1577:FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1578:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
1579:FWLIB/src/stm32f4xx_tim.c **** 
1580:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1581:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1582:FWLIB/src/stm32f4xx_tim.c **** }
1583:FWLIB/src/stm32f4xx_tim.c **** 
1584:FWLIB/src/stm32f4xx_tim.c **** /**
1585:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 1 polarity.
1586:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1587:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC1 Polarity
1588:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1589:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1590:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1591:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1592:FWLIB/src/stm32f4xx_tim.c ****   */
1593:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1594:FWLIB/src/stm32f4xx_tim.c **** {
1595:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1596:FWLIB/src/stm32f4xx_tim.c **** 
1597:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1598:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1599:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1600:FWLIB/src/stm32f4xx_tim.c **** 
1601:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1602:FWLIB/src/stm32f4xx_tim.c **** 
1603:FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC1P Bit */
1604:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
1605:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCPolarity;
1606:FWLIB/src/stm32f4xx_tim.c **** 
1607:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1608:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1609:FWLIB/src/stm32f4xx_tim.c **** }
1610:FWLIB/src/stm32f4xx_tim.c **** 
1611:FWLIB/src/stm32f4xx_tim.c **** /**
1612:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Channel 1N polarity.
1613:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1614:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC1N Polarity
1615:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1616:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1617:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1618:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1619:FWLIB/src/stm32f4xx_tim.c ****   */
1620:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1621:FWLIB/src/stm32f4xx_tim.c **** {
1622:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1623:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1624:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1625:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1626:FWLIB/src/stm32f4xx_tim.c ****    
1627:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1628:FWLIB/src/stm32f4xx_tim.c **** 
1629:FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC1NP Bit */
1630:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
ARM GAS  /tmp/ccgXhnD7.s 			page 30


1631:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCNPolarity;
1632:FWLIB/src/stm32f4xx_tim.c **** 
1633:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1634:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1635:FWLIB/src/stm32f4xx_tim.c **** }
1636:FWLIB/src/stm32f4xx_tim.c **** 
1637:FWLIB/src/stm32f4xx_tim.c **** /**
1638:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 2 polarity.
1639:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1640:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1641:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC2 Polarity
1642:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1643:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1644:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1645:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1646:FWLIB/src/stm32f4xx_tim.c ****   */
1647:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1648:FWLIB/src/stm32f4xx_tim.c **** {
1649:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1650:FWLIB/src/stm32f4xx_tim.c **** 
1651:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1652:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1653:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1654:FWLIB/src/stm32f4xx_tim.c **** 
1655:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1656:FWLIB/src/stm32f4xx_tim.c **** 
1657:FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC2P Bit */
1658:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
1659:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
1660:FWLIB/src/stm32f4xx_tim.c **** 
1661:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1662:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1663:FWLIB/src/stm32f4xx_tim.c **** }
1664:FWLIB/src/stm32f4xx_tim.c **** 
1665:FWLIB/src/stm32f4xx_tim.c **** /**
1666:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Channel 2N polarity.
1667:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1668:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC2N Polarity
1669:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1670:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1671:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1672:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1673:FWLIB/src/stm32f4xx_tim.c ****   */
1674:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1675:FWLIB/src/stm32f4xx_tim.c **** {
1676:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1677:FWLIB/src/stm32f4xx_tim.c **** 
1678:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1679:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1680:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1681:FWLIB/src/stm32f4xx_tim.c ****   
1682:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1683:FWLIB/src/stm32f4xx_tim.c **** 
1684:FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC2NP Bit */
1685:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
1686:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
1687:FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccgXhnD7.s 			page 31


1688:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1689:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1690:FWLIB/src/stm32f4xx_tim.c **** }
1691:FWLIB/src/stm32f4xx_tim.c **** 
1692:FWLIB/src/stm32f4xx_tim.c **** /**
1693:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 3 polarity.
1694:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1695:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC3 Polarity
1696:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1697:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1698:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1699:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1700:FWLIB/src/stm32f4xx_tim.c ****   */
1701:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1702:FWLIB/src/stm32f4xx_tim.c **** {
1703:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1704:FWLIB/src/stm32f4xx_tim.c **** 
1705:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1706:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1707:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1708:FWLIB/src/stm32f4xx_tim.c **** 
1709:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1710:FWLIB/src/stm32f4xx_tim.c **** 
1711:FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC3P Bit */
1712:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC3P;
1713:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
1714:FWLIB/src/stm32f4xx_tim.c **** 
1715:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1716:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1717:FWLIB/src/stm32f4xx_tim.c **** }
1718:FWLIB/src/stm32f4xx_tim.c **** 
1719:FWLIB/src/stm32f4xx_tim.c **** /**
1720:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Channel 3N polarity.
1721:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1722:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC3N Polarity
1723:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1724:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1725:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1726:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1727:FWLIB/src/stm32f4xx_tim.c ****   */
1728:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1729:FWLIB/src/stm32f4xx_tim.c **** {
1730:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1731:FWLIB/src/stm32f4xx_tim.c ****  
1732:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1733:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1734:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1735:FWLIB/src/stm32f4xx_tim.c ****     
1736:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1737:FWLIB/src/stm32f4xx_tim.c **** 
1738:FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC3NP Bit */
1739:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
1740:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
1741:FWLIB/src/stm32f4xx_tim.c **** 
1742:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1743:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1744:FWLIB/src/stm32f4xx_tim.c **** }
ARM GAS  /tmp/ccgXhnD7.s 			page 32


1745:FWLIB/src/stm32f4xx_tim.c **** 
1746:FWLIB/src/stm32f4xx_tim.c **** /**
1747:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 4 polarity.
1748:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1749:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC4 Polarity
1750:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1751:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1752:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1753:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1754:FWLIB/src/stm32f4xx_tim.c ****   */
1755:FWLIB/src/stm32f4xx_tim.c **** void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1756:FWLIB/src/stm32f4xx_tim.c **** {
1757:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1758:FWLIB/src/stm32f4xx_tim.c **** 
1759:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1760:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1761:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1762:FWLIB/src/stm32f4xx_tim.c **** 
1763:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1764:FWLIB/src/stm32f4xx_tim.c **** 
1765:FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC4P Bit */
1766:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC4P;
1767:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
1768:FWLIB/src/stm32f4xx_tim.c **** 
1769:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1770:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1771:FWLIB/src/stm32f4xx_tim.c **** }
1772:FWLIB/src/stm32f4xx_tim.c **** 
1773:FWLIB/src/stm32f4xx_tim.c **** /**
1774:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel x.
1775:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1776:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1777:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1778:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1779:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1780:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1781:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
1782:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
1783:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
1784:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1785:FWLIB/src/stm32f4xx_tim.c ****   */
1786:FWLIB/src/stm32f4xx_tim.c **** void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
1787:FWLIB/src/stm32f4xx_tim.c **** {
1788:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmp = 0;
1789:FWLIB/src/stm32f4xx_tim.c **** 
1790:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1791:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
1792:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_Channel));
1793:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CCX(TIM_CCx));
1794:FWLIB/src/stm32f4xx_tim.c **** 
1795:FWLIB/src/stm32f4xx_tim.c ****   tmp = CCER_CCE_SET << TIM_Channel;
1796:FWLIB/src/stm32f4xx_tim.c **** 
1797:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the CCxE Bit */
1798:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
1799:FWLIB/src/stm32f4xx_tim.c **** 
1800:FWLIB/src/stm32f4xx_tim.c ****   /* Set or reset the CCxE Bit */ 
1801:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
ARM GAS  /tmp/ccgXhnD7.s 			page 33


1802:FWLIB/src/stm32f4xx_tim.c **** }
1803:FWLIB/src/stm32f4xx_tim.c **** 
1804:FWLIB/src/stm32f4xx_tim.c **** /**
1805:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel xN.
1806:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1807:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1808:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1809:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1810:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1811:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1812:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
1813:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
1814:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1815:FWLIB/src/stm32f4xx_tim.c ****   */
1816:FWLIB/src/stm32f4xx_tim.c **** void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
1817:FWLIB/src/stm32f4xx_tim.c **** {
1818:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmp = 0;
1819:FWLIB/src/stm32f4xx_tim.c **** 
1820:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1821:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1822:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
1823:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CCXN(TIM_CCxN));
1824:FWLIB/src/stm32f4xx_tim.c **** 
1825:FWLIB/src/stm32f4xx_tim.c ****   tmp = CCER_CCNE_SET << TIM_Channel;
1826:FWLIB/src/stm32f4xx_tim.c **** 
1827:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the CCxNE Bit */
1828:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
1829:FWLIB/src/stm32f4xx_tim.c **** 
1830:FWLIB/src/stm32f4xx_tim.c ****   /* Set or reset the CCxNE Bit */ 
1831:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
1832:FWLIB/src/stm32f4xx_tim.c **** }
1833:FWLIB/src/stm32f4xx_tim.c **** /**
1834:FWLIB/src/stm32f4xx_tim.c ****   * @}
1835:FWLIB/src/stm32f4xx_tim.c ****   */
1836:FWLIB/src/stm32f4xx_tim.c **** 
1837:FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group3 Input Capture management functions
1838:FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Input Capture management functions 
1839:FWLIB/src/stm32f4xx_tim.c ****  *
1840:FWLIB/src/stm32f4xx_tim.c **** @verbatim   
1841:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
1842:FWLIB/src/stm32f4xx_tim.c ****                   ##### Input Capture management functions #####
1843:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
1844:FWLIB/src/stm32f4xx_tim.c ****          
1845:FWLIB/src/stm32f4xx_tim.c ****             ##### TIM Driver: how to use it in Input Capture Mode #####
1846:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
1847:FWLIB/src/stm32f4xx_tim.c ****     [..]    
1848:FWLIB/src/stm32f4xx_tim.c ****     To use the Timer in Input Capture mode, the following steps are mandatory:
1849:FWLIB/src/stm32f4xx_tim.c ****        
1850:FWLIB/src/stm32f4xx_tim.c ****       (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) 
1851:FWLIB/src/stm32f4xx_tim.c ****           function
1852:FWLIB/src/stm32f4xx_tim.c ****        
1853:FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the TIM pins by configuring the corresponding GPIO pins
1854:FWLIB/src/stm32f4xx_tim.c ****        
1855:FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the Time base unit as described in the first part of this driver,
1856:FWLIB/src/stm32f4xx_tim.c ****           if needed, else the Timer will run with the default configuration:
1857:FWLIB/src/stm32f4xx_tim.c ****         (++) Autoreload value = 0xFFFF
1858:FWLIB/src/stm32f4xx_tim.c ****         (++) Prescaler value = 0x0000
ARM GAS  /tmp/ccgXhnD7.s 			page 34


1859:FWLIB/src/stm32f4xx_tim.c ****         (++) Counter mode = Up counting
1860:FWLIB/src/stm32f4xx_tim.c ****         (++) Clock Division = TIM_CKD_DIV1
1861:FWLIB/src/stm32f4xx_tim.c ****           
1862:FWLIB/src/stm32f4xx_tim.c ****       (#) Fill the TIM_ICInitStruct with the desired parameters including:
1863:FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Channel: TIM_Channel
1864:FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Input Capture polarity: TIM_ICPolarity
1865:FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Input Capture selection: TIM_ICSelection
1866:FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Input Capture Prescaler: TIM_ICPrescaler
1867:FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Input CApture filter value: TIM_ICFilter
1868:FWLIB/src/stm32f4xx_tim.c ****        
1869:FWLIB/src/stm32f4xx_tim.c ****       (#) Call TIM_ICInit(TIMx, &TIM_ICInitStruct) to configure the desired channel 
1870:FWLIB/src/stm32f4xx_tim.c ****           with the corresponding configuration and to measure only frequency 
1871:FWLIB/src/stm32f4xx_tim.c ****           or duty cycle of the input signal, or, Call TIM_PWMIConfig(TIMx, &TIM_ICInitStruct) 
1872:FWLIB/src/stm32f4xx_tim.c ****           to configure the desired channels with the corresponding configuration 
1873:FWLIB/src/stm32f4xx_tim.c ****           and to measure the frequency and the duty cycle of the input signal
1874:FWLIB/src/stm32f4xx_tim.c ****           
1875:FWLIB/src/stm32f4xx_tim.c ****       (#) Enable the NVIC or the DMA to read the measured frequency. 
1876:FWLIB/src/stm32f4xx_tim.c ****           
1877:FWLIB/src/stm32f4xx_tim.c ****       (#) Enable the corresponding interrupt (or DMA request) to read the Captured 
1878:FWLIB/src/stm32f4xx_tim.c ****           value, using the function TIM_ITConfig(TIMx, TIM_IT_CCx) 
1879:FWLIB/src/stm32f4xx_tim.c ****           (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx)) 
1880:FWLIB/src/stm32f4xx_tim.c ****        
1881:FWLIB/src/stm32f4xx_tim.c ****       (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
1882:FWLIB/src/stm32f4xx_tim.c ****        
1883:FWLIB/src/stm32f4xx_tim.c ****       (#) Use TIM_GetCapturex(TIMx); to read the captured value.
1884:FWLIB/src/stm32f4xx_tim.c ****        
1885:FWLIB/src/stm32f4xx_tim.c ****       -@- All other functions can be used separately to modify, if needed,
1886:FWLIB/src/stm32f4xx_tim.c ****           a specific feature of the Timer. 
1887:FWLIB/src/stm32f4xx_tim.c **** 
1888:FWLIB/src/stm32f4xx_tim.c **** @endverbatim
1889:FWLIB/src/stm32f4xx_tim.c ****   * @{
1890:FWLIB/src/stm32f4xx_tim.c ****   */
1891:FWLIB/src/stm32f4xx_tim.c **** 
1892:FWLIB/src/stm32f4xx_tim.c **** /**
1893:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIM peripheral according to the specified parameters
1894:FWLIB/src/stm32f4xx_tim.c ****   *         in the TIM_ICInitStruct.
1895:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1896:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
1897:FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
1898:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1899:FWLIB/src/stm32f4xx_tim.c ****   */
1900:FWLIB/src/stm32f4xx_tim.c **** void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
1901:FWLIB/src/stm32f4xx_tim.c **** {
1902:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1903:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1904:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
1905:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
1906:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
1907:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
1908:FWLIB/src/stm32f4xx_tim.c ****   
1909:FWLIB/src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
1910:FWLIB/src/stm32f4xx_tim.c ****   {
1911:FWLIB/src/stm32f4xx_tim.c ****     /* TI1 Configuration */
1912:FWLIB/src/stm32f4xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
1913:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
1914:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1915:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
ARM GAS  /tmp/ccgXhnD7.s 			page 35


1916:FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
1917:FWLIB/src/stm32f4xx_tim.c ****   }
1918:FWLIB/src/stm32f4xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
1919:FWLIB/src/stm32f4xx_tim.c ****   {
1920:FWLIB/src/stm32f4xx_tim.c ****     /* TI2 Configuration */
1921:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1922:FWLIB/src/stm32f4xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
1923:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
1924:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1925:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
1926:FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
1927:FWLIB/src/stm32f4xx_tim.c ****   }
1928:FWLIB/src/stm32f4xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
1929:FWLIB/src/stm32f4xx_tim.c ****   {
1930:FWLIB/src/stm32f4xx_tim.c ****     /* TI3 Configuration */
1931:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1932:FWLIB/src/stm32f4xx_tim.c ****     TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
1933:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
1934:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1935:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
1936:FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
1937:FWLIB/src/stm32f4xx_tim.c ****   }
1938:FWLIB/src/stm32f4xx_tim.c ****   else
1939:FWLIB/src/stm32f4xx_tim.c ****   {
1940:FWLIB/src/stm32f4xx_tim.c ****     /* TI4 Configuration */
1941:FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1942:FWLIB/src/stm32f4xx_tim.c ****     TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
1943:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
1944:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1945:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
1946:FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
1947:FWLIB/src/stm32f4xx_tim.c ****   }
1948:FWLIB/src/stm32f4xx_tim.c **** }
1949:FWLIB/src/stm32f4xx_tim.c **** 
1950:FWLIB/src/stm32f4xx_tim.c **** /**
1951:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_ICInitStruct member with its default value.
1952:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
1953:FWLIB/src/stm32f4xx_tim.c ****   *         be initialized.
1954:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1955:FWLIB/src/stm32f4xx_tim.c ****   */
1956:FWLIB/src/stm32f4xx_tim.c **** void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
1957:FWLIB/src/stm32f4xx_tim.c **** {
1958:FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
1959:FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
1960:FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
1961:FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
1962:FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
1963:FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
1964:FWLIB/src/stm32f4xx_tim.c **** }
1965:FWLIB/src/stm32f4xx_tim.c **** 
1966:FWLIB/src/stm32f4xx_tim.c **** /**
1967:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIM peripheral according to the specified parameters
1968:FWLIB/src/stm32f4xx_tim.c ****   *         in the TIM_ICInitStruct to measure an external PWM signal.
1969:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5,8, 9 or 12 to select the TIM 
1970:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1971:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
1972:FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
ARM GAS  /tmp/ccgXhnD7.s 			page 36


1973:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1974:FWLIB/src/stm32f4xx_tim.c ****   */
1975:FWLIB/src/stm32f4xx_tim.c **** void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
1976:FWLIB/src/stm32f4xx_tim.c **** {
1977:FWLIB/src/stm32f4xx_tim.c ****   uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
1978:FWLIB/src/stm32f4xx_tim.c ****   uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
1979:FWLIB/src/stm32f4xx_tim.c **** 
1980:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1981:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1982:FWLIB/src/stm32f4xx_tim.c **** 
1983:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Opposite Input Polarity */
1984:FWLIB/src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
1985:FWLIB/src/stm32f4xx_tim.c ****   {
1986:FWLIB/src/stm32f4xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
1987:FWLIB/src/stm32f4xx_tim.c ****   }
1988:FWLIB/src/stm32f4xx_tim.c ****   else
1989:FWLIB/src/stm32f4xx_tim.c ****   {
1990:FWLIB/src/stm32f4xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Rising;
1991:FWLIB/src/stm32f4xx_tim.c ****   }
1992:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Opposite Input */
1993:FWLIB/src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
1994:FWLIB/src/stm32f4xx_tim.c ****   {
1995:FWLIB/src/stm32f4xx_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
1996:FWLIB/src/stm32f4xx_tim.c ****   }
1997:FWLIB/src/stm32f4xx_tim.c ****   else
1998:FWLIB/src/stm32f4xx_tim.c ****   {
1999:FWLIB/src/stm32f4xx_tim.c ****     icoppositeselection = TIM_ICSelection_DirectTI;
2000:FWLIB/src/stm32f4xx_tim.c ****   }
2001:FWLIB/src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
2002:FWLIB/src/stm32f4xx_tim.c ****   {
2003:FWLIB/src/stm32f4xx_tim.c ****     /* TI1 Configuration */
2004:FWLIB/src/stm32f4xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
2005:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2006:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2007:FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2008:FWLIB/src/stm32f4xx_tim.c ****     /* TI2 Configuration */
2009:FWLIB/src/stm32f4xx_tim.c ****     TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
2010:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2011:FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2012:FWLIB/src/stm32f4xx_tim.c ****   }
2013:FWLIB/src/stm32f4xx_tim.c ****   else
2014:FWLIB/src/stm32f4xx_tim.c ****   { 
2015:FWLIB/src/stm32f4xx_tim.c ****     /* TI2 Configuration */
2016:FWLIB/src/stm32f4xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
2017:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2018:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2019:FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2020:FWLIB/src/stm32f4xx_tim.c ****     /* TI1 Configuration */
2021:FWLIB/src/stm32f4xx_tim.c ****     TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
2022:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2023:FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2024:FWLIB/src/stm32f4xx_tim.c ****   }
2025:FWLIB/src/stm32f4xx_tim.c **** }
2026:FWLIB/src/stm32f4xx_tim.c **** 
2027:FWLIB/src/stm32f4xx_tim.c **** /**
2028:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 1 value.
2029:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
ARM GAS  /tmp/ccgXhnD7.s 			page 37


2030:FWLIB/src/stm32f4xx_tim.c ****   * @retval Capture Compare 1 Register value.
2031:FWLIB/src/stm32f4xx_tim.c ****   */
2032:FWLIB/src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
2033:FWLIB/src/stm32f4xx_tim.c **** {
2034:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2035:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
2036:FWLIB/src/stm32f4xx_tim.c **** 
2037:FWLIB/src/stm32f4xx_tim.c ****   /* Get the Capture 1 Register value */
2038:FWLIB/src/stm32f4xx_tim.c ****   return TIMx->CCR1;
2039:FWLIB/src/stm32f4xx_tim.c **** }
2040:FWLIB/src/stm32f4xx_tim.c **** 
2041:FWLIB/src/stm32f4xx_tim.c **** /**
2042:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 2 value.
2043:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2044:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
2045:FWLIB/src/stm32f4xx_tim.c ****   * @retval Capture Compare 2 Register value.
2046:FWLIB/src/stm32f4xx_tim.c ****   */
2047:FWLIB/src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
2048:FWLIB/src/stm32f4xx_tim.c **** {
2049:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2050:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2051:FWLIB/src/stm32f4xx_tim.c **** 
2052:FWLIB/src/stm32f4xx_tim.c ****   /* Get the Capture 2 Register value */
2053:FWLIB/src/stm32f4xx_tim.c ****   return TIMx->CCR2;
2054:FWLIB/src/stm32f4xx_tim.c **** }
2055:FWLIB/src/stm32f4xx_tim.c **** 
2056:FWLIB/src/stm32f4xx_tim.c **** /**
2057:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 3 value.
2058:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2059:FWLIB/src/stm32f4xx_tim.c ****   * @retval Capture Compare 3 Register value.
2060:FWLIB/src/stm32f4xx_tim.c ****   */
2061:FWLIB/src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
2062:FWLIB/src/stm32f4xx_tim.c **** {
2063:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2064:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
2065:FWLIB/src/stm32f4xx_tim.c **** 
2066:FWLIB/src/stm32f4xx_tim.c ****   /* Get the Capture 3 Register value */
2067:FWLIB/src/stm32f4xx_tim.c ****   return TIMx->CCR3;
2068:FWLIB/src/stm32f4xx_tim.c **** }
2069:FWLIB/src/stm32f4xx_tim.c **** 
2070:FWLIB/src/stm32f4xx_tim.c **** /**
2071:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 4 value.
2072:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2073:FWLIB/src/stm32f4xx_tim.c ****   * @retval Capture Compare 4 Register value.
2074:FWLIB/src/stm32f4xx_tim.c ****   */
2075:FWLIB/src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
2076:FWLIB/src/stm32f4xx_tim.c **** {
2077:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2078:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2079:FWLIB/src/stm32f4xx_tim.c **** 
2080:FWLIB/src/stm32f4xx_tim.c ****   /* Get the Capture 4 Register value */
2081:FWLIB/src/stm32f4xx_tim.c ****   return TIMx->CCR4;
2082:FWLIB/src/stm32f4xx_tim.c **** }
2083:FWLIB/src/stm32f4xx_tim.c **** 
2084:FWLIB/src/stm32f4xx_tim.c **** /**
2085:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 1 prescaler.
2086:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
ARM GAS  /tmp/ccgXhnD7.s 			page 38


2087:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture1 prescaler new value.
2088:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2089:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2090:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2091:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2092:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2093:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2094:FWLIB/src/stm32f4xx_tim.c ****   */
2095:FWLIB/src/stm32f4xx_tim.c **** void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2096:FWLIB/src/stm32f4xx_tim.c **** {
2097:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2098:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
2099:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2100:FWLIB/src/stm32f4xx_tim.c **** 
2101:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the IC1PSC Bits */
2102:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
2103:FWLIB/src/stm32f4xx_tim.c **** 
2104:FWLIB/src/stm32f4xx_tim.c ****   /* Set the IC1PSC value */
2105:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 |= TIM_ICPSC;
2106:FWLIB/src/stm32f4xx_tim.c **** }
2107:FWLIB/src/stm32f4xx_tim.c **** 
2108:FWLIB/src/stm32f4xx_tim.c **** /**
2109:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 2 prescaler.
2110:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2111:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
2112:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture2 prescaler new value.
2113:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2114:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2115:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2116:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2117:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2118:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2119:FWLIB/src/stm32f4xx_tim.c ****   */
2120:FWLIB/src/stm32f4xx_tim.c **** void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2121:FWLIB/src/stm32f4xx_tim.c **** {
2122:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2123:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2124:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2125:FWLIB/src/stm32f4xx_tim.c **** 
2126:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the IC2PSC Bits */
2127:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
2128:FWLIB/src/stm32f4xx_tim.c **** 
2129:FWLIB/src/stm32f4xx_tim.c ****   /* Set the IC2PSC value */
2130:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
2131:FWLIB/src/stm32f4xx_tim.c **** }
2132:FWLIB/src/stm32f4xx_tim.c **** 
2133:FWLIB/src/stm32f4xx_tim.c **** /**
2134:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 3 prescaler.
2135:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2136:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture3 prescaler new value.
2137:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2138:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2139:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2140:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2141:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2142:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2143:FWLIB/src/stm32f4xx_tim.c ****   */
ARM GAS  /tmp/ccgXhnD7.s 			page 39


2144:FWLIB/src/stm32f4xx_tim.c **** void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2145:FWLIB/src/stm32f4xx_tim.c **** {
2146:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2147:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2148:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2149:FWLIB/src/stm32f4xx_tim.c **** 
2150:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the IC3PSC Bits */
2151:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
2152:FWLIB/src/stm32f4xx_tim.c **** 
2153:FWLIB/src/stm32f4xx_tim.c ****   /* Set the IC3PSC value */
2154:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 |= TIM_ICPSC;
2155:FWLIB/src/stm32f4xx_tim.c **** }
2156:FWLIB/src/stm32f4xx_tim.c **** 
2157:FWLIB/src/stm32f4xx_tim.c **** /**
2158:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 4 prescaler.
2159:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2160:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture4 prescaler new value.
2161:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2162:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2163:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2164:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2165:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2166:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2167:FWLIB/src/stm32f4xx_tim.c ****   */
2168:FWLIB/src/stm32f4xx_tim.c **** void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2169:FWLIB/src/stm32f4xx_tim.c **** {  
2170:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2171:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2172:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2173:FWLIB/src/stm32f4xx_tim.c **** 
2174:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the IC4PSC Bits */
2175:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
2176:FWLIB/src/stm32f4xx_tim.c **** 
2177:FWLIB/src/stm32f4xx_tim.c ****   /* Set the IC4PSC value */
2178:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
2179:FWLIB/src/stm32f4xx_tim.c **** }
2180:FWLIB/src/stm32f4xx_tim.c **** /**
2181:FWLIB/src/stm32f4xx_tim.c ****   * @}
2182:FWLIB/src/stm32f4xx_tim.c ****   */
2183:FWLIB/src/stm32f4xx_tim.c **** 
2184:FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group4 Advanced-control timers (TIM1 and TIM8) specific features
2185:FWLIB/src/stm32f4xx_tim.c ****  *  @brief   Advanced-control timers (TIM1 and TIM8) specific features
2186:FWLIB/src/stm32f4xx_tim.c ****  *
2187:FWLIB/src/stm32f4xx_tim.c **** @verbatim   
2188:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2189:FWLIB/src/stm32f4xx_tim.c ****       ##### Advanced-control timers (TIM1 and TIM8) specific features #####
2190:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
2191:FWLIB/src/stm32f4xx_tim.c ****         
2192:FWLIB/src/stm32f4xx_tim.c ****              ##### TIM Driver: how to use the Break feature #####
2193:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2194:FWLIB/src/stm32f4xx_tim.c ****     [..] 
2195:FWLIB/src/stm32f4xx_tim.c ****     After configuring the Timer channel(s) in the appropriate Output Compare mode: 
2196:FWLIB/src/stm32f4xx_tim.c ****                          
2197:FWLIB/src/stm32f4xx_tim.c ****       (#) Fill the TIM_BDTRInitStruct with the desired parameters for the Timer
2198:FWLIB/src/stm32f4xx_tim.c ****           Break Polarity, dead time, Lock level, the OSSI/OSSR State and the 
2199:FWLIB/src/stm32f4xx_tim.c ****           AOE(automatic output enable).
2200:FWLIB/src/stm32f4xx_tim.c ****                
ARM GAS  /tmp/ccgXhnD7.s 			page 40


2201:FWLIB/src/stm32f4xx_tim.c ****       (#) Call TIM_BDTRConfig(TIMx, &TIM_BDTRInitStruct) to configure the Timer
2202:FWLIB/src/stm32f4xx_tim.c ****           
2203:FWLIB/src/stm32f4xx_tim.c ****       (#) Enable the Main Output using TIM_CtrlPWMOutputs(TIM1, ENABLE) 
2204:FWLIB/src/stm32f4xx_tim.c ****           
2205:FWLIB/src/stm32f4xx_tim.c ****       (#) Once the break even occurs, the Timer's output signals are put in reset
2206:FWLIB/src/stm32f4xx_tim.c ****           state or in a known state (according to the configuration made in
2207:FWLIB/src/stm32f4xx_tim.c ****           TIM_BDTRConfig() function).
2208:FWLIB/src/stm32f4xx_tim.c **** 
2209:FWLIB/src/stm32f4xx_tim.c **** @endverbatim
2210:FWLIB/src/stm32f4xx_tim.c ****   * @{
2211:FWLIB/src/stm32f4xx_tim.c ****   */
2212:FWLIB/src/stm32f4xx_tim.c **** 
2213:FWLIB/src/stm32f4xx_tim.c **** /**
2214:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the Break feature, dead time, Lock level, OSSI/OSSR State
2215:FWLIB/src/stm32f4xx_tim.c ****   *         and the AOE(automatic output enable).
2216:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 or 8 to select the TIM 
2217:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
2218:FWLIB/src/stm32f4xx_tim.c ****   *         contains the BDTR Register configuration  information for the TIM peripheral.
2219:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2220:FWLIB/src/stm32f4xx_tim.c ****   */
2221:FWLIB/src/stm32f4xx_tim.c **** void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
2222:FWLIB/src/stm32f4xx_tim.c **** {
2223:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2224:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2225:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
2226:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
2227:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
2228:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
2229:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
2230:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
2231:FWLIB/src/stm32f4xx_tim.c **** 
2232:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
2233:FWLIB/src/stm32f4xx_tim.c ****      the OSSI State, the dead time value and the Automatic Output Enable Bit */
2234:FWLIB/src/stm32f4xx_tim.c ****   TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
2235:FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
2236:FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
2237:FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_AutomaticOutput;
2238:FWLIB/src/stm32f4xx_tim.c **** }
2239:FWLIB/src/stm32f4xx_tim.c **** 
2240:FWLIB/src/stm32f4xx_tim.c **** /**
2241:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_BDTRInitStruct member with its default value.
2242:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
2243:FWLIB/src/stm32f4xx_tim.c ****   *         will be initialized.
2244:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2245:FWLIB/src/stm32f4xx_tim.c ****   */
2246:FWLIB/src/stm32f4xx_tim.c **** void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
2247:FWLIB/src/stm32f4xx_tim.c **** {
2248:FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
2249:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
2250:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
2251:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
2252:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
2253:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
2254:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
2255:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
2256:FWLIB/src/stm32f4xx_tim.c **** }
2257:FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccgXhnD7.s 			page 41


2258:FWLIB/src/stm32f4xx_tim.c **** /**
2259:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIM peripheral Main Outputs.
2260:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIMx peripheral.
2261:FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIM peripheral Main Outputs.
2262:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2263:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2264:FWLIB/src/stm32f4xx_tim.c ****   */
2265:FWLIB/src/stm32f4xx_tim.c **** void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
2266:FWLIB/src/stm32f4xx_tim.c **** {
2267:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2268:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2269:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2270:FWLIB/src/stm32f4xx_tim.c **** 
2271:FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2272:FWLIB/src/stm32f4xx_tim.c ****   {
2273:FWLIB/src/stm32f4xx_tim.c ****     /* Enable the TIM Main Output */
2274:FWLIB/src/stm32f4xx_tim.c ****     TIMx->BDTR |= TIM_BDTR_MOE;
2275:FWLIB/src/stm32f4xx_tim.c ****   }
2276:FWLIB/src/stm32f4xx_tim.c ****   else
2277:FWLIB/src/stm32f4xx_tim.c ****   {
2278:FWLIB/src/stm32f4xx_tim.c ****     /* Disable the TIM Main Output */
2279:FWLIB/src/stm32f4xx_tim.c ****     TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
2280:FWLIB/src/stm32f4xx_tim.c ****   }  
2281:FWLIB/src/stm32f4xx_tim.c **** }
2282:FWLIB/src/stm32f4xx_tim.c **** 
2283:FWLIB/src/stm32f4xx_tim.c **** /**
2284:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIM peripheral Commutation event.
2285:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 or 8 to select the TIMx peripheral
2286:FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the Commutation event.
2287:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2288:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2289:FWLIB/src/stm32f4xx_tim.c ****   */
2290:FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
2291:FWLIB/src/stm32f4xx_tim.c **** {
2292:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2293:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2294:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2295:FWLIB/src/stm32f4xx_tim.c **** 
2296:FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2297:FWLIB/src/stm32f4xx_tim.c ****   {
2298:FWLIB/src/stm32f4xx_tim.c ****     /* Set the COM Bit */
2299:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
2300:FWLIB/src/stm32f4xx_tim.c ****   }
2301:FWLIB/src/stm32f4xx_tim.c ****   else
2302:FWLIB/src/stm32f4xx_tim.c ****   {
2303:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the COM Bit */
2304:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
2305:FWLIB/src/stm32f4xx_tim.c ****   }
2306:FWLIB/src/stm32f4xx_tim.c **** }
2307:FWLIB/src/stm32f4xx_tim.c **** 
2308:FWLIB/src/stm32f4xx_tim.c **** /**
2309:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets or Resets the TIM peripheral Capture Compare Preload Control bit.
2310:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 or 8 to select the TIMx peripheral
2311:FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the Capture Compare Preload Control bit
2312:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2313:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2314:FWLIB/src/stm32f4xx_tim.c ****   */
ARM GAS  /tmp/ccgXhnD7.s 			page 42


2315:FWLIB/src/stm32f4xx_tim.c **** void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
2316:FWLIB/src/stm32f4xx_tim.c **** { 
2317:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2318:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2319:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2320:FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2321:FWLIB/src/stm32f4xx_tim.c ****   {
2322:FWLIB/src/stm32f4xx_tim.c ****     /* Set the CCPC Bit */
2323:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
2324:FWLIB/src/stm32f4xx_tim.c ****   }
2325:FWLIB/src/stm32f4xx_tim.c ****   else
2326:FWLIB/src/stm32f4xx_tim.c ****   {
2327:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the CCPC Bit */
2328:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
2329:FWLIB/src/stm32f4xx_tim.c ****   }
2330:FWLIB/src/stm32f4xx_tim.c **** }
2331:FWLIB/src/stm32f4xx_tim.c **** /**
2332:FWLIB/src/stm32f4xx_tim.c ****   * @}
2333:FWLIB/src/stm32f4xx_tim.c ****   */
2334:FWLIB/src/stm32f4xx_tim.c **** 
2335:FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group5 Interrupts DMA and flags management functions
2336:FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Interrupts, DMA and flags management functions 
2337:FWLIB/src/stm32f4xx_tim.c ****  *
2338:FWLIB/src/stm32f4xx_tim.c **** @verbatim   
2339:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2340:FWLIB/src/stm32f4xx_tim.c ****           ##### Interrupts, DMA and flags management functions #####
2341:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
2342:FWLIB/src/stm32f4xx_tim.c **** 
2343:FWLIB/src/stm32f4xx_tim.c **** @endverbatim
2344:FWLIB/src/stm32f4xx_tim.c ****   * @{
2345:FWLIB/src/stm32f4xx_tim.c ****   */
2346:FWLIB/src/stm32f4xx_tim.c **** 
2347:FWLIB/src/stm32f4xx_tim.c **** /**
2348:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the specified TIM interrupts.
2349:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIMx peripheral.
2350:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupts sources to be enabled or disabled.
2351:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2352:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2353:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2354:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2355:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2356:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2357:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2358:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2359:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2360:FWLIB/src/stm32f4xx_tim.c ****   *  
2361:FWLIB/src/stm32f4xx_tim.c ****   * @note   For TIM6 and TIM7 only the parameter TIM_IT_Update can be used
2362:FWLIB/src/stm32f4xx_tim.c ****   * @note   For TIM9 and TIM12 only one of the following parameters can be used: TIM_IT_Update,
2363:FWLIB/src/stm32f4xx_tim.c ****   *          TIM_IT_CC1, TIM_IT_CC2 or TIM_IT_Trigger. 
2364:FWLIB/src/stm32f4xx_tim.c ****   * @note   For TIM10, TIM11, TIM13 and TIM14 only one of the following parameters can
2365:FWLIB/src/stm32f4xx_tim.c ****   *          be used: TIM_IT_Update or TIM_IT_CC1   
2366:FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_IT_COM and TIM_IT_Break can be used only with TIM1 and TIM8 
2367:FWLIB/src/stm32f4xx_tim.c ****   *        
2368:FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIM interrupts.
2369:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2370:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2371:FWLIB/src/stm32f4xx_tim.c ****   */
ARM GAS  /tmp/ccgXhnD7.s 			page 43


2372:FWLIB/src/stm32f4xx_tim.c **** void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
2373:FWLIB/src/stm32f4xx_tim.c **** {  
2374:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2375:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2376:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
2377:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2378:FWLIB/src/stm32f4xx_tim.c ****   
2379:FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2380:FWLIB/src/stm32f4xx_tim.c ****   {
2381:FWLIB/src/stm32f4xx_tim.c ****     /* Enable the Interrupt sources */
2382:FWLIB/src/stm32f4xx_tim.c ****     TIMx->DIER |= TIM_IT;
2383:FWLIB/src/stm32f4xx_tim.c ****   }
2384:FWLIB/src/stm32f4xx_tim.c ****   else
2385:FWLIB/src/stm32f4xx_tim.c ****   {
2386:FWLIB/src/stm32f4xx_tim.c ****     /* Disable the Interrupt sources */
2387:FWLIB/src/stm32f4xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_IT;
2388:FWLIB/src/stm32f4xx_tim.c ****   }
2389:FWLIB/src/stm32f4xx_tim.c **** }
2390:FWLIB/src/stm32f4xx_tim.c **** 
2391:FWLIB/src/stm32f4xx_tim.c **** /**
2392:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx event to be generate by software.
2393:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2394:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_EventSource: specifies the event source.
2395:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one or more of the following values:	   
2396:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_Update: Timer update Event source
2397:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC1: Timer Capture Compare 1 Event source
2398:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC2: Timer Capture Compare 2 Event source
2399:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC3: Timer Capture Compare 3 Event source
2400:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC4: Timer Capture Compare 4 Event source
2401:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_COM: Timer COM event source  
2402:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_Trigger: Timer Trigger Event source
2403:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_Break: Timer Break event source
2404:FWLIB/src/stm32f4xx_tim.c ****   * 
2405:FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can only generate an update event. 
2406:FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
2407:FWLIB/src/stm32f4xx_tim.c ****   *        
2408:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2409:FWLIB/src/stm32f4xx_tim.c ****   */
2410:FWLIB/src/stm32f4xx_tim.c **** void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
2411:FWLIB/src/stm32f4xx_tim.c **** { 
2412:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2413:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2414:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
2415:FWLIB/src/stm32f4xx_tim.c ****  
2416:FWLIB/src/stm32f4xx_tim.c ****   /* Set the event sources */
2417:FWLIB/src/stm32f4xx_tim.c ****   TIMx->EGR = TIM_EventSource;
2418:FWLIB/src/stm32f4xx_tim.c **** }
2419:FWLIB/src/stm32f4xx_tim.c **** 
2420:FWLIB/src/stm32f4xx_tim.c **** /**
2421:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Checks whether the specified TIM flag is set or not.
2422:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2423:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_FLAG: specifies the flag to check.
2424:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2425:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2426:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2427:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2428:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
ARM GAS  /tmp/ccgXhnD7.s 			page 44


2429:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2430:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2431:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2432:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2433:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 over capture Flag
2434:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 over capture Flag
2435:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 over capture Flag
2436:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 over capture Flag
2437:FWLIB/src/stm32f4xx_tim.c ****   *
2438:FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2439:FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
2440:FWLIB/src/stm32f4xx_tim.c ****   *
2441:FWLIB/src/stm32f4xx_tim.c ****   * @retval The new state of TIM_FLAG (SET or RESET).
2442:FWLIB/src/stm32f4xx_tim.c ****   */
2443:FWLIB/src/stm32f4xx_tim.c **** FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2444:FWLIB/src/stm32f4xx_tim.c **** { 
2445:FWLIB/src/stm32f4xx_tim.c ****   ITStatus bitstatus = RESET;  
2446:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2447:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2448:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
2449:FWLIB/src/stm32f4xx_tim.c **** 
2450:FWLIB/src/stm32f4xx_tim.c ****   
2451:FWLIB/src/stm32f4xx_tim.c ****   if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
2452:FWLIB/src/stm32f4xx_tim.c ****   {
2453:FWLIB/src/stm32f4xx_tim.c ****     bitstatus = SET;
2454:FWLIB/src/stm32f4xx_tim.c ****   }
2455:FWLIB/src/stm32f4xx_tim.c ****   else
2456:FWLIB/src/stm32f4xx_tim.c ****   {
2457:FWLIB/src/stm32f4xx_tim.c ****     bitstatus = RESET;
2458:FWLIB/src/stm32f4xx_tim.c ****   }
2459:FWLIB/src/stm32f4xx_tim.c ****   return bitstatus;
2460:FWLIB/src/stm32f4xx_tim.c **** }
2461:FWLIB/src/stm32f4xx_tim.c **** 
2462:FWLIB/src/stm32f4xx_tim.c **** /**
2463:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears the TIMx's pending flags.
2464:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2465:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_FLAG: specifies the flag bit to clear.
2466:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2467:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2468:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2469:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2470:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2471:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2472:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2473:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2474:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2475:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 over capture Flag
2476:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 over capture Flag
2477:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 over capture Flag
2478:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 over capture Flag
2479:FWLIB/src/stm32f4xx_tim.c ****   *
2480:FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2481:FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
2482:FWLIB/src/stm32f4xx_tim.c ****   *    
2483:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2484:FWLIB/src/stm32f4xx_tim.c ****   */
2485:FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
ARM GAS  /tmp/ccgXhnD7.s 			page 45


2486:FWLIB/src/stm32f4xx_tim.c **** {  
2487:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2488:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2489:FWLIB/src/stm32f4xx_tim.c ****    
2490:FWLIB/src/stm32f4xx_tim.c ****   /* Clear the flags */
2491:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_FLAG;
2492:FWLIB/src/stm32f4xx_tim.c **** }
2493:FWLIB/src/stm32f4xx_tim.c **** 
2494:FWLIB/src/stm32f4xx_tim.c **** /**
2495:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Checks whether the TIM interrupt has occurred or not.
2496:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2497:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupt source to check.
2498:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2499:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2500:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2501:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2502:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2503:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2504:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2505:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2506:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2507:FWLIB/src/stm32f4xx_tim.c ****   *
2508:FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2509:FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
2510:FWLIB/src/stm32f4xx_tim.c ****   *     
2511:FWLIB/src/stm32f4xx_tim.c ****   * @retval The new state of the TIM_IT(SET or RESET).
2512:FWLIB/src/stm32f4xx_tim.c ****   */
2513:FWLIB/src/stm32f4xx_tim.c **** ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2514:FWLIB/src/stm32f4xx_tim.c **** {
2515:FWLIB/src/stm32f4xx_tim.c ****   ITStatus bitstatus = RESET;  
2516:FWLIB/src/stm32f4xx_tim.c ****   uint16_t itstatus = 0x0, itenable = 0x0;
2517:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2518:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2519:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_GET_IT(TIM_IT));
2520:FWLIB/src/stm32f4xx_tim.c ****    
2521:FWLIB/src/stm32f4xx_tim.c ****   itstatus = TIMx->SR & TIM_IT;
2522:FWLIB/src/stm32f4xx_tim.c ****   
2523:FWLIB/src/stm32f4xx_tim.c ****   itenable = TIMx->DIER & TIM_IT;
2524:FWLIB/src/stm32f4xx_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
2525:FWLIB/src/stm32f4xx_tim.c ****   {
2526:FWLIB/src/stm32f4xx_tim.c ****     bitstatus = SET;
2527:FWLIB/src/stm32f4xx_tim.c ****   }
2528:FWLIB/src/stm32f4xx_tim.c ****   else
2529:FWLIB/src/stm32f4xx_tim.c ****   {
2530:FWLIB/src/stm32f4xx_tim.c ****     bitstatus = RESET;
2531:FWLIB/src/stm32f4xx_tim.c ****   }
2532:FWLIB/src/stm32f4xx_tim.c ****   return bitstatus;
2533:FWLIB/src/stm32f4xx_tim.c **** }
2534:FWLIB/src/stm32f4xx_tim.c **** 
2535:FWLIB/src/stm32f4xx_tim.c **** /**
2536:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears the TIMx's interrupt pending bits.
2537:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2538:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_IT: specifies the pending bit to clear.
2539:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2540:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Update: TIM1 update Interrupt source
2541:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2542:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
ARM GAS  /tmp/ccgXhnD7.s 			page 46


2543:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2544:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2545:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2546:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2547:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2548:FWLIB/src/stm32f4xx_tim.c ****   *
2549:FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2550:FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
2551:FWLIB/src/stm32f4xx_tim.c ****   *      
2552:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2553:FWLIB/src/stm32f4xx_tim.c ****   */
2554:FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2555:FWLIB/src/stm32f4xx_tim.c **** {
2556:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2557:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2558:FWLIB/src/stm32f4xx_tim.c **** 
2559:FWLIB/src/stm32f4xx_tim.c ****   /* Clear the IT pending Bit */
2560:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_IT;
2561:FWLIB/src/stm32f4xx_tim.c **** }
2562:FWLIB/src/stm32f4xx_tim.c **** 
2563:FWLIB/src/stm32f4xx_tim.c **** /**
2564:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx's DMA interface.
2565:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2566:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_DMABase: DMA Base address.
2567:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2568:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CR1  
2569:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CR2
2570:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_SMCR
2571:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_DIER
2572:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM1_DMABase_SR
2573:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_EGR
2574:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCMR1
2575:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCMR2
2576:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCER
2577:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CNT   
2578:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_PSC   
2579:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_ARR
2580:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_RCR
2581:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR1
2582:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR2
2583:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR3  
2584:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR4
2585:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_BDTR
2586:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_DCR
2587:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
2588:FWLIB/src/stm32f4xx_tim.c ****   *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
2589:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2590:FWLIB/src/stm32f4xx_tim.c ****   */
2591:FWLIB/src/stm32f4xx_tim.c **** void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
2592:FWLIB/src/stm32f4xx_tim.c **** {
2593:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2594:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2595:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
2596:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
2597:FWLIB/src/stm32f4xx_tim.c **** 
2598:FWLIB/src/stm32f4xx_tim.c ****   /* Set the DMA Base and the DMA Burst Length */
2599:FWLIB/src/stm32f4xx_tim.c ****   TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
ARM GAS  /tmp/ccgXhnD7.s 			page 47


2600:FWLIB/src/stm32f4xx_tim.c **** }
2601:FWLIB/src/stm32f4xx_tim.c **** 
2602:FWLIB/src/stm32f4xx_tim.c **** /**
2603:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx's DMA Requests.
2604:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the TIM peripheral.
2605:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_DMASource: specifies the DMA Request sources.
2606:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2607:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_Update: TIM update Interrupt source
2608:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
2609:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
2610:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
2611:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
2612:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_COM: TIM Commutation DMA source
2613:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_Trigger: TIM Trigger DMA source
2614:FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the DMA Request sources.
2615:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2616:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2617:FWLIB/src/stm32f4xx_tim.c ****   */
2618:FWLIB/src/stm32f4xx_tim.c **** void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
2619:FWLIB/src/stm32f4xx_tim.c **** { 
2620:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2621:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
2622:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
2623:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2624:FWLIB/src/stm32f4xx_tim.c ****   
2625:FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2626:FWLIB/src/stm32f4xx_tim.c ****   {
2627:FWLIB/src/stm32f4xx_tim.c ****     /* Enable the DMA sources */
2628:FWLIB/src/stm32f4xx_tim.c ****     TIMx->DIER |= TIM_DMASource; 
2629:FWLIB/src/stm32f4xx_tim.c ****   }
2630:FWLIB/src/stm32f4xx_tim.c ****   else
2631:FWLIB/src/stm32f4xx_tim.c ****   {
2632:FWLIB/src/stm32f4xx_tim.c ****     /* Disable the DMA sources */
2633:FWLIB/src/stm32f4xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_DMASource;
2634:FWLIB/src/stm32f4xx_tim.c ****   }
2635:FWLIB/src/stm32f4xx_tim.c **** }
2636:FWLIB/src/stm32f4xx_tim.c **** 
2637:FWLIB/src/stm32f4xx_tim.c **** /**
2638:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx peripheral Capture Compare DMA source.
2639:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2640:FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the Capture Compare DMA source
2641:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2642:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2643:FWLIB/src/stm32f4xx_tim.c ****   */
2644:FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
2645:FWLIB/src/stm32f4xx_tim.c **** {
2646:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2647:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2648:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2649:FWLIB/src/stm32f4xx_tim.c **** 
2650:FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2651:FWLIB/src/stm32f4xx_tim.c ****   {
2652:FWLIB/src/stm32f4xx_tim.c ****     /* Set the CCDS Bit */
2653:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
2654:FWLIB/src/stm32f4xx_tim.c ****   }
2655:FWLIB/src/stm32f4xx_tim.c ****   else
2656:FWLIB/src/stm32f4xx_tim.c ****   {
ARM GAS  /tmp/ccgXhnD7.s 			page 48


2657:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the CCDS Bit */
2658:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
2659:FWLIB/src/stm32f4xx_tim.c ****   }
2660:FWLIB/src/stm32f4xx_tim.c **** }
2661:FWLIB/src/stm32f4xx_tim.c **** /**
2662:FWLIB/src/stm32f4xx_tim.c ****   * @}
2663:FWLIB/src/stm32f4xx_tim.c ****   */
2664:FWLIB/src/stm32f4xx_tim.c **** 
2665:FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group6 Clocks management functions
2666:FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Clocks management functions
2667:FWLIB/src/stm32f4xx_tim.c ****  *
2668:FWLIB/src/stm32f4xx_tim.c **** @verbatim   
2669:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2670:FWLIB/src/stm32f4xx_tim.c ****                   ##### Clocks management functions #####
2671:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
2672:FWLIB/src/stm32f4xx_tim.c **** 
2673:FWLIB/src/stm32f4xx_tim.c **** @endverbatim
2674:FWLIB/src/stm32f4xx_tim.c ****   * @{
2675:FWLIB/src/stm32f4xx_tim.c ****   */
2676:FWLIB/src/stm32f4xx_tim.c **** 
2677:FWLIB/src/stm32f4xx_tim.c **** /**
2678:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx internal Clock
2679:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2680:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
2681:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2682:FWLIB/src/stm32f4xx_tim.c ****   */
2683:FWLIB/src/stm32f4xx_tim.c **** void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
2684:FWLIB/src/stm32f4xx_tim.c **** {
2685:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2686:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2687:FWLIB/src/stm32f4xx_tim.c **** 
2688:FWLIB/src/stm32f4xx_tim.c ****   /* Disable slave mode to clock the prescaler directly with the internal clock */
2689:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
2690:FWLIB/src/stm32f4xx_tim.c **** }
2691:FWLIB/src/stm32f4xx_tim.c **** 
2692:FWLIB/src/stm32f4xx_tim.c **** /**
2693:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Internal Trigger as External Clock
2694:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2695:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
2696:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_InputTriggerSource: Trigger source.
2697:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2698:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR0: Internal Trigger 0
2699:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR1: Internal Trigger 1
2700:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR2: Internal Trigger 2
2701:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR3: Internal Trigger 3
2702:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2703:FWLIB/src/stm32f4xx_tim.c ****   */
2704:FWLIB/src/stm32f4xx_tim.c **** void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2705:FWLIB/src/stm32f4xx_tim.c **** {
2706:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2707:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2708:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
2709:FWLIB/src/stm32f4xx_tim.c **** 
2710:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Internal Trigger */
2711:FWLIB/src/stm32f4xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
2712:FWLIB/src/stm32f4xx_tim.c **** 
2713:FWLIB/src/stm32f4xx_tim.c ****   /* Select the External clock mode1 */
ARM GAS  /tmp/ccgXhnD7.s 			page 49


2714:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
2715:FWLIB/src/stm32f4xx_tim.c **** }
2716:FWLIB/src/stm32f4xx_tim.c **** 
2717:FWLIB/src/stm32f4xx_tim.c **** /**
2718:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Trigger as External Clock
2719:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14  
2720:FWLIB/src/stm32f4xx_tim.c ****   *         to select the TIM peripheral.
2721:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_TIxExternalCLKSource: Trigger source.
2722:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2723:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1ED: TI1 Edge Detector
2724:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1: Filtered Timer Input 1
2725:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI2: Filtered Timer Input 2
2726:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity: specifies the TIx Polarity.
2727:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2728:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
2729:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
2730:FWLIB/src/stm32f4xx_tim.c ****   * @param  ICFilter: specifies the filter value.
2731:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x0 and 0xF.
2732:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2733:FWLIB/src/stm32f4xx_tim.c ****   */
2734:FWLIB/src/stm32f4xx_tim.c **** void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
2735:FWLIB/src/stm32f4xx_tim.c ****                                 uint16_t TIM_ICPolarity, uint16_t ICFilter)
2736:FWLIB/src/stm32f4xx_tim.c **** {
2737:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2738:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
2739:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
2740:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(ICFilter));
2741:FWLIB/src/stm32f4xx_tim.c **** 
2742:FWLIB/src/stm32f4xx_tim.c ****   /* Configure the Timer Input Clock Source */
2743:FWLIB/src/stm32f4xx_tim.c ****   if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
2744:FWLIB/src/stm32f4xx_tim.c ****   {
2745:FWLIB/src/stm32f4xx_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
2746:FWLIB/src/stm32f4xx_tim.c ****   }
2747:FWLIB/src/stm32f4xx_tim.c ****   else
2748:FWLIB/src/stm32f4xx_tim.c ****   {
2749:FWLIB/src/stm32f4xx_tim.c ****     TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
2750:FWLIB/src/stm32f4xx_tim.c ****   }
2751:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Trigger source */
2752:FWLIB/src/stm32f4xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
2753:FWLIB/src/stm32f4xx_tim.c ****   /* Select the External clock mode1 */
2754:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
2755:FWLIB/src/stm32f4xx_tim.c **** }
2756:FWLIB/src/stm32f4xx_tim.c **** 
2757:FWLIB/src/stm32f4xx_tim.c **** /**
2758:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the External clock Mode1
2759:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2760:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2761:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2762:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2763:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2764:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2765:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2766:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2767:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2768:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
2769:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2770:FWLIB/src/stm32f4xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
ARM GAS  /tmp/ccgXhnD7.s 			page 50


2771:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2772:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2773:FWLIB/src/stm32f4xx_tim.c ****   */
2774:FWLIB/src/stm32f4xx_tim.c **** void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
2775:FWLIB/src/stm32f4xx_tim.c ****                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
2776:FWLIB/src/stm32f4xx_tim.c **** {
2777:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
2778:FWLIB/src/stm32f4xx_tim.c **** 
2779:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2780:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2781:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2782:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
2783:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2784:FWLIB/src/stm32f4xx_tim.c ****   /* Configure the ETR Clock source */
2785:FWLIB/src/stm32f4xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
2786:FWLIB/src/stm32f4xx_tim.c ****   
2787:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx SMCR register value */
2788:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
2789:FWLIB/src/stm32f4xx_tim.c **** 
2790:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the SMS Bits */
2791:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
2792:FWLIB/src/stm32f4xx_tim.c **** 
2793:FWLIB/src/stm32f4xx_tim.c ****   /* Select the External clock mode1 */
2794:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_SlaveMode_External1;
2795:FWLIB/src/stm32f4xx_tim.c **** 
2796:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Trigger selection : ETRF */
2797:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
2798:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_TS_ETRF;
2799:FWLIB/src/stm32f4xx_tim.c **** 
2800:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
2801:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
2802:FWLIB/src/stm32f4xx_tim.c **** }
2803:FWLIB/src/stm32f4xx_tim.c **** 
2804:FWLIB/src/stm32f4xx_tim.c **** /**
2805:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the External clock Mode2
2806:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2807:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2808:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2809:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2810:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2811:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2812:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2813:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2814:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2815:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
2816:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2817:FWLIB/src/stm32f4xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
2818:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2819:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2820:FWLIB/src/stm32f4xx_tim.c ****   */
2821:FWLIB/src/stm32f4xx_tim.c **** void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
2822:FWLIB/src/stm32f4xx_tim.c ****                              uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
2823:FWLIB/src/stm32f4xx_tim.c **** {
2824:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2825:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2826:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2827:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
ARM GAS  /tmp/ccgXhnD7.s 			page 51


2828:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2829:FWLIB/src/stm32f4xx_tim.c **** 
2830:FWLIB/src/stm32f4xx_tim.c ****   /* Configure the ETR Clock source */
2831:FWLIB/src/stm32f4xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
2832:FWLIB/src/stm32f4xx_tim.c **** 
2833:FWLIB/src/stm32f4xx_tim.c ****   /* Enable the External clock mode2 */
2834:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SMCR_ECE;
2835:FWLIB/src/stm32f4xx_tim.c **** }
2836:FWLIB/src/stm32f4xx_tim.c **** /**
2837:FWLIB/src/stm32f4xx_tim.c ****   * @}
2838:FWLIB/src/stm32f4xx_tim.c ****   */
2839:FWLIB/src/stm32f4xx_tim.c **** 
2840:FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group7 Synchronization management functions
2841:FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Synchronization management functions 
2842:FWLIB/src/stm32f4xx_tim.c ****  *
2843:FWLIB/src/stm32f4xx_tim.c **** @verbatim   
2844:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2845:FWLIB/src/stm32f4xx_tim.c ****                 ##### Synchronization management functions #####
2846:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
2847:FWLIB/src/stm32f4xx_tim.c ****                          
2848:FWLIB/src/stm32f4xx_tim.c ****           ##### TIM Driver: how to use it in synchronization Mode #####
2849:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2850:FWLIB/src/stm32f4xx_tim.c ****     [..] 
2851:FWLIB/src/stm32f4xx_tim.c ****     
2852:FWLIB/src/stm32f4xx_tim.c ****     *** Case of two/several Timers ***
2853:FWLIB/src/stm32f4xx_tim.c ****     ==================================
2854:FWLIB/src/stm32f4xx_tim.c ****     [..]
2855:FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the Master Timers using the following functions:
2856:FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource); 
2857:FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode);  
2858:FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the Slave Timers using the following functions: 
2859:FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);  
2860:FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode); 
2861:FWLIB/src/stm32f4xx_tim.c ****           
2862:FWLIB/src/stm32f4xx_tim.c ****     *** Case of Timers and external trigger(ETR pin) ***
2863:FWLIB/src/stm32f4xx_tim.c ****     ====================================================
2864:FWLIB/src/stm32f4xx_tim.c ****     [..]           
2865:FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the External trigger using this function:
2866:FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTR
2867:FWLIB/src/stm32f4xx_tim.c ****                                uint16_t ExtTRGFilter);
2868:FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the Slave Timers using the following functions: 
2869:FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);  
2870:FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode); 
2871:FWLIB/src/stm32f4xx_tim.c **** 
2872:FWLIB/src/stm32f4xx_tim.c **** @endverbatim
2873:FWLIB/src/stm32f4xx_tim.c ****   * @{
2874:FWLIB/src/stm32f4xx_tim.c ****   */
2875:FWLIB/src/stm32f4xx_tim.c **** 
2876:FWLIB/src/stm32f4xx_tim.c **** /**
2877:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the Input Trigger source
2878:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14  
2879:FWLIB/src/stm32f4xx_tim.c ****   *         to select the TIM peripheral.
2880:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_InputTriggerSource: The Input Trigger source.
2881:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2882:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR0: Internal Trigger 0
2883:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR1: Internal Trigger 1
2884:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR2: Internal Trigger 2
ARM GAS  /tmp/ccgXhnD7.s 			page 52


2885:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR3: Internal Trigger 3
2886:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_TI1F_ED: TI1 Edge Detector
2887:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
2888:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
2889:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ETRF: External Trigger input
2890:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2891:FWLIB/src/stm32f4xx_tim.c ****   */
2892:FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2893:FWLIB/src/stm32f4xx_tim.c **** {
2894:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
2895:FWLIB/src/stm32f4xx_tim.c **** 
2896:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2897:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
2898:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
2899:FWLIB/src/stm32f4xx_tim.c **** 
2900:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx SMCR register value */
2901:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
2902:FWLIB/src/stm32f4xx_tim.c **** 
2903:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the TS Bits */
2904:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
2905:FWLIB/src/stm32f4xx_tim.c **** 
2906:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Input Trigger source */
2907:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
2908:FWLIB/src/stm32f4xx_tim.c **** 
2909:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
2910:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
2911:FWLIB/src/stm32f4xx_tim.c **** }
2912:FWLIB/src/stm32f4xx_tim.c **** 
2913:FWLIB/src/stm32f4xx_tim.c **** /**
2914:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx Trigger Output Mode.
2915:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the TIM peripheral.
2916:FWLIB/src/stm32f4xx_tim.c ****   *     
2917:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_TRGOSource: specifies the Trigger Output source.
2918:FWLIB/src/stm32f4xx_tim.c ****   *   This parameter can be one of the following values:
2919:FWLIB/src/stm32f4xx_tim.c ****   *
2920:FWLIB/src/stm32f4xx_tim.c ****   *  - For all TIMx
2921:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_Reset:  The UG bit in the TIM_EGR register is used as the trigge
2922:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_Enable: The Counter Enable CEN is used as the trigger output(TRG
2923:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_Update: The update event is selected as the trigger output(TRGO)
2924:FWLIB/src/stm32f4xx_tim.c ****   *
2925:FWLIB/src/stm32f4xx_tim.c ****   *  - For all TIMx except TIM6 and TIM7
2926:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC1: The trigger output sends a positive pulse when the CC1IF fl
2927:FWLIB/src/stm32f4xx_tim.c ****   *                                     is to be set, as soon as a capture or compare match occurs(
2928:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC1Ref: OC1REF signal is used as the trigger output(TRGO)
2929:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC2Ref: OC2REF signal is used as the trigger output(TRGO)
2930:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC3Ref: OC3REF signal is used as the trigger output(TRGO)
2931:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
2932:FWLIB/src/stm32f4xx_tim.c ****   *
2933:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2934:FWLIB/src/stm32f4xx_tim.c ****   */
2935:FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
2936:FWLIB/src/stm32f4xx_tim.c **** {
2937:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2938:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx));
2939:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
2940:FWLIB/src/stm32f4xx_tim.c **** 
2941:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the MMS Bits */
ARM GAS  /tmp/ccgXhnD7.s 			page 53


2942:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
2943:FWLIB/src/stm32f4xx_tim.c ****   /* Select the TRGO source */
2944:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 |=  TIM_TRGOSource;
2945:FWLIB/src/stm32f4xx_tim.c **** }
2946:FWLIB/src/stm32f4xx_tim.c **** 
2947:FWLIB/src/stm32f4xx_tim.c **** /**
2948:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx Slave Mode.
2949:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM peripheral.
2950:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_SlaveMode: specifies the Timer Slave Mode.
2951:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2952:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_Reset: Rising edge of the selected trigger signal(TRGI) reinitial
2953:FWLIB/src/stm32f4xx_tim.c ****   *                                      the counter and triggers an update of the registers
2954:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_Gated:     The counter clock is enabled when the trigger signal (
2955:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRG
2956:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the 
2957:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2958:FWLIB/src/stm32f4xx_tim.c ****   */
2959:FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
2960:FWLIB/src/stm32f4xx_tim.c **** {
2961:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2962:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2963:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
2964:FWLIB/src/stm32f4xx_tim.c **** 
2965:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the SMS Bits */
2966:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
2967:FWLIB/src/stm32f4xx_tim.c **** 
2968:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Slave Mode */
2969:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode;
2970:FWLIB/src/stm32f4xx_tim.c **** }
2971:FWLIB/src/stm32f4xx_tim.c **** 
2972:FWLIB/src/stm32f4xx_tim.c **** /**
2973:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets or Resets the TIMx Master/Slave Mode.
2974:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM peripheral.
2975:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_MasterSlaveMode: specifies the Timer Master Slave Mode.
2976:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2977:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Enable: synchronization between the current timer
2978:FWLIB/src/stm32f4xx_tim.c ****   *                                             and its slaves (through TRGO)
2979:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Disable: No action
2980:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2981:FWLIB/src/stm32f4xx_tim.c ****   */
2982:FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
2983:FWLIB/src/stm32f4xx_tim.c **** {
2984:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2985:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2986:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
2987:FWLIB/src/stm32f4xx_tim.c **** 
2988:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the MSM Bit */
2989:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
2990:FWLIB/src/stm32f4xx_tim.c ****   
2991:FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the MSM Bit */
2992:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_MasterSlaveMode;
2993:FWLIB/src/stm32f4xx_tim.c **** }
2994:FWLIB/src/stm32f4xx_tim.c **** 
2995:FWLIB/src/stm32f4xx_tim.c **** /**
2996:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx External Trigger (ETR).
2997:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2998:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
ARM GAS  /tmp/ccgXhnD7.s 			page 54


2999:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3000:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
3001:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
3002:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
3003:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
3004:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
3005:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3006:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
3007:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
3008:FWLIB/src/stm32f4xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
3009:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
3010:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3011:FWLIB/src/stm32f4xx_tim.c ****   */
3012:FWLIB/src/stm32f4xx_tim.c **** void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
3013:FWLIB/src/stm32f4xx_tim.c ****                    uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
3014:FWLIB/src/stm32f4xx_tim.c **** {
3015:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
3016:FWLIB/src/stm32f4xx_tim.c **** 
3017:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
3018:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3019:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
3020:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
3021:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
3022:FWLIB/src/stm32f4xx_tim.c **** 
3023:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
3024:FWLIB/src/stm32f4xx_tim.c **** 
3025:FWLIB/src/stm32f4xx_tim.c ****   /* Reset the ETR Bits */
3026:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr &= SMCR_ETR_MASK;
3027:FWLIB/src/stm32f4xx_tim.c **** 
3028:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Prescaler, the Filter value and the Polarity */
3029:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
3030:FWLIB/src/stm32f4xx_tim.c **** 
3031:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
3032:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
3033:FWLIB/src/stm32f4xx_tim.c **** }
3034:FWLIB/src/stm32f4xx_tim.c **** /**
3035:FWLIB/src/stm32f4xx_tim.c ****   * @}
3036:FWLIB/src/stm32f4xx_tim.c ****   */
3037:FWLIB/src/stm32f4xx_tim.c **** 
3038:FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group8 Specific interface management functions
3039:FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Specific interface management functions 
3040:FWLIB/src/stm32f4xx_tim.c ****  *
3041:FWLIB/src/stm32f4xx_tim.c **** @verbatim   
3042:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
3043:FWLIB/src/stm32f4xx_tim.c ****             ##### Specific interface management functions #####
3044:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
3045:FWLIB/src/stm32f4xx_tim.c **** 
3046:FWLIB/src/stm32f4xx_tim.c **** @endverbatim
3047:FWLIB/src/stm32f4xx_tim.c ****   * @{
3048:FWLIB/src/stm32f4xx_tim.c ****   */
3049:FWLIB/src/stm32f4xx_tim.c **** 
3050:FWLIB/src/stm32f4xx_tim.c **** /**
3051:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Encoder Interface.
3052:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
3053:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
3054:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_EncoderMode: specifies the TIMx Encoder Mode.
3055:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccgXhnD7.s 			page 55


3056:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EncoderMode_TI1: Counter counts on TI1FP1 edge depending on TI2FP2 level.
3057:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EncoderMode_TI2: Counter counts on TI2FP2 edge depending on TI1FP1 level.
3058:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EncoderMode_TI12: Counter counts on both TI1FP1 and TI2FP2 edges depending
3059:FWLIB/src/stm32f4xx_tim.c ****   *                                       on the level of the other input.
3060:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_IC1Polarity: specifies the IC1 Polarity
3061:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3062:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3063:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3064:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_IC2Polarity: specifies the IC2 Polarity
3065:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3066:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3067:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3068:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3069:FWLIB/src/stm32f4xx_tim.c ****   */
3070:FWLIB/src/stm32f4xx_tim.c **** void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
3071:FWLIB/src/stm32f4xx_tim.c ****                                 uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
3072:FWLIB/src/stm32f4xx_tim.c **** {
3073:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
3074:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
3075:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
3076:FWLIB/src/stm32f4xx_tim.c ****     
3077:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
3078:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
3079:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
3080:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
3081:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
3082:FWLIB/src/stm32f4xx_tim.c **** 
3083:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx SMCR register value */
3084:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
3085:FWLIB/src/stm32f4xx_tim.c **** 
3086:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
3087:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
3088:FWLIB/src/stm32f4xx_tim.c **** 
3089:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
3090:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
3091:FWLIB/src/stm32f4xx_tim.c **** 
3092:FWLIB/src/stm32f4xx_tim.c ****   /* Set the encoder Mode */
3093:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
3094:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_EncoderMode;
3095:FWLIB/src/stm32f4xx_tim.c **** 
3096:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Capture Compare 1 and the Capture Compare 2 as input */
3097:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
3098:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
3099:FWLIB/src/stm32f4xx_tim.c **** 
3100:FWLIB/src/stm32f4xx_tim.c ****   /* Set the TI1 and the TI2 Polarities */
3101:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
3102:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
3103:FWLIB/src/stm32f4xx_tim.c **** 
3104:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
3105:FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
3106:FWLIB/src/stm32f4xx_tim.c **** 
3107:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
3108:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
3109:FWLIB/src/stm32f4xx_tim.c **** 
3110:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
3111:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
3112:FWLIB/src/stm32f4xx_tim.c **** }
ARM GAS  /tmp/ccgXhnD7.s 			page 56


3113:FWLIB/src/stm32f4xx_tim.c **** 
3114:FWLIB/src/stm32f4xx_tim.c **** /**
3115:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx's Hall sensor interface.
3116:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
3117:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
3118:FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx Hall sensor interface.
3119:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
3120:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3121:FWLIB/src/stm32f4xx_tim.c ****   */
3122:FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
3123:FWLIB/src/stm32f4xx_tim.c **** {
3124:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
3125:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
3126:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
3127:FWLIB/src/stm32f4xx_tim.c **** 
3128:FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
3129:FWLIB/src/stm32f4xx_tim.c ****   {
3130:FWLIB/src/stm32f4xx_tim.c ****     /* Set the TI1S Bit */
3131:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
3132:FWLIB/src/stm32f4xx_tim.c ****   }
3133:FWLIB/src/stm32f4xx_tim.c ****   else
3134:FWLIB/src/stm32f4xx_tim.c ****   {
3135:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the TI1S Bit */
3136:FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
3137:FWLIB/src/stm32f4xx_tim.c ****   }
3138:FWLIB/src/stm32f4xx_tim.c **** }
3139:FWLIB/src/stm32f4xx_tim.c **** /**
3140:FWLIB/src/stm32f4xx_tim.c ****   * @}
3141:FWLIB/src/stm32f4xx_tim.c ****   */
3142:FWLIB/src/stm32f4xx_tim.c **** 
3143:FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group9 Specific remapping management function
3144:FWLIB/src/stm32f4xx_tim.c ****  *  @brief   Specific remapping management function
3145:FWLIB/src/stm32f4xx_tim.c ****  *
3146:FWLIB/src/stm32f4xx_tim.c **** @verbatim   
3147:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
3148:FWLIB/src/stm32f4xx_tim.c ****               ##### Specific remapping management function #####
3149:FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
3150:FWLIB/src/stm32f4xx_tim.c **** 
3151:FWLIB/src/stm32f4xx_tim.c **** @endverbatim
3152:FWLIB/src/stm32f4xx_tim.c ****   * @{
3153:FWLIB/src/stm32f4xx_tim.c ****   */
3154:FWLIB/src/stm32f4xx_tim.c **** 
3155:FWLIB/src/stm32f4xx_tim.c **** /**
3156:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIM2, TIM5 and TIM11 Remapping input capabilities.
3157:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 2, 5 or 11 to select the TIM peripheral.
3158:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_Remap: specifies the TIM input remapping source.
3159:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3160:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM2_TIM8_TRGO: TIM2 ITR1 input is connected to TIM8 Trigger output(default)
3161:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM2_ETH_PTP:   TIM2 ITR1 input is connected to ETH PTP trogger output.
3162:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM2_USBFS_SOF: TIM2 ITR1 input is connected to USB FS SOF. 
3163:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM2_USBHS_SOF: TIM2 ITR1 input is connected to USB HS SOF. 
3164:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM5_GPIO:      TIM5 CH4 input is connected to dedicated Timer pin(default)
3165:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM5_LSI:       TIM5 CH4 input is connected to LSI clock.
3166:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM5_LSE:       TIM5 CH4 input is connected to LSE clock.
3167:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM5_RTC:       TIM5 CH4 input is connected to RTC Output event.
3168:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM11_GPIO:     TIM11 CH4 input is connected to dedicated Timer pin(default) 
3169:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
ARM GAS  /tmp/ccgXhnD7.s 			page 57


3170:FWLIB/src/stm32f4xx_tim.c ****   *                                 (HSE divided by a programmable prescaler)  
3171:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3172:FWLIB/src/stm32f4xx_tim.c ****   */
3173:FWLIB/src/stm32f4xx_tim.c **** void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
3174:FWLIB/src/stm32f4xx_tim.c **** {
3175:FWLIB/src/stm32f4xx_tim.c ****  /* Check the parameters */
3176:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
3177:FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_REMAP(TIM_Remap));
3178:FWLIB/src/stm32f4xx_tim.c **** 
3179:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Timer remapping configuration */
3180:FWLIB/src/stm32f4xx_tim.c ****   TIMx->OR =  TIM_Remap;
3181:FWLIB/src/stm32f4xx_tim.c **** }
3182:FWLIB/src/stm32f4xx_tim.c **** /**
3183:FWLIB/src/stm32f4xx_tim.c ****   * @}
3184:FWLIB/src/stm32f4xx_tim.c ****   */
3185:FWLIB/src/stm32f4xx_tim.c **** 
3186:FWLIB/src/stm32f4xx_tim.c **** /**
3187:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configure the TI1 as Input.
3188:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14 
3189:FWLIB/src/stm32f4xx_tim.c ****   *         to select the TIM peripheral.
3190:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3191:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3192:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3193:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3194:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge  
3195:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3196:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3197:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 1 is selected to be connected to IC1.
3198:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 1 is selected to be connected to IC2.
3199:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 1 is selected to be connected to TRC.
3200:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3201:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3202:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3203:FWLIB/src/stm32f4xx_tim.c ****   */
3204:FWLIB/src/stm32f4xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3205:FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3206:FWLIB/src/stm32f4xx_tim.c **** {
  25              		.loc 1 3206 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
  31 0000 30B4     		push	{r4, r5}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 5, -4
  36              	.LVL1:
3207:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0;
3208:FWLIB/src/stm32f4xx_tim.c **** 
3209:FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
3210:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  37              		.loc 1 3210 0
  38 0002 048C     		ldrh	r4, [r0, #32]
  39 0004 A4B2     		uxth	r4, r4
  40 0006 24F00104 		bic	r4, r4, #1
ARM GAS  /tmp/ccgXhnD7.s 			page 58


  41 000a A4B2     		uxth	r4, r4
  42 000c 0484     		strh	r4, [r0, #32]	@ movhi
3211:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
  43              		.loc 1 3211 0
  44 000e 058B     		ldrh	r5, [r0, #24]
  45 0010 ADB2     		uxth	r5, r5
  46              	.LVL2:
3212:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
  47              		.loc 1 3212 0
  48 0012 048C     		ldrh	r4, [r0, #32]
  49 0014 A4B2     		uxth	r4, r4
  50              	.LVL3:
3213:FWLIB/src/stm32f4xx_tim.c **** 
3214:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3215:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  51              		.loc 1 3215 0
  52 0016 25F0F305 		bic	r5, r5, #243
  53              	.LVL4:
3216:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  54              		.loc 1 3216 0
  55 001a 1B01     		lsls	r3, r3, #4
  56              	.LVL5:
  57 001c 9BB2     		uxth	r3, r3
  58 001e 1A43     		orrs	r2, r2, r3
  59              	.LVL6:
  60 0020 1543     		orrs	r5, r5, r2
  61              	.LVL7:
3217:FWLIB/src/stm32f4xx_tim.c **** 
3218:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC1E Bit */
3219:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  62              		.loc 1 3219 0
  63 0022 24F00A04 		bic	r4, r4, #10
  64              	.LVL8:
3220:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  65              		.loc 1 3220 0
  66 0026 0C43     		orrs	r4, r4, r1
  67              	.LVL9:
  68 0028 44F00104 		orr	r4, r4, #1
  69              	.LVL10:
3221:FWLIB/src/stm32f4xx_tim.c **** 
3222:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3223:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
  70              		.loc 1 3223 0
  71 002c 0583     		strh	r5, [r0, #24]	@ movhi
3224:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
  72              		.loc 1 3224 0
  73 002e 0484     		strh	r4, [r0, #32]	@ movhi
3225:FWLIB/src/stm32f4xx_tim.c **** }
  74              		.loc 1 3225 0
  75 0030 30BC     		pop	{r4, r5}
  76              	.LCFI1:
  77              		.cfi_restore 5
  78              		.cfi_restore 4
  79              		.cfi_def_cfa_offset 0
  80              	.LVL11:
  81 0032 7047     		bx	lr
  82              		.cfi_endproc
ARM GAS  /tmp/ccgXhnD7.s 			page 59


  83              	.LFE200:
  85              		.section	.text.TI2_Config,"ax",%progbits
  86              		.align	1
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu softvfp
  92              	TI2_Config:
  93              	.LFB201:
3226:FWLIB/src/stm32f4xx_tim.c **** 
3227:FWLIB/src/stm32f4xx_tim.c **** /**
3228:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configure the TI2 as Input.
3229:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
3230:FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
3231:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3232:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3233:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3234:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3235:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge   
3236:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3237:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3238:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 2 is selected to be connected to IC2.
3239:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 2 is selected to be connected to IC1.
3240:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 2 is selected to be connected to TRC.
3241:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3242:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3243:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3244:FWLIB/src/stm32f4xx_tim.c ****   */
3245:FWLIB/src/stm32f4xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3246:FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3247:FWLIB/src/stm32f4xx_tim.c **** {
  94              		.loc 1 3247 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99              	.LVL12:
 100 0000 30B4     		push	{r4, r5}
 101              	.LCFI2:
 102              		.cfi_def_cfa_offset 8
 103              		.cfi_offset 4, -8
 104              		.cfi_offset 5, -4
 105              	.LVL13:
3248:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
3249:FWLIB/src/stm32f4xx_tim.c **** 
3250:FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
3251:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 106              		.loc 1 3251 0
 107 0002 048C     		ldrh	r4, [r0, #32]
 108 0004 A4B2     		uxth	r4, r4
 109 0006 24F01004 		bic	r4, r4, #16
 110 000a A4B2     		uxth	r4, r4
 111 000c 0484     		strh	r4, [r0, #32]	@ movhi
3252:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 112              		.loc 1 3252 0
 113 000e 058B     		ldrh	r5, [r0, #24]
 114              	.LVL14:
ARM GAS  /tmp/ccgXhnD7.s 			page 60


3253:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 115              		.loc 1 3253 0
 116 0010 048C     		ldrh	r4, [r0, #32]
 117 0012 A4B2     		uxth	r4, r4
 118              	.LVL15:
3254:FWLIB/src/stm32f4xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 4);
 119              		.loc 1 3254 0
 120 0014 0901     		lsls	r1, r1, #4
 121              	.LVL16:
 122 0016 89B2     		uxth	r1, r1
 123              	.LVL17:
3255:FWLIB/src/stm32f4xx_tim.c **** 
3256:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3257:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 124              		.loc 1 3257 0
 125 0018 25F44075 		bic	r5, r5, #768
 126              	.LVL18:
 127 001c 2D05     		lsls	r5, r5, #20
 128 001e 2D0D     		lsrs	r5, r5, #20
 129              	.LVL19:
3258:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 130              		.loc 1 3258 0
 131 0020 1B03     		lsls	r3, r3, #12
 132              	.LVL20:
 133 0022 9BB2     		uxth	r3, r3
 134 0024 1D43     		orrs	r5, r5, r3
 135              	.LVL21:
3259:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 136              		.loc 1 3259 0
 137 0026 1202     		lsls	r2, r2, #8
 138              	.LVL22:
 139 0028 92B2     		uxth	r2, r2
 140 002a 1543     		orrs	r5, r5, r2
 141              	.LVL23:
3260:FWLIB/src/stm32f4xx_tim.c **** 
3261:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC2E Bit */
3262:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 142              		.loc 1 3262 0
 143 002c 24F0A004 		bic	r4, r4, #160
 144              	.LVL24:
3263:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 145              		.loc 1 3263 0
 146 0030 0C43     		orrs	r4, r4, r1
 147              	.LVL25:
 148 0032 44F01004 		orr	r4, r4, #16
 149              	.LVL26:
3264:FWLIB/src/stm32f4xx_tim.c **** 
3265:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3266:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 150              		.loc 1 3266 0
 151 0036 0583     		strh	r5, [r0, #24]	@ movhi
3267:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 152              		.loc 1 3267 0
 153 0038 0484     		strh	r4, [r0, #32]	@ movhi
3268:FWLIB/src/stm32f4xx_tim.c **** }
 154              		.loc 1 3268 0
 155 003a 30BC     		pop	{r4, r5}
ARM GAS  /tmp/ccgXhnD7.s 			page 61


 156              	.LCFI3:
 157              		.cfi_restore 5
 158              		.cfi_restore 4
 159              		.cfi_def_cfa_offset 0
 160              	.LVL27:
 161 003c 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE201:
 165              		.section	.text.TI3_Config,"ax",%progbits
 166              		.align	1
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu softvfp
 172              	TI3_Config:
 173              	.LFB202:
3269:FWLIB/src/stm32f4xx_tim.c **** 
3270:FWLIB/src/stm32f4xx_tim.c **** /**
3271:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configure the TI3 as Input.
3272:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
3273:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3274:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3275:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3276:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3277:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge         
3278:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3279:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3280:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 3 is selected to be connected to IC3.
3281:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 3 is selected to be connected to IC4.
3282:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 3 is selected to be connected to TRC.
3283:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3284:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3285:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3286:FWLIB/src/stm32f4xx_tim.c ****   */
3287:FWLIB/src/stm32f4xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3288:FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3289:FWLIB/src/stm32f4xx_tim.c **** {
 174              		.loc 1 3289 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              		@ link register save eliminated.
 179              	.LVL28:
 180 0000 30B4     		push	{r4, r5}
 181              	.LCFI4:
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 4, -8
 184              		.cfi_offset 5, -4
 185              	.LVL29:
3290:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
3291:FWLIB/src/stm32f4xx_tim.c **** 
3292:FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 3: Reset the CC3E Bit */
3293:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 186              		.loc 1 3293 0
 187 0002 048C     		ldrh	r4, [r0, #32]
 188 0004 A4B2     		uxth	r4, r4
 189 0006 24F48074 		bic	r4, r4, #256
ARM GAS  /tmp/ccgXhnD7.s 			page 62


 190 000a A4B2     		uxth	r4, r4
 191 000c 0484     		strh	r4, [r0, #32]	@ movhi
3294:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 192              		.loc 1 3294 0
 193 000e 858B     		ldrh	r5, [r0, #28]
 194 0010 ADB2     		uxth	r5, r5
 195              	.LVL30:
3295:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 196              		.loc 1 3295 0
 197 0012 048C     		ldrh	r4, [r0, #32]
 198 0014 A4B2     		uxth	r4, r4
 199              	.LVL31:
3296:FWLIB/src/stm32f4xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 8);
 200              		.loc 1 3296 0
 201 0016 0902     		lsls	r1, r1, #8
 202              	.LVL32:
 203 0018 89B2     		uxth	r1, r1
 204              	.LVL33:
3297:FWLIB/src/stm32f4xx_tim.c **** 
3298:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3299:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 205              		.loc 1 3299 0
 206 001a 25F0F305 		bic	r5, r5, #243
 207              	.LVL34:
3300:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 208              		.loc 1 3300 0
 209 001e 1B01     		lsls	r3, r3, #4
 210              	.LVL35:
 211 0020 9BB2     		uxth	r3, r3
 212 0022 1A43     		orrs	r2, r2, r3
 213              	.LVL36:
 214 0024 1543     		orrs	r5, r5, r2
 215              	.LVL37:
3301:FWLIB/src/stm32f4xx_tim.c **** 
3302:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC3E Bit */
3303:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 216              		.loc 1 3303 0
 217 0026 24F42064 		bic	r4, r4, #2560
 218              	.LVL38:
3304:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 219              		.loc 1 3304 0
 220 002a 0C43     		orrs	r4, r4, r1
 221              	.LVL39:
 222 002c 44F48074 		orr	r4, r4, #256
 223              	.LVL40:
3305:FWLIB/src/stm32f4xx_tim.c **** 
3306:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
3307:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 224              		.loc 1 3307 0
 225 0030 8583     		strh	r5, [r0, #28]	@ movhi
3308:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 226              		.loc 1 3308 0
 227 0032 0484     		strh	r4, [r0, #32]	@ movhi
3309:FWLIB/src/stm32f4xx_tim.c **** }
 228              		.loc 1 3309 0
 229 0034 30BC     		pop	{r4, r5}
 230              	.LCFI5:
ARM GAS  /tmp/ccgXhnD7.s 			page 63


 231              		.cfi_restore 5
 232              		.cfi_restore 4
 233              		.cfi_def_cfa_offset 0
 234              	.LVL41:
 235 0036 7047     		bx	lr
 236              		.cfi_endproc
 237              	.LFE202:
 239              		.section	.text.TI4_Config,"ax",%progbits
 240              		.align	1
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
 244              		.fpu softvfp
 246              	TI4_Config:
 247              	.LFB203:
3310:FWLIB/src/stm32f4xx_tim.c **** 
3311:FWLIB/src/stm32f4xx_tim.c **** /**
3312:FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configure the TI4 as Input.
3313:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
3314:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3315:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3316:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3317:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3318:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge     
3319:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3320:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3321:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 4 is selected to be connected to IC4.
3322:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 4 is selected to be connected to IC3.
3323:FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 4 is selected to be connected to TRC.
3324:FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3325:FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3326:FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3327:FWLIB/src/stm32f4xx_tim.c ****   */
3328:FWLIB/src/stm32f4xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3329:FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3330:FWLIB/src/stm32f4xx_tim.c **** {
 248              		.loc 1 3330 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 253              	.LVL42:
 254 0000 30B4     		push	{r4, r5}
 255              	.LCFI6:
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 4, -8
 258              		.cfi_offset 5, -4
 259              	.LVL43:
3331:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
3332:FWLIB/src/stm32f4xx_tim.c **** 
3333:FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 4: Reset the CC4E Bit */
3334:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 260              		.loc 1 3334 0
 261 0002 048C     		ldrh	r4, [r0, #32]
 262 0004 A4B2     		uxth	r4, r4
 263 0006 24F48054 		bic	r4, r4, #4096
 264 000a A4B2     		uxth	r4, r4
ARM GAS  /tmp/ccgXhnD7.s 			page 64


 265 000c 0484     		strh	r4, [r0, #32]	@ movhi
3335:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 266              		.loc 1 3335 0
 267 000e 848B     		ldrh	r4, [r0, #28]
 268              	.LVL44:
3336:FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 269              		.loc 1 3336 0
 270 0010 058C     		ldrh	r5, [r0, #32]
 271              	.LVL45:
3337:FWLIB/src/stm32f4xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 12);
 272              		.loc 1 3337 0
 273 0012 0903     		lsls	r1, r1, #12
 274              	.LVL46:
 275 0014 89B2     		uxth	r1, r1
 276              	.LVL47:
3338:FWLIB/src/stm32f4xx_tim.c **** 
3339:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3340:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 277              		.loc 1 3340 0
 278 0016 24F44074 		bic	r4, r4, #768
 279              	.LVL48:
 280 001a 2405     		lsls	r4, r4, #20
 281 001c 240D     		lsrs	r4, r4, #20
 282              	.LVL49:
3341:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 283              		.loc 1 3341 0
 284 001e 1202     		lsls	r2, r2, #8
 285              	.LVL50:
 286 0020 92B2     		uxth	r2, r2
 287 0022 1443     		orrs	r4, r4, r2
 288              	.LVL51:
3342:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 289              		.loc 1 3342 0
 290 0024 1B03     		lsls	r3, r3, #12
 291              	.LVL52:
 292 0026 9BB2     		uxth	r3, r3
 293 0028 1C43     		orrs	r4, r4, r3
 294              	.LVL53:
3343:FWLIB/src/stm32f4xx_tim.c **** 
3344:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC4E Bit */
3345:FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 295              		.loc 1 3345 0
 296 002a 25F40055 		bic	r5, r5, #8192
 297              	.LVL54:
 298 002e 6D04     		lsls	r5, r5, #17
 299 0030 6D0C     		lsrs	r5, r5, #17
 300              	.LVL55:
3346:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 301              		.loc 1 3346 0
 302 0032 2943     		orrs	r1, r1, r5
 303              	.LVL56:
 304 0034 41F48051 		orr	r1, r1, #4096
 305              	.LVL57:
3347:FWLIB/src/stm32f4xx_tim.c **** 
3348:FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
3349:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 306              		.loc 1 3349 0
ARM GAS  /tmp/ccgXhnD7.s 			page 65


 307 0038 8483     		strh	r4, [r0, #28]	@ movhi
3350:FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer ;
 308              		.loc 1 3350 0
 309 003a 0184     		strh	r1, [r0, #32]	@ movhi
3351:FWLIB/src/stm32f4xx_tim.c **** }
 310              		.loc 1 3351 0
 311 003c 30BC     		pop	{r4, r5}
 312              	.LCFI7:
 313              		.cfi_restore 5
 314              		.cfi_restore 4
 315              		.cfi_def_cfa_offset 0
 316              	.LVL58:
 317 003e 7047     		bx	lr
 318              		.cfi_endproc
 319              	.LFE203:
 321              		.section	.text.TIM_DeInit,"ax",%progbits
 322              		.align	1
 323              		.global	TIM_DeInit
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 327              		.fpu softvfp
 329              	TIM_DeInit:
 330              	.LFB112:
 201:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 331              		.loc 1 201 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              	.LVL59:
 336 0000 08B5     		push	{r3, lr}
 337              	.LCFI8:
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 3, -8
 340              		.cfi_offset 14, -4
 205:FWLIB/src/stm32f4xx_tim.c ****   {
 341              		.loc 1 205 0
 342 0002 584B     		ldr	r3, .L39
 343 0004 9842     		cmp	r0, r3
 344 0006 27D0     		beq	.L25
 210:FWLIB/src/stm32f4xx_tim.c ****   {     
 345              		.loc 1 210 0
 346 0008 B0F1804F 		cmp	r0, #1073741824
 347 000c 2DD0     		beq	.L26
 215:FWLIB/src/stm32f4xx_tim.c ****   { 
 348              		.loc 1 215 0
 349 000e 564B     		ldr	r3, .L39+4
 350 0010 9842     		cmp	r0, r3
 351 0012 33D0     		beq	.L27
 220:FWLIB/src/stm32f4xx_tim.c ****   { 
 352              		.loc 1 220 0
 353 0014 554B     		ldr	r3, .L39+8
 354 0016 9842     		cmp	r0, r3
 355 0018 39D0     		beq	.L28
 225:FWLIB/src/stm32f4xx_tim.c ****   {      
 356              		.loc 1 225 0
 357 001a 554B     		ldr	r3, .L39+12
ARM GAS  /tmp/ccgXhnD7.s 			page 66


 358 001c 9842     		cmp	r0, r3
 359 001e 3FD0     		beq	.L29
 230:FWLIB/src/stm32f4xx_tim.c ****   {    
 360              		.loc 1 230 0
 361 0020 544B     		ldr	r3, .L39+16
 362 0022 9842     		cmp	r0, r3
 363 0024 45D0     		beq	.L30
 235:FWLIB/src/stm32f4xx_tim.c ****   {      
 364              		.loc 1 235 0
 365 0026 544B     		ldr	r3, .L39+20
 366 0028 9842     		cmp	r0, r3
 367 002a 4BD0     		beq	.L31
 240:FWLIB/src/stm32f4xx_tim.c ****   {      
 368              		.loc 1 240 0
 369 002c 534B     		ldr	r3, .L39+24
 370 002e 9842     		cmp	r0, r3
 371 0030 51D0     		beq	.L32
 245:FWLIB/src/stm32f4xx_tim.c ****   {      
 372              		.loc 1 245 0
 373 0032 534B     		ldr	r3, .L39+28
 374 0034 9842     		cmp	r0, r3
 375 0036 57D0     		beq	.L33
 250:FWLIB/src/stm32f4xx_tim.c ****   {      
 376              		.loc 1 250 0
 377 0038 524B     		ldr	r3, .L39+32
 378 003a 9842     		cmp	r0, r3
 379 003c 5FD0     		beq	.L34
 255:FWLIB/src/stm32f4xx_tim.c ****   {     
 380              		.loc 1 255 0
 381 003e 524B     		ldr	r3, .L39+36
 382 0040 9842     		cmp	r0, r3
 383 0042 67D0     		beq	.L35
 260:FWLIB/src/stm32f4xx_tim.c ****   {      
 384              		.loc 1 260 0
 385 0044 514B     		ldr	r3, .L39+40
 386 0046 9842     		cmp	r0, r3
 387 0048 6FD0     		beq	.L36
 265:FWLIB/src/stm32f4xx_tim.c ****   {       
 388              		.loc 1 265 0
 389 004a 514B     		ldr	r3, .L39+44
 390 004c 9842     		cmp	r0, r3
 391 004e 75D0     		beq	.L37
 272:FWLIB/src/stm32f4xx_tim.c ****     {     
 392              		.loc 1 272 0
 393 0050 504B     		ldr	r3, .L39+48
 394 0052 9842     		cmp	r0, r3
 395 0054 7BD0     		beq	.L38
 396              	.LVL60:
 397              	.L9:
 398 0056 08BD     		pop	{r3, pc}
 399              	.LVL61:
 400              	.L25:
 207:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 401              		.loc 1 207 0
 402 0058 0121     		movs	r1, #1
 403 005a 0846     		mov	r0, r1
 404              	.LVL62:
ARM GAS  /tmp/ccgXhnD7.s 			page 67


 405 005c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 406              	.LVL63:
 208:FWLIB/src/stm32f4xx_tim.c ****   } 
 407              		.loc 1 208 0
 408 0060 0021     		movs	r1, #0
 409 0062 0120     		movs	r0, #1
 410 0064 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 411              	.LVL64:
 412 0068 08BD     		pop	{r3, pc}
 413              	.LVL65:
 414              	.L26:
 212:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 415              		.loc 1 212 0
 416 006a 0121     		movs	r1, #1
 417 006c 0846     		mov	r0, r1
 418              	.LVL66:
 419 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 420              	.LVL67:
 213:FWLIB/src/stm32f4xx_tim.c ****   }  
 421              		.loc 1 213 0
 422 0072 0021     		movs	r1, #0
 423 0074 0120     		movs	r0, #1
 424 0076 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 425              	.LVL68:
 426 007a 08BD     		pop	{r3, pc}
 427              	.LVL69:
 428              	.L27:
 217:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 429              		.loc 1 217 0
 430 007c 0121     		movs	r1, #1
 431 007e 0220     		movs	r0, #2
 432              	.LVL70:
 433 0080 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 434              	.LVL71:
 218:FWLIB/src/stm32f4xx_tim.c ****   }  
 435              		.loc 1 218 0
 436 0084 0021     		movs	r1, #0
 437 0086 0220     		movs	r0, #2
 438 0088 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 439              	.LVL72:
 440 008c 08BD     		pop	{r3, pc}
 441              	.LVL73:
 442              	.L28:
 222:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 443              		.loc 1 222 0
 444 008e 0121     		movs	r1, #1
 445 0090 0420     		movs	r0, #4
 446              	.LVL74:
 447 0092 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 448              	.LVL75:
 223:FWLIB/src/stm32f4xx_tim.c ****   }  
 449              		.loc 1 223 0
 450 0096 0021     		movs	r1, #0
 451 0098 0420     		movs	r0, #4
 452 009a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 453              	.LVL76:
 454 009e 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccgXhnD7.s 			page 68


 455              	.LVL77:
 456              	.L29:
 227:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 457              		.loc 1 227 0
 458 00a0 0121     		movs	r1, #1
 459 00a2 0820     		movs	r0, #8
 460              	.LVL78:
 461 00a4 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 462              	.LVL79:
 228:FWLIB/src/stm32f4xx_tim.c ****   }  
 463              		.loc 1 228 0
 464 00a8 0021     		movs	r1, #0
 465 00aa 0820     		movs	r0, #8
 466 00ac FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 467              	.LVL80:
 468 00b0 08BD     		pop	{r3, pc}
 469              	.LVL81:
 470              	.L30:
 232:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 471              		.loc 1 232 0
 472 00b2 0121     		movs	r1, #1
 473 00b4 1020     		movs	r0, #16
 474              	.LVL82:
 475 00b6 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 476              	.LVL83:
 233:FWLIB/src/stm32f4xx_tim.c ****   }  
 477              		.loc 1 233 0
 478 00ba 0021     		movs	r1, #0
 479 00bc 1020     		movs	r0, #16
 480 00be FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 481              	.LVL84:
 482 00c2 08BD     		pop	{r3, pc}
 483              	.LVL85:
 484              	.L31:
 237:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 485              		.loc 1 237 0
 486 00c4 0121     		movs	r1, #1
 487 00c6 2020     		movs	r0, #32
 488              	.LVL86:
 489 00c8 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 490              	.LVL87:
 238:FWLIB/src/stm32f4xx_tim.c ****   }  
 491              		.loc 1 238 0
 492 00cc 0021     		movs	r1, #0
 493 00ce 2020     		movs	r0, #32
 494 00d0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 495              	.LVL88:
 496 00d4 08BD     		pop	{r3, pc}
 497              	.LVL89:
 498              	.L32:
 242:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 499              		.loc 1 242 0
 500 00d6 0121     		movs	r1, #1
 501 00d8 0220     		movs	r0, #2
 502              	.LVL90:
 503 00da FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 504              	.LVL91:
ARM GAS  /tmp/ccgXhnD7.s 			page 69


 243:FWLIB/src/stm32f4xx_tim.c ****   }  
 505              		.loc 1 243 0
 506 00de 0021     		movs	r1, #0
 507 00e0 0220     		movs	r0, #2
 508 00e2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 509              	.LVL92:
 510 00e6 08BD     		pop	{r3, pc}
 511              	.LVL93:
 512              	.L33:
 247:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 513              		.loc 1 247 0
 514 00e8 0121     		movs	r1, #1
 515 00ea 4FF48030 		mov	r0, #65536
 516              	.LVL94:
 517 00ee FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 518              	.LVL95:
 248:FWLIB/src/stm32f4xx_tim.c ****    }  
 519              		.loc 1 248 0
 520 00f2 0021     		movs	r1, #0
 521 00f4 4FF48030 		mov	r0, #65536
 522 00f8 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 523              	.LVL96:
 524 00fc 08BD     		pop	{r3, pc}
 525              	.LVL97:
 526              	.L34:
 252:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 527              		.loc 1 252 0
 528 00fe 0121     		movs	r1, #1
 529 0100 4FF40030 		mov	r0, #131072
 530              	.LVL98:
 531 0104 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 532              	.LVL99:
 253:FWLIB/src/stm32f4xx_tim.c ****   }  
 533              		.loc 1 253 0
 534 0108 0021     		movs	r1, #0
 535 010a 4FF40030 		mov	r0, #131072
 536 010e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 537              	.LVL100:
 538 0112 08BD     		pop	{r3, pc}
 539              	.LVL101:
 540              	.L35:
 257:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 541              		.loc 1 257 0
 542 0114 0121     		movs	r1, #1
 543 0116 4FF48020 		mov	r0, #262144
 544              	.LVL102:
 545 011a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 546              	.LVL103:
 258:FWLIB/src/stm32f4xx_tim.c ****   }  
 547              		.loc 1 258 0
 548 011e 0021     		movs	r1, #0
 549 0120 4FF48020 		mov	r0, #262144
 550 0124 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 551              	.LVL104:
 552 0128 08BD     		pop	{r3, pc}
 553              	.LVL105:
 554              	.L36:
ARM GAS  /tmp/ccgXhnD7.s 			page 70


 262:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 555              		.loc 1 262 0
 556 012a 0121     		movs	r1, #1
 557 012c 4020     		movs	r0, #64
 558              	.LVL106:
 559 012e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 560              	.LVL107:
 263:FWLIB/src/stm32f4xx_tim.c ****   }  
 561              		.loc 1 263 0
 562 0132 0021     		movs	r1, #0
 563 0134 4020     		movs	r0, #64
 564 0136 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 565              	.LVL108:
 566 013a 08BD     		pop	{r3, pc}
 567              	.LVL109:
 568              	.L37:
 267:FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 569              		.loc 1 267 0
 570 013c 0121     		movs	r1, #1
 571 013e 8020     		movs	r0, #128
 572              	.LVL110:
 573 0140 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 574              	.LVL111:
 268:FWLIB/src/stm32f4xx_tim.c ****   }  
 575              		.loc 1 268 0
 576 0144 0021     		movs	r1, #0
 577 0146 8020     		movs	r0, #128
 578 0148 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 579              	.LVL112:
 580 014c 08BD     		pop	{r3, pc}
 581              	.LVL113:
 582              	.L38:
 274:FWLIB/src/stm32f4xx_tim.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 583              		.loc 1 274 0
 584 014e 0121     		movs	r1, #1
 585 0150 4FF48070 		mov	r0, #256
 586              	.LVL114:
 587 0154 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 588              	.LVL115:
 275:FWLIB/src/stm32f4xx_tim.c ****     }   
 589              		.loc 1 275 0
 590 0158 0021     		movs	r1, #0
 591 015a 4FF48070 		mov	r0, #256
 592 015e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 593              	.LVL116:
 278:FWLIB/src/stm32f4xx_tim.c **** 
 594              		.loc 1 278 0
 595 0162 78E7     		b	.L9
 596              	.L40:
 597              		.align	2
 598              	.L39:
 599 0164 00000140 		.word	1073807360
 600 0168 00040040 		.word	1073742848
 601 016c 00080040 		.word	1073743872
 602 0170 000C0040 		.word	1073744896
 603 0174 00100040 		.word	1073745920
 604 0178 00140040 		.word	1073746944
ARM GAS  /tmp/ccgXhnD7.s 			page 71


 605 017c 00040140 		.word	1073808384
 606 0180 00400140 		.word	1073823744
 607 0184 00440140 		.word	1073824768
 608 0188 00480140 		.word	1073825792
 609 018c 00180040 		.word	1073747968
 610 0190 001C0040 		.word	1073748992
 611 0194 00200040 		.word	1073750016
 612              		.cfi_endproc
 613              	.LFE112:
 615              		.section	.text.TIM_TimeBaseInit,"ax",%progbits
 616              		.align	1
 617              		.global	TIM_TimeBaseInit
 618              		.syntax unified
 619              		.thumb
 620              		.thumb_func
 621              		.fpu softvfp
 623              	TIM_TimeBaseInit:
 624              	.LFB113:
 289:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpcr1 = 0;
 625              		.loc 1 289 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 0
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629              		@ link register save eliminated.
 630              	.LVL117:
 297:FWLIB/src/stm32f4xx_tim.c **** 
 631              		.loc 1 297 0
 632 0000 0388     		ldrh	r3, [r0]
 633 0002 9BB2     		uxth	r3, r3
 634              	.LVL118:
 299:FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM2) || (TIMx == TIM3)||
 635              		.loc 1 299 0
 636 0004 1B4A     		ldr	r2, .L47
 637 0006 9042     		cmp	r0, r2
 638 0008 12D0     		beq	.L42
 299:FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM2) || (TIMx == TIM3)||
 639              		.loc 1 299 0 is_stmt 0 discriminator 1
 640 000a 02F58062 		add	r2, r2, #1024
 641 000e 9042     		cmp	r0, r2
 642 0010 0ED0     		beq	.L42
 299:FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM2) || (TIMx == TIM3)||
 643              		.loc 1 299 0 discriminator 2
 644 0012 B0F1804F 		cmp	r0, #1073741824
 645 0016 0BD0     		beq	.L42
 300:FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM4) || (TIMx == TIM5)) 
 646              		.loc 1 300 0 is_stmt 1
 647 0018 A2F58032 		sub	r2, r2, #65536
 648 001c 9042     		cmp	r0, r2
 649 001e 07D0     		beq	.L42
 300:FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM4) || (TIMx == TIM5)) 
 650              		.loc 1 300 0 is_stmt 0 discriminator 1
 651 0020 02F58062 		add	r2, r2, #1024
 652 0024 9042     		cmp	r0, r2
 653 0026 03D0     		beq	.L42
 301:FWLIB/src/stm32f4xx_tim.c ****   {
 654              		.loc 1 301 0 is_stmt 1
 655 0028 02F58062 		add	r2, r2, #1024
ARM GAS  /tmp/ccgXhnD7.s 			page 72


 656 002c 9042     		cmp	r0, r2
 657 002e 03D1     		bne	.L43
 658              	.L42:
 304:FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 659              		.loc 1 304 0
 660 0030 23F07003 		bic	r3, r3, #112
 661              	.LVL119:
 305:FWLIB/src/stm32f4xx_tim.c ****   }
 662              		.loc 1 305 0
 663 0034 4A88     		ldrh	r2, [r1, #2]
 664 0036 1343     		orrs	r3, r3, r2
 665              	.LVL120:
 666              	.L43:
 308:FWLIB/src/stm32f4xx_tim.c ****   {
 667              		.loc 1 308 0
 668 0038 0F4A     		ldr	r2, .L47+4
 669 003a 9042     		cmp	r0, r2
 670 003c 08D0     		beq	.L44
 308:FWLIB/src/stm32f4xx_tim.c ****   {
 671              		.loc 1 308 0 is_stmt 0 discriminator 1
 672 003e 02F58062 		add	r2, r2, #1024
 673 0042 9042     		cmp	r0, r2
 674 0044 04D0     		beq	.L44
 311:FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 675              		.loc 1 311 0 is_stmt 1
 676 0046 23F44073 		bic	r3, r3, #768
 677              	.LVL121:
 678 004a 9BB2     		uxth	r3, r3
 679              	.LVL122:
 312:FWLIB/src/stm32f4xx_tim.c ****   }
 680              		.loc 1 312 0
 681 004c 0A89     		ldrh	r2, [r1, #8]
 682 004e 1343     		orrs	r3, r3, r2
 683              	.LVL123:
 684              	.L44:
 315:FWLIB/src/stm32f4xx_tim.c **** 
 685              		.loc 1 315 0
 686 0050 0380     		strh	r3, [r0]	@ movhi
 318:FWLIB/src/stm32f4xx_tim.c ****  
 687              		.loc 1 318 0
 688 0052 4B68     		ldr	r3, [r1, #4]
 689              	.LVL124:
 690 0054 C362     		str	r3, [r0, #44]
 691              	.LVL125:
 321:FWLIB/src/stm32f4xx_tim.c ****     
 692              		.loc 1 321 0
 693 0056 0B88     		ldrh	r3, [r1]
 694 0058 0385     		strh	r3, [r0, #40]	@ movhi
 323:FWLIB/src/stm32f4xx_tim.c ****   {
 695              		.loc 1 323 0
 696 005a 064B     		ldr	r3, .L47
 697 005c 9842     		cmp	r0, r3
 698 005e 06D0     		beq	.L45
 323:FWLIB/src/stm32f4xx_tim.c ****   {
 699              		.loc 1 323 0 is_stmt 0 discriminator 1
 700 0060 03F58063 		add	r3, r3, #1024
 701 0064 9842     		cmp	r0, r3
ARM GAS  /tmp/ccgXhnD7.s 			page 73


 702 0066 02D0     		beq	.L45
 703              	.L46:
 331:FWLIB/src/stm32f4xx_tim.c **** }
 704              		.loc 1 331 0 is_stmt 1
 705 0068 0123     		movs	r3, #1
 706 006a 8382     		strh	r3, [r0, #20]	@ movhi
 707 006c 7047     		bx	lr
 708              	.L45:
 326:FWLIB/src/stm32f4xx_tim.c ****   }
 709              		.loc 1 326 0
 710 006e 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 711 0070 0386     		strh	r3, [r0, #48]	@ movhi
 712 0072 F9E7     		b	.L46
 713              	.L48:
 714              		.align	2
 715              	.L47:
 716 0074 00000140 		.word	1073807360
 717 0078 00100040 		.word	1073745920
 718              		.cfi_endproc
 719              	.LFE113:
 721              		.section	.text.TIM_TimeBaseStructInit,"ax",%progbits
 722              		.align	1
 723              		.global	TIM_TimeBaseStructInit
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 727              		.fpu softvfp
 729              	TIM_TimeBaseStructInit:
 730              	.LFB114:
 341:FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 731              		.loc 1 341 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 0
 734              		@ frame_needed = 0, uses_anonymous_args = 0
 735              		@ link register save eliminated.
 736              	.LVL126:
 343:FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 737              		.loc 1 343 0
 738 0000 4FF0FF33 		mov	r3, #-1
 739 0004 4360     		str	r3, [r0, #4]
 344:FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 740              		.loc 1 344 0
 741 0006 0023     		movs	r3, #0
 742 0008 0380     		strh	r3, [r0]	@ movhi
 345:FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 743              		.loc 1 345 0
 744 000a 0381     		strh	r3, [r0, #8]	@ movhi
 346:FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 745              		.loc 1 346 0
 746 000c 4380     		strh	r3, [r0, #2]	@ movhi
 347:FWLIB/src/stm32f4xx_tim.c **** }
 747              		.loc 1 347 0
 748 000e 8372     		strb	r3, [r0, #10]
 749 0010 7047     		bx	lr
 750              		.cfi_endproc
 751              	.LFE114:
 753              		.section	.text.TIM_PrescalerConfig,"ax",%progbits
ARM GAS  /tmp/ccgXhnD7.s 			page 74


 754              		.align	1
 755              		.global	TIM_PrescalerConfig
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu softvfp
 761              	TIM_PrescalerConfig:
 762              	.LFB115:
 361:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 763              		.loc 1 361 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 768              	.LVL127:
 366:FWLIB/src/stm32f4xx_tim.c ****   /* Set or reset the UG Bit */
 769              		.loc 1 366 0
 770 0000 0185     		strh	r1, [r0, #40]	@ movhi
 368:FWLIB/src/stm32f4xx_tim.c **** }
 771              		.loc 1 368 0
 772 0002 8282     		strh	r2, [r0, #20]	@ movhi
 773 0004 7047     		bx	lr
 774              		.cfi_endproc
 775              	.LFE115:
 777              		.section	.text.TIM_CounterModeConfig,"ax",%progbits
 778              		.align	1
 779              		.global	TIM_CounterModeConfig
 780              		.syntax unified
 781              		.thumb
 782              		.thumb_func
 783              		.fpu softvfp
 785              	TIM_CounterModeConfig:
 786              	.LFB116:
 384:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpcr1 = 0;
 787              		.loc 1 384 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              		@ link register save eliminated.
 792              	.LVL128:
 391:FWLIB/src/stm32f4xx_tim.c **** 
 793              		.loc 1 391 0
 794 0000 0388     		ldrh	r3, [r0]
 795 0002 9BB2     		uxth	r3, r3
 796              	.LVL129:
 394:FWLIB/src/stm32f4xx_tim.c **** 
 797              		.loc 1 394 0
 798 0004 23F07003 		bic	r3, r3, #112
 799              	.LVL130:
 397:FWLIB/src/stm32f4xx_tim.c **** 
 800              		.loc 1 397 0
 801 0008 1943     		orrs	r1, r1, r3
 802              	.LVL131:
 400:FWLIB/src/stm32f4xx_tim.c **** }
 803              		.loc 1 400 0
 804 000a 0180     		strh	r1, [r0]	@ movhi
 805 000c 7047     		bx	lr
ARM GAS  /tmp/ccgXhnD7.s 			page 75


 806              		.cfi_endproc
 807              	.LFE116:
 809              		.section	.text.TIM_SetCounter,"ax",%progbits
 810              		.align	1
 811              		.global	TIM_SetCounter
 812              		.syntax unified
 813              		.thumb
 814              		.thumb_func
 815              		.fpu softvfp
 817              	TIM_SetCounter:
 818              	.LFB117:
 410:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 819              		.loc 1 410 0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 0
 822              		@ frame_needed = 0, uses_anonymous_args = 0
 823              		@ link register save eliminated.
 824              	.LVL132:
 415:FWLIB/src/stm32f4xx_tim.c **** }
 825              		.loc 1 415 0
 826 0000 4162     		str	r1, [r0, #36]
 827 0002 7047     		bx	lr
 828              		.cfi_endproc
 829              	.LFE117:
 831              		.section	.text.TIM_SetAutoreload,"ax",%progbits
 832              		.align	1
 833              		.global	TIM_SetAutoreload
 834              		.syntax unified
 835              		.thumb
 836              		.thumb_func
 837              		.fpu softvfp
 839              	TIM_SetAutoreload:
 840              	.LFB118:
 425:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 841              		.loc 1 425 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 0
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845              		@ link register save eliminated.
 846              	.LVL133:
 430:FWLIB/src/stm32f4xx_tim.c **** }
 847              		.loc 1 430 0
 848 0000 C162     		str	r1, [r0, #44]
 849 0002 7047     		bx	lr
 850              		.cfi_endproc
 851              	.LFE118:
 853              		.section	.text.TIM_GetCounter,"ax",%progbits
 854              		.align	1
 855              		.global	TIM_GetCounter
 856              		.syntax unified
 857              		.thumb
 858              		.thumb_func
 859              		.fpu softvfp
 861              	TIM_GetCounter:
 862              	.LFB119:
 439:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 863              		.loc 1 439 0
ARM GAS  /tmp/ccgXhnD7.s 			page 76


 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 0, uses_anonymous_args = 0
 867              		@ link register save eliminated.
 868              	.LVL134:
 444:FWLIB/src/stm32f4xx_tim.c **** }
 869              		.loc 1 444 0
 870 0000 406A     		ldr	r0, [r0, #36]
 871              	.LVL135:
 445:FWLIB/src/stm32f4xx_tim.c **** 
 872              		.loc 1 445 0
 873 0002 7047     		bx	lr
 874              		.cfi_endproc
 875              	.LFE119:
 877              		.section	.text.TIM_GetPrescaler,"ax",%progbits
 878              		.align	1
 879              		.global	TIM_GetPrescaler
 880              		.syntax unified
 881              		.thumb
 882              		.thumb_func
 883              		.fpu softvfp
 885              	TIM_GetPrescaler:
 886              	.LFB120:
 453:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 887              		.loc 1 453 0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 0
 890              		@ frame_needed = 0, uses_anonymous_args = 0
 891              		@ link register save eliminated.
 892              	.LVL136:
 458:FWLIB/src/stm32f4xx_tim.c **** }
 893              		.loc 1 458 0
 894 0000 008D     		ldrh	r0, [r0, #40]
 895              	.LVL137:
 459:FWLIB/src/stm32f4xx_tim.c **** 
 896              		.loc 1 459 0
 897 0002 80B2     		uxth	r0, r0
 898 0004 7047     		bx	lr
 899              		.cfi_endproc
 900              	.LFE120:
 902              		.section	.text.TIM_UpdateDisableConfig,"ax",%progbits
 903              		.align	1
 904              		.global	TIM_UpdateDisableConfig
 905              		.syntax unified
 906              		.thumb
 907              		.thumb_func
 908              		.fpu softvfp
 910              	TIM_UpdateDisableConfig:
 911              	.LFB121:
 469:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 912              		.loc 1 469 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 0
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 916              		@ link register save eliminated.
 917              	.LVL138:
 474:FWLIB/src/stm32f4xx_tim.c ****   {
ARM GAS  /tmp/ccgXhnD7.s 			page 77


 918              		.loc 1 474 0
 919 0000 31B9     		cbnz	r1, .L59
 482:FWLIB/src/stm32f4xx_tim.c ****   }
 920              		.loc 1 482 0
 921 0002 0388     		ldrh	r3, [r0]
 922 0004 9BB2     		uxth	r3, r3
 923 0006 23F00203 		bic	r3, r3, #2
 924 000a 9BB2     		uxth	r3, r3
 925 000c 0380     		strh	r3, [r0]	@ movhi
 926 000e 7047     		bx	lr
 927              	.L59:
 477:FWLIB/src/stm32f4xx_tim.c ****   }
 928              		.loc 1 477 0
 929 0010 0388     		ldrh	r3, [r0]
 930 0012 9BB2     		uxth	r3, r3
 931 0014 43F00203 		orr	r3, r3, #2
 932 0018 0380     		strh	r3, [r0]	@ movhi
 933 001a 7047     		bx	lr
 934              		.cfi_endproc
 935              	.LFE121:
 937              		.section	.text.TIM_UpdateRequestConfig,"ax",%progbits
 938              		.align	1
 939              		.global	TIM_UpdateRequestConfig
 940              		.syntax unified
 941              		.thumb
 942              		.thumb_func
 943              		.fpu softvfp
 945              	TIM_UpdateRequestConfig:
 946              	.LFB122:
 498:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 947              		.loc 1 498 0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 0, uses_anonymous_args = 0
 951              		@ link register save eliminated.
 952              	.LVL139:
 503:FWLIB/src/stm32f4xx_tim.c ****   {
 953              		.loc 1 503 0
 954 0000 31B9     		cbnz	r1, .L63
 511:FWLIB/src/stm32f4xx_tim.c ****   }
 955              		.loc 1 511 0
 956 0002 0388     		ldrh	r3, [r0]
 957 0004 9BB2     		uxth	r3, r3
 958 0006 23F00403 		bic	r3, r3, #4
 959 000a 9BB2     		uxth	r3, r3
 960 000c 0380     		strh	r3, [r0]	@ movhi
 961 000e 7047     		bx	lr
 962              	.L63:
 506:FWLIB/src/stm32f4xx_tim.c ****   }
 963              		.loc 1 506 0
 964 0010 0388     		ldrh	r3, [r0]
 965 0012 9BB2     		uxth	r3, r3
 966 0014 43F00403 		orr	r3, r3, #4
 967 0018 0380     		strh	r3, [r0]	@ movhi
 968 001a 7047     		bx	lr
 969              		.cfi_endproc
 970              	.LFE122:
ARM GAS  /tmp/ccgXhnD7.s 			page 78


 972              		.section	.text.TIM_ARRPreloadConfig,"ax",%progbits
 973              		.align	1
 974              		.global	TIM_ARRPreloadConfig
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 978              		.fpu softvfp
 980              	TIM_ARRPreloadConfig:
 981              	.LFB123:
 523:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 982              		.loc 1 523 0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 0
 985              		@ frame_needed = 0, uses_anonymous_args = 0
 986              		@ link register save eliminated.
 987              	.LVL140:
 528:FWLIB/src/stm32f4xx_tim.c ****   {
 988              		.loc 1 528 0
 989 0000 31B9     		cbnz	r1, .L67
 536:FWLIB/src/stm32f4xx_tim.c ****   }
 990              		.loc 1 536 0
 991 0002 0388     		ldrh	r3, [r0]
 992 0004 9BB2     		uxth	r3, r3
 993 0006 23F08003 		bic	r3, r3, #128
 994 000a 9BB2     		uxth	r3, r3
 995 000c 0380     		strh	r3, [r0]	@ movhi
 996 000e 7047     		bx	lr
 997              	.L67:
 531:FWLIB/src/stm32f4xx_tim.c ****   }
 998              		.loc 1 531 0
 999 0010 0388     		ldrh	r3, [r0]
 1000 0012 9BB2     		uxth	r3, r3
 1001 0014 43F08003 		orr	r3, r3, #128
 1002 0018 0380     		strh	r3, [r0]	@ movhi
 1003 001a 7047     		bx	lr
 1004              		.cfi_endproc
 1005              	.LFE123:
 1007              		.section	.text.TIM_SelectOnePulseMode,"ax",%progbits
 1008              		.align	1
 1009              		.global	TIM_SelectOnePulseMode
 1010              		.syntax unified
 1011              		.thumb
 1012              		.thumb_func
 1013              		.fpu softvfp
 1015              	TIM_SelectOnePulseMode:
 1016              	.LFB124:
 550:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1017              		.loc 1 550 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 1022              	.LVL141:
 556:FWLIB/src/stm32f4xx_tim.c **** 
 1023              		.loc 1 556 0
 1024 0000 0388     		ldrh	r3, [r0]
 1025 0002 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccgXhnD7.s 			page 79


 1026 0004 23F00803 		bic	r3, r3, #8
 1027 0008 9BB2     		uxth	r3, r3
 1028 000a 0380     		strh	r3, [r0]	@ movhi
 559:FWLIB/src/stm32f4xx_tim.c **** }
 1029              		.loc 1 559 0
 1030 000c 0388     		ldrh	r3, [r0]
 1031 000e 9BB2     		uxth	r3, r3
 1032 0010 1943     		orrs	r1, r1, r3
 1033              	.LVL142:
 1034 0012 0180     		strh	r1, [r0]	@ movhi
 1035 0014 7047     		bx	lr
 1036              		.cfi_endproc
 1037              	.LFE124:
 1039              		.section	.text.TIM_SetClockDivision,"ax",%progbits
 1040              		.align	1
 1041              		.global	TIM_SetClockDivision
 1042              		.syntax unified
 1043              		.thumb
 1044              		.thumb_func
 1045              		.fpu softvfp
 1047              	TIM_SetClockDivision:
 1048              	.LFB125:
 573:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1049              		.loc 1 573 0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053              		@ link register save eliminated.
 1054              	.LVL143:
 579:FWLIB/src/stm32f4xx_tim.c **** 
 1055              		.loc 1 579 0
 1056 0000 0388     		ldrh	r3, [r0]
 1057 0002 9BB2     		uxth	r3, r3
 1058 0004 23F44073 		bic	r3, r3, #768
 1059 0008 9BB2     		uxth	r3, r3
 1060 000a 0380     		strh	r3, [r0]	@ movhi
 582:FWLIB/src/stm32f4xx_tim.c **** }
 1061              		.loc 1 582 0
 1062 000c 0388     		ldrh	r3, [r0]
 1063 000e 9BB2     		uxth	r3, r3
 1064 0010 1943     		orrs	r1, r1, r3
 1065              	.LVL144:
 1066 0012 0180     		strh	r1, [r0]	@ movhi
 1067 0014 7047     		bx	lr
 1068              		.cfi_endproc
 1069              	.LFE125:
 1071              		.section	.text.TIM_Cmd,"ax",%progbits
 1072              		.align	1
 1073              		.global	TIM_Cmd
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1077              		.fpu softvfp
 1079              	TIM_Cmd:
 1080              	.LFB126:
 593:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1081              		.loc 1 593 0
ARM GAS  /tmp/ccgXhnD7.s 			page 80


 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
 1085              		@ link register save eliminated.
 1086              	.LVL145:
 598:FWLIB/src/stm32f4xx_tim.c ****   {
 1087              		.loc 1 598 0
 1088 0000 31B9     		cbnz	r1, .L73
 606:FWLIB/src/stm32f4xx_tim.c ****   }
 1089              		.loc 1 606 0
 1090 0002 0388     		ldrh	r3, [r0]
 1091 0004 9BB2     		uxth	r3, r3
 1092 0006 23F00103 		bic	r3, r3, #1
 1093 000a 9BB2     		uxth	r3, r3
 1094 000c 0380     		strh	r3, [r0]	@ movhi
 1095 000e 7047     		bx	lr
 1096              	.L73:
 601:FWLIB/src/stm32f4xx_tim.c ****   }
 1097              		.loc 1 601 0
 1098 0010 0388     		ldrh	r3, [r0]
 1099 0012 9BB2     		uxth	r3, r3
 1100 0014 43F00103 		orr	r3, r3, #1
 1101 0018 0380     		strh	r3, [r0]	@ movhi
 1102 001a 7047     		bx	lr
 1103              		.cfi_endproc
 1104              	.LFE126:
 1106              		.section	.text.TIM_OC1Init,"ax",%progbits
 1107              		.align	1
 1108              		.global	TIM_OC1Init
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1112              		.fpu softvfp
 1114              	TIM_OC1Init:
 1115              	.LFB127:
 674:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1116              		.loc 1 674 0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 0
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 1120              		@ link register save eliminated.
 1121              	.LVL146:
 1122 0000 30B4     		push	{r4, r5}
 1123              	.LCFI9:
 1124              		.cfi_def_cfa_offset 8
 1125              		.cfi_offset 4, -8
 1126              		.cfi_offset 5, -4
 1127              	.LVL147:
 684:FWLIB/src/stm32f4xx_tim.c ****   
 1128              		.loc 1 684 0
 1129 0002 038C     		ldrh	r3, [r0, #32]
 1130 0004 9BB2     		uxth	r3, r3
 1131 0006 23F00103 		bic	r3, r3, #1
 1132 000a 9BB2     		uxth	r3, r3
 1133 000c 0384     		strh	r3, [r0, #32]	@ movhi
 687:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 1134              		.loc 1 687 0
ARM GAS  /tmp/ccgXhnD7.s 			page 81


 1135 000e 038C     		ldrh	r3, [r0, #32]
 1136 0010 9BB2     		uxth	r3, r3
 1137              	.LVL148:
 689:FWLIB/src/stm32f4xx_tim.c ****   
 1138              		.loc 1 689 0
 1139 0012 8488     		ldrh	r4, [r0, #4]
 1140 0014 A4B2     		uxth	r4, r4
 1141              	.LVL149:
 692:FWLIB/src/stm32f4xx_tim.c ****     
 1142              		.loc 1 692 0
 1143 0016 028B     		ldrh	r2, [r0, #24]
 1144 0018 92B2     		uxth	r2, r2
 1145              	.LVL150:
 696:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 1146              		.loc 1 696 0
 1147 001a 22F07302 		bic	r2, r2, #115
 1148              	.LVL151:
 698:FWLIB/src/stm32f4xx_tim.c ****   
 1149              		.loc 1 698 0
 1150 001e 0D88     		ldrh	r5, [r1]
 1151 0020 2A43     		orrs	r2, r2, r5
 1152              	.LVL152:
 701:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 1153              		.loc 1 701 0
 1154 0022 23F00203 		bic	r3, r3, #2
 1155              	.LVL153:
 703:FWLIB/src/stm32f4xx_tim.c ****   
 1156              		.loc 1 703 0
 1157 0026 8D89     		ldrh	r5, [r1, #12]
 1158 0028 2B43     		orrs	r3, r3, r5
 1159              	.LVL154:
 706:FWLIB/src/stm32f4xx_tim.c ****     
 1160              		.loc 1 706 0
 1161 002a 4D88     		ldrh	r5, [r1, #2]
 1162 002c 2B43     		orrs	r3, r3, r5
 1163              	.LVL155:
 708:FWLIB/src/stm32f4xx_tim.c ****   {
 1164              		.loc 1 708 0
 1165 002e 0E4D     		ldr	r5, .L78
 1166 0030 A842     		cmp	r0, r5
 1167 0032 0AD0     		beq	.L75
 708:FWLIB/src/stm32f4xx_tim.c ****   {
 1168              		.loc 1 708 0 is_stmt 0 discriminator 1
 1169 0034 05F58065 		add	r5, r5, #1024
 1170 0038 A842     		cmp	r0, r5
 1171 003a 06D0     		beq	.L75
 1172              	.L76:
 733:FWLIB/src/stm32f4xx_tim.c ****   
 1173              		.loc 1 733 0 is_stmt 1
 1174 003c 8480     		strh	r4, [r0, #4]	@ movhi
 736:FWLIB/src/stm32f4xx_tim.c ****   
 1175              		.loc 1 736 0
 1176 003e 0283     		strh	r2, [r0, #24]	@ movhi
 739:FWLIB/src/stm32f4xx_tim.c ****   
 1177              		.loc 1 739 0
 1178 0040 8A68     		ldr	r2, [r1, #8]
 1179              	.LVL156:
ARM GAS  /tmp/ccgXhnD7.s 			page 82


 1180 0042 4263     		str	r2, [r0, #52]
 1181              	.LVL157:
 742:FWLIB/src/stm32f4xx_tim.c **** }
 1182              		.loc 1 742 0
 1183 0044 0384     		strh	r3, [r0, #32]	@ movhi
 743:FWLIB/src/stm32f4xx_tim.c **** 
 1184              		.loc 1 743 0
 1185 0046 30BC     		pop	{r4, r5}
 1186              	.LCFI10:
 1187              		.cfi_remember_state
 1188              		.cfi_restore 5
 1189              		.cfi_restore 4
 1190              		.cfi_def_cfa_offset 0
 1191              	.LVL158:
 1192 0048 7047     		bx	lr
 1193              	.LVL159:
 1194              	.L75:
 1195              	.LCFI11:
 1196              		.cfi_restore_state
 716:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 1197              		.loc 1 716 0
 1198 004a 23F00803 		bic	r3, r3, #8
 1199              	.LVL160:
 718:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 1200              		.loc 1 718 0
 1201 004e CD89     		ldrh	r5, [r1, #14]
 1202 0050 2B43     		orrs	r3, r3, r5
 1203              	.LVL161:
 720:FWLIB/src/stm32f4xx_tim.c ****     
 1204              		.loc 1 720 0
 1205 0052 23F00403 		bic	r3, r3, #4
 1206              	.LVL162:
 723:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 1207              		.loc 1 723 0
 1208 0056 8D88     		ldrh	r5, [r1, #4]
 1209 0058 2B43     		orrs	r3, r3, r5
 1210              	.LVL163:
 726:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 1211              		.loc 1 726 0
 1212 005a 24F44074 		bic	r4, r4, #768
 1213              	.LVL164:
 728:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 1214              		.loc 1 728 0
 1215 005e 0D8A     		ldrh	r5, [r1, #16]
 1216 0060 2C43     		orrs	r4, r4, r5
 1217              	.LVL165:
 730:FWLIB/src/stm32f4xx_tim.c ****   }
 1218              		.loc 1 730 0
 1219 0062 4D8A     		ldrh	r5, [r1, #18]
 1220 0064 2C43     		orrs	r4, r4, r5
 1221              	.LVL166:
 1222 0066 E9E7     		b	.L76
 1223              	.L79:
 1224              		.align	2
 1225              	.L78:
 1226 0068 00000140 		.word	1073807360
 1227              		.cfi_endproc
ARM GAS  /tmp/ccgXhnD7.s 			page 83


 1228              	.LFE127:
 1230              		.section	.text.TIM_OC2Init,"ax",%progbits
 1231              		.align	1
 1232              		.global	TIM_OC2Init
 1233              		.syntax unified
 1234              		.thumb
 1235              		.thumb_func
 1236              		.fpu softvfp
 1238              	TIM_OC2Init:
 1239              	.LFB128:
 755:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1240              		.loc 1 755 0
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 0
 1243              		@ frame_needed = 0, uses_anonymous_args = 0
 1244              		@ link register save eliminated.
 1245              	.LVL167:
 1246 0000 30B4     		push	{r4, r5}
 1247              	.LCFI12:
 1248              		.cfi_def_cfa_offset 8
 1249              		.cfi_offset 4, -8
 1250              		.cfi_offset 5, -4
 1251              	.LVL168:
 765:FWLIB/src/stm32f4xx_tim.c ****   
 1252              		.loc 1 765 0
 1253 0002 038C     		ldrh	r3, [r0, #32]
 1254 0004 9BB2     		uxth	r3, r3
 1255 0006 23F01003 		bic	r3, r3, #16
 1256 000a 9BB2     		uxth	r3, r3
 1257 000c 0384     		strh	r3, [r0, #32]	@ movhi
 768:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 1258              		.loc 1 768 0
 1259 000e 038C     		ldrh	r3, [r0, #32]
 1260 0010 9BB2     		uxth	r3, r3
 1261              	.LVL169:
 770:FWLIB/src/stm32f4xx_tim.c ****   
 1262              		.loc 1 770 0
 1263 0012 8588     		ldrh	r5, [r0, #4]
 1264 0014 ADB2     		uxth	r5, r5
 1265              	.LVL170:
 773:FWLIB/src/stm32f4xx_tim.c ****     
 1266              		.loc 1 773 0
 1267 0016 028B     		ldrh	r2, [r0, #24]
 1268 0018 92B2     		uxth	r2, r2
 1269              	.LVL171:
 777:FWLIB/src/stm32f4xx_tim.c ****   
 1270              		.loc 1 777 0
 1271 001a 22F4E644 		bic	r4, r2, #29440
 1272              	.LVL172:
 780:FWLIB/src/stm32f4xx_tim.c ****   
 1273              		.loc 1 780 0
 1274 001e 0A88     		ldrh	r2, [r1]
 1275 0020 1202     		lsls	r2, r2, #8
 1276 0022 92B2     		uxth	r2, r2
 1277 0024 2243     		orrs	r2, r2, r4
 1278              	.LVL173:
 783:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
ARM GAS  /tmp/ccgXhnD7.s 			page 84


 1279              		.loc 1 783 0
 1280 0026 23F02003 		bic	r3, r3, #32
 1281              	.LVL174:
 785:FWLIB/src/stm32f4xx_tim.c ****   
 1282              		.loc 1 785 0
 1283 002a 8C89     		ldrh	r4, [r1, #12]
 1284 002c 2401     		lsls	r4, r4, #4
 1285 002e A4B2     		uxth	r4, r4
 1286 0030 2343     		orrs	r3, r3, r4
 1287              	.LVL175:
 788:FWLIB/src/stm32f4xx_tim.c ****     
 1288              		.loc 1 788 0
 1289 0032 4C88     		ldrh	r4, [r1, #2]
 1290 0034 2401     		lsls	r4, r4, #4
 1291 0036 A4B2     		uxth	r4, r4
 1292 0038 2343     		orrs	r3, r3, r4
 1293              	.LVL176:
 790:FWLIB/src/stm32f4xx_tim.c ****   {
 1294              		.loc 1 790 0
 1295 003a 124C     		ldr	r4, .L84
 1296 003c A042     		cmp	r0, r4
 1297 003e 0AD0     		beq	.L81
 790:FWLIB/src/stm32f4xx_tim.c ****   {
 1298              		.loc 1 790 0 is_stmt 0 discriminator 1
 1299 0040 04F58064 		add	r4, r4, #1024
 1300 0044 A042     		cmp	r0, r4
 1301 0046 06D0     		beq	.L81
 1302              	.L82:
 815:FWLIB/src/stm32f4xx_tim.c ****   
 1303              		.loc 1 815 0 is_stmt 1
 1304 0048 8580     		strh	r5, [r0, #4]	@ movhi
 818:FWLIB/src/stm32f4xx_tim.c ****   
 1305              		.loc 1 818 0
 1306 004a 0283     		strh	r2, [r0, #24]	@ movhi
 821:FWLIB/src/stm32f4xx_tim.c ****   
 1307              		.loc 1 821 0
 1308 004c 8A68     		ldr	r2, [r1, #8]
 1309              	.LVL177:
 1310 004e 8263     		str	r2, [r0, #56]
 1311              	.LVL178:
 824:FWLIB/src/stm32f4xx_tim.c **** }
 1312              		.loc 1 824 0
 1313 0050 0384     		strh	r3, [r0, #32]	@ movhi
 825:FWLIB/src/stm32f4xx_tim.c **** 
 1314              		.loc 1 825 0
 1315 0052 30BC     		pop	{r4, r5}
 1316              	.LCFI13:
 1317              		.cfi_remember_state
 1318              		.cfi_restore 5
 1319              		.cfi_restore 4
 1320              		.cfi_def_cfa_offset 0
 1321              	.LVL179:
 1322 0054 7047     		bx	lr
 1323              	.LVL180:
 1324              	.L81:
 1325              	.LCFI14:
 1326              		.cfi_restore_state
ARM GAS  /tmp/ccgXhnD7.s 			page 85


 798:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 1327              		.loc 1 798 0
 1328 0056 23F08003 		bic	r3, r3, #128
 1329              	.LVL181:
 800:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 1330              		.loc 1 800 0
 1331 005a CC89     		ldrh	r4, [r1, #14]
 1332 005c 2401     		lsls	r4, r4, #4
 1333 005e A4B2     		uxth	r4, r4
 1334 0060 2343     		orrs	r3, r3, r4
 1335              	.LVL182:
 802:FWLIB/src/stm32f4xx_tim.c ****     
 1336              		.loc 1 802 0
 1337 0062 23F04004 		bic	r4, r3, #64
 1338              	.LVL183:
 805:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 1339              		.loc 1 805 0
 1340 0066 8B88     		ldrh	r3, [r1, #4]
 1341 0068 1B01     		lsls	r3, r3, #4
 1342 006a 9BB2     		uxth	r3, r3
 1343 006c 2343     		orrs	r3, r3, r4
 1344              	.LVL184:
 808:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 1345              		.loc 1 808 0
 1346 006e 25F44065 		bic	r5, r5, #3072
 1347              	.LVL185:
 810:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 1348              		.loc 1 810 0
 1349 0072 0C8A     		ldrh	r4, [r1, #16]
 1350 0074 A400     		lsls	r4, r4, #2
 1351 0076 A4B2     		uxth	r4, r4
 1352 0078 2543     		orrs	r5, r5, r4
 1353              	.LVL186:
 812:FWLIB/src/stm32f4xx_tim.c ****   }
 1354              		.loc 1 812 0
 1355 007a 4C8A     		ldrh	r4, [r1, #18]
 1356 007c A400     		lsls	r4, r4, #2
 1357 007e A4B2     		uxth	r4, r4
 1358 0080 2543     		orrs	r5, r5, r4
 1359              	.LVL187:
 1360 0082 E1E7     		b	.L82
 1361              	.L85:
 1362              		.align	2
 1363              	.L84:
 1364 0084 00000140 		.word	1073807360
 1365              		.cfi_endproc
 1366              	.LFE128:
 1368              		.section	.text.TIM_OC3Init,"ax",%progbits
 1369              		.align	1
 1370              		.global	TIM_OC3Init
 1371              		.syntax unified
 1372              		.thumb
 1373              		.thumb_func
 1374              		.fpu softvfp
 1376              	TIM_OC3Init:
 1377              	.LFB129:
 836:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
ARM GAS  /tmp/ccgXhnD7.s 			page 86


 1378              		.loc 1 836 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 0
 1381              		@ frame_needed = 0, uses_anonymous_args = 0
 1382              		@ link register save eliminated.
 1383              	.LVL188:
 1384 0000 30B4     		push	{r4, r5}
 1385              	.LCFI15:
 1386              		.cfi_def_cfa_offset 8
 1387              		.cfi_offset 4, -8
 1388              		.cfi_offset 5, -4
 1389              	.LVL189:
 846:FWLIB/src/stm32f4xx_tim.c ****   
 1390              		.loc 1 846 0
 1391 0002 038C     		ldrh	r3, [r0, #32]
 1392 0004 9BB2     		uxth	r3, r3
 1393 0006 23F48073 		bic	r3, r3, #256
 1394 000a 9BB2     		uxth	r3, r3
 1395 000c 0384     		strh	r3, [r0, #32]	@ movhi
 849:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 1396              		.loc 1 849 0
 1397 000e 038C     		ldrh	r3, [r0, #32]
 1398 0010 9BB2     		uxth	r3, r3
 1399              	.LVL190:
 851:FWLIB/src/stm32f4xx_tim.c ****   
 1400              		.loc 1 851 0
 1401 0012 8588     		ldrh	r5, [r0, #4]
 1402 0014 ADB2     		uxth	r5, r5
 1403              	.LVL191:
 854:FWLIB/src/stm32f4xx_tim.c ****     
 1404              		.loc 1 854 0
 1405 0016 828B     		ldrh	r2, [r0, #28]
 1406 0018 92B2     		uxth	r2, r2
 1407              	.LVL192:
 858:FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 1408              		.loc 1 858 0
 1409 001a 22F07302 		bic	r2, r2, #115
 1410              	.LVL193:
 860:FWLIB/src/stm32f4xx_tim.c ****   
 1411              		.loc 1 860 0
 1412 001e 0C88     		ldrh	r4, [r1]
 1413 0020 2243     		orrs	r2, r2, r4
 1414              	.LVL194:
 863:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 1415              		.loc 1 863 0
 1416 0022 23F40073 		bic	r3, r3, #512
 1417              	.LVL195:
 865:FWLIB/src/stm32f4xx_tim.c ****   
 1418              		.loc 1 865 0
 1419 0026 8C89     		ldrh	r4, [r1, #12]
 1420 0028 2402     		lsls	r4, r4, #8
 1421 002a A4B2     		uxth	r4, r4
 1422 002c 2343     		orrs	r3, r3, r4
 1423              	.LVL196:
 868:FWLIB/src/stm32f4xx_tim.c ****     
 1424              		.loc 1 868 0
 1425 002e 4C88     		ldrh	r4, [r1, #2]
ARM GAS  /tmp/ccgXhnD7.s 			page 87


 1426 0030 2402     		lsls	r4, r4, #8
 1427 0032 A4B2     		uxth	r4, r4
 1428 0034 2343     		orrs	r3, r3, r4
 1429              	.LVL197:
 870:FWLIB/src/stm32f4xx_tim.c ****   {
 1430              		.loc 1 870 0
 1431 0036 124C     		ldr	r4, .L90
 1432 0038 A042     		cmp	r0, r4
 1433 003a 0AD0     		beq	.L87
 870:FWLIB/src/stm32f4xx_tim.c ****   {
 1434              		.loc 1 870 0 is_stmt 0 discriminator 1
 1435 003c 04F58064 		add	r4, r4, #1024
 1436 0040 A042     		cmp	r0, r4
 1437 0042 06D0     		beq	.L87
 1438              	.L88:
 895:FWLIB/src/stm32f4xx_tim.c ****   
 1439              		.loc 1 895 0 is_stmt 1
 1440 0044 8580     		strh	r5, [r0, #4]	@ movhi
 898:FWLIB/src/stm32f4xx_tim.c ****   
 1441              		.loc 1 898 0
 1442 0046 8283     		strh	r2, [r0, #28]	@ movhi
 901:FWLIB/src/stm32f4xx_tim.c ****   
 1443              		.loc 1 901 0
 1444 0048 8A68     		ldr	r2, [r1, #8]
 1445              	.LVL198:
 1446 004a C263     		str	r2, [r0, #60]
 1447              	.LVL199:
 904:FWLIB/src/stm32f4xx_tim.c **** }
 1448              		.loc 1 904 0
 1449 004c 0384     		strh	r3, [r0, #32]	@ movhi
 905:FWLIB/src/stm32f4xx_tim.c **** 
 1450              		.loc 1 905 0
 1451 004e 30BC     		pop	{r4, r5}
 1452              	.LCFI16:
 1453              		.cfi_remember_state
 1454              		.cfi_restore 5
 1455              		.cfi_restore 4
 1456              		.cfi_def_cfa_offset 0
 1457              	.LVL200:
 1458 0050 7047     		bx	lr
 1459              	.LVL201:
 1460              	.L87:
 1461              	.LCFI17:
 1462              		.cfi_restore_state
 878:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 1463              		.loc 1 878 0
 1464 0052 23F40063 		bic	r3, r3, #2048
 1465              	.LVL202:
 880:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 1466              		.loc 1 880 0
 1467 0056 CC89     		ldrh	r4, [r1, #14]
 1468 0058 2402     		lsls	r4, r4, #8
 1469 005a A4B2     		uxth	r4, r4
 1470 005c 2343     		orrs	r3, r3, r4
 1471              	.LVL203:
 882:FWLIB/src/stm32f4xx_tim.c ****     
 1472              		.loc 1 882 0
ARM GAS  /tmp/ccgXhnD7.s 			page 88


 1473 005e 23F48064 		bic	r4, r3, #1024
 1474              	.LVL204:
 885:FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 1475              		.loc 1 885 0
 1476 0062 8B88     		ldrh	r3, [r1, #4]
 1477 0064 1B02     		lsls	r3, r3, #8
 1478 0066 9BB2     		uxth	r3, r3
 1479 0068 2343     		orrs	r3, r3, r4
 1480              	.LVL205:
 888:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 1481              		.loc 1 888 0
 1482 006a 25F44055 		bic	r5, r5, #12288
 1483              	.LVL206:
 890:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 1484              		.loc 1 890 0
 1485 006e 0C8A     		ldrh	r4, [r1, #16]
 1486 0070 2401     		lsls	r4, r4, #4
 1487 0072 A4B2     		uxth	r4, r4
 1488 0074 2543     		orrs	r5, r5, r4
 1489              	.LVL207:
 892:FWLIB/src/stm32f4xx_tim.c ****   }
 1490              		.loc 1 892 0
 1491 0076 4C8A     		ldrh	r4, [r1, #18]
 1492 0078 2401     		lsls	r4, r4, #4
 1493 007a A4B2     		uxth	r4, r4
 1494 007c 2543     		orrs	r5, r5, r4
 1495              	.LVL208:
 1496 007e E1E7     		b	.L88
 1497              	.L91:
 1498              		.align	2
 1499              	.L90:
 1500 0080 00000140 		.word	1073807360
 1501              		.cfi_endproc
 1502              	.LFE129:
 1504              		.section	.text.TIM_OC4Init,"ax",%progbits
 1505              		.align	1
 1506              		.global	TIM_OC4Init
 1507              		.syntax unified
 1508              		.thumb
 1509              		.thumb_func
 1510              		.fpu softvfp
 1512              	TIM_OC4Init:
 1513              	.LFB130:
 916:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1514              		.loc 1 916 0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 0
 1517              		@ frame_needed = 0, uses_anonymous_args = 0
 1518              		@ link register save eliminated.
 1519              	.LVL209:
 1520 0000 30B4     		push	{r4, r5}
 1521              	.LCFI18:
 1522              		.cfi_def_cfa_offset 8
 1523              		.cfi_offset 4, -8
 1524              		.cfi_offset 5, -4
 1525              	.LVL210:
 926:FWLIB/src/stm32f4xx_tim.c ****   
ARM GAS  /tmp/ccgXhnD7.s 			page 89


 1526              		.loc 1 926 0
 1527 0002 038C     		ldrh	r3, [r0, #32]
 1528 0004 9BB2     		uxth	r3, r3
 1529 0006 23F48053 		bic	r3, r3, #4096
 1530 000a 9BB2     		uxth	r3, r3
 1531 000c 0384     		strh	r3, [r0, #32]	@ movhi
 929:FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 1532              		.loc 1 929 0
 1533 000e 038C     		ldrh	r3, [r0, #32]
 1534 0010 9BB2     		uxth	r3, r3
 1535              	.LVL211:
 931:FWLIB/src/stm32f4xx_tim.c ****   
 1536              		.loc 1 931 0
 1537 0012 8588     		ldrh	r5, [r0, #4]
 1538 0014 ADB2     		uxth	r5, r5
 1539              	.LVL212:
 934:FWLIB/src/stm32f4xx_tim.c ****     
 1540              		.loc 1 934 0
 1541 0016 828B     		ldrh	r2, [r0, #28]
 1542 0018 92B2     		uxth	r2, r2
 1543              	.LVL213:
 938:FWLIB/src/stm32f4xx_tim.c ****   
 1544              		.loc 1 938 0
 1545 001a 22F4E644 		bic	r4, r2, #29440
 1546              	.LVL214:
 941:FWLIB/src/stm32f4xx_tim.c ****   
 1547              		.loc 1 941 0
 1548 001e 0A88     		ldrh	r2, [r1]
 1549 0020 1202     		lsls	r2, r2, #8
 1550 0022 92B2     		uxth	r2, r2
 1551 0024 2243     		orrs	r2, r2, r4
 1552              	.LVL215:
 944:FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 1553              		.loc 1 944 0
 1554 0026 23F40053 		bic	r3, r3, #8192
 1555              	.LVL216:
 946:FWLIB/src/stm32f4xx_tim.c ****   
 1556              		.loc 1 946 0
 1557 002a 8C89     		ldrh	r4, [r1, #12]
 1558 002c 2403     		lsls	r4, r4, #12
 1559 002e A4B2     		uxth	r4, r4
 1560 0030 2343     		orrs	r3, r3, r4
 1561              	.LVL217:
 949:FWLIB/src/stm32f4xx_tim.c ****   
 1562              		.loc 1 949 0
 1563 0032 4C88     		ldrh	r4, [r1, #2]
 1564 0034 2403     		lsls	r4, r4, #12
 1565 0036 A4B2     		uxth	r4, r4
 1566 0038 2343     		orrs	r3, r3, r4
 1567              	.LVL218:
 951:FWLIB/src/stm32f4xx_tim.c ****   {
 1568              		.loc 1 951 0
 1569 003a 0A4C     		ldr	r4, .L96
 1570 003c A042     		cmp	r0, r4
 1571 003e 0AD0     		beq	.L93
 951:FWLIB/src/stm32f4xx_tim.c ****   {
 1572              		.loc 1 951 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccgXhnD7.s 			page 90


 1573 0040 04F58064 		add	r4, r4, #1024
 1574 0044 A042     		cmp	r0, r4
 1575 0046 06D0     		beq	.L93
 1576              	.L94:
 960:FWLIB/src/stm32f4xx_tim.c ****   
 1577              		.loc 1 960 0 is_stmt 1
 1578 0048 8580     		strh	r5, [r0, #4]	@ movhi
 963:FWLIB/src/stm32f4xx_tim.c ****     
 1579              		.loc 1 963 0
 1580 004a 8283     		strh	r2, [r0, #28]	@ movhi
 966:FWLIB/src/stm32f4xx_tim.c ****   
 1581              		.loc 1 966 0
 1582 004c 8A68     		ldr	r2, [r1, #8]
 1583              	.LVL219:
 1584 004e 0264     		str	r2, [r0, #64]
 1585              	.LVL220:
 969:FWLIB/src/stm32f4xx_tim.c **** }
 1586              		.loc 1 969 0
 1587 0050 0384     		strh	r3, [r0, #32]	@ movhi
 970:FWLIB/src/stm32f4xx_tim.c **** 
 1588              		.loc 1 970 0
 1589 0052 30BC     		pop	{r4, r5}
 1590              	.LCFI19:
 1591              		.cfi_remember_state
 1592              		.cfi_restore 5
 1593              		.cfi_restore 4
 1594              		.cfi_def_cfa_offset 0
 1595              	.LVL221:
 1596 0054 7047     		bx	lr
 1597              	.LVL222:
 1598              	.L93:
 1599              	.LCFI20:
 1600              		.cfi_restore_state
 955:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 1601              		.loc 1 955 0
 1602 0056 25F48045 		bic	r5, r5, #16384
 1603              	.LVL223:
 957:FWLIB/src/stm32f4xx_tim.c ****   }
 1604              		.loc 1 957 0
 1605 005a 0C8A     		ldrh	r4, [r1, #16]
 1606 005c A401     		lsls	r4, r4, #6
 1607 005e A4B2     		uxth	r4, r4
 1608 0060 2543     		orrs	r5, r5, r4
 1609              	.LVL224:
 1610 0062 F1E7     		b	.L94
 1611              	.L97:
 1612              		.align	2
 1613              	.L96:
 1614 0064 00000140 		.word	1073807360
 1615              		.cfi_endproc
 1616              	.LFE130:
 1618              		.section	.text.TIM_OCStructInit,"ax",%progbits
 1619              		.align	1
 1620              		.global	TIM_OCStructInit
 1621              		.syntax unified
 1622              		.thumb
 1623              		.thumb_func
ARM GAS  /tmp/ccgXhnD7.s 			page 91


 1624              		.fpu softvfp
 1626              	TIM_OCStructInit:
 1627              	.LFB131:
 979:FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 1628              		.loc 1 979 0
 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 0
 1631              		@ frame_needed = 0, uses_anonymous_args = 0
 1632              		@ link register save eliminated.
 1633              	.LVL225:
 981:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 1634              		.loc 1 981 0
 1635 0000 0023     		movs	r3, #0
 1636 0002 0380     		strh	r3, [r0]	@ movhi
 982:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 1637              		.loc 1 982 0
 1638 0004 4380     		strh	r3, [r0, #2]	@ movhi
 983:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 1639              		.loc 1 983 0
 1640 0006 8380     		strh	r3, [r0, #4]	@ movhi
 984:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 1641              		.loc 1 984 0
 1642 0008 8360     		str	r3, [r0, #8]
 985:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 1643              		.loc 1 985 0
 1644 000a 8381     		strh	r3, [r0, #12]	@ movhi
 986:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 1645              		.loc 1 986 0
 1646 000c C381     		strh	r3, [r0, #14]	@ movhi
 987:FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 1647              		.loc 1 987 0
 1648 000e 0382     		strh	r3, [r0, #16]	@ movhi
 988:FWLIB/src/stm32f4xx_tim.c **** }
 1649              		.loc 1 988 0
 1650 0010 4382     		strh	r3, [r0, #18]	@ movhi
 1651 0012 7047     		bx	lr
 1652              		.cfi_endproc
 1653              	.LFE131:
 1655              		.section	.text.TIM_SelectOCxM,"ax",%progbits
 1656              		.align	1
 1657              		.global	TIM_SelectOCxM
 1658              		.syntax unified
 1659              		.thumb
 1660              		.thumb_func
 1661              		.fpu softvfp
 1663              	TIM_SelectOCxM:
 1664              	.LFB132:
1015:FWLIB/src/stm32f4xx_tim.c ****   uint32_t tmp = 0;
 1665              		.loc 1 1015 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 0
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 1669              		@ link register save eliminated.
 1670              	.LVL226:
 1671 0000 30B4     		push	{r4, r5}
 1672              	.LCFI21:
 1673              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccgXhnD7.s 			page 92


 1674              		.cfi_offset 4, -8
 1675              		.cfi_offset 5, -4
 1676              	.LVL227:
1025:FWLIB/src/stm32f4xx_tim.c **** 
 1677              		.loc 1 1025 0
 1678 0002 00F11804 		add	r4, r0, #24
 1679              	.LVL228:
1027:FWLIB/src/stm32f4xx_tim.c **** 
 1680              		.loc 1 1027 0
 1681 0006 0123     		movs	r3, #1
 1682 0008 8B40     		lsls	r3, r3, r1
 1683 000a 9BB2     		uxth	r3, r3
 1684              	.LVL229:
1030:FWLIB/src/stm32f4xx_tim.c **** 
 1685              		.loc 1 1030 0
 1686 000c 058C     		ldrh	r5, [r0, #32]
 1687 000e DB43     		mvns	r3, r3
 1688              	.LVL230:
 1689 0010 9BB2     		uxth	r3, r3
 1690              	.LVL231:
 1691 0012 2B40     		ands	r3, r3, r5
 1692 0014 0384     		strh	r3, [r0, #32]	@ movhi
1032:FWLIB/src/stm32f4xx_tim.c ****   {
 1693              		.loc 1 1032 0
 1694 0016 81B1     		cbz	r1, .L100
1032:FWLIB/src/stm32f4xx_tim.c ****   {
 1695              		.loc 1 1032 0 is_stmt 0 discriminator 1
 1696 0018 0829     		cmp	r1, #8
 1697 001a 0ED0     		beq	.L100
1044:FWLIB/src/stm32f4xx_tim.c **** 
 1698              		.loc 1 1044 0 is_stmt 1
 1699 001c 0439     		subs	r1, r1, #4
 1700              	.LVL232:
 1701 001e C1F34E01 		ubfx	r1, r1, #1, #15
 1702              	.LVL233:
1047:FWLIB/src/stm32f4xx_tim.c ****     
 1703              		.loc 1 1047 0
 1704 0022 6358     		ldr	r3, [r4, r1]
 1705 0024 23F4E043 		bic	r3, r3, #28672
 1706 0028 1B04     		lsls	r3, r3, #16
 1707 002a 1B0C     		lsrs	r3, r3, #16
 1708 002c 6350     		str	r3, [r4, r1]
1050:FWLIB/src/stm32f4xx_tim.c ****   }
 1709              		.loc 1 1050 0
 1710 002e 6358     		ldr	r3, [r4, r1]
 1711 0030 1202     		lsls	r2, r2, #8
 1712              	.LVL234:
 1713 0032 92B2     		uxth	r2, r2
 1714 0034 1A43     		orrs	r2, r2, r3
 1715 0036 6250     		str	r2, [r4, r1]
1052:FWLIB/src/stm32f4xx_tim.c **** 
 1716              		.loc 1 1052 0
 1717 0038 09E0     		b	.L99
 1718              	.LVL235:
 1719              	.L100:
1034:FWLIB/src/stm32f4xx_tim.c **** 
 1720              		.loc 1 1034 0
ARM GAS  /tmp/ccgXhnD7.s 			page 93


 1721 003a 4908     		lsrs	r1, r1, #1
 1722              	.LVL236:
1037:FWLIB/src/stm32f4xx_tim.c ****    
 1723              		.loc 1 1037 0
 1724 003c 6358     		ldr	r3, [r4, r1]
 1725 003e 23F07003 		bic	r3, r3, #112
 1726 0042 1B04     		lsls	r3, r3, #16
 1727 0044 1B0C     		lsrs	r3, r3, #16
 1728 0046 6350     		str	r3, [r4, r1]
1040:FWLIB/src/stm32f4xx_tim.c ****   }
 1729              		.loc 1 1040 0
 1730 0048 6358     		ldr	r3, [r4, r1]
 1731 004a 1A43     		orrs	r2, r2, r3
 1732              	.LVL237:
 1733 004c 6250     		str	r2, [r4, r1]
 1734              	.LVL238:
 1735              	.L99:
1052:FWLIB/src/stm32f4xx_tim.c **** 
 1736              		.loc 1 1052 0
 1737 004e 30BC     		pop	{r4, r5}
 1738              	.LCFI22:
 1739              		.cfi_restore 5
 1740              		.cfi_restore 4
 1741              		.cfi_def_cfa_offset 0
 1742 0050 7047     		bx	lr
 1743              		.cfi_endproc
 1744              	.LFE132:
 1746              		.section	.text.TIM_SetCompare1,"ax",%progbits
 1747              		.align	1
 1748              		.global	TIM_SetCompare1
 1749              		.syntax unified
 1750              		.thumb
 1751              		.thumb_func
 1752              		.fpu softvfp
 1754              	TIM_SetCompare1:
 1755              	.LFB133:
1061:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1756              		.loc 1 1061 0
 1757              		.cfi_startproc
 1758              		@ args = 0, pretend = 0, frame = 0
 1759              		@ frame_needed = 0, uses_anonymous_args = 0
 1760              		@ link register save eliminated.
 1761              	.LVL239:
1066:FWLIB/src/stm32f4xx_tim.c **** }
 1762              		.loc 1 1066 0
 1763 0000 4163     		str	r1, [r0, #52]
 1764 0002 7047     		bx	lr
 1765              		.cfi_endproc
 1766              	.LFE133:
 1768              		.section	.text.TIM_SetCompare2,"ax",%progbits
 1769              		.align	1
 1770              		.global	TIM_SetCompare2
 1771              		.syntax unified
 1772              		.thumb
 1773              		.thumb_func
 1774              		.fpu softvfp
 1776              	TIM_SetCompare2:
ARM GAS  /tmp/ccgXhnD7.s 			page 94


 1777              	.LFB134:
1077:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1778              		.loc 1 1077 0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 0
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782              		@ link register save eliminated.
 1783              	.LVL240:
1082:FWLIB/src/stm32f4xx_tim.c **** }
 1784              		.loc 1 1082 0
 1785 0000 8163     		str	r1, [r0, #56]
 1786 0002 7047     		bx	lr
 1787              		.cfi_endproc
 1788              	.LFE134:
 1790              		.section	.text.TIM_SetCompare3,"ax",%progbits
 1791              		.align	1
 1792              		.global	TIM_SetCompare3
 1793              		.syntax unified
 1794              		.thumb
 1795              		.thumb_func
 1796              		.fpu softvfp
 1798              	TIM_SetCompare3:
 1799              	.LFB135:
1092:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1800              		.loc 1 1092 0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 0
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 1804              		@ link register save eliminated.
 1805              	.LVL241:
1097:FWLIB/src/stm32f4xx_tim.c **** }
 1806              		.loc 1 1097 0
 1807 0000 C163     		str	r1, [r0, #60]
 1808 0002 7047     		bx	lr
 1809              		.cfi_endproc
 1810              	.LFE135:
 1812              		.section	.text.TIM_SetCompare4,"ax",%progbits
 1813              		.align	1
 1814              		.global	TIM_SetCompare4
 1815              		.syntax unified
 1816              		.thumb
 1817              		.thumb_func
 1818              		.fpu softvfp
 1820              	TIM_SetCompare4:
 1821              	.LFB136:
1107:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1822              		.loc 1 1107 0
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 0
 1825              		@ frame_needed = 0, uses_anonymous_args = 0
 1826              		@ link register save eliminated.
 1827              	.LVL242:
1112:FWLIB/src/stm32f4xx_tim.c **** }
 1828              		.loc 1 1112 0
 1829 0000 0164     		str	r1, [r0, #64]
 1830 0002 7047     		bx	lr
 1831              		.cfi_endproc
ARM GAS  /tmp/ccgXhnD7.s 			page 95


 1832              	.LFE136:
 1834              		.section	.text.TIM_ForcedOC1Config,"ax",%progbits
 1835              		.align	1
 1836              		.global	TIM_ForcedOC1Config
 1837              		.syntax unified
 1838              		.thumb
 1839              		.thumb_func
 1840              		.fpu softvfp
 1842              	TIM_ForcedOC1Config:
 1843              	.LFB137:
1125:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1844              		.loc 1 1125 0
 1845              		.cfi_startproc
 1846              		@ args = 0, pretend = 0, frame = 0
 1847              		@ frame_needed = 0, uses_anonymous_args = 0
 1848              		@ link register save eliminated.
 1849              	.LVL243:
1131:FWLIB/src/stm32f4xx_tim.c **** 
 1850              		.loc 1 1131 0
 1851 0000 038B     		ldrh	r3, [r0, #24]
 1852 0002 9BB2     		uxth	r3, r3
 1853              	.LVL244:
1134:FWLIB/src/stm32f4xx_tim.c **** 
 1854              		.loc 1 1134 0
 1855 0004 23F07003 		bic	r3, r3, #112
 1856              	.LVL245:
1137:FWLIB/src/stm32f4xx_tim.c **** 
 1857              		.loc 1 1137 0
 1858 0008 1943     		orrs	r1, r1, r3
 1859              	.LVL246:
1140:FWLIB/src/stm32f4xx_tim.c **** }
 1860              		.loc 1 1140 0
 1861 000a 0183     		strh	r1, [r0, #24]	@ movhi
 1862 000c 7047     		bx	lr
 1863              		.cfi_endproc
 1864              	.LFE137:
 1866              		.section	.text.TIM_ForcedOC2Config,"ax",%progbits
 1867              		.align	1
 1868              		.global	TIM_ForcedOC2Config
 1869              		.syntax unified
 1870              		.thumb
 1871              		.thumb_func
 1872              		.fpu softvfp
 1874              	TIM_ForcedOC2Config:
 1875              	.LFB138:
1154:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1876              		.loc 1 1154 0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 0
 1879              		@ frame_needed = 0, uses_anonymous_args = 0
 1880              		@ link register save eliminated.
 1881              	.LVL247:
1160:FWLIB/src/stm32f4xx_tim.c **** 
 1882              		.loc 1 1160 0
 1883 0000 038B     		ldrh	r3, [r0, #24]
 1884 0002 9BB2     		uxth	r3, r3
 1885              	.LVL248:
ARM GAS  /tmp/ccgXhnD7.s 			page 96


1163:FWLIB/src/stm32f4xx_tim.c **** 
 1886              		.loc 1 1163 0
 1887 0004 23F4E043 		bic	r3, r3, #28672
 1888              	.LVL249:
1166:FWLIB/src/stm32f4xx_tim.c **** 
 1889              		.loc 1 1166 0
 1890 0008 0902     		lsls	r1, r1, #8
 1891              	.LVL250:
 1892 000a 89B2     		uxth	r1, r1
 1893 000c 0B43     		orrs	r3, r3, r1
 1894              	.LVL251:
1169:FWLIB/src/stm32f4xx_tim.c **** }
 1895              		.loc 1 1169 0
 1896 000e 0383     		strh	r3, [r0, #24]	@ movhi
 1897 0010 7047     		bx	lr
 1898              		.cfi_endproc
 1899              	.LFE138:
 1901              		.section	.text.TIM_ForcedOC3Config,"ax",%progbits
 1902              		.align	1
 1903              		.global	TIM_ForcedOC3Config
 1904              		.syntax unified
 1905              		.thumb
 1906              		.thumb_func
 1907              		.fpu softvfp
 1909              	TIM_ForcedOC3Config:
 1910              	.LFB139:
1182:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 1911              		.loc 1 1182 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 1915              		@ link register save eliminated.
 1916              	.LVL252:
1189:FWLIB/src/stm32f4xx_tim.c **** 
 1917              		.loc 1 1189 0
 1918 0000 838B     		ldrh	r3, [r0, #28]
 1919 0002 9BB2     		uxth	r3, r3
 1920              	.LVL253:
1192:FWLIB/src/stm32f4xx_tim.c **** 
 1921              		.loc 1 1192 0
 1922 0004 23F07003 		bic	r3, r3, #112
 1923              	.LVL254:
1195:FWLIB/src/stm32f4xx_tim.c **** 
 1924              		.loc 1 1195 0
 1925 0008 1943     		orrs	r1, r1, r3
 1926              	.LVL255:
1198:FWLIB/src/stm32f4xx_tim.c **** }
 1927              		.loc 1 1198 0
 1928 000a 8183     		strh	r1, [r0, #28]	@ movhi
 1929 000c 7047     		bx	lr
 1930              		.cfi_endproc
 1931              	.LFE139:
 1933              		.section	.text.TIM_ForcedOC4Config,"ax",%progbits
 1934              		.align	1
 1935              		.global	TIM_ForcedOC4Config
 1936              		.syntax unified
 1937              		.thumb
ARM GAS  /tmp/ccgXhnD7.s 			page 97


 1938              		.thumb_func
 1939              		.fpu softvfp
 1941              	TIM_ForcedOC4Config:
 1942              	.LFB140:
1211:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 1943              		.loc 1 1211 0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 0
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
 1947              		@ link register save eliminated.
 1948              	.LVL256:
1217:FWLIB/src/stm32f4xx_tim.c **** 
 1949              		.loc 1 1217 0
 1950 0000 838B     		ldrh	r3, [r0, #28]
 1951 0002 9BB2     		uxth	r3, r3
 1952              	.LVL257:
1220:FWLIB/src/stm32f4xx_tim.c **** 
 1953              		.loc 1 1220 0
 1954 0004 23F4E043 		bic	r3, r3, #28672
 1955              	.LVL258:
1223:FWLIB/src/stm32f4xx_tim.c **** 
 1956              		.loc 1 1223 0
 1957 0008 0902     		lsls	r1, r1, #8
 1958              	.LVL259:
 1959 000a 89B2     		uxth	r1, r1
 1960 000c 0B43     		orrs	r3, r3, r1
 1961              	.LVL260:
1226:FWLIB/src/stm32f4xx_tim.c **** }
 1962              		.loc 1 1226 0
 1963 000e 8383     		strh	r3, [r0, #28]	@ movhi
 1964 0010 7047     		bx	lr
 1965              		.cfi_endproc
 1966              	.LFE140:
 1968              		.section	.text.TIM_OC1PreloadConfig,"ax",%progbits
 1969              		.align	1
 1970              		.global	TIM_OC1PreloadConfig
 1971              		.syntax unified
 1972              		.thumb
 1973              		.thumb_func
 1974              		.fpu softvfp
 1976              	TIM_OC1PreloadConfig:
 1977              	.LFB141:
1239:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1978              		.loc 1 1239 0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 0
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
 1982              		@ link register save eliminated.
 1983              	.LVL261:
1246:FWLIB/src/stm32f4xx_tim.c **** 
 1984              		.loc 1 1246 0
 1985 0000 038B     		ldrh	r3, [r0, #24]
 1986 0002 9BB2     		uxth	r3, r3
 1987              	.LVL262:
1249:FWLIB/src/stm32f4xx_tim.c **** 
 1988              		.loc 1 1249 0
 1989 0004 23F00803 		bic	r3, r3, #8
ARM GAS  /tmp/ccgXhnD7.s 			page 98


 1990              	.LVL263:
1252:FWLIB/src/stm32f4xx_tim.c **** 
 1991              		.loc 1 1252 0
 1992 0008 1943     		orrs	r1, r1, r3
 1993              	.LVL264:
1255:FWLIB/src/stm32f4xx_tim.c **** }
 1994              		.loc 1 1255 0
 1995 000a 0183     		strh	r1, [r0, #24]	@ movhi
 1996 000c 7047     		bx	lr
 1997              		.cfi_endproc
 1998              	.LFE141:
 2000              		.section	.text.TIM_OC2PreloadConfig,"ax",%progbits
 2001              		.align	1
 2002              		.global	TIM_OC2PreloadConfig
 2003              		.syntax unified
 2004              		.thumb
 2005              		.thumb_func
 2006              		.fpu softvfp
 2008              	TIM_OC2PreloadConfig:
 2009              	.LFB142:
1269:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2010              		.loc 1 1269 0
 2011              		.cfi_startproc
 2012              		@ args = 0, pretend = 0, frame = 0
 2013              		@ frame_needed = 0, uses_anonymous_args = 0
 2014              		@ link register save eliminated.
 2015              	.LVL265:
1276:FWLIB/src/stm32f4xx_tim.c **** 
 2016              		.loc 1 1276 0
 2017 0000 038B     		ldrh	r3, [r0, #24]
 2018 0002 9BB2     		uxth	r3, r3
 2019              	.LVL266:
1279:FWLIB/src/stm32f4xx_tim.c **** 
 2020              		.loc 1 1279 0
 2021 0004 23F40063 		bic	r3, r3, #2048
 2022              	.LVL267:
1282:FWLIB/src/stm32f4xx_tim.c **** 
 2023              		.loc 1 1282 0
 2024 0008 0902     		lsls	r1, r1, #8
 2025              	.LVL268:
 2026 000a 89B2     		uxth	r1, r1
 2027 000c 0B43     		orrs	r3, r3, r1
 2028              	.LVL269:
1285:FWLIB/src/stm32f4xx_tim.c **** }
 2029              		.loc 1 1285 0
 2030 000e 0383     		strh	r3, [r0, #24]	@ movhi
 2031 0010 7047     		bx	lr
 2032              		.cfi_endproc
 2033              	.LFE142:
 2035              		.section	.text.TIM_OC3PreloadConfig,"ax",%progbits
 2036              		.align	1
 2037              		.global	TIM_OC3PreloadConfig
 2038              		.syntax unified
 2039              		.thumb
 2040              		.thumb_func
 2041              		.fpu softvfp
 2043              	TIM_OC3PreloadConfig:
ARM GAS  /tmp/ccgXhnD7.s 			page 99


 2044              	.LFB143:
1298:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2045              		.loc 1 1298 0
 2046              		.cfi_startproc
 2047              		@ args = 0, pretend = 0, frame = 0
 2048              		@ frame_needed = 0, uses_anonymous_args = 0
 2049              		@ link register save eliminated.
 2050              	.LVL270:
1305:FWLIB/src/stm32f4xx_tim.c **** 
 2051              		.loc 1 1305 0
 2052 0000 838B     		ldrh	r3, [r0, #28]
 2053 0002 9BB2     		uxth	r3, r3
 2054              	.LVL271:
1308:FWLIB/src/stm32f4xx_tim.c **** 
 2055              		.loc 1 1308 0
 2056 0004 23F00803 		bic	r3, r3, #8
 2057              	.LVL272:
1311:FWLIB/src/stm32f4xx_tim.c **** 
 2058              		.loc 1 1311 0
 2059 0008 1943     		orrs	r1, r1, r3
 2060              	.LVL273:
1314:FWLIB/src/stm32f4xx_tim.c **** }
 2061              		.loc 1 1314 0
 2062 000a 8183     		strh	r1, [r0, #28]	@ movhi
 2063 000c 7047     		bx	lr
 2064              		.cfi_endproc
 2065              	.LFE143:
 2067              		.section	.text.TIM_OC4PreloadConfig,"ax",%progbits
 2068              		.align	1
 2069              		.global	TIM_OC4PreloadConfig
 2070              		.syntax unified
 2071              		.thumb
 2072              		.thumb_func
 2073              		.fpu softvfp
 2075              	TIM_OC4PreloadConfig:
 2076              	.LFB144:
1327:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2077              		.loc 1 1327 0
 2078              		.cfi_startproc
 2079              		@ args = 0, pretend = 0, frame = 0
 2080              		@ frame_needed = 0, uses_anonymous_args = 0
 2081              		@ link register save eliminated.
 2082              	.LVL274:
1334:FWLIB/src/stm32f4xx_tim.c **** 
 2083              		.loc 1 1334 0
 2084 0000 838B     		ldrh	r3, [r0, #28]
 2085 0002 9BB2     		uxth	r3, r3
 2086              	.LVL275:
1337:FWLIB/src/stm32f4xx_tim.c **** 
 2087              		.loc 1 1337 0
 2088 0004 23F40063 		bic	r3, r3, #2048
 2089              	.LVL276:
1340:FWLIB/src/stm32f4xx_tim.c **** 
 2090              		.loc 1 1340 0
 2091 0008 0902     		lsls	r1, r1, #8
 2092              	.LVL277:
 2093 000a 89B2     		uxth	r1, r1
ARM GAS  /tmp/ccgXhnD7.s 			page 100


 2094 000c 0B43     		orrs	r3, r3, r1
 2095              	.LVL278:
1343:FWLIB/src/stm32f4xx_tim.c **** }
 2096              		.loc 1 1343 0
 2097 000e 8383     		strh	r3, [r0, #28]	@ movhi
 2098 0010 7047     		bx	lr
 2099              		.cfi_endproc
 2100              	.LFE144:
 2102              		.section	.text.TIM_OC1FastConfig,"ax",%progbits
 2103              		.align	1
 2104              		.global	TIM_OC1FastConfig
 2105              		.syntax unified
 2106              		.thumb
 2107              		.thumb_func
 2108              		.fpu softvfp
 2110              	TIM_OC1FastConfig:
 2111              	.LFB145:
1356:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2112              		.loc 1 1356 0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
 2116              		@ link register save eliminated.
 2117              	.LVL279:
1364:FWLIB/src/stm32f4xx_tim.c **** 
 2118              		.loc 1 1364 0
 2119 0000 038B     		ldrh	r3, [r0, #24]
 2120 0002 9BB2     		uxth	r3, r3
 2121              	.LVL280:
1367:FWLIB/src/stm32f4xx_tim.c **** 
 2122              		.loc 1 1367 0
 2123 0004 23F00403 		bic	r3, r3, #4
 2124              	.LVL281:
1370:FWLIB/src/stm32f4xx_tim.c **** 
 2125              		.loc 1 1370 0
 2126 0008 1943     		orrs	r1, r1, r3
 2127              	.LVL282:
1373:FWLIB/src/stm32f4xx_tim.c **** }
 2128              		.loc 1 1373 0
 2129 000a 0183     		strh	r1, [r0, #24]	@ movhi
 2130 000c 7047     		bx	lr
 2131              		.cfi_endproc
 2132              	.LFE145:
 2134              		.section	.text.TIM_OC2FastConfig,"ax",%progbits
 2135              		.align	1
 2136              		.global	TIM_OC2FastConfig
 2137              		.syntax unified
 2138              		.thumb
 2139              		.thumb_func
 2140              		.fpu softvfp
 2142              	TIM_OC2FastConfig:
 2143              	.LFB146:
1387:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2144              		.loc 1 1387 0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccgXhnD7.s 			page 101


 2148              		@ link register save eliminated.
 2149              	.LVL283:
1395:FWLIB/src/stm32f4xx_tim.c **** 
 2150              		.loc 1 1395 0
 2151 0000 038B     		ldrh	r3, [r0, #24]
 2152 0002 9BB2     		uxth	r3, r3
 2153              	.LVL284:
1398:FWLIB/src/stm32f4xx_tim.c **** 
 2154              		.loc 1 1398 0
 2155 0004 23F48063 		bic	r3, r3, #1024
 2156              	.LVL285:
1401:FWLIB/src/stm32f4xx_tim.c **** 
 2157              		.loc 1 1401 0
 2158 0008 0902     		lsls	r1, r1, #8
 2159              	.LVL286:
 2160 000a 89B2     		uxth	r1, r1
 2161 000c 0B43     		orrs	r3, r3, r1
 2162              	.LVL287:
1404:FWLIB/src/stm32f4xx_tim.c **** }
 2163              		.loc 1 1404 0
 2164 000e 0383     		strh	r3, [r0, #24]	@ movhi
 2165 0010 7047     		bx	lr
 2166              		.cfi_endproc
 2167              	.LFE146:
 2169              		.section	.text.TIM_OC3FastConfig,"ax",%progbits
 2170              		.align	1
 2171              		.global	TIM_OC3FastConfig
 2172              		.syntax unified
 2173              		.thumb
 2174              		.thumb_func
 2175              		.fpu softvfp
 2177              	TIM_OC3FastConfig:
 2178              	.LFB147:
1417:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2179              		.loc 1 1417 0
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 0
 2182              		@ frame_needed = 0, uses_anonymous_args = 0
 2183              		@ link register save eliminated.
 2184              	.LVL288:
1425:FWLIB/src/stm32f4xx_tim.c **** 
 2185              		.loc 1 1425 0
 2186 0000 838B     		ldrh	r3, [r0, #28]
 2187 0002 9BB2     		uxth	r3, r3
 2188              	.LVL289:
1428:FWLIB/src/stm32f4xx_tim.c **** 
 2189              		.loc 1 1428 0
 2190 0004 23F00403 		bic	r3, r3, #4
 2191              	.LVL290:
1431:FWLIB/src/stm32f4xx_tim.c **** 
 2192              		.loc 1 1431 0
 2193 0008 1943     		orrs	r1, r1, r3
 2194              	.LVL291:
1434:FWLIB/src/stm32f4xx_tim.c **** }
 2195              		.loc 1 1434 0
 2196 000a 8183     		strh	r1, [r0, #28]	@ movhi
 2197 000c 7047     		bx	lr
ARM GAS  /tmp/ccgXhnD7.s 			page 102


 2198              		.cfi_endproc
 2199              	.LFE147:
 2201              		.section	.text.TIM_OC4FastConfig,"ax",%progbits
 2202              		.align	1
 2203              		.global	TIM_OC4FastConfig
 2204              		.syntax unified
 2205              		.thumb
 2206              		.thumb_func
 2207              		.fpu softvfp
 2209              	TIM_OC4FastConfig:
 2210              	.LFB148:
1447:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2211              		.loc 1 1447 0
 2212              		.cfi_startproc
 2213              		@ args = 0, pretend = 0, frame = 0
 2214              		@ frame_needed = 0, uses_anonymous_args = 0
 2215              		@ link register save eliminated.
 2216              	.LVL292:
1455:FWLIB/src/stm32f4xx_tim.c **** 
 2217              		.loc 1 1455 0
 2218 0000 838B     		ldrh	r3, [r0, #28]
 2219 0002 9BB2     		uxth	r3, r3
 2220              	.LVL293:
1458:FWLIB/src/stm32f4xx_tim.c **** 
 2221              		.loc 1 1458 0
 2222 0004 23F48063 		bic	r3, r3, #1024
 2223              	.LVL294:
1461:FWLIB/src/stm32f4xx_tim.c **** 
 2224              		.loc 1 1461 0
 2225 0008 0902     		lsls	r1, r1, #8
 2226              	.LVL295:
 2227 000a 89B2     		uxth	r1, r1
 2228 000c 0B43     		orrs	r3, r3, r1
 2229              	.LVL296:
1464:FWLIB/src/stm32f4xx_tim.c **** }
 2230              		.loc 1 1464 0
 2231 000e 8383     		strh	r3, [r0, #28]	@ movhi
 2232 0010 7047     		bx	lr
 2233              		.cfi_endproc
 2234              	.LFE148:
 2236              		.section	.text.TIM_ClearOC1Ref,"ax",%progbits
 2237              		.align	1
 2238              		.global	TIM_ClearOC1Ref
 2239              		.syntax unified
 2240              		.thumb
 2241              		.thumb_func
 2242              		.fpu softvfp
 2244              	TIM_ClearOC1Ref:
 2245              	.LFB149:
1477:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2246              		.loc 1 1477 0
 2247              		.cfi_startproc
 2248              		@ args = 0, pretend = 0, frame = 0
 2249              		@ frame_needed = 0, uses_anonymous_args = 0
 2250              		@ link register save eliminated.
 2251              	.LVL297:
1484:FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccgXhnD7.s 			page 103


 2252              		.loc 1 1484 0
 2253 0000 038B     		ldrh	r3, [r0, #24]
 2254 0002 9BB2     		uxth	r3, r3
 2255              	.LVL298:
1487:FWLIB/src/stm32f4xx_tim.c **** 
 2256              		.loc 1 1487 0
 2257 0004 23F08003 		bic	r3, r3, #128
 2258              	.LVL299:
1490:FWLIB/src/stm32f4xx_tim.c **** 
 2259              		.loc 1 1490 0
 2260 0008 1943     		orrs	r1, r1, r3
 2261              	.LVL300:
1493:FWLIB/src/stm32f4xx_tim.c **** }
 2262              		.loc 1 1493 0
 2263 000a 0183     		strh	r1, [r0, #24]	@ movhi
 2264 000c 7047     		bx	lr
 2265              		.cfi_endproc
 2266              	.LFE149:
 2268              		.section	.text.TIM_ClearOC2Ref,"ax",%progbits
 2269              		.align	1
 2270              		.global	TIM_ClearOC2Ref
 2271              		.syntax unified
 2272              		.thumb
 2273              		.thumb_func
 2274              		.fpu softvfp
 2276              	TIM_ClearOC2Ref:
 2277              	.LFB150:
1507:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2278              		.loc 1 1507 0
 2279              		.cfi_startproc
 2280              		@ args = 0, pretend = 0, frame = 0
 2281              		@ frame_needed = 0, uses_anonymous_args = 0
 2282              		@ link register save eliminated.
 2283              	.LVL301:
1514:FWLIB/src/stm32f4xx_tim.c **** 
 2284              		.loc 1 1514 0
 2285 0000 038B     		ldrh	r3, [r0, #24]
 2286              	.LVL302:
1517:FWLIB/src/stm32f4xx_tim.c **** 
 2287              		.loc 1 1517 0
 2288 0002 C3F30E03 		ubfx	r3, r3, #0, #15
 2289              	.LVL303:
1520:FWLIB/src/stm32f4xx_tim.c **** 
 2290              		.loc 1 1520 0
 2291 0006 0902     		lsls	r1, r1, #8
 2292              	.LVL304:
 2293 0008 89B2     		uxth	r1, r1
 2294 000a 0B43     		orrs	r3, r3, r1
 2295              	.LVL305:
1523:FWLIB/src/stm32f4xx_tim.c **** }
 2296              		.loc 1 1523 0
 2297 000c 0383     		strh	r3, [r0, #24]	@ movhi
 2298 000e 7047     		bx	lr
 2299              		.cfi_endproc
 2300              	.LFE150:
 2302              		.section	.text.TIM_ClearOC3Ref,"ax",%progbits
 2303              		.align	1
ARM GAS  /tmp/ccgXhnD7.s 			page 104


 2304              		.global	TIM_ClearOC3Ref
 2305              		.syntax unified
 2306              		.thumb
 2307              		.thumb_func
 2308              		.fpu softvfp
 2310              	TIM_ClearOC3Ref:
 2311              	.LFB151:
1536:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2312              		.loc 1 1536 0
 2313              		.cfi_startproc
 2314              		@ args = 0, pretend = 0, frame = 0
 2315              		@ frame_needed = 0, uses_anonymous_args = 0
 2316              		@ link register save eliminated.
 2317              	.LVL306:
1543:FWLIB/src/stm32f4xx_tim.c **** 
 2318              		.loc 1 1543 0
 2319 0000 838B     		ldrh	r3, [r0, #28]
 2320 0002 9BB2     		uxth	r3, r3
 2321              	.LVL307:
1546:FWLIB/src/stm32f4xx_tim.c **** 
 2322              		.loc 1 1546 0
 2323 0004 23F08003 		bic	r3, r3, #128
 2324              	.LVL308:
1549:FWLIB/src/stm32f4xx_tim.c **** 
 2325              		.loc 1 1549 0
 2326 0008 1943     		orrs	r1, r1, r3
 2327              	.LVL309:
1552:FWLIB/src/stm32f4xx_tim.c **** }
 2328              		.loc 1 1552 0
 2329 000a 8183     		strh	r1, [r0, #28]	@ movhi
 2330 000c 7047     		bx	lr
 2331              		.cfi_endproc
 2332              	.LFE151:
 2334              		.section	.text.TIM_ClearOC4Ref,"ax",%progbits
 2335              		.align	1
 2336              		.global	TIM_ClearOC4Ref
 2337              		.syntax unified
 2338              		.thumb
 2339              		.thumb_func
 2340              		.fpu softvfp
 2342              	TIM_ClearOC4Ref:
 2343              	.LFB152:
1565:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2344              		.loc 1 1565 0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 0
 2347              		@ frame_needed = 0, uses_anonymous_args = 0
 2348              		@ link register save eliminated.
 2349              	.LVL310:
1572:FWLIB/src/stm32f4xx_tim.c **** 
 2350              		.loc 1 1572 0
 2351 0000 838B     		ldrh	r3, [r0, #28]
 2352              	.LVL311:
1575:FWLIB/src/stm32f4xx_tim.c **** 
 2353              		.loc 1 1575 0
 2354 0002 C3F30E03 		ubfx	r3, r3, #0, #15
 2355              	.LVL312:
ARM GAS  /tmp/ccgXhnD7.s 			page 105


1578:FWLIB/src/stm32f4xx_tim.c **** 
 2356              		.loc 1 1578 0
 2357 0006 0902     		lsls	r1, r1, #8
 2358              	.LVL313:
 2359 0008 89B2     		uxth	r1, r1
 2360 000a 0B43     		orrs	r3, r3, r1
 2361              	.LVL314:
1581:FWLIB/src/stm32f4xx_tim.c **** }
 2362              		.loc 1 1581 0
 2363 000c 8383     		strh	r3, [r0, #28]	@ movhi
 2364 000e 7047     		bx	lr
 2365              		.cfi_endproc
 2366              	.LFE152:
 2368              		.section	.text.TIM_OC1PolarityConfig,"ax",%progbits
 2369              		.align	1
 2370              		.global	TIM_OC1PolarityConfig
 2371              		.syntax unified
 2372              		.thumb
 2373              		.thumb_func
 2374              		.fpu softvfp
 2376              	TIM_OC1PolarityConfig:
 2377              	.LFB153:
1594:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2378              		.loc 1 1594 0
 2379              		.cfi_startproc
 2380              		@ args = 0, pretend = 0, frame = 0
 2381              		@ frame_needed = 0, uses_anonymous_args = 0
 2382              		@ link register save eliminated.
 2383              	.LVL315:
1601:FWLIB/src/stm32f4xx_tim.c **** 
 2384              		.loc 1 1601 0
 2385 0000 038C     		ldrh	r3, [r0, #32]
 2386 0002 9BB2     		uxth	r3, r3
 2387              	.LVL316:
1604:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCPolarity;
 2388              		.loc 1 1604 0
 2389 0004 23F00203 		bic	r3, r3, #2
 2390              	.LVL317:
1605:FWLIB/src/stm32f4xx_tim.c **** 
 2391              		.loc 1 1605 0
 2392 0008 1943     		orrs	r1, r1, r3
 2393              	.LVL318:
1608:FWLIB/src/stm32f4xx_tim.c **** }
 2394              		.loc 1 1608 0
 2395 000a 0184     		strh	r1, [r0, #32]	@ movhi
 2396 000c 7047     		bx	lr
 2397              		.cfi_endproc
 2398              	.LFE153:
 2400              		.section	.text.TIM_OC1NPolarityConfig,"ax",%progbits
 2401              		.align	1
 2402              		.global	TIM_OC1NPolarityConfig
 2403              		.syntax unified
 2404              		.thumb
 2405              		.thumb_func
 2406              		.fpu softvfp
 2408              	TIM_OC1NPolarityConfig:
 2409              	.LFB154:
ARM GAS  /tmp/ccgXhnD7.s 			page 106


1621:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2410              		.loc 1 1621 0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 0
 2413              		@ frame_needed = 0, uses_anonymous_args = 0
 2414              		@ link register save eliminated.
 2415              	.LVL319:
1627:FWLIB/src/stm32f4xx_tim.c **** 
 2416              		.loc 1 1627 0
 2417 0000 038C     		ldrh	r3, [r0, #32]
 2418 0002 9BB2     		uxth	r3, r3
 2419              	.LVL320:
1630:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCNPolarity;
 2420              		.loc 1 1630 0
 2421 0004 23F00803 		bic	r3, r3, #8
 2422              	.LVL321:
1631:FWLIB/src/stm32f4xx_tim.c **** 
 2423              		.loc 1 1631 0
 2424 0008 1943     		orrs	r1, r1, r3
 2425              	.LVL322:
1634:FWLIB/src/stm32f4xx_tim.c **** }
 2426              		.loc 1 1634 0
 2427 000a 0184     		strh	r1, [r0, #32]	@ movhi
 2428 000c 7047     		bx	lr
 2429              		.cfi_endproc
 2430              	.LFE154:
 2432              		.section	.text.TIM_OC2PolarityConfig,"ax",%progbits
 2433              		.align	1
 2434              		.global	TIM_OC2PolarityConfig
 2435              		.syntax unified
 2436              		.thumb
 2437              		.thumb_func
 2438              		.fpu softvfp
 2440              	TIM_OC2PolarityConfig:
 2441              	.LFB155:
1648:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2442              		.loc 1 1648 0
 2443              		.cfi_startproc
 2444              		@ args = 0, pretend = 0, frame = 0
 2445              		@ frame_needed = 0, uses_anonymous_args = 0
 2446              		@ link register save eliminated.
 2447              	.LVL323:
1655:FWLIB/src/stm32f4xx_tim.c **** 
 2448              		.loc 1 1655 0
 2449 0000 038C     		ldrh	r3, [r0, #32]
 2450 0002 9BB2     		uxth	r3, r3
 2451              	.LVL324:
1658:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 2452              		.loc 1 1658 0
 2453 0004 23F02003 		bic	r3, r3, #32
 2454              	.LVL325:
1659:FWLIB/src/stm32f4xx_tim.c **** 
 2455              		.loc 1 1659 0
 2456 0008 0901     		lsls	r1, r1, #4
 2457              	.LVL326:
 2458 000a 89B2     		uxth	r1, r1
 2459 000c 0B43     		orrs	r3, r3, r1
ARM GAS  /tmp/ccgXhnD7.s 			page 107


 2460              	.LVL327:
1662:FWLIB/src/stm32f4xx_tim.c **** }
 2461              		.loc 1 1662 0
 2462 000e 0384     		strh	r3, [r0, #32]	@ movhi
 2463 0010 7047     		bx	lr
 2464              		.cfi_endproc
 2465              	.LFE155:
 2467              		.section	.text.TIM_OC2NPolarityConfig,"ax",%progbits
 2468              		.align	1
 2469              		.global	TIM_OC2NPolarityConfig
 2470              		.syntax unified
 2471              		.thumb
 2472              		.thumb_func
 2473              		.fpu softvfp
 2475              	TIM_OC2NPolarityConfig:
 2476              	.LFB156:
1675:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2477              		.loc 1 1675 0
 2478              		.cfi_startproc
 2479              		@ args = 0, pretend = 0, frame = 0
 2480              		@ frame_needed = 0, uses_anonymous_args = 0
 2481              		@ link register save eliminated.
 2482              	.LVL328:
1682:FWLIB/src/stm32f4xx_tim.c **** 
 2483              		.loc 1 1682 0
 2484 0000 038C     		ldrh	r3, [r0, #32]
 2485 0002 9BB2     		uxth	r3, r3
 2486              	.LVL329:
1685:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 2487              		.loc 1 1685 0
 2488 0004 23F08003 		bic	r3, r3, #128
 2489              	.LVL330:
1686:FWLIB/src/stm32f4xx_tim.c **** 
 2490              		.loc 1 1686 0
 2491 0008 0901     		lsls	r1, r1, #4
 2492              	.LVL331:
 2493 000a 89B2     		uxth	r1, r1
 2494 000c 0B43     		orrs	r3, r3, r1
 2495              	.LVL332:
1689:FWLIB/src/stm32f4xx_tim.c **** }
 2496              		.loc 1 1689 0
 2497 000e 0384     		strh	r3, [r0, #32]	@ movhi
 2498 0010 7047     		bx	lr
 2499              		.cfi_endproc
 2500              	.LFE156:
 2502              		.section	.text.TIM_OC3PolarityConfig,"ax",%progbits
 2503              		.align	1
 2504              		.global	TIM_OC3PolarityConfig
 2505              		.syntax unified
 2506              		.thumb
 2507              		.thumb_func
 2508              		.fpu softvfp
 2510              	TIM_OC3PolarityConfig:
 2511              	.LFB157:
1702:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2512              		.loc 1 1702 0
 2513              		.cfi_startproc
ARM GAS  /tmp/ccgXhnD7.s 			page 108


 2514              		@ args = 0, pretend = 0, frame = 0
 2515              		@ frame_needed = 0, uses_anonymous_args = 0
 2516              		@ link register save eliminated.
 2517              	.LVL333:
1709:FWLIB/src/stm32f4xx_tim.c **** 
 2518              		.loc 1 1709 0
 2519 0000 038C     		ldrh	r3, [r0, #32]
 2520 0002 9BB2     		uxth	r3, r3
 2521              	.LVL334:
1712:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 2522              		.loc 1 1712 0
 2523 0004 23F40073 		bic	r3, r3, #512
 2524              	.LVL335:
1713:FWLIB/src/stm32f4xx_tim.c **** 
 2525              		.loc 1 1713 0
 2526 0008 0902     		lsls	r1, r1, #8
 2527              	.LVL336:
 2528 000a 89B2     		uxth	r1, r1
 2529 000c 0B43     		orrs	r3, r3, r1
 2530              	.LVL337:
1716:FWLIB/src/stm32f4xx_tim.c **** }
 2531              		.loc 1 1716 0
 2532 000e 0384     		strh	r3, [r0, #32]	@ movhi
 2533 0010 7047     		bx	lr
 2534              		.cfi_endproc
 2535              	.LFE157:
 2537              		.section	.text.TIM_OC3NPolarityConfig,"ax",%progbits
 2538              		.align	1
 2539              		.global	TIM_OC3NPolarityConfig
 2540              		.syntax unified
 2541              		.thumb
 2542              		.thumb_func
 2543              		.fpu softvfp
 2545              	TIM_OC3NPolarityConfig:
 2546              	.LFB158:
1729:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2547              		.loc 1 1729 0
 2548              		.cfi_startproc
 2549              		@ args = 0, pretend = 0, frame = 0
 2550              		@ frame_needed = 0, uses_anonymous_args = 0
 2551              		@ link register save eliminated.
 2552              	.LVL338:
1736:FWLIB/src/stm32f4xx_tim.c **** 
 2553              		.loc 1 1736 0
 2554 0000 038C     		ldrh	r3, [r0, #32]
 2555 0002 9BB2     		uxth	r3, r3
 2556              	.LVL339:
1739:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 2557              		.loc 1 1739 0
 2558 0004 23F40063 		bic	r3, r3, #2048
 2559              	.LVL340:
1740:FWLIB/src/stm32f4xx_tim.c **** 
 2560              		.loc 1 1740 0
 2561 0008 0902     		lsls	r1, r1, #8
 2562              	.LVL341:
 2563 000a 89B2     		uxth	r1, r1
 2564 000c 0B43     		orrs	r3, r3, r1
ARM GAS  /tmp/ccgXhnD7.s 			page 109


 2565              	.LVL342:
1743:FWLIB/src/stm32f4xx_tim.c **** }
 2566              		.loc 1 1743 0
 2567 000e 0384     		strh	r3, [r0, #32]	@ movhi
 2568 0010 7047     		bx	lr
 2569              		.cfi_endproc
 2570              	.LFE158:
 2572              		.section	.text.TIM_OC4PolarityConfig,"ax",%progbits
 2573              		.align	1
 2574              		.global	TIM_OC4PolarityConfig
 2575              		.syntax unified
 2576              		.thumb
 2577              		.thumb_func
 2578              		.fpu softvfp
 2580              	TIM_OC4PolarityConfig:
 2581              	.LFB159:
1756:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2582              		.loc 1 1756 0
 2583              		.cfi_startproc
 2584              		@ args = 0, pretend = 0, frame = 0
 2585              		@ frame_needed = 0, uses_anonymous_args = 0
 2586              		@ link register save eliminated.
 2587              	.LVL343:
1763:FWLIB/src/stm32f4xx_tim.c **** 
 2588              		.loc 1 1763 0
 2589 0000 038C     		ldrh	r3, [r0, #32]
 2590 0002 9BB2     		uxth	r3, r3
 2591              	.LVL344:
1766:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 2592              		.loc 1 1766 0
 2593 0004 23F40053 		bic	r3, r3, #8192
 2594              	.LVL345:
1767:FWLIB/src/stm32f4xx_tim.c **** 
 2595              		.loc 1 1767 0
 2596 0008 0903     		lsls	r1, r1, #12
 2597              	.LVL346:
 2598 000a 89B2     		uxth	r1, r1
 2599 000c 0B43     		orrs	r3, r3, r1
 2600              	.LVL347:
1770:FWLIB/src/stm32f4xx_tim.c **** }
 2601              		.loc 1 1770 0
 2602 000e 0384     		strh	r3, [r0, #32]	@ movhi
 2603 0010 7047     		bx	lr
 2604              		.cfi_endproc
 2605              	.LFE159:
 2607              		.section	.text.TIM_CCxCmd,"ax",%progbits
 2608              		.align	1
 2609              		.global	TIM_CCxCmd
 2610              		.syntax unified
 2611              		.thumb
 2612              		.thumb_func
 2613              		.fpu softvfp
 2615              	TIM_CCxCmd:
 2616              	.LFB160:
1787:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmp = 0;
 2617              		.loc 1 1787 0
 2618              		.cfi_startproc
ARM GAS  /tmp/ccgXhnD7.s 			page 110


 2619              		@ args = 0, pretend = 0, frame = 0
 2620              		@ frame_needed = 0, uses_anonymous_args = 0
 2621              		@ link register save eliminated.
 2622              	.LVL348:
 2623 0000 10B4     		push	{r4}
 2624              	.LCFI23:
 2625              		.cfi_def_cfa_offset 4
 2626              		.cfi_offset 4, -4
 2627              	.LVL349:
1795:FWLIB/src/stm32f4xx_tim.c **** 
 2628              		.loc 1 1795 0
 2629 0002 0123     		movs	r3, #1
 2630 0004 8B40     		lsls	r3, r3, r1
 2631 0006 9BB2     		uxth	r3, r3
 2632              	.LVL350:
1798:FWLIB/src/stm32f4xx_tim.c **** 
 2633              		.loc 1 1798 0
 2634 0008 048C     		ldrh	r4, [r0, #32]
 2635 000a DB43     		mvns	r3, r3
 2636              	.LVL351:
 2637 000c 9BB2     		uxth	r3, r3
 2638              	.LVL352:
 2639 000e 2340     		ands	r3, r3, r4
 2640 0010 0384     		strh	r3, [r0, #32]	@ movhi
1801:FWLIB/src/stm32f4xx_tim.c **** }
 2641              		.loc 1 1801 0
 2642 0012 038C     		ldrh	r3, [r0, #32]
 2643 0014 9BB2     		uxth	r3, r3
 2644 0016 8A40     		lsls	r2, r2, r1
 2645              	.LVL353:
 2646 0018 92B2     		uxth	r2, r2
 2647 001a 1A43     		orrs	r2, r2, r3
 2648 001c 0284     		strh	r2, [r0, #32]	@ movhi
1802:FWLIB/src/stm32f4xx_tim.c **** 
 2649              		.loc 1 1802 0
 2650 001e 10BC     		pop	{r4}
 2651              	.LCFI24:
 2652              		.cfi_restore 4
 2653              		.cfi_def_cfa_offset 0
 2654 0020 7047     		bx	lr
 2655              		.cfi_endproc
 2656              	.LFE160:
 2658              		.section	.text.TIM_CCxNCmd,"ax",%progbits
 2659              		.align	1
 2660              		.global	TIM_CCxNCmd
 2661              		.syntax unified
 2662              		.thumb
 2663              		.thumb_func
 2664              		.fpu softvfp
 2666              	TIM_CCxNCmd:
 2667              	.LFB161:
1817:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmp = 0;
 2668              		.loc 1 1817 0
 2669              		.cfi_startproc
 2670              		@ args = 0, pretend = 0, frame = 0
 2671              		@ frame_needed = 0, uses_anonymous_args = 0
 2672              		@ link register save eliminated.
ARM GAS  /tmp/ccgXhnD7.s 			page 111


 2673              	.LVL354:
 2674 0000 10B4     		push	{r4}
 2675              	.LCFI25:
 2676              		.cfi_def_cfa_offset 4
 2677              		.cfi_offset 4, -4
 2678              	.LVL355:
1825:FWLIB/src/stm32f4xx_tim.c **** 
 2679              		.loc 1 1825 0
 2680 0002 0423     		movs	r3, #4
 2681 0004 8B40     		lsls	r3, r3, r1
 2682 0006 9BB2     		uxth	r3, r3
 2683              	.LVL356:
1828:FWLIB/src/stm32f4xx_tim.c **** 
 2684              		.loc 1 1828 0
 2685 0008 048C     		ldrh	r4, [r0, #32]
 2686 000a DB43     		mvns	r3, r3
 2687              	.LVL357:
 2688 000c 9BB2     		uxth	r3, r3
 2689              	.LVL358:
 2690 000e 2340     		ands	r3, r3, r4
 2691 0010 0384     		strh	r3, [r0, #32]	@ movhi
1831:FWLIB/src/stm32f4xx_tim.c **** }
 2692              		.loc 1 1831 0
 2693 0012 038C     		ldrh	r3, [r0, #32]
 2694 0014 9BB2     		uxth	r3, r3
 2695 0016 8A40     		lsls	r2, r2, r1
 2696              	.LVL359:
 2697 0018 92B2     		uxth	r2, r2
 2698 001a 1A43     		orrs	r2, r2, r3
 2699 001c 0284     		strh	r2, [r0, #32]	@ movhi
1832:FWLIB/src/stm32f4xx_tim.c **** /**
 2700              		.loc 1 1832 0
 2701 001e 10BC     		pop	{r4}
 2702              	.LCFI26:
 2703              		.cfi_restore 4
 2704              		.cfi_def_cfa_offset 0
 2705 0020 7047     		bx	lr
 2706              		.cfi_endproc
 2707              	.LFE161:
 2709              		.section	.text.TIM_ICStructInit,"ax",%progbits
 2710              		.align	1
 2711              		.global	TIM_ICStructInit
 2712              		.syntax unified
 2713              		.thumb
 2714              		.thumb_func
 2715              		.fpu softvfp
 2717              	TIM_ICStructInit:
 2718              	.LFB163:
1957:FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 2719              		.loc 1 1957 0
 2720              		.cfi_startproc
 2721              		@ args = 0, pretend = 0, frame = 0
 2722              		@ frame_needed = 0, uses_anonymous_args = 0
 2723              		@ link register save eliminated.
 2724              	.LVL360:
1959:FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 2725              		.loc 1 1959 0
ARM GAS  /tmp/ccgXhnD7.s 			page 112


 2726 0000 0023     		movs	r3, #0
 2727 0002 0380     		strh	r3, [r0]	@ movhi
1960:FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 2728              		.loc 1 1960 0
 2729 0004 4380     		strh	r3, [r0, #2]	@ movhi
1961:FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 2730              		.loc 1 1961 0
 2731 0006 0122     		movs	r2, #1
 2732 0008 8280     		strh	r2, [r0, #4]	@ movhi
1962:FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
 2733              		.loc 1 1962 0
 2734 000a C380     		strh	r3, [r0, #6]	@ movhi
1963:FWLIB/src/stm32f4xx_tim.c **** }
 2735              		.loc 1 1963 0
 2736 000c 0381     		strh	r3, [r0, #8]	@ movhi
 2737 000e 7047     		bx	lr
 2738              		.cfi_endproc
 2739              	.LFE163:
 2741              		.section	.text.TIM_GetCapture1,"ax",%progbits
 2742              		.align	1
 2743              		.global	TIM_GetCapture1
 2744              		.syntax unified
 2745              		.thumb
 2746              		.thumb_func
 2747              		.fpu softvfp
 2749              	TIM_GetCapture1:
 2750              	.LFB165:
2033:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2751              		.loc 1 2033 0
 2752              		.cfi_startproc
 2753              		@ args = 0, pretend = 0, frame = 0
 2754              		@ frame_needed = 0, uses_anonymous_args = 0
 2755              		@ link register save eliminated.
 2756              	.LVL361:
2038:FWLIB/src/stm32f4xx_tim.c **** }
 2757              		.loc 1 2038 0
 2758 0000 406B     		ldr	r0, [r0, #52]
 2759              	.LVL362:
2039:FWLIB/src/stm32f4xx_tim.c **** 
 2760              		.loc 1 2039 0
 2761 0002 7047     		bx	lr
 2762              		.cfi_endproc
 2763              	.LFE165:
 2765              		.section	.text.TIM_GetCapture2,"ax",%progbits
 2766              		.align	1
 2767              		.global	TIM_GetCapture2
 2768              		.syntax unified
 2769              		.thumb
 2770              		.thumb_func
 2771              		.fpu softvfp
 2773              	TIM_GetCapture2:
 2774              	.LFB166:
2048:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2775              		.loc 1 2048 0
 2776              		.cfi_startproc
 2777              		@ args = 0, pretend = 0, frame = 0
 2778              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccgXhnD7.s 			page 113


 2779              		@ link register save eliminated.
 2780              	.LVL363:
2053:FWLIB/src/stm32f4xx_tim.c **** }
 2781              		.loc 1 2053 0
 2782 0000 806B     		ldr	r0, [r0, #56]
 2783              	.LVL364:
2054:FWLIB/src/stm32f4xx_tim.c **** 
 2784              		.loc 1 2054 0
 2785 0002 7047     		bx	lr
 2786              		.cfi_endproc
 2787              	.LFE166:
 2789              		.section	.text.TIM_GetCapture3,"ax",%progbits
 2790              		.align	1
 2791              		.global	TIM_GetCapture3
 2792              		.syntax unified
 2793              		.thumb
 2794              		.thumb_func
 2795              		.fpu softvfp
 2797              	TIM_GetCapture3:
 2798              	.LFB167:
2062:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2799              		.loc 1 2062 0
 2800              		.cfi_startproc
 2801              		@ args = 0, pretend = 0, frame = 0
 2802              		@ frame_needed = 0, uses_anonymous_args = 0
 2803              		@ link register save eliminated.
 2804              	.LVL365:
2067:FWLIB/src/stm32f4xx_tim.c **** }
 2805              		.loc 1 2067 0
 2806 0000 C06B     		ldr	r0, [r0, #60]
 2807              	.LVL366:
2068:FWLIB/src/stm32f4xx_tim.c **** 
 2808              		.loc 1 2068 0
 2809 0002 7047     		bx	lr
 2810              		.cfi_endproc
 2811              	.LFE167:
 2813              		.section	.text.TIM_GetCapture4,"ax",%progbits
 2814              		.align	1
 2815              		.global	TIM_GetCapture4
 2816              		.syntax unified
 2817              		.thumb
 2818              		.thumb_func
 2819              		.fpu softvfp
 2821              	TIM_GetCapture4:
 2822              	.LFB168:
2076:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2823              		.loc 1 2076 0
 2824              		.cfi_startproc
 2825              		@ args = 0, pretend = 0, frame = 0
 2826              		@ frame_needed = 0, uses_anonymous_args = 0
 2827              		@ link register save eliminated.
 2828              	.LVL367:
2081:FWLIB/src/stm32f4xx_tim.c **** }
 2829              		.loc 1 2081 0
 2830 0000 006C     		ldr	r0, [r0, #64]
 2831              	.LVL368:
2082:FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccgXhnD7.s 			page 114


 2832              		.loc 1 2082 0
 2833 0002 7047     		bx	lr
 2834              		.cfi_endproc
 2835              	.LFE168:
 2837              		.section	.text.TIM_SetIC1Prescaler,"ax",%progbits
 2838              		.align	1
 2839              		.global	TIM_SetIC1Prescaler
 2840              		.syntax unified
 2841              		.thumb
 2842              		.thumb_func
 2843              		.fpu softvfp
 2845              	TIM_SetIC1Prescaler:
 2846              	.LFB169:
2096:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2847              		.loc 1 2096 0
 2848              		.cfi_startproc
 2849              		@ args = 0, pretend = 0, frame = 0
 2850              		@ frame_needed = 0, uses_anonymous_args = 0
 2851              		@ link register save eliminated.
 2852              	.LVL369:
2102:FWLIB/src/stm32f4xx_tim.c **** 
 2853              		.loc 1 2102 0
 2854 0000 038B     		ldrh	r3, [r0, #24]
 2855 0002 9BB2     		uxth	r3, r3
 2856 0004 23F00C03 		bic	r3, r3, #12
 2857 0008 9BB2     		uxth	r3, r3
 2858 000a 0383     		strh	r3, [r0, #24]	@ movhi
2105:FWLIB/src/stm32f4xx_tim.c **** }
 2859              		.loc 1 2105 0
 2860 000c 038B     		ldrh	r3, [r0, #24]
 2861 000e 9BB2     		uxth	r3, r3
 2862 0010 1943     		orrs	r1, r1, r3
 2863              	.LVL370:
 2864 0012 0183     		strh	r1, [r0, #24]	@ movhi
 2865 0014 7047     		bx	lr
 2866              		.cfi_endproc
 2867              	.LFE169:
 2869              		.section	.text.TIM_SetIC2Prescaler,"ax",%progbits
 2870              		.align	1
 2871              		.global	TIM_SetIC2Prescaler
 2872              		.syntax unified
 2873              		.thumb
 2874              		.thumb_func
 2875              		.fpu softvfp
 2877              	TIM_SetIC2Prescaler:
 2878              	.LFB170:
2121:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2879              		.loc 1 2121 0
 2880              		.cfi_startproc
 2881              		@ args = 0, pretend = 0, frame = 0
 2882              		@ frame_needed = 0, uses_anonymous_args = 0
 2883              		@ link register save eliminated.
 2884              	.LVL371:
2127:FWLIB/src/stm32f4xx_tim.c **** 
 2885              		.loc 1 2127 0
 2886 0000 038B     		ldrh	r3, [r0, #24]
 2887 0002 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccgXhnD7.s 			page 115


 2888 0004 23F44063 		bic	r3, r3, #3072
 2889 0008 9BB2     		uxth	r3, r3
 2890 000a 0383     		strh	r3, [r0, #24]	@ movhi
2130:FWLIB/src/stm32f4xx_tim.c **** }
 2891              		.loc 1 2130 0
 2892 000c 038B     		ldrh	r3, [r0, #24]
 2893 000e 9BB2     		uxth	r3, r3
 2894 0010 0902     		lsls	r1, r1, #8
 2895              	.LVL372:
 2896 0012 89B2     		uxth	r1, r1
 2897 0014 0B43     		orrs	r3, r3, r1
 2898 0016 0383     		strh	r3, [r0, #24]	@ movhi
 2899 0018 7047     		bx	lr
 2900              		.cfi_endproc
 2901              	.LFE170:
 2903              		.section	.text.TIM_PWMIConfig,"ax",%progbits
 2904              		.align	1
 2905              		.global	TIM_PWMIConfig
 2906              		.syntax unified
 2907              		.thumb
 2908              		.thumb_func
 2909              		.fpu softvfp
 2911              	TIM_PWMIConfig:
 2912              	.LFB164:
1976:FWLIB/src/stm32f4xx_tim.c ****   uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 2913              		.loc 1 1976 0
 2914              		.cfi_startproc
 2915              		@ args = 0, pretend = 0, frame = 0
 2916              		@ frame_needed = 0, uses_anonymous_args = 0
 2917              	.LVL373:
 2918 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2919              	.LCFI27:
 2920              		.cfi_def_cfa_offset 24
 2921              		.cfi_offset 3, -24
 2922              		.cfi_offset 4, -20
 2923              		.cfi_offset 5, -16
 2924              		.cfi_offset 6, -12
 2925              		.cfi_offset 7, -8
 2926              		.cfi_offset 14, -4
 2927 0002 0546     		mov	r5, r0
 2928 0004 0C46     		mov	r4, r1
 2929              	.LVL374:
1984:FWLIB/src/stm32f4xx_tim.c ****   {
 2930              		.loc 1 1984 0
 2931 0006 4988     		ldrh	r1, [r1, #2]
 2932              	.LVL375:
 2933 0008 C9B9     		cbnz	r1, .L147
1986:FWLIB/src/stm32f4xx_tim.c ****   }
 2934              		.loc 1 1986 0
 2935 000a 0226     		movs	r6, #2
 2936              	.L143:
 2937              	.LVL376:
1993:FWLIB/src/stm32f4xx_tim.c ****   {
 2938              		.loc 1 1993 0
 2939 000c A288     		ldrh	r2, [r4, #4]
 2940 000e 012A     		cmp	r2, #1
 2941 0010 17D0     		beq	.L150
ARM GAS  /tmp/ccgXhnD7.s 			page 116


1999:FWLIB/src/stm32f4xx_tim.c ****   }
 2942              		.loc 1 1999 0
 2943 0012 0127     		movs	r7, #1
 2944              	.L144:
 2945              	.LVL377:
2001:FWLIB/src/stm32f4xx_tim.c ****   {
 2946              		.loc 1 2001 0
 2947 0014 2388     		ldrh	r3, [r4]
 2948 0016 B3B1     		cbz	r3, .L151
2016:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 2949              		.loc 1 2016 0
 2950 0018 2389     		ldrh	r3, [r4, #8]
 2951 001a 2846     		mov	r0, r5
 2952              	.LVL378:
 2953 001c FFF7FEFF 		bl	TI2_Config
 2954              	.LVL379:
2019:FWLIB/src/stm32f4xx_tim.c ****     /* TI1 Configuration */
 2955              		.loc 1 2019 0
 2956 0020 E188     		ldrh	r1, [r4, #6]
 2957 0022 2846     		mov	r0, r5
 2958 0024 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 2959              	.LVL380:
2021:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
 2960              		.loc 1 2021 0
 2961 0028 2389     		ldrh	r3, [r4, #8]
 2962 002a 3A46     		mov	r2, r7
 2963 002c 3146     		mov	r1, r6
 2964 002e 2846     		mov	r0, r5
 2965 0030 FFF7FEFF 		bl	TI1_Config
 2966              	.LVL381:
2023:FWLIB/src/stm32f4xx_tim.c ****   }
 2967              		.loc 1 2023 0
 2968 0034 E188     		ldrh	r1, [r4, #6]
 2969 0036 2846     		mov	r0, r5
 2970 0038 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2971              	.LVL382:
 2972 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2973              	.LVL383:
 2974              	.L147:
1990:FWLIB/src/stm32f4xx_tim.c ****   }
 2975              		.loc 1 1990 0
 2976 003e 0026     		movs	r6, #0
 2977 0040 E4E7     		b	.L143
 2978              	.LVL384:
 2979              	.L150:
1995:FWLIB/src/stm32f4xx_tim.c ****   }
 2980              		.loc 1 1995 0
 2981 0042 0227     		movs	r7, #2
 2982 0044 E6E7     		b	.L144
 2983              	.LVL385:
 2984              	.L151:
2004:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 2985              		.loc 1 2004 0
 2986 0046 2389     		ldrh	r3, [r4, #8]
 2987 0048 2846     		mov	r0, r5
 2988              	.LVL386:
 2989 004a FFF7FEFF 		bl	TI1_Config
ARM GAS  /tmp/ccgXhnD7.s 			page 117


 2990              	.LVL387:
2007:FWLIB/src/stm32f4xx_tim.c ****     /* TI2 Configuration */
 2991              		.loc 1 2007 0
 2992 004e E188     		ldrh	r1, [r4, #6]
 2993 0050 2846     		mov	r0, r5
 2994 0052 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2995              	.LVL388:
2009:FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
 2996              		.loc 1 2009 0
 2997 0056 2389     		ldrh	r3, [r4, #8]
 2998 0058 3A46     		mov	r2, r7
 2999 005a 3146     		mov	r1, r6
 3000 005c 2846     		mov	r0, r5
 3001 005e FFF7FEFF 		bl	TI2_Config
 3002              	.LVL389:
2011:FWLIB/src/stm32f4xx_tim.c ****   }
 3003              		.loc 1 2011 0
 3004 0062 E188     		ldrh	r1, [r4, #6]
 3005 0064 2846     		mov	r0, r5
 3006 0066 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 3007              	.LVL390:
 3008 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3009              		.cfi_endproc
 3010              	.LFE164:
 3012              		.section	.text.TIM_SetIC3Prescaler,"ax",%progbits
 3013              		.align	1
 3014              		.global	TIM_SetIC3Prescaler
 3015              		.syntax unified
 3016              		.thumb
 3017              		.thumb_func
 3018              		.fpu softvfp
 3020              	TIM_SetIC3Prescaler:
 3021              	.LFB171:
2145:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3022              		.loc 1 2145 0
 3023              		.cfi_startproc
 3024              		@ args = 0, pretend = 0, frame = 0
 3025              		@ frame_needed = 0, uses_anonymous_args = 0
 3026              		@ link register save eliminated.
 3027              	.LVL391:
2151:FWLIB/src/stm32f4xx_tim.c **** 
 3028              		.loc 1 2151 0
 3029 0000 838B     		ldrh	r3, [r0, #28]
 3030 0002 9BB2     		uxth	r3, r3
 3031 0004 23F00C03 		bic	r3, r3, #12
 3032 0008 9BB2     		uxth	r3, r3
 3033 000a 8383     		strh	r3, [r0, #28]	@ movhi
2154:FWLIB/src/stm32f4xx_tim.c **** }
 3034              		.loc 1 2154 0
 3035 000c 838B     		ldrh	r3, [r0, #28]
 3036 000e 9BB2     		uxth	r3, r3
 3037 0010 1943     		orrs	r1, r1, r3
 3038              	.LVL392:
 3039 0012 8183     		strh	r1, [r0, #28]	@ movhi
 3040 0014 7047     		bx	lr
 3041              		.cfi_endproc
 3042              	.LFE171:
ARM GAS  /tmp/ccgXhnD7.s 			page 118


 3044              		.section	.text.TIM_SetIC4Prescaler,"ax",%progbits
 3045              		.align	1
 3046              		.global	TIM_SetIC4Prescaler
 3047              		.syntax unified
 3048              		.thumb
 3049              		.thumb_func
 3050              		.fpu softvfp
 3052              	TIM_SetIC4Prescaler:
 3053              	.LFB172:
2169:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3054              		.loc 1 2169 0
 3055              		.cfi_startproc
 3056              		@ args = 0, pretend = 0, frame = 0
 3057              		@ frame_needed = 0, uses_anonymous_args = 0
 3058              		@ link register save eliminated.
 3059              	.LVL393:
2175:FWLIB/src/stm32f4xx_tim.c **** 
 3060              		.loc 1 2175 0
 3061 0000 838B     		ldrh	r3, [r0, #28]
 3062 0002 9BB2     		uxth	r3, r3
 3063 0004 23F44063 		bic	r3, r3, #3072
 3064 0008 9BB2     		uxth	r3, r3
 3065 000a 8383     		strh	r3, [r0, #28]	@ movhi
2178:FWLIB/src/stm32f4xx_tim.c **** }
 3066              		.loc 1 2178 0
 3067 000c 838B     		ldrh	r3, [r0, #28]
 3068 000e 9BB2     		uxth	r3, r3
 3069 0010 0902     		lsls	r1, r1, #8
 3070              	.LVL394:
 3071 0012 89B2     		uxth	r1, r1
 3072 0014 0B43     		orrs	r3, r3, r1
 3073 0016 8383     		strh	r3, [r0, #28]	@ movhi
 3074 0018 7047     		bx	lr
 3075              		.cfi_endproc
 3076              	.LFE172:
 3078              		.section	.text.TIM_ICInit,"ax",%progbits
 3079              		.align	1
 3080              		.global	TIM_ICInit
 3081              		.syntax unified
 3082              		.thumb
 3083              		.thumb_func
 3084              		.fpu softvfp
 3086              	TIM_ICInit:
 3087              	.LFB162:
1901:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3088              		.loc 1 1901 0
 3089              		.cfi_startproc
 3090              		@ args = 0, pretend = 0, frame = 0
 3091              		@ frame_needed = 0, uses_anonymous_args = 0
 3092              	.LVL395:
 3093 0000 38B5     		push	{r3, r4, r5, lr}
 3094              	.LCFI28:
 3095              		.cfi_def_cfa_offset 16
 3096              		.cfi_offset 3, -16
 3097              		.cfi_offset 4, -12
 3098              		.cfi_offset 5, -8
 3099              		.cfi_offset 14, -4
ARM GAS  /tmp/ccgXhnD7.s 			page 119


 3100 0002 0546     		mov	r5, r0
 3101 0004 0C46     		mov	r4, r1
1909:FWLIB/src/stm32f4xx_tim.c ****   {
 3102              		.loc 1 1909 0
 3103 0006 0B88     		ldrh	r3, [r1]
 3104 0008 6BB1     		cbz	r3, .L160
1918:FWLIB/src/stm32f4xx_tim.c ****   {
 3105              		.loc 1 1918 0
 3106 000a 042B     		cmp	r3, #4
 3107 000c 15D0     		beq	.L161
1928:FWLIB/src/stm32f4xx_tim.c ****   {
 3108              		.loc 1 1928 0
 3109 000e 082B     		cmp	r3, #8
 3110 0010 1DD0     		beq	.L162
1942:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 3111              		.loc 1 1942 0
 3112 0012 0B89     		ldrh	r3, [r1, #8]
 3113 0014 8A88     		ldrh	r2, [r1, #4]
 3114 0016 4988     		ldrh	r1, [r1, #2]
 3115              	.LVL396:
 3116 0018 FFF7FEFF 		bl	TI4_Config
 3117              	.LVL397:
1946:FWLIB/src/stm32f4xx_tim.c ****   }
 3118              		.loc 1 1946 0
 3119 001c E188     		ldrh	r1, [r4, #6]
 3120 001e 2846     		mov	r0, r5
 3121 0020 FFF7FEFF 		bl	TIM_SetIC4Prescaler
 3122              	.LVL398:
 3123 0024 38BD     		pop	{r3, r4, r5, pc}
 3124              	.LVL399:
 3125              	.L160:
1912:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 3126              		.loc 1 1912 0
 3127 0026 0B89     		ldrh	r3, [r1, #8]
 3128 0028 8A88     		ldrh	r2, [r1, #4]
 3129 002a 4988     		ldrh	r1, [r1, #2]
 3130              	.LVL400:
 3131 002c FFF7FEFF 		bl	TI1_Config
 3132              	.LVL401:
1916:FWLIB/src/stm32f4xx_tim.c ****   }
 3133              		.loc 1 1916 0
 3134 0030 E188     		ldrh	r1, [r4, #6]
 3135 0032 2846     		mov	r0, r5
 3136 0034 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 3137              	.LVL402:
 3138 0038 38BD     		pop	{r3, r4, r5, pc}
 3139              	.LVL403:
 3140              	.L161:
1922:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 3141              		.loc 1 1922 0
 3142 003a 0B89     		ldrh	r3, [r1, #8]
 3143 003c 8A88     		ldrh	r2, [r1, #4]
 3144 003e 4988     		ldrh	r1, [r1, #2]
 3145              	.LVL404:
 3146 0040 FFF7FEFF 		bl	TI2_Config
 3147              	.LVL405:
1926:FWLIB/src/stm32f4xx_tim.c ****   }
ARM GAS  /tmp/ccgXhnD7.s 			page 120


 3148              		.loc 1 1926 0
 3149 0044 E188     		ldrh	r1, [r4, #6]
 3150 0046 2846     		mov	r0, r5
 3151 0048 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 3152              	.LVL406:
 3153 004c 38BD     		pop	{r3, r4, r5, pc}
 3154              	.LVL407:
 3155              	.L162:
1932:FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 3156              		.loc 1 1932 0
 3157 004e 0B89     		ldrh	r3, [r1, #8]
 3158 0050 8A88     		ldrh	r2, [r1, #4]
 3159 0052 4988     		ldrh	r1, [r1, #2]
 3160              	.LVL408:
 3161 0054 FFF7FEFF 		bl	TI3_Config
 3162              	.LVL409:
1936:FWLIB/src/stm32f4xx_tim.c ****   }
 3163              		.loc 1 1936 0
 3164 0058 E188     		ldrh	r1, [r4, #6]
 3165 005a 2846     		mov	r0, r5
 3166 005c FFF7FEFF 		bl	TIM_SetIC3Prescaler
 3167              	.LVL410:
 3168 0060 38BD     		pop	{r3, r4, r5, pc}
 3169              		.cfi_endproc
 3170              	.LFE162:
 3172              		.section	.text.TIM_BDTRConfig,"ax",%progbits
 3173              		.align	1
 3174              		.global	TIM_BDTRConfig
 3175              		.syntax unified
 3176              		.thumb
 3177              		.thumb_func
 3178              		.fpu softvfp
 3180              	TIM_BDTRConfig:
 3181              	.LFB173:
2222:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3182              		.loc 1 2222 0
 3183              		.cfi_startproc
 3184              		@ args = 0, pretend = 0, frame = 0
 3185              		@ frame_needed = 0, uses_anonymous_args = 0
 3186              	.LVL411:
 3187 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3188              	.LCFI29:
 3189              		.cfi_def_cfa_offset 20
 3190              		.cfi_offset 4, -20
 3191              		.cfi_offset 5, -16
 3192              		.cfi_offset 6, -12
 3193              		.cfi_offset 7, -8
 3194              		.cfi_offset 14, -4
2234:FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 3195              		.loc 1 2234 0
 3196 0002 0F88     		ldrh	r7, [r1]
 3197 0004 B1F802E0 		ldrh	lr, [r1, #2]
2235:FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 3198              		.loc 1 2235 0
 3199 0008 8E88     		ldrh	r6, [r1, #4]
 3200 000a CD88     		ldrh	r5, [r1, #6]
2236:FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_AutomaticOutput;
ARM GAS  /tmp/ccgXhnD7.s 			page 121


 3201              		.loc 1 2236 0
 3202 000c 0C89     		ldrh	r4, [r1, #8]
 3203 000e 4A89     		ldrh	r2, [r1, #10]
2237:FWLIB/src/stm32f4xx_tim.c **** }
 3204              		.loc 1 2237 0
 3205 0010 8B89     		ldrh	r3, [r1, #12]
2234:FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 3206              		.loc 1 2234 0
 3207 0012 47EA0E01 		orr	r1, r7, lr
 3208              	.LVL412:
 3209 0016 3143     		orrs	r1, r1, r6
 3210 0018 2943     		orrs	r1, r1, r5
 3211 001a 2143     		orrs	r1, r1, r4
 3212 001c 0A43     		orrs	r2, r2, r1
 3213 001e 1343     		orrs	r3, r3, r2
 3214 0020 A0F84430 		strh	r3, [r0, #68]	@ movhi
 3215 0024 F0BD     		pop	{r4, r5, r6, r7, pc}
 3216              		.cfi_endproc
 3217              	.LFE173:
 3219              		.section	.text.TIM_BDTRStructInit,"ax",%progbits
 3220              		.align	1
 3221              		.global	TIM_BDTRStructInit
 3222              		.syntax unified
 3223              		.thumb
 3224              		.thumb_func
 3225              		.fpu softvfp
 3227              	TIM_BDTRStructInit:
 3228              	.LFB174:
2247:FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 3229              		.loc 1 2247 0
 3230              		.cfi_startproc
 3231              		@ args = 0, pretend = 0, frame = 0
 3232              		@ frame_needed = 0, uses_anonymous_args = 0
 3233              		@ link register save eliminated.
 3234              	.LVL413:
2249:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 3235              		.loc 1 2249 0
 3236 0000 0023     		movs	r3, #0
 3237 0002 0380     		strh	r3, [r0]	@ movhi
2250:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 3238              		.loc 1 2250 0
 3239 0004 4380     		strh	r3, [r0, #2]	@ movhi
2251:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 3240              		.loc 1 2251 0
 3241 0006 8380     		strh	r3, [r0, #4]	@ movhi
2252:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 3242              		.loc 1 2252 0
 3243 0008 C380     		strh	r3, [r0, #6]	@ movhi
2253:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 3244              		.loc 1 2253 0
 3245 000a 0381     		strh	r3, [r0, #8]	@ movhi
2254:FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 3246              		.loc 1 2254 0
 3247 000c 4381     		strh	r3, [r0, #10]	@ movhi
2255:FWLIB/src/stm32f4xx_tim.c **** }
 3248              		.loc 1 2255 0
 3249 000e 8381     		strh	r3, [r0, #12]	@ movhi
ARM GAS  /tmp/ccgXhnD7.s 			page 122


 3250 0010 7047     		bx	lr
 3251              		.cfi_endproc
 3252              	.LFE174:
 3254              		.section	.text.TIM_CtrlPWMOutputs,"ax",%progbits
 3255              		.align	1
 3256              		.global	TIM_CtrlPWMOutputs
 3257              		.syntax unified
 3258              		.thumb
 3259              		.thumb_func
 3260              		.fpu softvfp
 3262              	TIM_CtrlPWMOutputs:
 3263              	.LFB175:
2266:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3264              		.loc 1 2266 0
 3265              		.cfi_startproc
 3266              		@ args = 0, pretend = 0, frame = 0
 3267              		@ frame_needed = 0, uses_anonymous_args = 0
 3268              		@ link register save eliminated.
 3269              	.LVL414:
2271:FWLIB/src/stm32f4xx_tim.c ****   {
 3270              		.loc 1 2271 0
 3271 0000 31B9     		cbnz	r1, .L169
2279:FWLIB/src/stm32f4xx_tim.c ****   }  
 3272              		.loc 1 2279 0
 3273 0002 B0F84430 		ldrh	r3, [r0, #68]
 3274 0006 C3F30E03 		ubfx	r3, r3, #0, #15
 3275 000a A0F84430 		strh	r3, [r0, #68]	@ movhi
 3276 000e 7047     		bx	lr
 3277              	.L169:
2274:FWLIB/src/stm32f4xx_tim.c ****   }
 3278              		.loc 1 2274 0
 3279 0010 B0F84430 		ldrh	r3, [r0, #68]
 3280 0014 6FEA4343 		mvn	r3, r3, lsl #17
 3281 0018 6FEA5343 		mvn	r3, r3, lsr #17
 3282 001c 9BB2     		uxth	r3, r3
 3283 001e A0F84430 		strh	r3, [r0, #68]	@ movhi
 3284 0022 7047     		bx	lr
 3285              		.cfi_endproc
 3286              	.LFE175:
 3288              		.section	.text.TIM_SelectCOM,"ax",%progbits
 3289              		.align	1
 3290              		.global	TIM_SelectCOM
 3291              		.syntax unified
 3292              		.thumb
 3293              		.thumb_func
 3294              		.fpu softvfp
 3296              	TIM_SelectCOM:
 3297              	.LFB176:
2291:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3298              		.loc 1 2291 0
 3299              		.cfi_startproc
 3300              		@ args = 0, pretend = 0, frame = 0
 3301              		@ frame_needed = 0, uses_anonymous_args = 0
 3302              		@ link register save eliminated.
 3303              	.LVL415:
2296:FWLIB/src/stm32f4xx_tim.c ****   {
 3304              		.loc 1 2296 0
ARM GAS  /tmp/ccgXhnD7.s 			page 123


 3305 0000 31B9     		cbnz	r1, .L173
2304:FWLIB/src/stm32f4xx_tim.c ****   }
 3306              		.loc 1 2304 0
 3307 0002 8388     		ldrh	r3, [r0, #4]
 3308 0004 9BB2     		uxth	r3, r3
 3309 0006 23F00403 		bic	r3, r3, #4
 3310 000a 9BB2     		uxth	r3, r3
 3311 000c 8380     		strh	r3, [r0, #4]	@ movhi
 3312 000e 7047     		bx	lr
 3313              	.L173:
2299:FWLIB/src/stm32f4xx_tim.c ****   }
 3314              		.loc 1 2299 0
 3315 0010 8388     		ldrh	r3, [r0, #4]
 3316 0012 9BB2     		uxth	r3, r3
 3317 0014 43F00403 		orr	r3, r3, #4
 3318 0018 8380     		strh	r3, [r0, #4]	@ movhi
 3319 001a 7047     		bx	lr
 3320              		.cfi_endproc
 3321              	.LFE176:
 3323              		.section	.text.TIM_CCPreloadControl,"ax",%progbits
 3324              		.align	1
 3325              		.global	TIM_CCPreloadControl
 3326              		.syntax unified
 3327              		.thumb
 3328              		.thumb_func
 3329              		.fpu softvfp
 3331              	TIM_CCPreloadControl:
 3332              	.LFB177:
2316:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3333              		.loc 1 2316 0
 3334              		.cfi_startproc
 3335              		@ args = 0, pretend = 0, frame = 0
 3336              		@ frame_needed = 0, uses_anonymous_args = 0
 3337              		@ link register save eliminated.
 3338              	.LVL416:
2320:FWLIB/src/stm32f4xx_tim.c ****   {
 3339              		.loc 1 2320 0
 3340 0000 31B9     		cbnz	r1, .L177
2328:FWLIB/src/stm32f4xx_tim.c ****   }
 3341              		.loc 1 2328 0
 3342 0002 8388     		ldrh	r3, [r0, #4]
 3343 0004 9BB2     		uxth	r3, r3
 3344 0006 23F00103 		bic	r3, r3, #1
 3345 000a 9BB2     		uxth	r3, r3
 3346 000c 8380     		strh	r3, [r0, #4]	@ movhi
 3347 000e 7047     		bx	lr
 3348              	.L177:
2323:FWLIB/src/stm32f4xx_tim.c ****   }
 3349              		.loc 1 2323 0
 3350 0010 8388     		ldrh	r3, [r0, #4]
 3351 0012 9BB2     		uxth	r3, r3
 3352 0014 43F00103 		orr	r3, r3, #1
 3353 0018 8380     		strh	r3, [r0, #4]	@ movhi
 3354 001a 7047     		bx	lr
 3355              		.cfi_endproc
 3356              	.LFE177:
 3358              		.section	.text.TIM_ITConfig,"ax",%progbits
ARM GAS  /tmp/ccgXhnD7.s 			page 124


 3359              		.align	1
 3360              		.global	TIM_ITConfig
 3361              		.syntax unified
 3362              		.thumb
 3363              		.thumb_func
 3364              		.fpu softvfp
 3366              	TIM_ITConfig:
 3367              	.LFB178:
2373:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3368              		.loc 1 2373 0
 3369              		.cfi_startproc
 3370              		@ args = 0, pretend = 0, frame = 0
 3371              		@ frame_needed = 0, uses_anonymous_args = 0
 3372              		@ link register save eliminated.
 3373              	.LVL417:
2379:FWLIB/src/stm32f4xx_tim.c ****   {
 3374              		.loc 1 2379 0
 3375 0000 2AB9     		cbnz	r2, .L181
2387:FWLIB/src/stm32f4xx_tim.c ****   }
 3376              		.loc 1 2387 0
 3377 0002 8389     		ldrh	r3, [r0, #12]
 3378 0004 C943     		mvns	r1, r1
 3379              	.LVL418:
 3380 0006 89B2     		uxth	r1, r1
 3381 0008 1940     		ands	r1, r1, r3
 3382 000a 8181     		strh	r1, [r0, #12]	@ movhi
 3383 000c 7047     		bx	lr
 3384              	.LVL419:
 3385              	.L181:
2382:FWLIB/src/stm32f4xx_tim.c ****   }
 3386              		.loc 1 2382 0
 3387 000e 8389     		ldrh	r3, [r0, #12]
 3388 0010 9BB2     		uxth	r3, r3
 3389 0012 1943     		orrs	r1, r1, r3
 3390              	.LVL420:
 3391 0014 8181     		strh	r1, [r0, #12]	@ movhi
 3392 0016 7047     		bx	lr
 3393              		.cfi_endproc
 3394              	.LFE178:
 3396              		.section	.text.TIM_GenerateEvent,"ax",%progbits
 3397              		.align	1
 3398              		.global	TIM_GenerateEvent
 3399              		.syntax unified
 3400              		.thumb
 3401              		.thumb_func
 3402              		.fpu softvfp
 3404              	TIM_GenerateEvent:
 3405              	.LFB179:
2411:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3406              		.loc 1 2411 0
 3407              		.cfi_startproc
 3408              		@ args = 0, pretend = 0, frame = 0
 3409              		@ frame_needed = 0, uses_anonymous_args = 0
 3410              		@ link register save eliminated.
 3411              	.LVL421:
2417:FWLIB/src/stm32f4xx_tim.c **** }
 3412              		.loc 1 2417 0
ARM GAS  /tmp/ccgXhnD7.s 			page 125


 3413 0000 8182     		strh	r1, [r0, #20]	@ movhi
 3414 0002 7047     		bx	lr
 3415              		.cfi_endproc
 3416              	.LFE179:
 3418              		.section	.text.TIM_GetFlagStatus,"ax",%progbits
 3419              		.align	1
 3420              		.global	TIM_GetFlagStatus
 3421              		.syntax unified
 3422              		.thumb
 3423              		.thumb_func
 3424              		.fpu softvfp
 3426              	TIM_GetFlagStatus:
 3427              	.LFB180:
2444:FWLIB/src/stm32f4xx_tim.c ****   ITStatus bitstatus = RESET;  
 3428              		.loc 1 2444 0
 3429              		.cfi_startproc
 3430              		@ args = 0, pretend = 0, frame = 0
 3431              		@ frame_needed = 0, uses_anonymous_args = 0
 3432              		@ link register save eliminated.
 3433              	.LVL422:
2451:FWLIB/src/stm32f4xx_tim.c ****   {
 3434              		.loc 1 2451 0
 3435 0000 038A     		ldrh	r3, [r0, #16]
 3436 0002 1942     		tst	r1, r3
 3437 0004 01D1     		bne	.L186
2457:FWLIB/src/stm32f4xx_tim.c ****   }
 3438              		.loc 1 2457 0
 3439 0006 0020     		movs	r0, #0
 3440              	.LVL423:
2460:FWLIB/src/stm32f4xx_tim.c **** 
 3441              		.loc 1 2460 0
 3442 0008 7047     		bx	lr
 3443              	.LVL424:
 3444              	.L186:
2453:FWLIB/src/stm32f4xx_tim.c ****   }
 3445              		.loc 1 2453 0
 3446 000a 0120     		movs	r0, #1
 3447              	.LVL425:
 3448 000c 7047     		bx	lr
 3449              		.cfi_endproc
 3450              	.LFE180:
 3452              		.section	.text.TIM_ClearFlag,"ax",%progbits
 3453              		.align	1
 3454              		.global	TIM_ClearFlag
 3455              		.syntax unified
 3456              		.thumb
 3457              		.thumb_func
 3458              		.fpu softvfp
 3460              	TIM_ClearFlag:
 3461              	.LFB181:
2486:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3462              		.loc 1 2486 0
 3463              		.cfi_startproc
 3464              		@ args = 0, pretend = 0, frame = 0
 3465              		@ frame_needed = 0, uses_anonymous_args = 0
 3466              		@ link register save eliminated.
 3467              	.LVL426:
ARM GAS  /tmp/ccgXhnD7.s 			page 126


2491:FWLIB/src/stm32f4xx_tim.c **** }
 3468              		.loc 1 2491 0
 3469 0000 C943     		mvns	r1, r1
 3470              	.LVL427:
 3471 0002 89B2     		uxth	r1, r1
 3472 0004 0182     		strh	r1, [r0, #16]	@ movhi
 3473 0006 7047     		bx	lr
 3474              		.cfi_endproc
 3475              	.LFE181:
 3477              		.section	.text.TIM_GetITStatus,"ax",%progbits
 3478              		.align	1
 3479              		.global	TIM_GetITStatus
 3480              		.syntax unified
 3481              		.thumb
 3482              		.thumb_func
 3483              		.fpu softvfp
 3485              	TIM_GetITStatus:
 3486              	.LFB182:
2514:FWLIB/src/stm32f4xx_tim.c ****   ITStatus bitstatus = RESET;  
 3487              		.loc 1 2514 0
 3488              		.cfi_startproc
 3489              		@ args = 0, pretend = 0, frame = 0
 3490              		@ frame_needed = 0, uses_anonymous_args = 0
 3491              		@ link register save eliminated.
 3492              	.LVL428:
2521:FWLIB/src/stm32f4xx_tim.c ****   
 3493              		.loc 1 2521 0
 3494 0000 028A     		ldrh	r2, [r0, #16]
 3495              	.LVL429:
2523:FWLIB/src/stm32f4xx_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 3496              		.loc 1 2523 0
 3497 0002 8389     		ldrh	r3, [r0, #12]
 3498 0004 0B40     		ands	r3, r3, r1
 3499              	.LVL430:
2524:FWLIB/src/stm32f4xx_tim.c ****   {
 3500              		.loc 1 2524 0
 3501 0006 1142     		tst	r1, r2
 3502 0008 02D0     		beq	.L190
2524:FWLIB/src/stm32f4xx_tim.c ****   {
 3503              		.loc 1 2524 0 is_stmt 0 discriminator 1
 3504 000a 1BB9     		cbnz	r3, .L191
2530:FWLIB/src/stm32f4xx_tim.c ****   }
 3505              		.loc 1 2530 0 is_stmt 1
 3506 000c 0020     		movs	r0, #0
 3507              	.LVL431:
 3508 000e 7047     		bx	lr
 3509              	.LVL432:
 3510              	.L190:
 3511 0010 0020     		movs	r0, #0
 3512              	.LVL433:
 3513 0012 7047     		bx	lr
 3514              	.LVL434:
 3515              	.L191:
2526:FWLIB/src/stm32f4xx_tim.c ****   }
 3516              		.loc 1 2526 0
 3517 0014 0120     		movs	r0, #1
 3518              	.LVL435:
ARM GAS  /tmp/ccgXhnD7.s 			page 127


2533:FWLIB/src/stm32f4xx_tim.c **** 
 3519              		.loc 1 2533 0
 3520 0016 7047     		bx	lr
 3521              		.cfi_endproc
 3522              	.LFE182:
 3524              		.section	.text.TIM_ClearITPendingBit,"ax",%progbits
 3525              		.align	1
 3526              		.global	TIM_ClearITPendingBit
 3527              		.syntax unified
 3528              		.thumb
 3529              		.thumb_func
 3530              		.fpu softvfp
 3532              	TIM_ClearITPendingBit:
 3533              	.LFB183:
2555:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3534              		.loc 1 2555 0
 3535              		.cfi_startproc
 3536              		@ args = 0, pretend = 0, frame = 0
 3537              		@ frame_needed = 0, uses_anonymous_args = 0
 3538              		@ link register save eliminated.
 3539              	.LVL436:
2560:FWLIB/src/stm32f4xx_tim.c **** }
 3540              		.loc 1 2560 0
 3541 0000 C943     		mvns	r1, r1
 3542              	.LVL437:
 3543 0002 89B2     		uxth	r1, r1
 3544 0004 0182     		strh	r1, [r0, #16]	@ movhi
 3545 0006 7047     		bx	lr
 3546              		.cfi_endproc
 3547              	.LFE183:
 3549              		.section	.text.TIM_DMAConfig,"ax",%progbits
 3550              		.align	1
 3551              		.global	TIM_DMAConfig
 3552              		.syntax unified
 3553              		.thumb
 3554              		.thumb_func
 3555              		.fpu softvfp
 3557              	TIM_DMAConfig:
 3558              	.LFB184:
2592:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3559              		.loc 1 2592 0
 3560              		.cfi_startproc
 3561              		@ args = 0, pretend = 0, frame = 0
 3562              		@ frame_needed = 0, uses_anonymous_args = 0
 3563              		@ link register save eliminated.
 3564              	.LVL438:
2599:FWLIB/src/stm32f4xx_tim.c **** }
 3565              		.loc 1 2599 0
 3566 0000 0A43     		orrs	r2, r2, r1
 3567              	.LVL439:
 3568 0002 A0F84820 		strh	r2, [r0, #72]	@ movhi
 3569 0006 7047     		bx	lr
 3570              		.cfi_endproc
 3571              	.LFE184:
 3573              		.section	.text.TIM_DMACmd,"ax",%progbits
 3574              		.align	1
 3575              		.global	TIM_DMACmd
ARM GAS  /tmp/ccgXhnD7.s 			page 128


 3576              		.syntax unified
 3577              		.thumb
 3578              		.thumb_func
 3579              		.fpu softvfp
 3581              	TIM_DMACmd:
 3582              	.LFB185:
2619:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3583              		.loc 1 2619 0
 3584              		.cfi_startproc
 3585              		@ args = 0, pretend = 0, frame = 0
 3586              		@ frame_needed = 0, uses_anonymous_args = 0
 3587              		@ link register save eliminated.
 3588              	.LVL440:
2625:FWLIB/src/stm32f4xx_tim.c ****   {
 3589              		.loc 1 2625 0
 3590 0000 2AB9     		cbnz	r2, .L197
2633:FWLIB/src/stm32f4xx_tim.c ****   }
 3591              		.loc 1 2633 0
 3592 0002 8389     		ldrh	r3, [r0, #12]
 3593 0004 C943     		mvns	r1, r1
 3594              	.LVL441:
 3595 0006 89B2     		uxth	r1, r1
 3596 0008 1940     		ands	r1, r1, r3
 3597 000a 8181     		strh	r1, [r0, #12]	@ movhi
 3598 000c 7047     		bx	lr
 3599              	.LVL442:
 3600              	.L197:
2628:FWLIB/src/stm32f4xx_tim.c ****   }
 3601              		.loc 1 2628 0
 3602 000e 8389     		ldrh	r3, [r0, #12]
 3603 0010 9BB2     		uxth	r3, r3
 3604 0012 1943     		orrs	r1, r1, r3
 3605              	.LVL443:
 3606 0014 8181     		strh	r1, [r0, #12]	@ movhi
 3607 0016 7047     		bx	lr
 3608              		.cfi_endproc
 3609              	.LFE185:
 3611              		.section	.text.TIM_SelectCCDMA,"ax",%progbits
 3612              		.align	1
 3613              		.global	TIM_SelectCCDMA
 3614              		.syntax unified
 3615              		.thumb
 3616              		.thumb_func
 3617              		.fpu softvfp
 3619              	TIM_SelectCCDMA:
 3620              	.LFB186:
2645:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3621              		.loc 1 2645 0
 3622              		.cfi_startproc
 3623              		@ args = 0, pretend = 0, frame = 0
 3624              		@ frame_needed = 0, uses_anonymous_args = 0
 3625              		@ link register save eliminated.
 3626              	.LVL444:
2650:FWLIB/src/stm32f4xx_tim.c ****   {
 3627              		.loc 1 2650 0
 3628 0000 31B9     		cbnz	r1, .L201
2658:FWLIB/src/stm32f4xx_tim.c ****   }
ARM GAS  /tmp/ccgXhnD7.s 			page 129


 3629              		.loc 1 2658 0
 3630 0002 8388     		ldrh	r3, [r0, #4]
 3631 0004 9BB2     		uxth	r3, r3
 3632 0006 23F00803 		bic	r3, r3, #8
 3633 000a 9BB2     		uxth	r3, r3
 3634 000c 8380     		strh	r3, [r0, #4]	@ movhi
 3635 000e 7047     		bx	lr
 3636              	.L201:
2653:FWLIB/src/stm32f4xx_tim.c ****   }
 3637              		.loc 1 2653 0
 3638 0010 8388     		ldrh	r3, [r0, #4]
 3639 0012 9BB2     		uxth	r3, r3
 3640 0014 43F00803 		orr	r3, r3, #8
 3641 0018 8380     		strh	r3, [r0, #4]	@ movhi
 3642 001a 7047     		bx	lr
 3643              		.cfi_endproc
 3644              	.LFE186:
 3646              		.section	.text.TIM_InternalClockConfig,"ax",%progbits
 3647              		.align	1
 3648              		.global	TIM_InternalClockConfig
 3649              		.syntax unified
 3650              		.thumb
 3651              		.thumb_func
 3652              		.fpu softvfp
 3654              	TIM_InternalClockConfig:
 3655              	.LFB187:
2684:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3656              		.loc 1 2684 0
 3657              		.cfi_startproc
 3658              		@ args = 0, pretend = 0, frame = 0
 3659              		@ frame_needed = 0, uses_anonymous_args = 0
 3660              		@ link register save eliminated.
 3661              	.LVL445:
2689:FWLIB/src/stm32f4xx_tim.c **** }
 3662              		.loc 1 2689 0
 3663 0000 0389     		ldrh	r3, [r0, #8]
 3664 0002 9BB2     		uxth	r3, r3
 3665 0004 23F00703 		bic	r3, r3, #7
 3666 0008 9BB2     		uxth	r3, r3
 3667 000a 0381     		strh	r3, [r0, #8]	@ movhi
 3668 000c 7047     		bx	lr
 3669              		.cfi_endproc
 3670              	.LFE187:
 3672              		.section	.text.TIM_SelectInputTrigger,"ax",%progbits
 3673              		.align	1
 3674              		.global	TIM_SelectInputTrigger
 3675              		.syntax unified
 3676              		.thumb
 3677              		.thumb_func
 3678              		.fpu softvfp
 3680              	TIM_SelectInputTrigger:
 3681              	.LFB192:
2893:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 3682              		.loc 1 2893 0
 3683              		.cfi_startproc
 3684              		@ args = 0, pretend = 0, frame = 0
 3685              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccgXhnD7.s 			page 130


 3686              		@ link register save eliminated.
 3687              	.LVL446:
2901:FWLIB/src/stm32f4xx_tim.c **** 
 3688              		.loc 1 2901 0
 3689 0000 0389     		ldrh	r3, [r0, #8]
 3690 0002 9BB2     		uxth	r3, r3
 3691              	.LVL447:
2904:FWLIB/src/stm32f4xx_tim.c **** 
 3692              		.loc 1 2904 0
 3693 0004 23F07003 		bic	r3, r3, #112
 3694              	.LVL448:
2907:FWLIB/src/stm32f4xx_tim.c **** 
 3695              		.loc 1 2907 0
 3696 0008 1943     		orrs	r1, r1, r3
 3697              	.LVL449:
2910:FWLIB/src/stm32f4xx_tim.c **** }
 3698              		.loc 1 2910 0
 3699 000a 0181     		strh	r1, [r0, #8]	@ movhi
 3700 000c 7047     		bx	lr
 3701              		.cfi_endproc
 3702              	.LFE192:
 3704              		.section	.text.TIM_ITRxExternalClockConfig,"ax",%progbits
 3705              		.align	1
 3706              		.global	TIM_ITRxExternalClockConfig
 3707              		.syntax unified
 3708              		.thumb
 3709              		.thumb_func
 3710              		.fpu softvfp
 3712              	TIM_ITRxExternalClockConfig:
 3713              	.LFB188:
2705:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3714              		.loc 1 2705 0
 3715              		.cfi_startproc
 3716              		@ args = 0, pretend = 0, frame = 0
 3717              		@ frame_needed = 0, uses_anonymous_args = 0
 3718              	.LVL450:
 3719 0000 10B5     		push	{r4, lr}
 3720              	.LCFI30:
 3721              		.cfi_def_cfa_offset 8
 3722              		.cfi_offset 4, -8
 3723              		.cfi_offset 14, -4
 3724 0002 0446     		mov	r4, r0
2711:FWLIB/src/stm32f4xx_tim.c **** 
 3725              		.loc 1 2711 0
 3726 0004 FFF7FEFF 		bl	TIM_SelectInputTrigger
 3727              	.LVL451:
2714:FWLIB/src/stm32f4xx_tim.c **** }
 3728              		.loc 1 2714 0
 3729 0008 2389     		ldrh	r3, [r4, #8]
 3730 000a 9BB2     		uxth	r3, r3
 3731 000c 43F00703 		orr	r3, r3, #7
 3732 0010 2381     		strh	r3, [r4, #8]	@ movhi
 3733 0012 10BD     		pop	{r4, pc}
 3734              		.cfi_endproc
 3735              	.LFE188:
 3737              		.section	.text.TIM_TIxExternalClockConfig,"ax",%progbits
 3738              		.align	1
ARM GAS  /tmp/ccgXhnD7.s 			page 131


 3739              		.global	TIM_TIxExternalClockConfig
 3740              		.syntax unified
 3741              		.thumb
 3742              		.thumb_func
 3743              		.fpu softvfp
 3745              	TIM_TIxExternalClockConfig:
 3746              	.LFB189:
2736:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3747              		.loc 1 2736 0
 3748              		.cfi_startproc
 3749              		@ args = 0, pretend = 0, frame = 0
 3750              		@ frame_needed = 0, uses_anonymous_args = 0
 3751              	.LVL452:
 3752 0000 38B5     		push	{r3, r4, r5, lr}
 3753              	.LCFI31:
 3754              		.cfi_def_cfa_offset 16
 3755              		.cfi_offset 3, -16
 3756              		.cfi_offset 4, -12
 3757              		.cfi_offset 5, -8
 3758              		.cfi_offset 14, -4
 3759 0002 0446     		mov	r4, r0
 3760 0004 0D46     		mov	r5, r1
 3761 0006 1146     		mov	r1, r2
 3762              	.LVL453:
2743:FWLIB/src/stm32f4xx_tim.c ****   {
 3763              		.loc 1 2743 0
 3764 0008 602D     		cmp	r5, #96
 3765 000a 0CD0     		beq	.L210
2749:FWLIB/src/stm32f4xx_tim.c ****   }
 3766              		.loc 1 2749 0
 3767 000c 0122     		movs	r2, #1
 3768              	.LVL454:
 3769 000e FFF7FEFF 		bl	TI1_Config
 3770              	.LVL455:
 3771              	.L208:
2752:FWLIB/src/stm32f4xx_tim.c ****   /* Select the External clock mode1 */
 3772              		.loc 1 2752 0
 3773 0012 2946     		mov	r1, r5
 3774 0014 2046     		mov	r0, r4
 3775 0016 FFF7FEFF 		bl	TIM_SelectInputTrigger
 3776              	.LVL456:
2754:FWLIB/src/stm32f4xx_tim.c **** }
 3777              		.loc 1 2754 0
 3778 001a 2389     		ldrh	r3, [r4, #8]
 3779 001c 9BB2     		uxth	r3, r3
 3780 001e 43F00703 		orr	r3, r3, #7
 3781 0022 2381     		strh	r3, [r4, #8]	@ movhi
 3782 0024 38BD     		pop	{r3, r4, r5, pc}
 3783              	.LVL457:
 3784              	.L210:
2745:FWLIB/src/stm32f4xx_tim.c ****   }
 3785              		.loc 1 2745 0
 3786 0026 0122     		movs	r2, #1
 3787              	.LVL458:
 3788 0028 FFF7FEFF 		bl	TI2_Config
 3789              	.LVL459:
 3790 002c F1E7     		b	.L208
ARM GAS  /tmp/ccgXhnD7.s 			page 132


 3791              		.cfi_endproc
 3792              	.LFE189:
 3794              		.section	.text.TIM_SelectOutputTrigger,"ax",%progbits
 3795              		.align	1
 3796              		.global	TIM_SelectOutputTrigger
 3797              		.syntax unified
 3798              		.thumb
 3799              		.thumb_func
 3800              		.fpu softvfp
 3802              	TIM_SelectOutputTrigger:
 3803              	.LFB193:
2936:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3804              		.loc 1 2936 0
 3805              		.cfi_startproc
 3806              		@ args = 0, pretend = 0, frame = 0
 3807              		@ frame_needed = 0, uses_anonymous_args = 0
 3808              		@ link register save eliminated.
 3809              	.LVL460:
2942:FWLIB/src/stm32f4xx_tim.c ****   /* Select the TRGO source */
 3810              		.loc 1 2942 0
 3811 0000 8388     		ldrh	r3, [r0, #4]
 3812 0002 9BB2     		uxth	r3, r3
 3813 0004 23F07003 		bic	r3, r3, #112
 3814 0008 9BB2     		uxth	r3, r3
 3815 000a 8380     		strh	r3, [r0, #4]	@ movhi
2944:FWLIB/src/stm32f4xx_tim.c **** }
 3816              		.loc 1 2944 0
 3817 000c 8388     		ldrh	r3, [r0, #4]
 3818 000e 9BB2     		uxth	r3, r3
 3819 0010 1943     		orrs	r1, r1, r3
 3820              	.LVL461:
 3821 0012 8180     		strh	r1, [r0, #4]	@ movhi
 3822 0014 7047     		bx	lr
 3823              		.cfi_endproc
 3824              	.LFE193:
 3826              		.section	.text.TIM_SelectSlaveMode,"ax",%progbits
 3827              		.align	1
 3828              		.global	TIM_SelectSlaveMode
 3829              		.syntax unified
 3830              		.thumb
 3831              		.thumb_func
 3832              		.fpu softvfp
 3834              	TIM_SelectSlaveMode:
 3835              	.LFB194:
2960:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3836              		.loc 1 2960 0
 3837              		.cfi_startproc
 3838              		@ args = 0, pretend = 0, frame = 0
 3839              		@ frame_needed = 0, uses_anonymous_args = 0
 3840              		@ link register save eliminated.
 3841              	.LVL462:
2966:FWLIB/src/stm32f4xx_tim.c **** 
 3842              		.loc 1 2966 0
 3843 0000 0389     		ldrh	r3, [r0, #8]
 3844 0002 9BB2     		uxth	r3, r3
 3845 0004 23F00703 		bic	r3, r3, #7
 3846 0008 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccgXhnD7.s 			page 133


 3847 000a 0381     		strh	r3, [r0, #8]	@ movhi
2969:FWLIB/src/stm32f4xx_tim.c **** }
 3848              		.loc 1 2969 0
 3849 000c 0389     		ldrh	r3, [r0, #8]
 3850 000e 9BB2     		uxth	r3, r3
 3851 0010 1943     		orrs	r1, r1, r3
 3852              	.LVL463:
 3853 0012 0181     		strh	r1, [r0, #8]	@ movhi
 3854 0014 7047     		bx	lr
 3855              		.cfi_endproc
 3856              	.LFE194:
 3858              		.section	.text.TIM_SelectMasterSlaveMode,"ax",%progbits
 3859              		.align	1
 3860              		.global	TIM_SelectMasterSlaveMode
 3861              		.syntax unified
 3862              		.thumb
 3863              		.thumb_func
 3864              		.fpu softvfp
 3866              	TIM_SelectMasterSlaveMode:
 3867              	.LFB195:
2983:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3868              		.loc 1 2983 0
 3869              		.cfi_startproc
 3870              		@ args = 0, pretend = 0, frame = 0
 3871              		@ frame_needed = 0, uses_anonymous_args = 0
 3872              		@ link register save eliminated.
 3873              	.LVL464:
2989:FWLIB/src/stm32f4xx_tim.c ****   
 3874              		.loc 1 2989 0
 3875 0000 0389     		ldrh	r3, [r0, #8]
 3876 0002 9BB2     		uxth	r3, r3
 3877 0004 23F08003 		bic	r3, r3, #128
 3878 0008 9BB2     		uxth	r3, r3
 3879 000a 0381     		strh	r3, [r0, #8]	@ movhi
2992:FWLIB/src/stm32f4xx_tim.c **** }
 3880              		.loc 1 2992 0
 3881 000c 0389     		ldrh	r3, [r0, #8]
 3882 000e 9BB2     		uxth	r3, r3
 3883 0010 1943     		orrs	r1, r1, r3
 3884              	.LVL465:
 3885 0012 0181     		strh	r1, [r0, #8]	@ movhi
 3886 0014 7047     		bx	lr
 3887              		.cfi_endproc
 3888              	.LFE195:
 3890              		.section	.text.TIM_ETRConfig,"ax",%progbits
 3891              		.align	1
 3892              		.global	TIM_ETRConfig
 3893              		.syntax unified
 3894              		.thumb
 3895              		.thumb_func
 3896              		.fpu softvfp
 3898              	TIM_ETRConfig:
 3899              	.LFB196:
3014:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 3900              		.loc 1 3014 0
 3901              		.cfi_startproc
 3902              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccgXhnD7.s 			page 134


 3903              		@ frame_needed = 0, uses_anonymous_args = 0
 3904              		@ link register save eliminated.
 3905              	.LVL466:
 3906 0000 10B4     		push	{r4}
 3907              	.LCFI32:
 3908              		.cfi_def_cfa_offset 4
 3909              		.cfi_offset 4, -4
 3910              	.LVL467:
3023:FWLIB/src/stm32f4xx_tim.c **** 
 3911              		.loc 1 3023 0
 3912 0002 0489     		ldrh	r4, [r0, #8]
 3913              	.LVL468:
3026:FWLIB/src/stm32f4xx_tim.c **** 
 3914              		.loc 1 3026 0
 3915 0004 E4B2     		uxtb	r4, r4
 3916              	.LVL469:
3029:FWLIB/src/stm32f4xx_tim.c **** 
 3917              		.loc 1 3029 0
 3918 0006 1B02     		lsls	r3, r3, #8
 3919              	.LVL470:
 3920 0008 9BB2     		uxth	r3, r3
 3921 000a 1343     		orrs	r3, r3, r2
 3922 000c 0B43     		orrs	r3, r3, r1
 3923 000e 2343     		orrs	r3, r3, r4
 3924              	.LVL471:
3032:FWLIB/src/stm32f4xx_tim.c **** }
 3925              		.loc 1 3032 0
 3926 0010 0381     		strh	r3, [r0, #8]	@ movhi
3033:FWLIB/src/stm32f4xx_tim.c **** /**
 3927              		.loc 1 3033 0
 3928 0012 10BC     		pop	{r4}
 3929              	.LCFI33:
 3930              		.cfi_restore 4
 3931              		.cfi_def_cfa_offset 0
 3932 0014 7047     		bx	lr
 3933              		.cfi_endproc
 3934              	.LFE196:
 3936              		.section	.text.TIM_ETRClockMode1Config,"ax",%progbits
 3937              		.align	1
 3938              		.global	TIM_ETRClockMode1Config
 3939              		.syntax unified
 3940              		.thumb
 3941              		.thumb_func
 3942              		.fpu softvfp
 3944              	TIM_ETRClockMode1Config:
 3945              	.LFB190:
2776:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 3946              		.loc 1 2776 0
 3947              		.cfi_startproc
 3948              		@ args = 0, pretend = 0, frame = 0
 3949              		@ frame_needed = 0, uses_anonymous_args = 0
 3950              	.LVL472:
 3951 0000 10B5     		push	{r4, lr}
 3952              	.LCFI34:
 3953              		.cfi_def_cfa_offset 8
 3954              		.cfi_offset 4, -8
 3955              		.cfi_offset 14, -4
ARM GAS  /tmp/ccgXhnD7.s 			page 135


 3956 0002 0446     		mov	r4, r0
 3957              	.LVL473:
2785:FWLIB/src/stm32f4xx_tim.c ****   
 3958              		.loc 1 2785 0
 3959 0004 FFF7FEFF 		bl	TIM_ETRConfig
 3960              	.LVL474:
2788:FWLIB/src/stm32f4xx_tim.c **** 
 3961              		.loc 1 2788 0
 3962 0008 2389     		ldrh	r3, [r4, #8]
 3963 000a 9BB2     		uxth	r3, r3
 3964              	.LVL475:
2798:FWLIB/src/stm32f4xx_tim.c **** 
 3965              		.loc 1 2798 0
 3966 000c 43F07703 		orr	r3, r3, #119
 3967              	.LVL476:
2801:FWLIB/src/stm32f4xx_tim.c **** }
 3968              		.loc 1 2801 0
 3969 0010 2381     		strh	r3, [r4, #8]	@ movhi
 3970 0012 10BD     		pop	{r4, pc}
 3971              		.cfi_endproc
 3972              	.LFE190:
 3974              		.section	.text.TIM_ETRClockMode2Config,"ax",%progbits
 3975              		.align	1
 3976              		.global	TIM_ETRClockMode2Config
 3977              		.syntax unified
 3978              		.thumb
 3979              		.thumb_func
 3980              		.fpu softvfp
 3982              	TIM_ETRClockMode2Config:
 3983              	.LFB191:
2823:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3984              		.loc 1 2823 0
 3985              		.cfi_startproc
 3986              		@ args = 0, pretend = 0, frame = 0
 3987              		@ frame_needed = 0, uses_anonymous_args = 0
 3988              	.LVL477:
 3989 0000 10B5     		push	{r4, lr}
 3990              	.LCFI35:
 3991              		.cfi_def_cfa_offset 8
 3992              		.cfi_offset 4, -8
 3993              		.cfi_offset 14, -4
 3994 0002 0446     		mov	r4, r0
2831:FWLIB/src/stm32f4xx_tim.c **** 
 3995              		.loc 1 2831 0
 3996 0004 FFF7FEFF 		bl	TIM_ETRConfig
 3997              	.LVL478:
2834:FWLIB/src/stm32f4xx_tim.c **** }
 3998              		.loc 1 2834 0
 3999 0008 2389     		ldrh	r3, [r4, #8]
 4000 000a 9BB2     		uxth	r3, r3
 4001 000c 43F48043 		orr	r3, r3, #16384
 4002 0010 2381     		strh	r3, [r4, #8]	@ movhi
 4003 0012 10BD     		pop	{r4, pc}
 4004              		.cfi_endproc
 4005              	.LFE191:
 4007              		.section	.text.TIM_EncoderInterfaceConfig,"ax",%progbits
 4008              		.align	1
ARM GAS  /tmp/ccgXhnD7.s 			page 136


 4009              		.global	TIM_EncoderInterfaceConfig
 4010              		.syntax unified
 4011              		.thumb
 4012              		.thumb_func
 4013              		.fpu softvfp
 4015              	TIM_EncoderInterfaceConfig:
 4016              	.LFB197:
3072:FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 4017              		.loc 1 3072 0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 0
 4020              		@ frame_needed = 0, uses_anonymous_args = 0
 4021              		@ link register save eliminated.
 4022              	.LVL479:
 4023 0000 70B4     		push	{r4, r5, r6}
 4024              	.LCFI36:
 4025              		.cfi_def_cfa_offset 12
 4026              		.cfi_offset 4, -12
 4027              		.cfi_offset 5, -8
 4028              		.cfi_offset 6, -4
 4029              	.LVL480:
3084:FWLIB/src/stm32f4xx_tim.c **** 
 4030              		.loc 1 3084 0
 4031 0002 0689     		ldrh	r6, [r0, #8]
 4032 0004 B6B2     		uxth	r6, r6
 4033              	.LVL481:
3087:FWLIB/src/stm32f4xx_tim.c **** 
 4034              		.loc 1 3087 0
 4035 0006 048B     		ldrh	r4, [r0, #24]
 4036 0008 A4B2     		uxth	r4, r4
 4037              	.LVL482:
3090:FWLIB/src/stm32f4xx_tim.c **** 
 4038              		.loc 1 3090 0
 4039 000a 058C     		ldrh	r5, [r0, #32]
 4040 000c ADB2     		uxth	r5, r5
 4041              	.LVL483:
3093:FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_EncoderMode;
 4042              		.loc 1 3093 0
 4043 000e 26F00706 		bic	r6, r6, #7
 4044              	.LVL484:
3094:FWLIB/src/stm32f4xx_tim.c **** 
 4045              		.loc 1 3094 0
 4046 0012 3143     		orrs	r1, r1, r6
 4047              	.LVL485:
3097:FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 4048              		.loc 1 3097 0
 4049 0014 24F44074 		bic	r4, r4, #768
 4050              	.LVL486:
 4051 0018 24F00304 		bic	r4, r4, #3
 4052              	.LVL487:
3098:FWLIB/src/stm32f4xx_tim.c **** 
 4053              		.loc 1 3098 0
 4054 001c 44F48074 		orr	r4, r4, #256
 4055              	.LVL488:
 4056 0020 44F00104 		orr	r4, r4, #1
 4057              	.LVL489:
3101:FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
ARM GAS  /tmp/ccgXhnD7.s 			page 137


 4058              		.loc 1 3101 0
 4059 0024 25F02205 		bic	r5, r5, #34
 4060              	.LVL490:
3102:FWLIB/src/stm32f4xx_tim.c **** 
 4061              		.loc 1 3102 0
 4062 0028 1B01     		lsls	r3, r3, #4
 4063              	.LVL491:
 4064 002a 9BB2     		uxth	r3, r3
 4065 002c 1A43     		orrs	r2, r2, r3
 4066              	.LVL492:
 4067 002e 1543     		orrs	r5, r5, r2
 4068              	.LVL493:
3105:FWLIB/src/stm32f4xx_tim.c **** 
 4069              		.loc 1 3105 0
 4070 0030 0181     		strh	r1, [r0, #8]	@ movhi
3108:FWLIB/src/stm32f4xx_tim.c **** 
 4071              		.loc 1 3108 0
 4072 0032 0483     		strh	r4, [r0, #24]	@ movhi
3111:FWLIB/src/stm32f4xx_tim.c **** }
 4073              		.loc 1 3111 0
 4074 0034 0584     		strh	r5, [r0, #32]	@ movhi
3112:FWLIB/src/stm32f4xx_tim.c **** 
 4075              		.loc 1 3112 0
 4076 0036 70BC     		pop	{r4, r5, r6}
 4077              	.LCFI37:
 4078              		.cfi_restore 6
 4079              		.cfi_restore 5
 4080              		.cfi_restore 4
 4081              		.cfi_def_cfa_offset 0
 4082              	.LVL494:
 4083 0038 7047     		bx	lr
 4084              		.cfi_endproc
 4085              	.LFE197:
 4087              		.section	.text.TIM_SelectHallSensor,"ax",%progbits
 4088              		.align	1
 4089              		.global	TIM_SelectHallSensor
 4090              		.syntax unified
 4091              		.thumb
 4092              		.thumb_func
 4093              		.fpu softvfp
 4095              	TIM_SelectHallSensor:
 4096              	.LFB198:
3123:FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 4097              		.loc 1 3123 0
 4098              		.cfi_startproc
 4099              		@ args = 0, pretend = 0, frame = 0
 4100              		@ frame_needed = 0, uses_anonymous_args = 0
 4101              		@ link register save eliminated.
 4102              	.LVL495:
3128:FWLIB/src/stm32f4xx_tim.c ****   {
 4103              		.loc 1 3128 0
 4104 0000 31B9     		cbnz	r1, .L225
3136:FWLIB/src/stm32f4xx_tim.c ****   }
 4105              		.loc 1 3136 0
 4106 0002 8388     		ldrh	r3, [r0, #4]
 4107 0004 9BB2     		uxth	r3, r3
 4108 0006 23F08003 		bic	r3, r3, #128
ARM GAS  /tmp/ccgXhnD7.s 			page 138


 4109 000a 9BB2     		uxth	r3, r3
 4110 000c 8380     		strh	r3, [r0, #4]	@ movhi
 4111 000e 7047     		bx	lr
 4112              	.L225:
3131:FWLIB/src/stm32f4xx_tim.c ****   }
 4113              		.loc 1 3131 0
 4114 0010 8388     		ldrh	r3, [r0, #4]
 4115 0012 9BB2     		uxth	r3, r3
 4116 0014 43F08003 		orr	r3, r3, #128
 4117 0018 8380     		strh	r3, [r0, #4]	@ movhi
 4118 001a 7047     		bx	lr
 4119              		.cfi_endproc
 4120              	.LFE198:
 4122              		.section	.text.TIM_RemapConfig,"ax",%progbits
 4123              		.align	1
 4124              		.global	TIM_RemapConfig
 4125              		.syntax unified
 4126              		.thumb
 4127              		.thumb_func
 4128              		.fpu softvfp
 4130              	TIM_RemapConfig:
 4131              	.LFB199:
3174:FWLIB/src/stm32f4xx_tim.c ****  /* Check the parameters */
 4132              		.loc 1 3174 0
 4133              		.cfi_startproc
 4134              		@ args = 0, pretend = 0, frame = 0
 4135              		@ frame_needed = 0, uses_anonymous_args = 0
 4136              		@ link register save eliminated.
 4137              	.LVL496:
3180:FWLIB/src/stm32f4xx_tim.c **** }
 4138              		.loc 1 3180 0
 4139 0000 A0F85010 		strh	r1, [r0, #80]	@ movhi
 4140 0004 7047     		bx	lr
 4141              		.cfi_endproc
 4142              	.LFE199:
 4144              		.text
 4145              	.Letext0:
 4146              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4147              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 4148              		.file 4 "CORE/core_cm4.h"
 4149              		.file 5 "USER/system_stm32f4xx.h"
 4150              		.file 6 "USER/stm32f4xx.h"
 4151              		.file 7 "FWLIB/inc/stm32f4xx_tim.h"
 4152              		.file 8 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccgXhnD7.s 			page 139


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_tim.c
     /tmp/ccgXhnD7.s:16     .text.TI1_Config:0000000000000000 $t
     /tmp/ccgXhnD7.s:22     .text.TI1_Config:0000000000000000 TI1_Config
     /tmp/ccgXhnD7.s:86     .text.TI2_Config:0000000000000000 $t
     /tmp/ccgXhnD7.s:92     .text.TI2_Config:0000000000000000 TI2_Config
     /tmp/ccgXhnD7.s:166    .text.TI3_Config:0000000000000000 $t
     /tmp/ccgXhnD7.s:172    .text.TI3_Config:0000000000000000 TI3_Config
     /tmp/ccgXhnD7.s:240    .text.TI4_Config:0000000000000000 $t
     /tmp/ccgXhnD7.s:246    .text.TI4_Config:0000000000000000 TI4_Config
     /tmp/ccgXhnD7.s:322    .text.TIM_DeInit:0000000000000000 $t
     /tmp/ccgXhnD7.s:329    .text.TIM_DeInit:0000000000000000 TIM_DeInit
     /tmp/ccgXhnD7.s:599    .text.TIM_DeInit:0000000000000164 $d
     /tmp/ccgXhnD7.s:616    .text.TIM_TimeBaseInit:0000000000000000 $t
     /tmp/ccgXhnD7.s:623    .text.TIM_TimeBaseInit:0000000000000000 TIM_TimeBaseInit
     /tmp/ccgXhnD7.s:716    .text.TIM_TimeBaseInit:0000000000000074 $d
     /tmp/ccgXhnD7.s:722    .text.TIM_TimeBaseStructInit:0000000000000000 $t
     /tmp/ccgXhnD7.s:729    .text.TIM_TimeBaseStructInit:0000000000000000 TIM_TimeBaseStructInit
     /tmp/ccgXhnD7.s:754    .text.TIM_PrescalerConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:761    .text.TIM_PrescalerConfig:0000000000000000 TIM_PrescalerConfig
     /tmp/ccgXhnD7.s:778    .text.TIM_CounterModeConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:785    .text.TIM_CounterModeConfig:0000000000000000 TIM_CounterModeConfig
     /tmp/ccgXhnD7.s:810    .text.TIM_SetCounter:0000000000000000 $t
     /tmp/ccgXhnD7.s:817    .text.TIM_SetCounter:0000000000000000 TIM_SetCounter
     /tmp/ccgXhnD7.s:832    .text.TIM_SetAutoreload:0000000000000000 $t
     /tmp/ccgXhnD7.s:839    .text.TIM_SetAutoreload:0000000000000000 TIM_SetAutoreload
     /tmp/ccgXhnD7.s:854    .text.TIM_GetCounter:0000000000000000 $t
     /tmp/ccgXhnD7.s:861    .text.TIM_GetCounter:0000000000000000 TIM_GetCounter
     /tmp/ccgXhnD7.s:878    .text.TIM_GetPrescaler:0000000000000000 $t
     /tmp/ccgXhnD7.s:885    .text.TIM_GetPrescaler:0000000000000000 TIM_GetPrescaler
     /tmp/ccgXhnD7.s:903    .text.TIM_UpdateDisableConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:910    .text.TIM_UpdateDisableConfig:0000000000000000 TIM_UpdateDisableConfig
     /tmp/ccgXhnD7.s:938    .text.TIM_UpdateRequestConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:945    .text.TIM_UpdateRequestConfig:0000000000000000 TIM_UpdateRequestConfig
     /tmp/ccgXhnD7.s:973    .text.TIM_ARRPreloadConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:980    .text.TIM_ARRPreloadConfig:0000000000000000 TIM_ARRPreloadConfig
     /tmp/ccgXhnD7.s:1008   .text.TIM_SelectOnePulseMode:0000000000000000 $t
     /tmp/ccgXhnD7.s:1015   .text.TIM_SelectOnePulseMode:0000000000000000 TIM_SelectOnePulseMode
     /tmp/ccgXhnD7.s:1040   .text.TIM_SetClockDivision:0000000000000000 $t
     /tmp/ccgXhnD7.s:1047   .text.TIM_SetClockDivision:0000000000000000 TIM_SetClockDivision
     /tmp/ccgXhnD7.s:1072   .text.TIM_Cmd:0000000000000000 $t
     /tmp/ccgXhnD7.s:1079   .text.TIM_Cmd:0000000000000000 TIM_Cmd
     /tmp/ccgXhnD7.s:1107   .text.TIM_OC1Init:0000000000000000 $t
     /tmp/ccgXhnD7.s:1114   .text.TIM_OC1Init:0000000000000000 TIM_OC1Init
     /tmp/ccgXhnD7.s:1226   .text.TIM_OC1Init:0000000000000068 $d
     /tmp/ccgXhnD7.s:1231   .text.TIM_OC2Init:0000000000000000 $t
     /tmp/ccgXhnD7.s:1238   .text.TIM_OC2Init:0000000000000000 TIM_OC2Init
     /tmp/ccgXhnD7.s:1364   .text.TIM_OC2Init:0000000000000084 $d
     /tmp/ccgXhnD7.s:1369   .text.TIM_OC3Init:0000000000000000 $t
     /tmp/ccgXhnD7.s:1376   .text.TIM_OC3Init:0000000000000000 TIM_OC3Init
     /tmp/ccgXhnD7.s:1500   .text.TIM_OC3Init:0000000000000080 $d
     /tmp/ccgXhnD7.s:1505   .text.TIM_OC4Init:0000000000000000 $t
     /tmp/ccgXhnD7.s:1512   .text.TIM_OC4Init:0000000000000000 TIM_OC4Init
     /tmp/ccgXhnD7.s:1614   .text.TIM_OC4Init:0000000000000064 $d
     /tmp/ccgXhnD7.s:1619   .text.TIM_OCStructInit:0000000000000000 $t
     /tmp/ccgXhnD7.s:1626   .text.TIM_OCStructInit:0000000000000000 TIM_OCStructInit
     /tmp/ccgXhnD7.s:1656   .text.TIM_SelectOCxM:0000000000000000 $t
ARM GAS  /tmp/ccgXhnD7.s 			page 140


     /tmp/ccgXhnD7.s:1663   .text.TIM_SelectOCxM:0000000000000000 TIM_SelectOCxM
     /tmp/ccgXhnD7.s:1747   .text.TIM_SetCompare1:0000000000000000 $t
     /tmp/ccgXhnD7.s:1754   .text.TIM_SetCompare1:0000000000000000 TIM_SetCompare1
     /tmp/ccgXhnD7.s:1769   .text.TIM_SetCompare2:0000000000000000 $t
     /tmp/ccgXhnD7.s:1776   .text.TIM_SetCompare2:0000000000000000 TIM_SetCompare2
     /tmp/ccgXhnD7.s:1791   .text.TIM_SetCompare3:0000000000000000 $t
     /tmp/ccgXhnD7.s:1798   .text.TIM_SetCompare3:0000000000000000 TIM_SetCompare3
     /tmp/ccgXhnD7.s:1813   .text.TIM_SetCompare4:0000000000000000 $t
     /tmp/ccgXhnD7.s:1820   .text.TIM_SetCompare4:0000000000000000 TIM_SetCompare4
     /tmp/ccgXhnD7.s:1835   .text.TIM_ForcedOC1Config:0000000000000000 $t
     /tmp/ccgXhnD7.s:1842   .text.TIM_ForcedOC1Config:0000000000000000 TIM_ForcedOC1Config
     /tmp/ccgXhnD7.s:1867   .text.TIM_ForcedOC2Config:0000000000000000 $t
     /tmp/ccgXhnD7.s:1874   .text.TIM_ForcedOC2Config:0000000000000000 TIM_ForcedOC2Config
     /tmp/ccgXhnD7.s:1902   .text.TIM_ForcedOC3Config:0000000000000000 $t
     /tmp/ccgXhnD7.s:1909   .text.TIM_ForcedOC3Config:0000000000000000 TIM_ForcedOC3Config
     /tmp/ccgXhnD7.s:1934   .text.TIM_ForcedOC4Config:0000000000000000 $t
     /tmp/ccgXhnD7.s:1941   .text.TIM_ForcedOC4Config:0000000000000000 TIM_ForcedOC4Config
     /tmp/ccgXhnD7.s:1969   .text.TIM_OC1PreloadConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:1976   .text.TIM_OC1PreloadConfig:0000000000000000 TIM_OC1PreloadConfig
     /tmp/ccgXhnD7.s:2001   .text.TIM_OC2PreloadConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2008   .text.TIM_OC2PreloadConfig:0000000000000000 TIM_OC2PreloadConfig
     /tmp/ccgXhnD7.s:2036   .text.TIM_OC3PreloadConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2043   .text.TIM_OC3PreloadConfig:0000000000000000 TIM_OC3PreloadConfig
     /tmp/ccgXhnD7.s:2068   .text.TIM_OC4PreloadConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2075   .text.TIM_OC4PreloadConfig:0000000000000000 TIM_OC4PreloadConfig
     /tmp/ccgXhnD7.s:2103   .text.TIM_OC1FastConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2110   .text.TIM_OC1FastConfig:0000000000000000 TIM_OC1FastConfig
     /tmp/ccgXhnD7.s:2135   .text.TIM_OC2FastConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2142   .text.TIM_OC2FastConfig:0000000000000000 TIM_OC2FastConfig
     /tmp/ccgXhnD7.s:2170   .text.TIM_OC3FastConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2177   .text.TIM_OC3FastConfig:0000000000000000 TIM_OC3FastConfig
     /tmp/ccgXhnD7.s:2202   .text.TIM_OC4FastConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2209   .text.TIM_OC4FastConfig:0000000000000000 TIM_OC4FastConfig
     /tmp/ccgXhnD7.s:2237   .text.TIM_ClearOC1Ref:0000000000000000 $t
     /tmp/ccgXhnD7.s:2244   .text.TIM_ClearOC1Ref:0000000000000000 TIM_ClearOC1Ref
     /tmp/ccgXhnD7.s:2269   .text.TIM_ClearOC2Ref:0000000000000000 $t
     /tmp/ccgXhnD7.s:2276   .text.TIM_ClearOC2Ref:0000000000000000 TIM_ClearOC2Ref
     /tmp/ccgXhnD7.s:2303   .text.TIM_ClearOC3Ref:0000000000000000 $t
     /tmp/ccgXhnD7.s:2310   .text.TIM_ClearOC3Ref:0000000000000000 TIM_ClearOC3Ref
     /tmp/ccgXhnD7.s:2335   .text.TIM_ClearOC4Ref:0000000000000000 $t
     /tmp/ccgXhnD7.s:2342   .text.TIM_ClearOC4Ref:0000000000000000 TIM_ClearOC4Ref
     /tmp/ccgXhnD7.s:2369   .text.TIM_OC1PolarityConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2376   .text.TIM_OC1PolarityConfig:0000000000000000 TIM_OC1PolarityConfig
     /tmp/ccgXhnD7.s:2401   .text.TIM_OC1NPolarityConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2408   .text.TIM_OC1NPolarityConfig:0000000000000000 TIM_OC1NPolarityConfig
     /tmp/ccgXhnD7.s:2433   .text.TIM_OC2PolarityConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2440   .text.TIM_OC2PolarityConfig:0000000000000000 TIM_OC2PolarityConfig
     /tmp/ccgXhnD7.s:2468   .text.TIM_OC2NPolarityConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2475   .text.TIM_OC2NPolarityConfig:0000000000000000 TIM_OC2NPolarityConfig
     /tmp/ccgXhnD7.s:2503   .text.TIM_OC3PolarityConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2510   .text.TIM_OC3PolarityConfig:0000000000000000 TIM_OC3PolarityConfig
     /tmp/ccgXhnD7.s:2538   .text.TIM_OC3NPolarityConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2545   .text.TIM_OC3NPolarityConfig:0000000000000000 TIM_OC3NPolarityConfig
     /tmp/ccgXhnD7.s:2573   .text.TIM_OC4PolarityConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2580   .text.TIM_OC4PolarityConfig:0000000000000000 TIM_OC4PolarityConfig
     /tmp/ccgXhnD7.s:2608   .text.TIM_CCxCmd:0000000000000000 $t
     /tmp/ccgXhnD7.s:2615   .text.TIM_CCxCmd:0000000000000000 TIM_CCxCmd
ARM GAS  /tmp/ccgXhnD7.s 			page 141


     /tmp/ccgXhnD7.s:2659   .text.TIM_CCxNCmd:0000000000000000 $t
     /tmp/ccgXhnD7.s:2666   .text.TIM_CCxNCmd:0000000000000000 TIM_CCxNCmd
     /tmp/ccgXhnD7.s:2710   .text.TIM_ICStructInit:0000000000000000 $t
     /tmp/ccgXhnD7.s:2717   .text.TIM_ICStructInit:0000000000000000 TIM_ICStructInit
     /tmp/ccgXhnD7.s:2742   .text.TIM_GetCapture1:0000000000000000 $t
     /tmp/ccgXhnD7.s:2749   .text.TIM_GetCapture1:0000000000000000 TIM_GetCapture1
     /tmp/ccgXhnD7.s:2766   .text.TIM_GetCapture2:0000000000000000 $t
     /tmp/ccgXhnD7.s:2773   .text.TIM_GetCapture2:0000000000000000 TIM_GetCapture2
     /tmp/ccgXhnD7.s:2790   .text.TIM_GetCapture3:0000000000000000 $t
     /tmp/ccgXhnD7.s:2797   .text.TIM_GetCapture3:0000000000000000 TIM_GetCapture3
     /tmp/ccgXhnD7.s:2814   .text.TIM_GetCapture4:0000000000000000 $t
     /tmp/ccgXhnD7.s:2821   .text.TIM_GetCapture4:0000000000000000 TIM_GetCapture4
     /tmp/ccgXhnD7.s:2838   .text.TIM_SetIC1Prescaler:0000000000000000 $t
     /tmp/ccgXhnD7.s:2845   .text.TIM_SetIC1Prescaler:0000000000000000 TIM_SetIC1Prescaler
     /tmp/ccgXhnD7.s:2870   .text.TIM_SetIC2Prescaler:0000000000000000 $t
     /tmp/ccgXhnD7.s:2877   .text.TIM_SetIC2Prescaler:0000000000000000 TIM_SetIC2Prescaler
     /tmp/ccgXhnD7.s:2904   .text.TIM_PWMIConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:2911   .text.TIM_PWMIConfig:0000000000000000 TIM_PWMIConfig
     /tmp/ccgXhnD7.s:3013   .text.TIM_SetIC3Prescaler:0000000000000000 $t
     /tmp/ccgXhnD7.s:3020   .text.TIM_SetIC3Prescaler:0000000000000000 TIM_SetIC3Prescaler
     /tmp/ccgXhnD7.s:3045   .text.TIM_SetIC4Prescaler:0000000000000000 $t
     /tmp/ccgXhnD7.s:3052   .text.TIM_SetIC4Prescaler:0000000000000000 TIM_SetIC4Prescaler
     /tmp/ccgXhnD7.s:3079   .text.TIM_ICInit:0000000000000000 $t
     /tmp/ccgXhnD7.s:3086   .text.TIM_ICInit:0000000000000000 TIM_ICInit
     /tmp/ccgXhnD7.s:3173   .text.TIM_BDTRConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:3180   .text.TIM_BDTRConfig:0000000000000000 TIM_BDTRConfig
     /tmp/ccgXhnD7.s:3220   .text.TIM_BDTRStructInit:0000000000000000 $t
     /tmp/ccgXhnD7.s:3227   .text.TIM_BDTRStructInit:0000000000000000 TIM_BDTRStructInit
     /tmp/ccgXhnD7.s:3255   .text.TIM_CtrlPWMOutputs:0000000000000000 $t
     /tmp/ccgXhnD7.s:3262   .text.TIM_CtrlPWMOutputs:0000000000000000 TIM_CtrlPWMOutputs
     /tmp/ccgXhnD7.s:3289   .text.TIM_SelectCOM:0000000000000000 $t
     /tmp/ccgXhnD7.s:3296   .text.TIM_SelectCOM:0000000000000000 TIM_SelectCOM
     /tmp/ccgXhnD7.s:3324   .text.TIM_CCPreloadControl:0000000000000000 $t
     /tmp/ccgXhnD7.s:3331   .text.TIM_CCPreloadControl:0000000000000000 TIM_CCPreloadControl
     /tmp/ccgXhnD7.s:3359   .text.TIM_ITConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:3366   .text.TIM_ITConfig:0000000000000000 TIM_ITConfig
     /tmp/ccgXhnD7.s:3397   .text.TIM_GenerateEvent:0000000000000000 $t
     /tmp/ccgXhnD7.s:3404   .text.TIM_GenerateEvent:0000000000000000 TIM_GenerateEvent
     /tmp/ccgXhnD7.s:3419   .text.TIM_GetFlagStatus:0000000000000000 $t
     /tmp/ccgXhnD7.s:3426   .text.TIM_GetFlagStatus:0000000000000000 TIM_GetFlagStatus
     /tmp/ccgXhnD7.s:3453   .text.TIM_ClearFlag:0000000000000000 $t
     /tmp/ccgXhnD7.s:3460   .text.TIM_ClearFlag:0000000000000000 TIM_ClearFlag
     /tmp/ccgXhnD7.s:3478   .text.TIM_GetITStatus:0000000000000000 $t
     /tmp/ccgXhnD7.s:3485   .text.TIM_GetITStatus:0000000000000000 TIM_GetITStatus
     /tmp/ccgXhnD7.s:3525   .text.TIM_ClearITPendingBit:0000000000000000 $t
     /tmp/ccgXhnD7.s:3532   .text.TIM_ClearITPendingBit:0000000000000000 TIM_ClearITPendingBit
     /tmp/ccgXhnD7.s:3550   .text.TIM_DMAConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:3557   .text.TIM_DMAConfig:0000000000000000 TIM_DMAConfig
     /tmp/ccgXhnD7.s:3574   .text.TIM_DMACmd:0000000000000000 $t
     /tmp/ccgXhnD7.s:3581   .text.TIM_DMACmd:0000000000000000 TIM_DMACmd
     /tmp/ccgXhnD7.s:3612   .text.TIM_SelectCCDMA:0000000000000000 $t
     /tmp/ccgXhnD7.s:3619   .text.TIM_SelectCCDMA:0000000000000000 TIM_SelectCCDMA
     /tmp/ccgXhnD7.s:3647   .text.TIM_InternalClockConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:3654   .text.TIM_InternalClockConfig:0000000000000000 TIM_InternalClockConfig
     /tmp/ccgXhnD7.s:3673   .text.TIM_SelectInputTrigger:0000000000000000 $t
     /tmp/ccgXhnD7.s:3680   .text.TIM_SelectInputTrigger:0000000000000000 TIM_SelectInputTrigger
     /tmp/ccgXhnD7.s:3705   .text.TIM_ITRxExternalClockConfig:0000000000000000 $t
ARM GAS  /tmp/ccgXhnD7.s 			page 142


     /tmp/ccgXhnD7.s:3712   .text.TIM_ITRxExternalClockConfig:0000000000000000 TIM_ITRxExternalClockConfig
     /tmp/ccgXhnD7.s:3738   .text.TIM_TIxExternalClockConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:3745   .text.TIM_TIxExternalClockConfig:0000000000000000 TIM_TIxExternalClockConfig
     /tmp/ccgXhnD7.s:3795   .text.TIM_SelectOutputTrigger:0000000000000000 $t
     /tmp/ccgXhnD7.s:3802   .text.TIM_SelectOutputTrigger:0000000000000000 TIM_SelectOutputTrigger
     /tmp/ccgXhnD7.s:3827   .text.TIM_SelectSlaveMode:0000000000000000 $t
     /tmp/ccgXhnD7.s:3834   .text.TIM_SelectSlaveMode:0000000000000000 TIM_SelectSlaveMode
     /tmp/ccgXhnD7.s:3859   .text.TIM_SelectMasterSlaveMode:0000000000000000 $t
     /tmp/ccgXhnD7.s:3866   .text.TIM_SelectMasterSlaveMode:0000000000000000 TIM_SelectMasterSlaveMode
     /tmp/ccgXhnD7.s:3891   .text.TIM_ETRConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:3898   .text.TIM_ETRConfig:0000000000000000 TIM_ETRConfig
     /tmp/ccgXhnD7.s:3937   .text.TIM_ETRClockMode1Config:0000000000000000 $t
     /tmp/ccgXhnD7.s:3944   .text.TIM_ETRClockMode1Config:0000000000000000 TIM_ETRClockMode1Config
     /tmp/ccgXhnD7.s:3975   .text.TIM_ETRClockMode2Config:0000000000000000 $t
     /tmp/ccgXhnD7.s:3982   .text.TIM_ETRClockMode2Config:0000000000000000 TIM_ETRClockMode2Config
     /tmp/ccgXhnD7.s:4008   .text.TIM_EncoderInterfaceConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:4015   .text.TIM_EncoderInterfaceConfig:0000000000000000 TIM_EncoderInterfaceConfig
     /tmp/ccgXhnD7.s:4088   .text.TIM_SelectHallSensor:0000000000000000 $t
     /tmp/ccgXhnD7.s:4095   .text.TIM_SelectHallSensor:0000000000000000 TIM_SelectHallSensor
     /tmp/ccgXhnD7.s:4123   .text.TIM_RemapConfig:0000000000000000 $t
     /tmp/ccgXhnD7.s:4130   .text.TIM_RemapConfig:0000000000000000 TIM_RemapConfig
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
