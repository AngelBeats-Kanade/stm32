ARM GAS  /tmp/ccds5dY3.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f4xx_dcmi.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.DCMI_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	DCMI_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	DCMI_DeInit:
  24              	.LFB112:
  25              		.file 1 "FWLIB/src/stm32f4xx_dcmi.c"
   1:FWLIB/src/stm32f4xx_dcmi.c **** /**
   2:FWLIB/src/stm32f4xx_dcmi.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_dcmi.c ****   * @file    stm32f4xx_dcmi.c
   4:FWLIB/src/stm32f4xx_dcmi.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_dcmi.c ****   * @version V1.4.0
   6:FWLIB/src/stm32f4xx_dcmi.c ****   * @date    04-August-2014
   7:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_dcmi.c ****   *          functionalities of the DCMI peripheral:           
   9:FWLIB/src/stm32f4xx_dcmi.c ****   *           + Initialization and Configuration
  10:FWLIB/src/stm32f4xx_dcmi.c ****   *           + Image capture functions  
  11:FWLIB/src/stm32f4xx_dcmi.c ****   *           + Interrupts and flags management
  12:FWLIB/src/stm32f4xx_dcmi.c ****   *
  13:FWLIB/src/stm32f4xx_dcmi.c ****  @verbatim          
  14:FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================
  15:FWLIB/src/stm32f4xx_dcmi.c ****                         ##### How to use this driver #####
  16:FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================  
  17:FWLIB/src/stm32f4xx_dcmi.c ****     [..]       
  18:FWLIB/src/stm32f4xx_dcmi.c ****       The sequence below describes how to use this driver to capture image
  19:FWLIB/src/stm32f4xx_dcmi.c ****       from a camera module connected to the DCMI Interface.
  20:FWLIB/src/stm32f4xx_dcmi.c ****       This sequence does not take into account the configuration of the  
  21:FWLIB/src/stm32f4xx_dcmi.c ****       camera module, which should be made before to configure and enable
  22:FWLIB/src/stm32f4xx_dcmi.c ****       the DCMI to capture images.
  23:FWLIB/src/stm32f4xx_dcmi.c ****              
  24:FWLIB/src/stm32f4xx_dcmi.c ****       (#) Enable the clock for the DCMI and associated GPIOs using the following 
  25:FWLIB/src/stm32f4xx_dcmi.c ****           functions:
  26:FWLIB/src/stm32f4xx_dcmi.c ****           RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_DCMI, ENABLE);
  27:FWLIB/src/stm32f4xx_dcmi.c ****           RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
  28:FWLIB/src/stm32f4xx_dcmi.c ****   
  29:FWLIB/src/stm32f4xx_dcmi.c ****       (#) DCMI pins configuration 
  30:FWLIB/src/stm32f4xx_dcmi.c ****         (++) Connect the involved DCMI pins to AF13 using the following function 
  31:FWLIB/src/stm32f4xx_dcmi.c ****             GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_DCMI); 
  32:FWLIB/src/stm32f4xx_dcmi.c ****         (++) Configure these DCMI pins in alternate function mode by calling 
  33:FWLIB/src/stm32f4xx_dcmi.c ****             the function GPIO_Init();
ARM GAS  /tmp/ccds5dY3.s 			page 2


  34:FWLIB/src/stm32f4xx_dcmi.c ****       
  35:FWLIB/src/stm32f4xx_dcmi.c ****       (#) Declare a DCMI_InitTypeDef structure, for example:
  36:FWLIB/src/stm32f4xx_dcmi.c ****           DCMI_InitTypeDef  DCMI_InitStructure;
  37:FWLIB/src/stm32f4xx_dcmi.c ****           and fill the DCMI_InitStructure variable with the allowed values
  38:FWLIB/src/stm32f4xx_dcmi.c ****           of the structure member.
  39:FWLIB/src/stm32f4xx_dcmi.c ****     
  40:FWLIB/src/stm32f4xx_dcmi.c ****       (#) Initialize the DCMI interface by calling the function
  41:FWLIB/src/stm32f4xx_dcmi.c ****           DCMI_Init(&DCMI_InitStructure); 
  42:FWLIB/src/stm32f4xx_dcmi.c ****     
  43:FWLIB/src/stm32f4xx_dcmi.c ****       (#) Configure the DMA2_Stream1 channel1 to transfer Data from DCMI DR
  44:FWLIB/src/stm32f4xx_dcmi.c ****           register to the destination memory buffer.
  45:FWLIB/src/stm32f4xx_dcmi.c ****     
  46:FWLIB/src/stm32f4xx_dcmi.c ****       (#) Enable DCMI interface using the function
  47:FWLIB/src/stm32f4xx_dcmi.c ****           DCMI_Cmd(ENABLE);
  48:FWLIB/src/stm32f4xx_dcmi.c ****                    
  49:FWLIB/src/stm32f4xx_dcmi.c ****       (#) Start the image capture using the function
  50:FWLIB/src/stm32f4xx_dcmi.c ****           DCMI_CaptureCmd(ENABLE);
  51:FWLIB/src/stm32f4xx_dcmi.c ****                    
  52:FWLIB/src/stm32f4xx_dcmi.c ****       (#) At this stage the DCMI interface waits for the first start of frame,
  53:FWLIB/src/stm32f4xx_dcmi.c ****           then a DMA request is generated continuously/once (depending on the
  54:FWLIB/src/stm32f4xx_dcmi.c ****           mode used, Continuous/Snapshot) to transfer the received data into
  55:FWLIB/src/stm32f4xx_dcmi.c ****           the destination memory. 
  56:FWLIB/src/stm32f4xx_dcmi.c ****      
  57:FWLIB/src/stm32f4xx_dcmi.c ****       -@-  If you need to capture only a rectangular window from the received
  58:FWLIB/src/stm32f4xx_dcmi.c ****            image, you have to use the DCMI_CROPConfig() function to configure 
  59:FWLIB/src/stm32f4xx_dcmi.c ****            the coordinates and size of the window to be captured, then enable 
  60:FWLIB/src/stm32f4xx_dcmi.c ****            the Crop feature using DCMI_CROPCmd(ENABLE);  
  61:FWLIB/src/stm32f4xx_dcmi.c ****            In this case, the Crop configuration should be made before to enable
  62:FWLIB/src/stm32f4xx_dcmi.c ****            and start the DCMI interface. 
  63:FWLIB/src/stm32f4xx_dcmi.c **** 
  64:FWLIB/src/stm32f4xx_dcmi.c ****  @endverbatim     
  65:FWLIB/src/stm32f4xx_dcmi.c ****   ******************************************************************************
  66:FWLIB/src/stm32f4xx_dcmi.c ****   * @attention
  67:FWLIB/src/stm32f4xx_dcmi.c ****   *
  68:FWLIB/src/stm32f4xx_dcmi.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  69:FWLIB/src/stm32f4xx_dcmi.c ****   *
  70:FWLIB/src/stm32f4xx_dcmi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  71:FWLIB/src/stm32f4xx_dcmi.c ****   * You may not use this file except in compliance with the License.
  72:FWLIB/src/stm32f4xx_dcmi.c ****   * You may obtain a copy of the License at:
  73:FWLIB/src/stm32f4xx_dcmi.c ****   *
  74:FWLIB/src/stm32f4xx_dcmi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  75:FWLIB/src/stm32f4xx_dcmi.c ****   *
  76:FWLIB/src/stm32f4xx_dcmi.c ****   * Unless required by applicable law or agreed to in writing, software 
  77:FWLIB/src/stm32f4xx_dcmi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  78:FWLIB/src/stm32f4xx_dcmi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  79:FWLIB/src/stm32f4xx_dcmi.c ****   * See the License for the specific language governing permissions and
  80:FWLIB/src/stm32f4xx_dcmi.c ****   * limitations under the License.
  81:FWLIB/src/stm32f4xx_dcmi.c ****   *
  82:FWLIB/src/stm32f4xx_dcmi.c ****   ******************************************************************************
  83:FWLIB/src/stm32f4xx_dcmi.c ****   */
  84:FWLIB/src/stm32f4xx_dcmi.c **** 
  85:FWLIB/src/stm32f4xx_dcmi.c **** /* Includes ------------------------------------------------------------------*/
  86:FWLIB/src/stm32f4xx_dcmi.c **** #include "stm32f4xx_dcmi.h"
  87:FWLIB/src/stm32f4xx_dcmi.c **** #include "stm32f4xx_rcc.h"
  88:FWLIB/src/stm32f4xx_dcmi.c **** 
  89:FWLIB/src/stm32f4xx_dcmi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  90:FWLIB/src/stm32f4xx_dcmi.c ****   * @{
ARM GAS  /tmp/ccds5dY3.s 			page 3


  91:FWLIB/src/stm32f4xx_dcmi.c ****   */
  92:FWLIB/src/stm32f4xx_dcmi.c **** 
  93:FWLIB/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI 
  94:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief DCMI driver modules
  95:FWLIB/src/stm32f4xx_dcmi.c ****   * @{
  96:FWLIB/src/stm32f4xx_dcmi.c ****   */ 
  97:FWLIB/src/stm32f4xx_dcmi.c **** 
  98:FWLIB/src/stm32f4xx_dcmi.c **** /* Private typedef -----------------------------------------------------------*/
  99:FWLIB/src/stm32f4xx_dcmi.c **** /* Private define ------------------------------------------------------------*/
 100:FWLIB/src/stm32f4xx_dcmi.c **** /* Private macro -------------------------------------------------------------*/
 101:FWLIB/src/stm32f4xx_dcmi.c **** /* Private variables ---------------------------------------------------------*/
 102:FWLIB/src/stm32f4xx_dcmi.c **** /* Private function prototypes -----------------------------------------------*/
 103:FWLIB/src/stm32f4xx_dcmi.c **** /* Private functions ---------------------------------------------------------*/
 104:FWLIB/src/stm32f4xx_dcmi.c **** 
 105:FWLIB/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Private_Functions
 106:FWLIB/src/stm32f4xx_dcmi.c ****   * @{
 107:FWLIB/src/stm32f4xx_dcmi.c ****   */ 
 108:FWLIB/src/stm32f4xx_dcmi.c **** 
 109:FWLIB/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Group1 Initialization and Configuration functions
 110:FWLIB/src/stm32f4xx_dcmi.c ****  *  @brief   Initialization and Configuration functions 
 111:FWLIB/src/stm32f4xx_dcmi.c ****  *
 112:FWLIB/src/stm32f4xx_dcmi.c **** @verbatim   
 113:FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================
 114:FWLIB/src/stm32f4xx_dcmi.c ****               ##### Initialization and Configuration functions #####
 115:FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================  
 116:FWLIB/src/stm32f4xx_dcmi.c **** 
 117:FWLIB/src/stm32f4xx_dcmi.c **** @endverbatim
 118:FWLIB/src/stm32f4xx_dcmi.c ****   * @{
 119:FWLIB/src/stm32f4xx_dcmi.c ****   */
 120:FWLIB/src/stm32f4xx_dcmi.c **** 
 121:FWLIB/src/stm32f4xx_dcmi.c **** /**
 122:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Deinitializes the DCMI registers to their default reset values.
 123:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  None
 124:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 125:FWLIB/src/stm32f4xx_dcmi.c ****   */
 126:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_DeInit(void)
 127:FWLIB/src/stm32f4xx_dcmi.c **** {
  26              		.loc 1 127 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 128:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CR = 0x0;
  31              		.loc 1 128 0
  32 0000 054B     		ldr	r3, .L2
  33 0002 0022     		movs	r2, #0
  34 0004 1A60     		str	r2, [r3]
 129:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->IER = 0x0;
  35              		.loc 1 129 0
  36 0006 DA60     		str	r2, [r3, #12]
 130:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ICR = 0x1F;
  37              		.loc 1 130 0
  38 0008 1F21     		movs	r1, #31
  39 000a 5961     		str	r1, [r3, #20]
 131:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ESCR = 0x0;
  40              		.loc 1 131 0
  41 000c 9A61     		str	r2, [r3, #24]
ARM GAS  /tmp/ccds5dY3.s 			page 4


 132:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ESUR = 0x0;
  42              		.loc 1 132 0
  43 000e DA61     		str	r2, [r3, #28]
 133:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CWSTRTR = 0x0;
  44              		.loc 1 133 0
  45 0010 1A62     		str	r2, [r3, #32]
 134:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CWSIZER = 0x0;
  46              		.loc 1 134 0
  47 0012 5A62     		str	r2, [r3, #36]
  48 0014 7047     		bx	lr
  49              	.L3:
  50 0016 00BF     		.align	2
  51              	.L2:
  52 0018 00000550 		.word	1342504960
  53              		.cfi_endproc
  54              	.LFE112:
  56              		.section	.text.DCMI_Init,"ax",%progbits
  57              		.align	1
  58              		.global	DCMI_Init
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	DCMI_Init:
  65              	.LFB113:
 135:FWLIB/src/stm32f4xx_dcmi.c **** }
 136:FWLIB/src/stm32f4xx_dcmi.c **** 
 137:FWLIB/src/stm32f4xx_dcmi.c **** /**
 138:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Initializes the DCMI according to the specified parameters in the DCMI_InitStruct.
 139:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
 140:FWLIB/src/stm32f4xx_dcmi.c ****   *         the configuration information for the DCMI.
 141:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 142:FWLIB/src/stm32f4xx_dcmi.c ****   */
 143:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
 144:FWLIB/src/stm32f4xx_dcmi.c **** {
  66              		.loc 1 144 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              	.LVL0:
  71 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 20
  74              		.cfi_offset 4, -20
  75              		.cfi_offset 5, -16
  76              		.cfi_offset 6, -12
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79              	.LVL1:
 145:FWLIB/src/stm32f4xx_dcmi.c ****   uint32_t temp = 0x0;
 146:FWLIB/src/stm32f4xx_dcmi.c ****   
 147:FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 148:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CAPTURE_MODE(DCMI_InitStruct->DCMI_CaptureMode));
 149:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_SYNCHRO(DCMI_InitStruct->DCMI_SynchroMode));
 150:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_PCKPOLARITY(DCMI_InitStruct->DCMI_PCKPolarity));
 151:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_VSPOLARITY(DCMI_InitStruct->DCMI_VSPolarity));
 152:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_HSPOLARITY(DCMI_InitStruct->DCMI_HSPolarity));
ARM GAS  /tmp/ccds5dY3.s 			page 5


 153:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
 154:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));
 155:FWLIB/src/stm32f4xx_dcmi.c **** 
 156:FWLIB/src/stm32f4xx_dcmi.c ****   /* The DCMI configuration registers should be programmed correctly before 
 157:FWLIB/src/stm32f4xx_dcmi.c ****   enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
 158:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
  80              		.loc 1 158 0
  81 0002 0F4A     		ldr	r2, .L6
  82 0004 1368     		ldr	r3, [r2]
  83 0006 23F48043 		bic	r3, r3, #16384
  84 000a 23F00103 		bic	r3, r3, #1
  85 000e 1360     		str	r3, [r2]
 159:FWLIB/src/stm32f4xx_dcmi.c ****    
 160:FWLIB/src/stm32f4xx_dcmi.c ****   /* Reset the old DCMI configuration */
 161:FWLIB/src/stm32f4xx_dcmi.c ****   temp = DCMI->CR;
  86              		.loc 1 161 0
  87 0010 1368     		ldr	r3, [r2]
  88              	.LVL2:
 162:FWLIB/src/stm32f4xx_dcmi.c ****   
 163:FWLIB/src/stm32f4xx_dcmi.c ****   temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
  89              		.loc 1 163 0
  90 0012 23F47F63 		bic	r3, r3, #4080
  91              	.LVL3:
  92 0016 23F00203 		bic	r3, r3, #2
  93              	.LVL4:
 164:FWLIB/src/stm32f4xx_dcmi.c ****                       DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
 165:FWLIB/src/stm32f4xx_dcmi.c ****                       DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
 166:FWLIB/src/stm32f4xx_dcmi.c ****                   
 167:FWLIB/src/stm32f4xx_dcmi.c ****   /* Sets the new configuration of the DCMI peripheral */
 168:FWLIB/src/stm32f4xx_dcmi.c ****   temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
  94              		.loc 1 168 0
  95 001a B0F800E0 		ldrh	lr, [r0]
 169:FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_SynchroMode |
  96              		.loc 1 169 0
  97 001e B0F802C0 		ldrh	ip, [r0, #2]
 170:FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_PCKPolarity |
  98              		.loc 1 170 0
  99 0022 8788     		ldrh	r7, [r0, #4]
 171:FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_VSPolarity |
 100              		.loc 1 171 0
 101 0024 C688     		ldrh	r6, [r0, #6]
 172:FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_HSPolarity |
 102              		.loc 1 172 0
 103 0026 0589     		ldrh	r5, [r0, #8]
 173:FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_CaptureRate |
 104              		.loc 1 173 0
 105 0028 4489     		ldrh	r4, [r0, #10]
 174:FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_ExtendedDataMode);
 106              		.loc 1 174 0
 107 002a 8189     		ldrh	r1, [r0, #12]
 173:FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_CaptureRate |
 108              		.loc 1 173 0
 109 002c 4EEA0C00 		orr	r0, lr, ip
 110              	.LVL5:
 111 0030 3843     		orrs	r0, r0, r7
 112 0032 3043     		orrs	r0, r0, r6
 113 0034 2843     		orrs	r0, r0, r5
ARM GAS  /tmp/ccds5dY3.s 			page 6


 114 0036 2043     		orrs	r0, r0, r4
 115 0038 0143     		orrs	r1, r1, r0
 168:FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_SynchroMode |
 116              		.loc 1 168 0
 117 003a 0B43     		orrs	r3, r3, r1
 118              	.LVL6:
 175:FWLIB/src/stm32f4xx_dcmi.c **** 
 176:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CR = temp;                              
 119              		.loc 1 176 0
 120 003c 1360     		str	r3, [r2]
 121 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 122              	.L7:
 123              		.align	2
 124              	.L6:
 125 0040 00000550 		.word	1342504960
 126              		.cfi_endproc
 127              	.LFE113:
 129              		.section	.text.DCMI_StructInit,"ax",%progbits
 130              		.align	1
 131              		.global	DCMI_StructInit
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu softvfp
 137              	DCMI_StructInit:
 138              	.LFB114:
 177:FWLIB/src/stm32f4xx_dcmi.c **** }
 178:FWLIB/src/stm32f4xx_dcmi.c **** 
 179:FWLIB/src/stm32f4xx_dcmi.c **** /**
 180:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Fills each DCMI_InitStruct member with its default value.
 181:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
 182:FWLIB/src/stm32f4xx_dcmi.c ****   *         be initialized.
 183:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 184:FWLIB/src/stm32f4xx_dcmi.c ****   */
 185:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
 186:FWLIB/src/stm32f4xx_dcmi.c **** {
 139              		.loc 1 186 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144              	.LVL7:
 187:FWLIB/src/stm32f4xx_dcmi.c ****   /* Set the default configuration */
 188:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 145              		.loc 1 188 0
 146 0000 0023     		movs	r3, #0
 147 0002 0380     		strh	r3, [r0]	@ movhi
 189:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 148              		.loc 1 189 0
 149 0004 4380     		strh	r3, [r0, #2]	@ movhi
 190:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 150              		.loc 1 190 0
 151 0006 8380     		strh	r3, [r0, #4]	@ movhi
 191:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 152              		.loc 1 191 0
 153 0008 C380     		strh	r3, [r0, #6]	@ movhi
 192:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
ARM GAS  /tmp/ccds5dY3.s 			page 7


 154              		.loc 1 192 0
 155 000a 0381     		strh	r3, [r0, #8]	@ movhi
 193:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 156              		.loc 1 193 0
 157 000c 4381     		strh	r3, [r0, #10]	@ movhi
 194:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 158              		.loc 1 194 0
 159 000e 8381     		strh	r3, [r0, #12]	@ movhi
 160 0010 7047     		bx	lr
 161              		.cfi_endproc
 162              	.LFE114:
 164              		.section	.text.DCMI_CROPConfig,"ax",%progbits
 165              		.align	1
 166              		.global	DCMI_CROPConfig
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu softvfp
 172              	DCMI_CROPConfig:
 173              	.LFB115:
 195:FWLIB/src/stm32f4xx_dcmi.c **** }
 196:FWLIB/src/stm32f4xx_dcmi.c **** 
 197:FWLIB/src/stm32f4xx_dcmi.c **** /**
 198:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Initializes the DCMI peripheral CROP mode according to the specified
 199:FWLIB/src/stm32f4xx_dcmi.c ****   *         parameters in the DCMI_CROPInitStruct.
 200:FWLIB/src/stm32f4xx_dcmi.c ****   * @note   This function should be called before to enable and start the DCMI interface.   
 201:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
 202:FWLIB/src/stm32f4xx_dcmi.c ****   *         contains the configuration information for the DCMI peripheral CROP mode.
 203:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 204:FWLIB/src/stm32f4xx_dcmi.c ****   */
 205:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
 206:FWLIB/src/stm32f4xx_dcmi.c **** {  
 174              		.loc 1 206 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              		@ link register save eliminated.
 179              	.LVL8:
 207:FWLIB/src/stm32f4xx_dcmi.c ****   /* Sets the CROP window coordinates */
 208:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 180              		.loc 1 208 0
 181 0000 4388     		ldrh	r3, [r0, #2]
 209:FWLIB/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 182              		.loc 1 209 0
 183 0002 0288     		ldrh	r2, [r0]
 208:FWLIB/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 184              		.loc 1 208 0
 185 0004 43EA0243 		orr	r3, r3, r2, lsl #16
 186 0008 034A     		ldr	r2, .L10
 187 000a 1362     		str	r3, [r2, #32]
 210:FWLIB/src/stm32f4xx_dcmi.c **** 
 211:FWLIB/src/stm32f4xx_dcmi.c ****   /* Sets the CROP window size */
 212:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 188              		.loc 1 212 0
 189 000c C388     		ldrh	r3, [r0, #6]
 213:FWLIB/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 190              		.loc 1 213 0
ARM GAS  /tmp/ccds5dY3.s 			page 8


 191 000e 8188     		ldrh	r1, [r0, #4]
 212:FWLIB/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 192              		.loc 1 212 0
 193 0010 43EA0143 		orr	r3, r3, r1, lsl #16
 194 0014 5362     		str	r3, [r2, #36]
 195 0016 7047     		bx	lr
 196              	.L11:
 197              		.align	2
 198              	.L10:
 199 0018 00000550 		.word	1342504960
 200              		.cfi_endproc
 201              	.LFE115:
 203              		.section	.text.DCMI_CROPCmd,"ax",%progbits
 204              		.align	1
 205              		.global	DCMI_CROPCmd
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu softvfp
 211              	DCMI_CROPCmd:
 212              	.LFB116:
 214:FWLIB/src/stm32f4xx_dcmi.c **** }
 215:FWLIB/src/stm32f4xx_dcmi.c **** 
 216:FWLIB/src/stm32f4xx_dcmi.c **** /**
 217:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI Crop feature.
 218:FWLIB/src/stm32f4xx_dcmi.c ****   * @note   This function should be called before to enable and start the DCMI interface.
 219:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI Crop feature. 
 220:FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 221:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 222:FWLIB/src/stm32f4xx_dcmi.c ****   */
 223:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_CROPCmd(FunctionalState NewState)
 224:FWLIB/src/stm32f4xx_dcmi.c **** {
 213              		.loc 1 224 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218              	.LVL9:
 225:FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 226:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 227:FWLIB/src/stm32f4xx_dcmi.c ****     
 228:FWLIB/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 219              		.loc 1 228 0
 220 0000 28B9     		cbnz	r0, .L15
 229:FWLIB/src/stm32f4xx_dcmi.c ****   {
 230:FWLIB/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI Crop feature */
 231:FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 232:FWLIB/src/stm32f4xx_dcmi.c ****   }
 233:FWLIB/src/stm32f4xx_dcmi.c ****   else
 234:FWLIB/src/stm32f4xx_dcmi.c ****   {
 235:FWLIB/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI Crop feature */
 236:FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 221              		.loc 1 236 0
 222 0002 064A     		ldr	r2, .L16
 223 0004 1368     		ldr	r3, [r2]
 224 0006 23F00403 		bic	r3, r3, #4
 225 000a 1360     		str	r3, [r2]
ARM GAS  /tmp/ccds5dY3.s 			page 9


 226 000c 7047     		bx	lr
 227              	.L15:
 231:FWLIB/src/stm32f4xx_dcmi.c ****   }
 228              		.loc 1 231 0
 229 000e 034A     		ldr	r2, .L16
 230 0010 1368     		ldr	r3, [r2]
 231 0012 43F00403 		orr	r3, r3, #4
 232 0016 1360     		str	r3, [r2]
 233 0018 7047     		bx	lr
 234              	.L17:
 235 001a 00BF     		.align	2
 236              	.L16:
 237 001c 00000550 		.word	1342504960
 238              		.cfi_endproc
 239              	.LFE116:
 241              		.section	.text.DCMI_SetEmbeddedSynchroCodes,"ax",%progbits
 242              		.align	1
 243              		.global	DCMI_SetEmbeddedSynchroCodes
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu softvfp
 249              	DCMI_SetEmbeddedSynchroCodes:
 250              	.LFB117:
 237:FWLIB/src/stm32f4xx_dcmi.c ****   }
 238:FWLIB/src/stm32f4xx_dcmi.c **** }
 239:FWLIB/src/stm32f4xx_dcmi.c **** 
 240:FWLIB/src/stm32f4xx_dcmi.c **** /**
 241:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Sets the embedded synchronization codes
 242:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
 243:FWLIB/src/stm32f4xx_dcmi.c ****   *         contains the embedded synchronization codes for the DCMI peripheral.
 244:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 245:FWLIB/src/stm32f4xx_dcmi.c ****   */
 246:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
 247:FWLIB/src/stm32f4xx_dcmi.c **** {
 251              		.loc 1 247 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 256              	.LVL10:
 248:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 257              		.loc 1 248 0
 258 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 249:FWLIB/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 259              		.loc 1 249 0
 260 0002 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 248:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 261              		.loc 1 248 0
 262 0004 43EA0223 		orr	r3, r3, r2, lsl #8
 250:FWLIB/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 263              		.loc 1 250 0
 264 0008 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 249:FWLIB/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 265              		.loc 1 249 0
 266 000a 43EA0243 		orr	r3, r3, r2, lsl #16
 251:FWLIB/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
ARM GAS  /tmp/ccds5dY3.s 			page 10


 267              		.loc 1 251 0
 268 000e C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 248:FWLIB/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 269              		.loc 1 248 0
 270 0010 43EA0263 		orr	r3, r3, r2, lsl #24
 271 0014 014A     		ldr	r2, .L19
 272 0016 9361     		str	r3, [r2, #24]
 273 0018 7047     		bx	lr
 274              	.L20:
 275 001a 00BF     		.align	2
 276              	.L19:
 277 001c 00000550 		.word	1342504960
 278              		.cfi_endproc
 279              	.LFE117:
 281              		.section	.text.DCMI_JPEGCmd,"ax",%progbits
 282              		.align	1
 283              		.global	DCMI_JPEGCmd
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 287              		.fpu softvfp
 289              	DCMI_JPEGCmd:
 290              	.LFB118:
 252:FWLIB/src/stm32f4xx_dcmi.c **** }
 253:FWLIB/src/stm32f4xx_dcmi.c **** 
 254:FWLIB/src/stm32f4xx_dcmi.c **** /**
 255:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI JPEG format.
 256:FWLIB/src/stm32f4xx_dcmi.c ****   * @note   The Crop and Embedded Synchronization features cannot be used in this mode.  
 257:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI JPEG format. 
 258:FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 259:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 260:FWLIB/src/stm32f4xx_dcmi.c ****   */
 261:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_JPEGCmd(FunctionalState NewState)
 262:FWLIB/src/stm32f4xx_dcmi.c **** {
 291              		.loc 1 262 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 296              	.LVL11:
 263:FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 264:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 265:FWLIB/src/stm32f4xx_dcmi.c ****  
 266:FWLIB/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 297              		.loc 1 266 0
 298 0000 28B9     		cbnz	r0, .L24
 267:FWLIB/src/stm32f4xx_dcmi.c ****   {
 268:FWLIB/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI JPEG format */
 269:FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 270:FWLIB/src/stm32f4xx_dcmi.c ****   }
 271:FWLIB/src/stm32f4xx_dcmi.c ****   else
 272:FWLIB/src/stm32f4xx_dcmi.c ****   {
 273:FWLIB/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI JPEG format */
 274:FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 299              		.loc 1 274 0
 300 0002 064A     		ldr	r2, .L25
 301 0004 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccds5dY3.s 			page 11


 302 0006 23F00803 		bic	r3, r3, #8
 303 000a 1360     		str	r3, [r2]
 304 000c 7047     		bx	lr
 305              	.L24:
 269:FWLIB/src/stm32f4xx_dcmi.c ****   }
 306              		.loc 1 269 0
 307 000e 034A     		ldr	r2, .L25
 308 0010 1368     		ldr	r3, [r2]
 309 0012 43F00803 		orr	r3, r3, #8
 310 0016 1360     		str	r3, [r2]
 311 0018 7047     		bx	lr
 312              	.L26:
 313 001a 00BF     		.align	2
 314              	.L25:
 315 001c 00000550 		.word	1342504960
 316              		.cfi_endproc
 317              	.LFE118:
 319              		.section	.text.DCMI_Cmd,"ax",%progbits
 320              		.align	1
 321              		.global	DCMI_Cmd
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 325              		.fpu softvfp
 327              	DCMI_Cmd:
 328              	.LFB119:
 275:FWLIB/src/stm32f4xx_dcmi.c ****   }
 276:FWLIB/src/stm32f4xx_dcmi.c **** }
 277:FWLIB/src/stm32f4xx_dcmi.c **** /**
 278:FWLIB/src/stm32f4xx_dcmi.c ****   * @}
 279:FWLIB/src/stm32f4xx_dcmi.c ****   */
 280:FWLIB/src/stm32f4xx_dcmi.c **** 
 281:FWLIB/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Group2 Image capture functions
 282:FWLIB/src/stm32f4xx_dcmi.c ****  *  @brief   Image capture functions
 283:FWLIB/src/stm32f4xx_dcmi.c ****  *
 284:FWLIB/src/stm32f4xx_dcmi.c **** @verbatim   
 285:FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================
 286:FWLIB/src/stm32f4xx_dcmi.c ****                     ##### Image capture functions #####
 287:FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================  
 288:FWLIB/src/stm32f4xx_dcmi.c **** 
 289:FWLIB/src/stm32f4xx_dcmi.c **** @endverbatim
 290:FWLIB/src/stm32f4xx_dcmi.c ****   * @{
 291:FWLIB/src/stm32f4xx_dcmi.c ****   */
 292:FWLIB/src/stm32f4xx_dcmi.c ****   
 293:FWLIB/src/stm32f4xx_dcmi.c **** /**
 294:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI interface.
 295:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI interface. 
 296:FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 297:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 298:FWLIB/src/stm32f4xx_dcmi.c ****   */
 299:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_Cmd(FunctionalState NewState)
 300:FWLIB/src/stm32f4xx_dcmi.c **** {
 329              		.loc 1 300 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 333              		@ link register save eliminated.
ARM GAS  /tmp/ccds5dY3.s 			page 12


 334              	.LVL12:
 301:FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 302:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 303:FWLIB/src/stm32f4xx_dcmi.c ****   
 304:FWLIB/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 335              		.loc 1 304 0
 336 0000 28B9     		cbnz	r0, .L30
 305:FWLIB/src/stm32f4xx_dcmi.c ****   {
 306:FWLIB/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI by setting ENABLE bit */
 307:FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 308:FWLIB/src/stm32f4xx_dcmi.c ****   }
 309:FWLIB/src/stm32f4xx_dcmi.c ****   else
 310:FWLIB/src/stm32f4xx_dcmi.c ****   {
 311:FWLIB/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI by clearing ENABLE bit */
 312:FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 337              		.loc 1 312 0
 338 0002 064A     		ldr	r2, .L31
 339 0004 1368     		ldr	r3, [r2]
 340 0006 23F48043 		bic	r3, r3, #16384
 341 000a 1360     		str	r3, [r2]
 342 000c 7047     		bx	lr
 343              	.L30:
 307:FWLIB/src/stm32f4xx_dcmi.c ****   }
 344              		.loc 1 307 0
 345 000e 034A     		ldr	r2, .L31
 346 0010 1368     		ldr	r3, [r2]
 347 0012 43F48043 		orr	r3, r3, #16384
 348 0016 1360     		str	r3, [r2]
 349 0018 7047     		bx	lr
 350              	.L32:
 351 001a 00BF     		.align	2
 352              	.L31:
 353 001c 00000550 		.word	1342504960
 354              		.cfi_endproc
 355              	.LFE119:
 357              		.section	.text.DCMI_CaptureCmd,"ax",%progbits
 358              		.align	1
 359              		.global	DCMI_CaptureCmd
 360              		.syntax unified
 361              		.thumb
 362              		.thumb_func
 363              		.fpu softvfp
 365              	DCMI_CaptureCmd:
 366              	.LFB120:
 313:FWLIB/src/stm32f4xx_dcmi.c ****   }
 314:FWLIB/src/stm32f4xx_dcmi.c **** }
 315:FWLIB/src/stm32f4xx_dcmi.c **** 
 316:FWLIB/src/stm32f4xx_dcmi.c **** /**
 317:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI Capture.
 318:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI capture. 
 319:FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 320:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 321:FWLIB/src/stm32f4xx_dcmi.c ****   */
 322:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_CaptureCmd(FunctionalState NewState)
 323:FWLIB/src/stm32f4xx_dcmi.c **** {
 367              		.loc 1 323 0
 368              		.cfi_startproc
ARM GAS  /tmp/ccds5dY3.s 			page 13


 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              		@ link register save eliminated.
 372              	.LVL13:
 324:FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 325:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 326:FWLIB/src/stm32f4xx_dcmi.c ****     
 327:FWLIB/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 373              		.loc 1 327 0
 374 0000 28B9     		cbnz	r0, .L36
 328:FWLIB/src/stm32f4xx_dcmi.c ****   {
 329:FWLIB/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI Capture */
 330:FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 331:FWLIB/src/stm32f4xx_dcmi.c ****   }
 332:FWLIB/src/stm32f4xx_dcmi.c ****   else
 333:FWLIB/src/stm32f4xx_dcmi.c ****   {
 334:FWLIB/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI Capture */
 335:FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 375              		.loc 1 335 0
 376 0002 064A     		ldr	r2, .L37
 377 0004 1368     		ldr	r3, [r2]
 378 0006 23F00103 		bic	r3, r3, #1
 379 000a 1360     		str	r3, [r2]
 380 000c 7047     		bx	lr
 381              	.L36:
 330:FWLIB/src/stm32f4xx_dcmi.c ****   }
 382              		.loc 1 330 0
 383 000e 034A     		ldr	r2, .L37
 384 0010 1368     		ldr	r3, [r2]
 385 0012 43F00103 		orr	r3, r3, #1
 386 0016 1360     		str	r3, [r2]
 387 0018 7047     		bx	lr
 388              	.L38:
 389 001a 00BF     		.align	2
 390              	.L37:
 391 001c 00000550 		.word	1342504960
 392              		.cfi_endproc
 393              	.LFE120:
 395              		.section	.text.DCMI_ReadData,"ax",%progbits
 396              		.align	1
 397              		.global	DCMI_ReadData
 398              		.syntax unified
 399              		.thumb
 400              		.thumb_func
 401              		.fpu softvfp
 403              	DCMI_ReadData:
 404              	.LFB121:
 336:FWLIB/src/stm32f4xx_dcmi.c ****   }
 337:FWLIB/src/stm32f4xx_dcmi.c **** }
 338:FWLIB/src/stm32f4xx_dcmi.c **** 
 339:FWLIB/src/stm32f4xx_dcmi.c **** /**
 340:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Reads the data stored in the DR register.
 341:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  None 
 342:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval Data register value
 343:FWLIB/src/stm32f4xx_dcmi.c ****   */
 344:FWLIB/src/stm32f4xx_dcmi.c **** uint32_t DCMI_ReadData(void)
 345:FWLIB/src/stm32f4xx_dcmi.c **** {
ARM GAS  /tmp/ccds5dY3.s 			page 14


 405              		.loc 1 345 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 346:FWLIB/src/stm32f4xx_dcmi.c ****   return DCMI->DR;
 410              		.loc 1 346 0
 411 0000 014B     		ldr	r3, .L40
 412 0002 986A     		ldr	r0, [r3, #40]
 347:FWLIB/src/stm32f4xx_dcmi.c **** }
 413              		.loc 1 347 0
 414 0004 7047     		bx	lr
 415              	.L41:
 416 0006 00BF     		.align	2
 417              	.L40:
 418 0008 00000550 		.word	1342504960
 419              		.cfi_endproc
 420              	.LFE121:
 422              		.section	.text.DCMI_ITConfig,"ax",%progbits
 423              		.align	1
 424              		.global	DCMI_ITConfig
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 428              		.fpu softvfp
 430              	DCMI_ITConfig:
 431              	.LFB122:
 348:FWLIB/src/stm32f4xx_dcmi.c **** /**
 349:FWLIB/src/stm32f4xx_dcmi.c ****   * @}
 350:FWLIB/src/stm32f4xx_dcmi.c ****   */
 351:FWLIB/src/stm32f4xx_dcmi.c **** 
 352:FWLIB/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Group3 Interrupts and flags management functions
 353:FWLIB/src/stm32f4xx_dcmi.c ****  *  @brief   Interrupts and flags management functions
 354:FWLIB/src/stm32f4xx_dcmi.c ****  *
 355:FWLIB/src/stm32f4xx_dcmi.c **** @verbatim   
 356:FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================
 357:FWLIB/src/stm32f4xx_dcmi.c ****              ##### Interrupts and flags management functions #####
 358:FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================  
 359:FWLIB/src/stm32f4xx_dcmi.c **** 
 360:FWLIB/src/stm32f4xx_dcmi.c **** @endverbatim
 361:FWLIB/src/stm32f4xx_dcmi.c ****   * @{
 362:FWLIB/src/stm32f4xx_dcmi.c ****   */
 363:FWLIB/src/stm32f4xx_dcmi.c **** 
 364:FWLIB/src/stm32f4xx_dcmi.c **** /**
 365:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI interface interrupts.
 366:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_IT: specifies the DCMI interrupt sources to be enabled or disabled. 
 367:FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be any combination of the following values:
 368:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
 369:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_OVF: Overflow interrupt mask
 370:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
 371:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
 372:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_LINE: Line interrupt mask
 373:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the specified DCMI interrupts.
 374:FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 375:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 376:FWLIB/src/stm32f4xx_dcmi.c ****   */
 377:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
ARM GAS  /tmp/ccds5dY3.s 			page 15


 378:FWLIB/src/stm32f4xx_dcmi.c **** {
 432              		.loc 1 378 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436              		@ link register save eliminated.
 437              	.LVL14:
 379:FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 380:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
 381:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 382:FWLIB/src/stm32f4xx_dcmi.c ****   
 383:FWLIB/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 438              		.loc 1 383 0
 439 0000 31B9     		cbnz	r1, .L45
 384:FWLIB/src/stm32f4xx_dcmi.c ****   {
 385:FWLIB/src/stm32f4xx_dcmi.c ****     /* Enable the Interrupt sources */
 386:FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->IER |= DCMI_IT;
 387:FWLIB/src/stm32f4xx_dcmi.c ****   }
 388:FWLIB/src/stm32f4xx_dcmi.c ****   else
 389:FWLIB/src/stm32f4xx_dcmi.c ****   {
 390:FWLIB/src/stm32f4xx_dcmi.c ****     /* Disable the Interrupt sources */
 391:FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->IER &= (uint16_t)(~DCMI_IT);
 440              		.loc 1 391 0
 441 0002 064A     		ldr	r2, .L46
 442 0004 D368     		ldr	r3, [r2, #12]
 443 0006 C043     		mvns	r0, r0
 444              	.LVL15:
 445 0008 80B2     		uxth	r0, r0
 446 000a 1840     		ands	r0, r0, r3
 447 000c D060     		str	r0, [r2, #12]
 448 000e 7047     		bx	lr
 449              	.LVL16:
 450              	.L45:
 386:FWLIB/src/stm32f4xx_dcmi.c ****   }
 451              		.loc 1 386 0
 452 0010 024B     		ldr	r3, .L46
 453 0012 DA68     		ldr	r2, [r3, #12]
 454 0014 1043     		orrs	r0, r0, r2
 455              	.LVL17:
 456 0016 D860     		str	r0, [r3, #12]
 457 0018 7047     		bx	lr
 458              	.L47:
 459 001a 00BF     		.align	2
 460              	.L46:
 461 001c 00000550 		.word	1342504960
 462              		.cfi_endproc
 463              	.LFE122:
 465              		.section	.text.DCMI_GetFlagStatus,"ax",%progbits
 466              		.align	1
 467              		.global	DCMI_GetFlagStatus
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu softvfp
 473              	DCMI_GetFlagStatus:
 474              	.LFB123:
 392:FWLIB/src/stm32f4xx_dcmi.c ****   }  
ARM GAS  /tmp/ccds5dY3.s 			page 16


 393:FWLIB/src/stm32f4xx_dcmi.c **** }
 394:FWLIB/src/stm32f4xx_dcmi.c **** 
 395:FWLIB/src/stm32f4xx_dcmi.c **** /**
 396:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Checks whether the  DCMI interface flag is set or not.
 397:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_FLAG: specifies the flag to check.
 398:FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be one of the following values:
 399:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FRAMERI: Frame capture complete Raw flag mask
 400:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_OVFRI: Overflow Raw flag mask
 401:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_ERRRI: Synchronization error Raw flag mask
 402:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
 403:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
 404:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FRAMEMI: Frame capture complete Masked flag mask
 405:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_OVFMI: Overflow Masked flag mask
 406:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_ERRMI: Synchronization error Masked flag mask
 407:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNCMI: VSYNC Masked flag mask
 408:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_LINEMI: Line Masked flag mask
 409:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_HSYNC: HSYNC flag mask
 410:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
 411:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
 412:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval The new state of DCMI_FLAG (SET or RESET).
 413:FWLIB/src/stm32f4xx_dcmi.c ****   */
 414:FWLIB/src/stm32f4xx_dcmi.c **** FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
 415:FWLIB/src/stm32f4xx_dcmi.c **** {
 475              		.loc 1 415 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 480              	.LVL18:
 416:FWLIB/src/stm32f4xx_dcmi.c ****   FlagStatus bitstatus = RESET;
 417:FWLIB/src/stm32f4xx_dcmi.c ****   uint32_t dcmireg, tempreg = 0;
 418:FWLIB/src/stm32f4xx_dcmi.c **** 
 419:FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 420:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
 421:FWLIB/src/stm32f4xx_dcmi.c ****   
 422:FWLIB/src/stm32f4xx_dcmi.c ****   /* Get the DCMI register index */
 423:FWLIB/src/stm32f4xx_dcmi.c ****   dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 424:FWLIB/src/stm32f4xx_dcmi.c ****   
 425:FWLIB/src/stm32f4xx_dcmi.c ****   if (dcmireg == 0x00) /* The FLAG is in RISR register */
 481              		.loc 1 425 0
 482 0000 030B     		lsrs	r3, r0, #12
 483              	.LVL19:
 484 0002 05D1     		bne	.L49
 426:FWLIB/src/stm32f4xx_dcmi.c ****   {
 427:FWLIB/src/stm32f4xx_dcmi.c ****     tempreg= DCMI->RISR;
 485              		.loc 1 427 0
 486 0004 074B     		ldr	r3, .L56
 487              	.LVL20:
 488 0006 9B68     		ldr	r3, [r3, #8]
 489              	.LVL21:
 490              	.L50:
 428:FWLIB/src/stm32f4xx_dcmi.c ****   }
 429:FWLIB/src/stm32f4xx_dcmi.c ****   else if (dcmireg == 0x02) /* The FLAG is in SR register */
 430:FWLIB/src/stm32f4xx_dcmi.c ****   {
 431:FWLIB/src/stm32f4xx_dcmi.c ****     tempreg = DCMI->SR;
 432:FWLIB/src/stm32f4xx_dcmi.c ****   }
 433:FWLIB/src/stm32f4xx_dcmi.c ****   else /* The FLAG is in MISR register */
ARM GAS  /tmp/ccds5dY3.s 			page 17


 434:FWLIB/src/stm32f4xx_dcmi.c ****   {
 435:FWLIB/src/stm32f4xx_dcmi.c ****     tempreg = DCMI->MISR;
 436:FWLIB/src/stm32f4xx_dcmi.c ****   }
 437:FWLIB/src/stm32f4xx_dcmi.c ****   
 438:FWLIB/src/stm32f4xx_dcmi.c ****   if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 491              		.loc 1 438 0
 492 0008 1842     		tst	r0, r3
 493 000a 09D1     		bne	.L54
 439:FWLIB/src/stm32f4xx_dcmi.c ****   {
 440:FWLIB/src/stm32f4xx_dcmi.c ****     bitstatus = SET;
 441:FWLIB/src/stm32f4xx_dcmi.c ****   }
 442:FWLIB/src/stm32f4xx_dcmi.c ****   else
 443:FWLIB/src/stm32f4xx_dcmi.c ****   {
 444:FWLIB/src/stm32f4xx_dcmi.c ****     bitstatus = RESET;
 494              		.loc 1 444 0
 495 000c 0020     		movs	r0, #0
 496              	.LVL22:
 445:FWLIB/src/stm32f4xx_dcmi.c ****   }
 446:FWLIB/src/stm32f4xx_dcmi.c ****   /* Return the DCMI_FLAG status */
 447:FWLIB/src/stm32f4xx_dcmi.c ****   return  bitstatus;
 448:FWLIB/src/stm32f4xx_dcmi.c **** }
 497              		.loc 1 448 0
 498 000e 7047     		bx	lr
 499              	.LVL23:
 500              	.L49:
 429:FWLIB/src/stm32f4xx_dcmi.c ****   {
 501              		.loc 1 429 0
 502 0010 022B     		cmp	r3, #2
 503 0012 02D0     		beq	.L55
 435:FWLIB/src/stm32f4xx_dcmi.c ****   }
 504              		.loc 1 435 0
 505 0014 034B     		ldr	r3, .L56
 506              	.LVL24:
 507 0016 1B69     		ldr	r3, [r3, #16]
 508              	.LVL25:
 509 0018 F6E7     		b	.L50
 510              	.LVL26:
 511              	.L55:
 431:FWLIB/src/stm32f4xx_dcmi.c ****   }
 512              		.loc 1 431 0
 513 001a 024B     		ldr	r3, .L56
 514              	.LVL27:
 515 001c 5B68     		ldr	r3, [r3, #4]
 516              	.LVL28:
 517 001e F3E7     		b	.L50
 518              	.L54:
 440:FWLIB/src/stm32f4xx_dcmi.c ****   }
 519              		.loc 1 440 0
 520 0020 0120     		movs	r0, #1
 521              	.LVL29:
 522 0022 7047     		bx	lr
 523              	.L57:
 524              		.align	2
 525              	.L56:
 526 0024 00000550 		.word	1342504960
 527              		.cfi_endproc
 528              	.LFE123:
ARM GAS  /tmp/ccds5dY3.s 			page 18


 530              		.section	.text.DCMI_ClearFlag,"ax",%progbits
 531              		.align	1
 532              		.global	DCMI_ClearFlag
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu softvfp
 538              	DCMI_ClearFlag:
 539              	.LFB124:
 449:FWLIB/src/stm32f4xx_dcmi.c **** 
 450:FWLIB/src/stm32f4xx_dcmi.c **** /**
 451:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Clears the DCMI's pending flags.
 452:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_FLAG: specifies the flag to clear.
 453:FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be any combination of the following values:
 454:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FRAMERI: Frame capture complete Raw flag mask
 455:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_OVFRI: Overflow Raw flag mask
 456:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_ERRRI: Synchronization error Raw flag mask
 457:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
 458:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
 459:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 460:FWLIB/src/stm32f4xx_dcmi.c ****   */
 461:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_ClearFlag(uint16_t DCMI_FLAG)
 462:FWLIB/src/stm32f4xx_dcmi.c **** {
 540              		.loc 1 462 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 545              	.LVL30:
 463:FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 464:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
 465:FWLIB/src/stm32f4xx_dcmi.c ****   
 466:FWLIB/src/stm32f4xx_dcmi.c ****   /* Clear the flag by writing in the ICR register 1 in the corresponding 
 467:FWLIB/src/stm32f4xx_dcmi.c ****   Flag position*/
 468:FWLIB/src/stm32f4xx_dcmi.c ****   
 469:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ICR = DCMI_FLAG;
 546              		.loc 1 469 0
 547 0000 014B     		ldr	r3, .L59
 548 0002 5861     		str	r0, [r3, #20]
 549 0004 7047     		bx	lr
 550              	.L60:
 551 0006 00BF     		.align	2
 552              	.L59:
 553 0008 00000550 		.word	1342504960
 554              		.cfi_endproc
 555              	.LFE124:
 557              		.section	.text.DCMI_GetITStatus,"ax",%progbits
 558              		.align	1
 559              		.global	DCMI_GetITStatus
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 563              		.fpu softvfp
 565              	DCMI_GetITStatus:
 566              	.LFB125:
 470:FWLIB/src/stm32f4xx_dcmi.c **** }
 471:FWLIB/src/stm32f4xx_dcmi.c **** 
ARM GAS  /tmp/ccds5dY3.s 			page 19


 472:FWLIB/src/stm32f4xx_dcmi.c **** /**
 473:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Checks whether the DCMI interrupt has occurred or not.
 474:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_IT: specifies the DCMI interrupt source to check.
 475:FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be one of the following values:
 476:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
 477:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_OVF: Overflow interrupt mask
 478:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
 479:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
 480:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_LINE: Line interrupt mask
 481:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval The new state of DCMI_IT (SET or RESET).
 482:FWLIB/src/stm32f4xx_dcmi.c ****   */
 483:FWLIB/src/stm32f4xx_dcmi.c **** ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
 484:FWLIB/src/stm32f4xx_dcmi.c **** {
 567              		.loc 1 484 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 572              	.LVL31:
 485:FWLIB/src/stm32f4xx_dcmi.c ****   ITStatus bitstatus = RESET;
 486:FWLIB/src/stm32f4xx_dcmi.c ****   uint32_t itstatus = 0;
 487:FWLIB/src/stm32f4xx_dcmi.c ****   
 488:FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 489:FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_GET_IT(DCMI_IT));
 490:FWLIB/src/stm32f4xx_dcmi.c ****   
 491:FWLIB/src/stm32f4xx_dcmi.c ****   itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 573              		.loc 1 491 0
 574 0000 034B     		ldr	r3, .L65
 575 0002 1B69     		ldr	r3, [r3, #16]
 576              	.LVL32:
 492:FWLIB/src/stm32f4xx_dcmi.c ****   
 493:FWLIB/src/stm32f4xx_dcmi.c ****   if ((itstatus != (uint16_t)RESET))
 577              		.loc 1 493 0
 578 0004 0342     		tst	r3, r0
 579 0006 01D1     		bne	.L64
 494:FWLIB/src/stm32f4xx_dcmi.c ****   {
 495:FWLIB/src/stm32f4xx_dcmi.c ****     bitstatus = SET;
 496:FWLIB/src/stm32f4xx_dcmi.c ****   }
 497:FWLIB/src/stm32f4xx_dcmi.c ****   else
 498:FWLIB/src/stm32f4xx_dcmi.c ****   {
 499:FWLIB/src/stm32f4xx_dcmi.c ****     bitstatus = RESET;
 580              		.loc 1 499 0
 581 0008 0020     		movs	r0, #0
 582              	.LVL33:
 500:FWLIB/src/stm32f4xx_dcmi.c ****   }
 501:FWLIB/src/stm32f4xx_dcmi.c ****   return bitstatus;
 502:FWLIB/src/stm32f4xx_dcmi.c **** }
 583              		.loc 1 502 0
 584 000a 7047     		bx	lr
 585              	.LVL34:
 586              	.L64:
 495:FWLIB/src/stm32f4xx_dcmi.c ****   }
 587              		.loc 1 495 0
 588 000c 0120     		movs	r0, #1
 589              	.LVL35:
 590 000e 7047     		bx	lr
 591              	.L66:
ARM GAS  /tmp/ccds5dY3.s 			page 20


 592              		.align	2
 593              	.L65:
 594 0010 00000550 		.word	1342504960
 595              		.cfi_endproc
 596              	.LFE125:
 598              		.section	.text.DCMI_ClearITPendingBit,"ax",%progbits
 599              		.align	1
 600              		.global	DCMI_ClearITPendingBit
 601              		.syntax unified
 602              		.thumb
 603              		.thumb_func
 604              		.fpu softvfp
 606              	DCMI_ClearITPendingBit:
 607              	.LFB126:
 503:FWLIB/src/stm32f4xx_dcmi.c **** 
 504:FWLIB/src/stm32f4xx_dcmi.c **** /**
 505:FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Clears the DCMI's interrupt pending bits.
 506:FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_IT: specifies the DCMI interrupt pending bit to clear.
 507:FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be any combination of the following values:
 508:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
 509:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_OVF: Overflow interrupt mask
 510:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
 511:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
 512:FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_LINE: Line interrupt mask
 513:FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 514:FWLIB/src/stm32f4xx_dcmi.c ****   */
 515:FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
 516:FWLIB/src/stm32f4xx_dcmi.c **** {
 608              		.loc 1 516 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              		@ link register save eliminated.
 613              	.LVL36:
 517:FWLIB/src/stm32f4xx_dcmi.c ****   /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
 518:FWLIB/src/stm32f4xx_dcmi.c ****   corresponding pending Bit position*/
 519:FWLIB/src/stm32f4xx_dcmi.c ****   
 520:FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ICR = DCMI_IT;
 614              		.loc 1 520 0
 615 0000 014B     		ldr	r3, .L68
 616 0002 5861     		str	r0, [r3, #20]
 617 0004 7047     		bx	lr
 618              	.L69:
 619 0006 00BF     		.align	2
 620              	.L68:
 621 0008 00000550 		.word	1342504960
 622              		.cfi_endproc
 623              	.LFE126:
 625              		.text
 626              	.Letext0:
 627              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 628              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 629              		.file 4 "CORE/core_cm4.h"
 630              		.file 5 "USER/system_stm32f4xx.h"
 631              		.file 6 "USER/stm32f4xx.h"
 632              		.file 7 "FWLIB/inc/stm32f4xx_dcmi.h"
ARM GAS  /tmp/ccds5dY3.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dcmi.c
     /tmp/ccds5dY3.s:16     .text.DCMI_DeInit:0000000000000000 $t
     /tmp/ccds5dY3.s:23     .text.DCMI_DeInit:0000000000000000 DCMI_DeInit
     /tmp/ccds5dY3.s:52     .text.DCMI_DeInit:0000000000000018 $d
     /tmp/ccds5dY3.s:57     .text.DCMI_Init:0000000000000000 $t
     /tmp/ccds5dY3.s:64     .text.DCMI_Init:0000000000000000 DCMI_Init
     /tmp/ccds5dY3.s:125    .text.DCMI_Init:0000000000000040 $d
     /tmp/ccds5dY3.s:130    .text.DCMI_StructInit:0000000000000000 $t
     /tmp/ccds5dY3.s:137    .text.DCMI_StructInit:0000000000000000 DCMI_StructInit
     /tmp/ccds5dY3.s:165    .text.DCMI_CROPConfig:0000000000000000 $t
     /tmp/ccds5dY3.s:172    .text.DCMI_CROPConfig:0000000000000000 DCMI_CROPConfig
     /tmp/ccds5dY3.s:199    .text.DCMI_CROPConfig:0000000000000018 $d
     /tmp/ccds5dY3.s:204    .text.DCMI_CROPCmd:0000000000000000 $t
     /tmp/ccds5dY3.s:211    .text.DCMI_CROPCmd:0000000000000000 DCMI_CROPCmd
     /tmp/ccds5dY3.s:237    .text.DCMI_CROPCmd:000000000000001c $d
     /tmp/ccds5dY3.s:242    .text.DCMI_SetEmbeddedSynchroCodes:0000000000000000 $t
     /tmp/ccds5dY3.s:249    .text.DCMI_SetEmbeddedSynchroCodes:0000000000000000 DCMI_SetEmbeddedSynchroCodes
     /tmp/ccds5dY3.s:277    .text.DCMI_SetEmbeddedSynchroCodes:000000000000001c $d
     /tmp/ccds5dY3.s:282    .text.DCMI_JPEGCmd:0000000000000000 $t
     /tmp/ccds5dY3.s:289    .text.DCMI_JPEGCmd:0000000000000000 DCMI_JPEGCmd
     /tmp/ccds5dY3.s:315    .text.DCMI_JPEGCmd:000000000000001c $d
     /tmp/ccds5dY3.s:320    .text.DCMI_Cmd:0000000000000000 $t
     /tmp/ccds5dY3.s:327    .text.DCMI_Cmd:0000000000000000 DCMI_Cmd
     /tmp/ccds5dY3.s:353    .text.DCMI_Cmd:000000000000001c $d
     /tmp/ccds5dY3.s:358    .text.DCMI_CaptureCmd:0000000000000000 $t
     /tmp/ccds5dY3.s:365    .text.DCMI_CaptureCmd:0000000000000000 DCMI_CaptureCmd
     /tmp/ccds5dY3.s:391    .text.DCMI_CaptureCmd:000000000000001c $d
     /tmp/ccds5dY3.s:396    .text.DCMI_ReadData:0000000000000000 $t
     /tmp/ccds5dY3.s:403    .text.DCMI_ReadData:0000000000000000 DCMI_ReadData
     /tmp/ccds5dY3.s:418    .text.DCMI_ReadData:0000000000000008 $d
     /tmp/ccds5dY3.s:423    .text.DCMI_ITConfig:0000000000000000 $t
     /tmp/ccds5dY3.s:430    .text.DCMI_ITConfig:0000000000000000 DCMI_ITConfig
     /tmp/ccds5dY3.s:461    .text.DCMI_ITConfig:000000000000001c $d
     /tmp/ccds5dY3.s:466    .text.DCMI_GetFlagStatus:0000000000000000 $t
     /tmp/ccds5dY3.s:473    .text.DCMI_GetFlagStatus:0000000000000000 DCMI_GetFlagStatus
     /tmp/ccds5dY3.s:526    .text.DCMI_GetFlagStatus:0000000000000024 $d
     /tmp/ccds5dY3.s:531    .text.DCMI_ClearFlag:0000000000000000 $t
     /tmp/ccds5dY3.s:538    .text.DCMI_ClearFlag:0000000000000000 DCMI_ClearFlag
     /tmp/ccds5dY3.s:553    .text.DCMI_ClearFlag:0000000000000008 $d
     /tmp/ccds5dY3.s:558    .text.DCMI_GetITStatus:0000000000000000 $t
     /tmp/ccds5dY3.s:565    .text.DCMI_GetITStatus:0000000000000000 DCMI_GetITStatus
     /tmp/ccds5dY3.s:594    .text.DCMI_GetITStatus:0000000000000010 $d
     /tmp/ccds5dY3.s:599    .text.DCMI_ClearITPendingBit:0000000000000000 $t
     /tmp/ccds5dY3.s:606    .text.DCMI_ClearITPendingBit:0000000000000000 DCMI_ClearITPendingBit
     /tmp/ccds5dY3.s:621    .text.DCMI_ClearITPendingBit:0000000000000008 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
