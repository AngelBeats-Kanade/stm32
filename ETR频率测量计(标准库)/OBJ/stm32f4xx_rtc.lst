ARM GAS  /tmp/ccROQL82.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f4xx_rtc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	RTC_ByteToBcd2:
  23              	.LFB167:
  24              		.file 1 "FWLIB/src/stm32f4xx_rtc.c"
   1:FWLIB/src/stm32f4xx_rtc.c **** /**
   2:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:FWLIB/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_rtc.c ****   * @version V1.4.0
   6:FWLIB/src/stm32f4xx_rtc.c ****   * @date    04-August-2014
   7:FWLIB/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:FWLIB/src/stm32f4xx_rtc.c ****   *           + Initialization
  10:FWLIB/src/stm32f4xx_rtc.c ****   *           + Calendar (Time and Date) configuration
  11:FWLIB/src/stm32f4xx_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  12:FWLIB/src/stm32f4xx_rtc.c ****   *           + WakeUp Timer configuration
  13:FWLIB/src/stm32f4xx_rtc.c ****   *           + Daylight Saving configuration
  14:FWLIB/src/stm32f4xx_rtc.c ****   *           + Output pin Configuration
  15:FWLIB/src/stm32f4xx_rtc.c ****   *           + Coarse digital Calibration configuration
  16:FWLIB/src/stm32f4xx_rtc.c ****   *           + Smooth digital Calibration configuration
  17:FWLIB/src/stm32f4xx_rtc.c ****   *           + TimeStamp configuration
  18:FWLIB/src/stm32f4xx_rtc.c ****   *           + Tampers configuration
  19:FWLIB/src/stm32f4xx_rtc.c ****   *           + Backup Data Registers configuration
  20:FWLIB/src/stm32f4xx_rtc.c ****   *           + Shift control synchronisation    
  21:FWLIB/src/stm32f4xx_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:FWLIB/src/stm32f4xx_rtc.c ****   *           + Interrupts and flags management
  23:FWLIB/src/stm32f4xx_rtc.c ****   *
  24:FWLIB/src/stm32f4xx_rtc.c **** @verbatim
  25:FWLIB/src/stm32f4xx_rtc.c **** 
  26:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  27:FWLIB/src/stm32f4xx_rtc.c ****               ##### Backup Domain Operating Condition #####
  28:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  29:FWLIB/src/stm32f4xx_rtc.c ****  [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  30:FWLIB/src/stm32f4xx_rtc.c ****       SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:FWLIB/src/stm32f4xx_rtc.c ****       VDD supply is powered off.
  32:FWLIB/src/stm32f4xx_rtc.c ****       To retain the content of the RTC backup registers, backup SRAM, and supply 
  33:FWLIB/src/stm32f4xx_rtc.c ****       the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  34:FWLIB/src/stm32f4xx_rtc.c ****       standby voltage supplied by a battery or by another source.
ARM GAS  /tmp/ccROQL82.s 			page 2


  35:FWLIB/src/stm32f4xx_rtc.c **** 
  36:FWLIB/src/stm32f4xx_rtc.c ****  [..] To allow the RTC to operate even when the main digital supply (VDD) is turned
  37:FWLIB/src/stm32f4xx_rtc.c ****       off, the VBAT pin powers the following blocks:
  38:FWLIB/src/stm32f4xx_rtc.c ****    (#) The RTC
  39:FWLIB/src/stm32f4xx_rtc.c ****    (#) The LSE oscillator
  40:FWLIB/src/stm32f4xx_rtc.c ****    (#) The backup SRAM when the low power backup regulator is enabled
  41:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  42:FWLIB/src/stm32f4xx_rtc.c ****   
  43:FWLIB/src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  44:FWLIB/src/stm32f4xx_rtc.c ****       the following functions are available:
  45:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as either GPIO or LSE pins
  46:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  47:FWLIB/src/stm32f4xx_rtc.c ****    (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  48:FWLIB/src/stm32f4xx_rtc.c ****   
  49:FWLIB/src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  50:FWLIB/src/stm32f4xx_rtc.c ****       because VDD is not present), the following functions are available:
  51:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as LSE pins only
  52:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 can be used as the RTC_AF1 pin 
  53:FWLIB/src/stm32f4xx_rtc.c ****    (#) PI8 can be used as the RTC_AF2 pin
  54:FWLIB/src/stm32f4xx_rtc.c ****   
  55:FWLIB/src/stm32f4xx_rtc.c ****             
  56:FWLIB/src/stm32f4xx_rtc.c ****                    ##### Backup Domain Reset #####
  57:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  58:FWLIB/src/stm32f4xx_rtc.c ****  [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  59:FWLIB/src/stm32f4xx_rtc.c ****       to their reset values. The BKPSRAM is not affected by this reset. The only
  60:FWLIB/src/stm32f4xx_rtc.c ****       way of resetting the BKPSRAM is through the Flash interface by requesting 
  61:FWLIB/src/stm32f4xx_rtc.c ****       a protection level change from 1 to 0.
  62:FWLIB/src/stm32f4xx_rtc.c ****  [..] A backup domain reset is generated when one of the following events occurs:
  63:FWLIB/src/stm32f4xx_rtc.c ****    (#) Software reset, triggered by setting the BDRST bit in the 
  64:FWLIB/src/stm32f4xx_rtc.c ****        RCC Backup domain control register (RCC_BDCR). You can use the
  65:FWLIB/src/stm32f4xx_rtc.c ****        RCC_BackupResetCmd().
  66:FWLIB/src/stm32f4xx_rtc.c ****    (#) VDD or VBAT power on, if both supplies have previously been powered off.
  67:FWLIB/src/stm32f4xx_rtc.c ****   
  68:FWLIB/src/stm32f4xx_rtc.c **** 
  69:FWLIB/src/stm32f4xx_rtc.c ****                    ##### Backup Domain Access #####
  70:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  71:FWLIB/src/stm32f4xx_rtc.c ****  [..] After reset, the backup domain (RTC registers, RTC backup data 
  72:FWLIB/src/stm32f4xx_rtc.c ****       registers and backup SRAM) is protected against possible unwanted write 
  73:FWLIB/src/stm32f4xx_rtc.c ****       accesses. 
  74:FWLIB/src/stm32f4xx_rtc.c ****  [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  75:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Power Controller (PWR) APB1 interface clock using the
  76:FWLIB/src/stm32f4xx_rtc.c ****        RCC_APB1PeriphClockCmd() function.
  77:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  78:FWLIB/src/stm32f4xx_rtc.c ****    (+) Select the RTC clock source using the RCC_RTCCLKConfig() function.
  79:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable RTC Clock using the RCC_RTCCLKCmd() function.
  80:FWLIB/src/stm32f4xx_rtc.c ****   
  81:FWLIB/src/stm32f4xx_rtc.c ****   
  82:FWLIB/src/stm32f4xx_rtc.c ****                   ##### How to use RTC Driver #####
  83:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  84:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
  85:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC domain access (see description in the section above)
  86:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  87:FWLIB/src/stm32f4xx_rtc.c ****        format using the RTC_Init() function.
  88:FWLIB/src/stm32f4xx_rtc.c ****   
  89:FWLIB/src/stm32f4xx_rtc.c ****  *** Time and Date configuration ***
  90:FWLIB/src/stm32f4xx_rtc.c ****  ===================================
  91:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
ARM GAS  /tmp/ccROQL82.s 			page 3


  92:FWLIB/src/stm32f4xx_rtc.c ****    (+) To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  93:FWLIB/src/stm32f4xx_rtc.c ****        and RTC_SetDate() functions.
  94:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate() functions.
  95:FWLIB/src/stm32f4xx_rtc.c ****    (+) Use the RTC_DayLightSavingConfig() function to add or sub one
  96:FWLIB/src/stm32f4xx_rtc.c ****        hour to the RTC Calendar.    
  97:FWLIB/src/stm32f4xx_rtc.c ****   
  98:FWLIB/src/stm32f4xx_rtc.c ****  *** Alarm configuration ***
  99:FWLIB/src/stm32f4xx_rtc.c ****  ===========================
 100:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 101:FWLIB/src/stm32f4xx_rtc.c ****    (+) To configure the RTC Alarm use the RTC_SetAlarm() function.
 102:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 103:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Alarm, use the RTC_GetAlarm() function.
 104:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 105:FWLIB/src/stm32f4xx_rtc.c ****   
 106:FWLIB/src/stm32f4xx_rtc.c ****  *** RTC Wakeup configuration ***
 107:FWLIB/src/stm32f4xx_rtc.c ****  ================================
 108:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
 109:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:FWLIB/src/stm32f4xx_rtc.c ****        function.
 111:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() function  
 112:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 113:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 114:FWLIB/src/stm32f4xx_rtc.c ****        function.
 115:FWLIB/src/stm32f4xx_rtc.c ****   
 116:FWLIB/src/stm32f4xx_rtc.c ****  *** Outputs configuration ***
 117:FWLIB/src/stm32f4xx_rtc.c ****  =============================
 118:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC has 2 different outputs:
 119:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 120:FWLIB/src/stm32f4xx_rtc.c ****        and WaKeUp signals. To output the selected RTC signal on RTC_AF1 pin, use the 
 121:FWLIB/src/stm32f4xx_rtc.c ****        RTC_OutputConfig() function.                
 122:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_CALIB: this output is 512Hz signal or 1Hz. To output the RTC Clock on 
 123:FWLIB/src/stm32f4xx_rtc.c ****        RTC_AF1 pin, use the RTC_CalibOutputCmd() function.
 124:FWLIB/src/stm32f4xx_rtc.c ****   
 125:FWLIB/src/stm32f4xx_rtc.c ****  *** Smooth digital Calibration configuration ***
 126:FWLIB/src/stm32f4xx_rtc.c ****  ================================================    
 127:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 128:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Original Digital Calibration Value and the corresponding
 129:FWLIB/src/stm32f4xx_rtc.c ****        calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 130:FWLIB/src/stm32f4xx_rtc.c ****        function.
 131:FWLIB/src/stm32f4xx_rtc.c ****   
 132:FWLIB/src/stm32f4xx_rtc.c ****  *** Coarse digital Calibration configuration ***
 133:FWLIB/src/stm32f4xx_rtc.c ****  ================================================
 134:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 135:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Coarse Calibration Value and the corresponding
 136:FWLIB/src/stm32f4xx_rtc.c ****        sign using the RTC_CoarseCalibConfig() function.
 137:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() function  
 138:FWLIB/src/stm32f4xx_rtc.c ****   
 139:FWLIB/src/stm32f4xx_rtc.c ****  *** TimeStamp configuration ***
 140:FWLIB/src/stm32f4xx_rtc.c ****  ===============================
 141:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 142:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC_AF1 trigger and enables the RTC TimeStamp using the RTC
 143:FWLIB/src/stm32f4xx_rtc.c ****       _TimeStampCmd() function.
 144:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp Time and Date register, use the RTC_GetTimeStamp()
 145:FWLIB/src/stm32f4xx_rtc.c ****        function.
 146:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp SubSecond register, use the 
 147:FWLIB/src/stm32f4xx_rtc.c ****        RTC_GetTimeStampSubSecond() function.
 148:FWLIB/src/stm32f4xx_rtc.c ****    (+) The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
ARM GAS  /tmp/ccROQL82.s 			page 4


 149:FWLIB/src/stm32f4xx_rtc.c ****        or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 150:FWLIB/src/stm32f4xx_rtc.c ****        RTC_TAFCR register. You can use the  RTC_TamperPinSelection() function to
 151:FWLIB/src/stm32f4xx_rtc.c ****        select the corresponding pin.     
 152:FWLIB/src/stm32f4xx_rtc.c ****   
 153:FWLIB/src/stm32f4xx_rtc.c ****  *** Tamper configuration ***
 154:FWLIB/src/stm32f4xx_rtc.c ****  ============================
 155:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 156:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:FWLIB/src/stm32f4xx_rtc.c ****        function. 
 159:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:FWLIB/src/stm32f4xx_rtc.c ****        filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() 
 161:FWLIB/src/stm32f4xx_rtc.c ****        function.
 162:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 163:FWLIB/src/stm32f4xx_rtc.c ****        function.
 164:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper precharge or discharge duration using 
 165:FWLIB/src/stm32f4xx_rtc.c ****        RTC_TamperPinsPrechargeDuration() function.
 166:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 167:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Time stamp on Tamper detection event using  
 168:FWLIB/src/stm32f4xx_rtc.c ****        TC_TSOnTamperDetecCmd() function.
 169:FWLIB/src/stm32f4xx_rtc.c ****    (+) The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 170:FWLIB/src/stm32f4xx_rtc.c ****        or RTC_AF2 depending on the value of the TSINSEL bit in the RTC_TAFCR 
 171:FWLIB/src/stm32f4xx_rtc.c ****        register. You can use the  RTC_TimeStampPinSelection() function to select 
 172:FWLIB/src/stm32f4xx_rtc.c ****        the corresponding pin. 
 173:FWLIB/src/stm32f4xx_rtc.c ****   
 174:FWLIB/src/stm32f4xx_rtc.c ****  *** Backup Data Registers configuration ***
 175:FWLIB/src/stm32f4xx_rtc.c ****  ===========================================
 176:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 177:FWLIB/src/stm32f4xx_rtc.c ****    (+) To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 178:FWLIB/src/stm32f4xx_rtc.c ****        function.  
 179:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 180:FWLIB/src/stm32f4xx_rtc.c ****        function.
 181:FWLIB/src/stm32f4xx_rtc.c ****    
 182:FWLIB/src/stm32f4xx_rtc.c **** 
 183:FWLIB/src/stm32f4xx_rtc.c ****                   ##### RTC and low power modes #####
 184:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 185:FWLIB/src/stm32f4xx_rtc.c ****  [..] The MCU can be woken up from a low power mode by an RTC alternate 
 186:FWLIB/src/stm32f4xx_rtc.c ****       function.
 187:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 188:FWLIB/src/stm32f4xx_rtc.c ****       RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 189:FWLIB/src/stm32f4xx_rtc.c ****       These RTC alternate functions can wake up the system from the Stop and 
 190:FWLIB/src/stm32f4xx_rtc.c ****       Standby lowpower modes.
 191:FWLIB/src/stm32f4xx_rtc.c ****  [..] The system can also wake up from low power modes without depending 
 192:FWLIB/src/stm32f4xx_rtc.c ****       on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 193:FWLIB/src/stm32f4xx_rtc.c ****       or the RTC wakeup events.
 194:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC provides a programmable time base for waking up from the 
 195:FWLIB/src/stm32f4xx_rtc.c ****       Stop or Standby mode at regular intervals.
 196:FWLIB/src/stm32f4xx_rtc.c ****       Wakeup from STOP and Standby modes is possible only when the RTC clock source
 197:FWLIB/src/stm32f4xx_rtc.c ****       is LSE or LSI.
 198:FWLIB/src/stm32f4xx_rtc.c ****   
 199:FWLIB/src/stm32f4xx_rtc.c **** 
 200:FWLIB/src/stm32f4xx_rtc.c ****           ##### Selection of RTC_AF1 alternate functions #####
 201:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 202:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC_AF1 pin (PC13) can be used for the following purposes:
 203:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_ALARM output
 204:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_CALIB output
 205:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
ARM GAS  /tmp/ccROQL82.s 			page 5


 206:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 207:FWLIB/src/stm32f4xx_rtc.c ****  
 208:FWLIB/src/stm32f4xx_rtc.c ****  [..]   
 209:FWLIB/src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 210:FWLIB/src/stm32f4xx_rtc.c ****    |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |
 211:FWLIB/src/stm32f4xx_rtc.c ****    |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |
 212:FWLIB/src/stm32f4xx_rtc.c ****    |  and function   |          |          |           |              | selection  |  selection   |
 213:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 214:FWLIB/src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 215:FWLIB/src/stm32f4xx_rtc.c ****    |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 216:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 217:FWLIB/src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 218:FWLIB/src/stm32f4xx_rtc.c ****    |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 219:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 220:FWLIB/src/stm32f4xx_rtc.c ****    | Calibration out |          |          |           |              |    Don't   |     Don't    |
 221:FWLIB/src/stm32f4xx_rtc.c ****    |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     |
 222:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 223:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |          |          |           |              |            |     Don't    |
 224:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |     0    |    0     |     1     |      0       |      0     |     care     |
 225:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 226:FWLIB/src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |          |          |           |              |            |              |
 227:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       |
 228:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |          |          |           |              |            |              |
 229:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 230:FWLIB/src/stm32f4xx_rtc.c ****    | TIMESTAMP input |          |          |           |              |    Don't   |              |
 231:FWLIB/src/stm32f4xx_rtc.c ****    |    floating     |     0    |    0     |     0     |      1       |    care    |      0       |
 232:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 233:FWLIB/src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  |
 234:FWLIB/src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 235:FWLIB/src/stm32f4xx_rtc.c **** 
 236:FWLIB/src/stm32f4xx_rtc.c ****             
 237:FWLIB/src/stm32f4xx_rtc.c ****         #####  Selection of RTC_AF2 alternate functions #####
 238:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 239:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC_AF2 pin (PI8) can be used for the following purposes:
 240:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 241:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 242:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 243:FWLIB/src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+
 244:FWLIB/src/stm32f4xx_rtc.c ****    |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 245:FWLIB/src/stm32f4xx_rtc.c ****    |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 246:FWLIB/src/stm32f4xx_rtc.c ****    |  and function   |           |              | selection  |  selection   |Configuration |
 247:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 248:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |           |              |            |     Don't    |              |
 249:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 250:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 251:FWLIB/src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |           |              |            |              |              |
 252:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 253:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |           |              |            |              |              |
 254:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 255:FWLIB/src/stm32f4xx_rtc.c ****    | TIMESTAMP input |           |              |    Don't   |              |              |
 256:FWLIB/src/stm32f4xx_rtc.c ****    |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 257:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 258:FWLIB/src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 259:FWLIB/src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+   
 260:FWLIB/src/stm32f4xx_rtc.c ****  
 261:FWLIB/src/stm32f4xx_rtc.c ****      
 262:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
ARM GAS  /tmp/ccROQL82.s 			page 6


 263:FWLIB/src/stm32f4xx_rtc.c ****   
 264:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
 265:FWLIB/src/stm32f4xx_rtc.c ****   * @attention
 266:FWLIB/src/stm32f4xx_rtc.c ****   *
 267:FWLIB/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 268:FWLIB/src/stm32f4xx_rtc.c ****   *
 269:FWLIB/src/stm32f4xx_rtc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 270:FWLIB/src/stm32f4xx_rtc.c ****   * You may not use this file except in compliance with the License.
 271:FWLIB/src/stm32f4xx_rtc.c ****   * You may obtain a copy of the License at:
 272:FWLIB/src/stm32f4xx_rtc.c ****   *
 273:FWLIB/src/stm32f4xx_rtc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 274:FWLIB/src/stm32f4xx_rtc.c ****   *
 275:FWLIB/src/stm32f4xx_rtc.c ****   * Unless required by applicable law or agreed to in writing, software 
 276:FWLIB/src/stm32f4xx_rtc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 277:FWLIB/src/stm32f4xx_rtc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 278:FWLIB/src/stm32f4xx_rtc.c ****   * See the License for the specific language governing permissions and
 279:FWLIB/src/stm32f4xx_rtc.c ****   * limitations under the License.
 280:FWLIB/src/stm32f4xx_rtc.c ****   *
 281:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
 282:FWLIB/src/stm32f4xx_rtc.c ****   */ 
 283:FWLIB/src/stm32f4xx_rtc.c **** 
 284:FWLIB/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 285:FWLIB/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 286:FWLIB/src/stm32f4xx_rtc.c **** 
 287:FWLIB/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 288:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 289:FWLIB/src/stm32f4xx_rtc.c ****   */
 290:FWLIB/src/stm32f4xx_rtc.c **** 
 291:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 292:FWLIB/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 293:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 294:FWLIB/src/stm32f4xx_rtc.c ****   */
 295:FWLIB/src/stm32f4xx_rtc.c **** 
 296:FWLIB/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 297:FWLIB/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 298:FWLIB/src/stm32f4xx_rtc.c **** 
 299:FWLIB/src/stm32f4xx_rtc.c **** /* Masks Definition */
 300:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 301:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 302:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 303:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 304:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 305:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 306:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 307:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 308:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RECALPF | RTC_FLAG_SHPF))
 309:FWLIB/src/stm32f4xx_rtc.c **** 
 310:FWLIB/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 311:FWLIB/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 312:FWLIB/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 313:FWLIB/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 314:FWLIB/src/stm32f4xx_rtc.c **** 
 315:FWLIB/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 316:FWLIB/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 317:FWLIB/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 318:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 319:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
ARM GAS  /tmp/ccROQL82.s 			page 7


 320:FWLIB/src/stm32f4xx_rtc.c **** 
 321:FWLIB/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 322:FWLIB/src/stm32f4xx_rtc.c **** 
 323:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 324:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 325:FWLIB/src/stm32f4xx_rtc.c ****   */ 
 326:FWLIB/src/stm32f4xx_rtc.c **** 
 327:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 328:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 329:FWLIB/src/stm32f4xx_rtc.c ****  *
 330:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
 331:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 332:FWLIB/src/stm32f4xx_rtc.c ****              ##### Initialization and Configuration functions #####
 333:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 334:FWLIB/src/stm32f4xx_rtc.c ****  
 335:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to initialize and configure the RTC
 336:FWLIB/src/stm32f4xx_rtc.c ****       Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 337:FWLIB/src/stm32f4xx_rtc.c ****       Write protection, enter and exit the RTC initialization mode, RTC registers
 338:FWLIB/src/stm32f4xx_rtc.c ****       synchronization check and reference clock detection enable.
 339:FWLIB/src/stm32f4xx_rtc.c ****   
 340:FWLIB/src/stm32f4xx_rtc.c ****    (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 341:FWLIB/src/stm32f4xx_rtc.c ****        split into 2 programmable prescalers to minimize power consumption.
 342:FWLIB/src/stm32f4xx_rtc.c ****        (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 343:FWLIB/src/stm32f4xx_rtc.c ****        (++) When both prescalers are used, it is recommended to configure the 
 344:FWLIB/src/stm32f4xx_rtc.c ****             asynchronous prescaler to a high value to minimize consumption.
 345:FWLIB/src/stm32f4xx_rtc.c **** 
 346:FWLIB/src/stm32f4xx_rtc.c ****    (#) All RTC registers are Write protected. Writing to the RTC registers
 347:FWLIB/src/stm32f4xx_rtc.c ****        is enabled by writing a key into the Write Protection register, RTC_WPR.
 348:FWLIB/src/stm32f4xx_rtc.c **** 
 349:FWLIB/src/stm32f4xx_rtc.c ****    (#) To Configure the RTC Calendar, user application should enter initialization
 350:FWLIB/src/stm32f4xx_rtc.c ****        mode. In this mode, the calendar counter is stopped and its value can be 
 351:FWLIB/src/stm32f4xx_rtc.c ****        updated. When the initialization sequence is complete, the calendar restarts 
 352:FWLIB/src/stm32f4xx_rtc.c ****        counting after 4 RTCCLK cycles.
 353:FWLIB/src/stm32f4xx_rtc.c **** 
 354:FWLIB/src/stm32f4xx_rtc.c ****    (#) To read the calendar through the shadow registers after Calendar initialization,
 355:FWLIB/src/stm32f4xx_rtc.c ****        calendar update or after wakeup from low power modes the software must first 
 356:FWLIB/src/stm32f4xx_rtc.c ****        clear the RSF flag. The software must then wait until it is set again before 
 357:FWLIB/src/stm32f4xx_rtc.c ****        reading the calendar, which means that the calendar registers have been 
 358:FWLIB/src/stm32f4xx_rtc.c ****        correctly copied into the RTC_TR and RTC_DR shadow registers.
 359:FWLIB/src/stm32f4xx_rtc.c ****        The RTC_WaitForSynchro() function implements the above software sequence 
 360:FWLIB/src/stm32f4xx_rtc.c ****        (RSF clear and RSF check).
 361:FWLIB/src/stm32f4xx_rtc.c **** 
 362:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 363:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 364:FWLIB/src/stm32f4xx_rtc.c ****   */
 365:FWLIB/src/stm32f4xx_rtc.c **** 
 366:FWLIB/src/stm32f4xx_rtc.c **** /**
 367:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 368:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 369:FWLIB/src/stm32f4xx_rtc.c ****   *         registers.       
 370:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 371:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 372:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 373:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 374:FWLIB/src/stm32f4xx_rtc.c ****   */
 375:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 376:FWLIB/src/stm32f4xx_rtc.c **** {
ARM GAS  /tmp/ccROQL82.s 			page 8


 377:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 378:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 379:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 380:FWLIB/src/stm32f4xx_rtc.c ****   
 381:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 382:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 383:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 384:FWLIB/src/stm32f4xx_rtc.c **** 
 385:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 386:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 387:FWLIB/src/stm32f4xx_rtc.c ****   {
 388:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 389:FWLIB/src/stm32f4xx_rtc.c ****   }  
 390:FWLIB/src/stm32f4xx_rtc.c ****   else
 391:FWLIB/src/stm32f4xx_rtc.c ****   {
 392:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 393:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 394:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 395:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 396:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 397:FWLIB/src/stm32f4xx_rtc.c ****   
 398:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 399:FWLIB/src/stm32f4xx_rtc.c ****     do
 400:FWLIB/src/stm32f4xx_rtc.c ****     {
 401:FWLIB/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 402:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 403:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 404:FWLIB/src/stm32f4xx_rtc.c ****     
 405:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 406:FWLIB/src/stm32f4xx_rtc.c ****     {
 407:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 408:FWLIB/src/stm32f4xx_rtc.c ****     }
 409:FWLIB/src/stm32f4xx_rtc.c ****     else
 410:FWLIB/src/stm32f4xx_rtc.c ****     {
 411:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 412:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 413:FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 414:FWLIB/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 415:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 416:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 417:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 418:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 419:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 420:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 421:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 422:FWLIB/src/stm32f4xx_rtc.c ****       
 423:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 424:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 425:FWLIB/src/stm32f4xx_rtc.c ****       
 426:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 427:FWLIB/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 428:FWLIB/src/stm32f4xx_rtc.c ****   
 429:FWLIB/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 430:FWLIB/src/stm32f4xx_rtc.c ****       {
 431:FWLIB/src/stm32f4xx_rtc.c ****         status = ERROR;
 432:FWLIB/src/stm32f4xx_rtc.c ****       }
 433:FWLIB/src/stm32f4xx_rtc.c ****       else
ARM GAS  /tmp/ccROQL82.s 			page 9


 434:FWLIB/src/stm32f4xx_rtc.c ****       {
 435:FWLIB/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 436:FWLIB/src/stm32f4xx_rtc.c ****       }
 437:FWLIB/src/stm32f4xx_rtc.c ****     }
 438:FWLIB/src/stm32f4xx_rtc.c ****   }
 439:FWLIB/src/stm32f4xx_rtc.c ****   
 440:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 441:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 442:FWLIB/src/stm32f4xx_rtc.c ****   
 443:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 444:FWLIB/src/stm32f4xx_rtc.c **** }
 445:FWLIB/src/stm32f4xx_rtc.c **** 
 446:FWLIB/src/stm32f4xx_rtc.c **** /**
 447:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 448:FWLIB/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 449:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 450:FWLIB/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 451:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 452:FWLIB/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 453:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 454:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 455:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 456:FWLIB/src/stm32f4xx_rtc.c ****   */
 457:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 458:FWLIB/src/stm32f4xx_rtc.c **** {
 459:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 460:FWLIB/src/stm32f4xx_rtc.c ****   
 461:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 462:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 463:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 464:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 465:FWLIB/src/stm32f4xx_rtc.c **** 
 466:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 467:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 468:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 469:FWLIB/src/stm32f4xx_rtc.c **** 
 470:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 471:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 472:FWLIB/src/stm32f4xx_rtc.c ****   {
 473:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 474:FWLIB/src/stm32f4xx_rtc.c ****   } 
 475:FWLIB/src/stm32f4xx_rtc.c ****   else
 476:FWLIB/src/stm32f4xx_rtc.c ****   {
 477:FWLIB/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 478:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 479:FWLIB/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 480:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 481:FWLIB/src/stm32f4xx_rtc.c ****   
 482:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 483:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 484:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 485:FWLIB/src/stm32f4xx_rtc.c **** 
 486:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 487:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 488:FWLIB/src/stm32f4xx_rtc.c **** 
 489:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 490:FWLIB/src/stm32f4xx_rtc.c ****   }
ARM GAS  /tmp/ccROQL82.s 			page 10


 491:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 492:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 493:FWLIB/src/stm32f4xx_rtc.c ****   
 494:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 495:FWLIB/src/stm32f4xx_rtc.c **** }
 496:FWLIB/src/stm32f4xx_rtc.c **** 
 497:FWLIB/src/stm32f4xx_rtc.c **** /**
 498:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 499:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 500:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
 501:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 502:FWLIB/src/stm32f4xx_rtc.c ****   */
 503:FWLIB/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 504:FWLIB/src/stm32f4xx_rtc.c **** {
 505:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 506:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 507:FWLIB/src/stm32f4xx_rtc.c ****     
 508:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 509:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 510:FWLIB/src/stm32f4xx_rtc.c **** 
 511:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 512:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 513:FWLIB/src/stm32f4xx_rtc.c **** }
 514:FWLIB/src/stm32f4xx_rtc.c **** 
 515:FWLIB/src/stm32f4xx_rtc.c **** /**
 516:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 517:FWLIB/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 518:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 519:FWLIB/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 520:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 521:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 522:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 523:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 524:FWLIB/src/stm32f4xx_rtc.c ****   */
 525:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 526:FWLIB/src/stm32f4xx_rtc.c **** {
 527:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 528:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 529:FWLIB/src/stm32f4xx_rtc.c ****     
 530:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 531:FWLIB/src/stm32f4xx_rtc.c ****   {
 532:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 533:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 534:FWLIB/src/stm32f4xx_rtc.c ****   }
 535:FWLIB/src/stm32f4xx_rtc.c ****   else
 536:FWLIB/src/stm32f4xx_rtc.c ****   {
 537:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 538:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 539:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 540:FWLIB/src/stm32f4xx_rtc.c ****   }
 541:FWLIB/src/stm32f4xx_rtc.c **** }
 542:FWLIB/src/stm32f4xx_rtc.c **** 
 543:FWLIB/src/stm32f4xx_rtc.c **** /**
 544:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 545:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 546:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 547:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
ARM GAS  /tmp/ccROQL82.s 			page 11


 548:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 549:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 550:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 551:FWLIB/src/stm32f4xx_rtc.c ****   */
 552:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 553:FWLIB/src/stm32f4xx_rtc.c **** {
 554:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 555:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 556:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 557:FWLIB/src/stm32f4xx_rtc.c ****      
 558:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 559:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 560:FWLIB/src/stm32f4xx_rtc.c ****   {
 561:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 562:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 563:FWLIB/src/stm32f4xx_rtc.c ****     
 564:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 565:FWLIB/src/stm32f4xx_rtc.c ****     do
 566:FWLIB/src/stm32f4xx_rtc.c ****     {
 567:FWLIB/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 568:FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 569:FWLIB/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 570:FWLIB/src/stm32f4xx_rtc.c ****     
 571:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 572:FWLIB/src/stm32f4xx_rtc.c ****     {
 573:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 574:FWLIB/src/stm32f4xx_rtc.c ****     }
 575:FWLIB/src/stm32f4xx_rtc.c ****     else
 576:FWLIB/src/stm32f4xx_rtc.c ****     {
 577:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 578:FWLIB/src/stm32f4xx_rtc.c ****     }        
 579:FWLIB/src/stm32f4xx_rtc.c ****   }
 580:FWLIB/src/stm32f4xx_rtc.c ****   else
 581:FWLIB/src/stm32f4xx_rtc.c ****   {
 582:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 583:FWLIB/src/stm32f4xx_rtc.c ****   } 
 584:FWLIB/src/stm32f4xx_rtc.c ****     
 585:FWLIB/src/stm32f4xx_rtc.c ****   return (status);  
 586:FWLIB/src/stm32f4xx_rtc.c **** }
 587:FWLIB/src/stm32f4xx_rtc.c **** 
 588:FWLIB/src/stm32f4xx_rtc.c **** /**
 589:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 590:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 591:FWLIB/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 592:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 593:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 594:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 595:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 596:FWLIB/src/stm32f4xx_rtc.c ****   */
 597:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 598:FWLIB/src/stm32f4xx_rtc.c **** { 
 599:FWLIB/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 600:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 601:FWLIB/src/stm32f4xx_rtc.c **** }
 602:FWLIB/src/stm32f4xx_rtc.c **** 
 603:FWLIB/src/stm32f4xx_rtc.c **** /**
 604:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
ARM GAS  /tmp/ccROQL82.s 			page 12


 605:FWLIB/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 606:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 607:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 608:FWLIB/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 609:FWLIB/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 610:FWLIB/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 611:FWLIB/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 612:FWLIB/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 613:FWLIB/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 614:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 615:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 616:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 617:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 618:FWLIB/src/stm32f4xx_rtc.c ****   */
 619:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 620:FWLIB/src/stm32f4xx_rtc.c **** {
 621:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 622:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 623:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 624:FWLIB/src/stm32f4xx_rtc.c **** 
 625:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 626:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 627:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 628:FWLIB/src/stm32f4xx_rtc.c ****     
 629:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 630:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 631:FWLIB/src/stm32f4xx_rtc.c ****     
 632:FWLIB/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 633:FWLIB/src/stm32f4xx_rtc.c ****   do
 634:FWLIB/src/stm32f4xx_rtc.c ****   {
 635:FWLIB/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 636:FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 637:FWLIB/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 638:FWLIB/src/stm32f4xx_rtc.c ****     
 639:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 640:FWLIB/src/stm32f4xx_rtc.c ****   {
 641:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 642:FWLIB/src/stm32f4xx_rtc.c ****   }
 643:FWLIB/src/stm32f4xx_rtc.c ****   else
 644:FWLIB/src/stm32f4xx_rtc.c ****   {
 645:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 646:FWLIB/src/stm32f4xx_rtc.c ****   }        
 647:FWLIB/src/stm32f4xx_rtc.c **** 
 648:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 649:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 650:FWLIB/src/stm32f4xx_rtc.c ****     
 651:FWLIB/src/stm32f4xx_rtc.c ****   return (status); 
 652:FWLIB/src/stm32f4xx_rtc.c **** }
 653:FWLIB/src/stm32f4xx_rtc.c **** 
 654:FWLIB/src/stm32f4xx_rtc.c **** /**
 655:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 656:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 657:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 658:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 659:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 660:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 661:FWLIB/src/stm32f4xx_rtc.c ****   */
ARM GAS  /tmp/ccROQL82.s 			page 13


 662:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 663:FWLIB/src/stm32f4xx_rtc.c **** { 
 664:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 665:FWLIB/src/stm32f4xx_rtc.c ****   
 666:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 667:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 668:FWLIB/src/stm32f4xx_rtc.c ****   
 669:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 670:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 671:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 672:FWLIB/src/stm32f4xx_rtc.c ****     
 673:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 674:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 675:FWLIB/src/stm32f4xx_rtc.c ****   {
 676:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 677:FWLIB/src/stm32f4xx_rtc.c ****   } 
 678:FWLIB/src/stm32f4xx_rtc.c ****   else
 679:FWLIB/src/stm32f4xx_rtc.c ****   {  
 680:FWLIB/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 681:FWLIB/src/stm32f4xx_rtc.c ****     {
 682:FWLIB/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 683:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 684:FWLIB/src/stm32f4xx_rtc.c ****     }
 685:FWLIB/src/stm32f4xx_rtc.c ****     else
 686:FWLIB/src/stm32f4xx_rtc.c ****     {
 687:FWLIB/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 688:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 689:FWLIB/src/stm32f4xx_rtc.c ****     }
 690:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 691:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 692:FWLIB/src/stm32f4xx_rtc.c ****     
 693:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 694:FWLIB/src/stm32f4xx_rtc.c ****   }
 695:FWLIB/src/stm32f4xx_rtc.c ****   
 696:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 697:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 698:FWLIB/src/stm32f4xx_rtc.c ****   
 699:FWLIB/src/stm32f4xx_rtc.c ****   return status; 
 700:FWLIB/src/stm32f4xx_rtc.c **** }
 701:FWLIB/src/stm32f4xx_rtc.c **** 
 702:FWLIB/src/stm32f4xx_rtc.c **** /**
 703:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 704:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 705:FWLIB/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 706:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 707:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 708:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 709:FWLIB/src/stm32f4xx_rtc.c **** */
 710:FWLIB/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 711:FWLIB/src/stm32f4xx_rtc.c **** {
 712:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 713:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 714:FWLIB/src/stm32f4xx_rtc.c **** 
 715:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 717:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 718:FWLIB/src/stm32f4xx_rtc.c ****   
ARM GAS  /tmp/ccROQL82.s 			page 14


 719:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 720:FWLIB/src/stm32f4xx_rtc.c ****   {
 721:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 722:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 723:FWLIB/src/stm32f4xx_rtc.c ****   }
 724:FWLIB/src/stm32f4xx_rtc.c ****   else
 725:FWLIB/src/stm32f4xx_rtc.c ****   {
 726:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 727:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 728:FWLIB/src/stm32f4xx_rtc.c ****   }
 729:FWLIB/src/stm32f4xx_rtc.c **** 
 730:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 731:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 732:FWLIB/src/stm32f4xx_rtc.c **** }
 733:FWLIB/src/stm32f4xx_rtc.c **** 
 734:FWLIB/src/stm32f4xx_rtc.c **** /**
 735:FWLIB/src/stm32f4xx_rtc.c ****   * @}
 736:FWLIB/src/stm32f4xx_rtc.c ****   */
 737:FWLIB/src/stm32f4xx_rtc.c **** 
 738:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 739:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 740:FWLIB/src/stm32f4xx_rtc.c ****  *
 741:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
 742:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 743:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Time and Date configuration functions #####
 744:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
 745:FWLIB/src/stm32f4xx_rtc.c ****  
 746:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Calendar
 747:FWLIB/src/stm32f4xx_rtc.c ****       (Time and Date).
 748:FWLIB/src/stm32f4xx_rtc.c **** 
 749:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 750:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 751:FWLIB/src/stm32f4xx_rtc.c ****   */
 752:FWLIB/src/stm32f4xx_rtc.c **** 
 753:FWLIB/src/stm32f4xx_rtc.c **** /**
 754:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 755:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 756:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 757:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 758:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 759:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 760:FWLIB/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 761:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 762:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 763:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 764:FWLIB/src/stm32f4xx_rtc.c ****   */
 765:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 766:FWLIB/src/stm32f4xx_rtc.c **** {
 767:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 768:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 769:FWLIB/src/stm32f4xx_rtc.c ****     
 770:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 771:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 772:FWLIB/src/stm32f4xx_rtc.c ****   
 773:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 774:FWLIB/src/stm32f4xx_rtc.c ****   {
 775:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
ARM GAS  /tmp/ccROQL82.s 			page 15


 776:FWLIB/src/stm32f4xx_rtc.c ****     {
 777:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 778:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 779:FWLIB/src/stm32f4xx_rtc.c ****     } 
 780:FWLIB/src/stm32f4xx_rtc.c ****     else
 781:FWLIB/src/stm32f4xx_rtc.c ****     {
 782:FWLIB/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 783:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 784:FWLIB/src/stm32f4xx_rtc.c ****     }
 785:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 786:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 787:FWLIB/src/stm32f4xx_rtc.c ****   }
 788:FWLIB/src/stm32f4xx_rtc.c ****   else
 789:FWLIB/src/stm32f4xx_rtc.c ****   {
 790:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 791:FWLIB/src/stm32f4xx_rtc.c ****     {
 792:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 793:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 794:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 795:FWLIB/src/stm32f4xx_rtc.c ****     } 
 796:FWLIB/src/stm32f4xx_rtc.c ****     else
 797:FWLIB/src/stm32f4xx_rtc.c ****     {
 798:FWLIB/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 799:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 800:FWLIB/src/stm32f4xx_rtc.c ****     }
 801:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 802:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 803:FWLIB/src/stm32f4xx_rtc.c ****   }
 804:FWLIB/src/stm32f4xx_rtc.c ****   
 805:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 806:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 807:FWLIB/src/stm32f4xx_rtc.c ****   {
 808:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 810:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 811:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 812:FWLIB/src/stm32f4xx_rtc.c ****   }  
 813:FWLIB/src/stm32f4xx_rtc.c ****   else
 814:FWLIB/src/stm32f4xx_rtc.c ****   {
 815:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 817:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 818:FWLIB/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 819:FWLIB/src/stm32f4xx_rtc.c ****   }  
 820:FWLIB/src/stm32f4xx_rtc.c **** 
 821:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 822:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 823:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 824:FWLIB/src/stm32f4xx_rtc.c **** 
 825:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 826:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 827:FWLIB/src/stm32f4xx_rtc.c ****   {
 828:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 829:FWLIB/src/stm32f4xx_rtc.c ****   } 
 830:FWLIB/src/stm32f4xx_rtc.c ****   else
 831:FWLIB/src/stm32f4xx_rtc.c ****   {
 832:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
ARM GAS  /tmp/ccROQL82.s 			page 16


 833:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 834:FWLIB/src/stm32f4xx_rtc.c **** 
 835:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 836:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 837:FWLIB/src/stm32f4xx_rtc.c **** 
 838:FWLIB/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 839:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 840:FWLIB/src/stm32f4xx_rtc.c ****     {
 841:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 842:FWLIB/src/stm32f4xx_rtc.c ****     {
 843:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 844:FWLIB/src/stm32f4xx_rtc.c ****     }
 845:FWLIB/src/stm32f4xx_rtc.c ****     else
 846:FWLIB/src/stm32f4xx_rtc.c ****     {
 847:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 848:FWLIB/src/stm32f4xx_rtc.c ****     }
 849:FWLIB/src/stm32f4xx_rtc.c ****   }
 850:FWLIB/src/stm32f4xx_rtc.c ****     else
 851:FWLIB/src/stm32f4xx_rtc.c ****     {
 852:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 853:FWLIB/src/stm32f4xx_rtc.c ****     }
 854:FWLIB/src/stm32f4xx_rtc.c ****   }
 855:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 856:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 857:FWLIB/src/stm32f4xx_rtc.c ****     
 858:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 859:FWLIB/src/stm32f4xx_rtc.c **** }
 860:FWLIB/src/stm32f4xx_rtc.c **** 
 861:FWLIB/src/stm32f4xx_rtc.c **** /**
 862:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 863:FWLIB/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 864:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 865:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
 866:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 867:FWLIB/src/stm32f4xx_rtc.c ****   */
 868:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 869:FWLIB/src/stm32f4xx_rtc.c **** {
 870:FWLIB/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 871:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 872:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 873:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 874:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 875:FWLIB/src/stm32f4xx_rtc.c **** }
 876:FWLIB/src/stm32f4xx_rtc.c **** 
 877:FWLIB/src/stm32f4xx_rtc.c **** /**
 878:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 879:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 880:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 881:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 882:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 883:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 884:FWLIB/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 885:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 886:FWLIB/src/stm32f4xx_rtc.c ****   */
 887:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 888:FWLIB/src/stm32f4xx_rtc.c **** {
 889:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
ARM GAS  /tmp/ccROQL82.s 			page 17


 890:FWLIB/src/stm32f4xx_rtc.c **** 
 891:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 892:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 893:FWLIB/src/stm32f4xx_rtc.c **** 
 894:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 895:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 896:FWLIB/src/stm32f4xx_rtc.c ****   
 897:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 898:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 899:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 900:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 901:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 902:FWLIB/src/stm32f4xx_rtc.c **** 
 903:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 904:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 905:FWLIB/src/stm32f4xx_rtc.c ****   {
 906:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 907:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 908:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 909:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 910:FWLIB/src/stm32f4xx_rtc.c ****   }
 911:FWLIB/src/stm32f4xx_rtc.c **** }
 912:FWLIB/src/stm32f4xx_rtc.c **** 
 913:FWLIB/src/stm32f4xx_rtc.c **** /**
 914:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Sub seconds value.
 915:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 916:FWLIB/src/stm32f4xx_rtc.c ****   *         SSR register.
 917:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 918:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Sub seconds value.
 919:FWLIB/src/stm32f4xx_rtc.c ****   */
 920:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 921:FWLIB/src/stm32f4xx_rtc.c **** {
 922:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 923:FWLIB/src/stm32f4xx_rtc.c ****   
 924:FWLIB/src/stm32f4xx_rtc.c ****   /* Get sub seconds values from the correspondent registers*/
 925:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 926:FWLIB/src/stm32f4xx_rtc.c ****   
 927:FWLIB/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 928:FWLIB/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 929:FWLIB/src/stm32f4xx_rtc.c ****   
 930:FWLIB/src/stm32f4xx_rtc.c ****   return (tmpreg);
 931:FWLIB/src/stm32f4xx_rtc.c **** }
 932:FWLIB/src/stm32f4xx_rtc.c **** 
 933:FWLIB/src/stm32f4xx_rtc.c **** /**
 934:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 935:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 936:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 937:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 938:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 939:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 940:FWLIB/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 941:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 942:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 943:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 944:FWLIB/src/stm32f4xx_rtc.c ****   */
 945:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 946:FWLIB/src/stm32f4xx_rtc.c **** {
ARM GAS  /tmp/ccROQL82.s 			page 18


 947:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 948:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 949:FWLIB/src/stm32f4xx_rtc.c ****   
 950:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 951:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 952:FWLIB/src/stm32f4xx_rtc.c **** 
 953:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 954:FWLIB/src/stm32f4xx_rtc.c ****   {
 955:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 956:FWLIB/src/stm32f4xx_rtc.c ****   }  
 957:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 958:FWLIB/src/stm32f4xx_rtc.c ****   {
 959:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 960:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 961:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 962:FWLIB/src/stm32f4xx_rtc.c ****   }
 963:FWLIB/src/stm32f4xx_rtc.c ****   else
 964:FWLIB/src/stm32f4xx_rtc.c ****   {
 965:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 966:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 967:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 968:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 969:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 970:FWLIB/src/stm32f4xx_rtc.c ****   }
 971:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 972:FWLIB/src/stm32f4xx_rtc.c **** 
 973:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 974:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 975:FWLIB/src/stm32f4xx_rtc.c ****   {
 976:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 977:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 978:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 979:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 980:FWLIB/src/stm32f4xx_rtc.c ****   }  
 981:FWLIB/src/stm32f4xx_rtc.c ****   else
 982:FWLIB/src/stm32f4xx_rtc.c ****   {
 983:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 985:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 986:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 987:FWLIB/src/stm32f4xx_rtc.c ****   }
 988:FWLIB/src/stm32f4xx_rtc.c **** 
 989:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 990:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 991:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 992:FWLIB/src/stm32f4xx_rtc.c **** 
 993:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 994:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 995:FWLIB/src/stm32f4xx_rtc.c ****   {
 996:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 997:FWLIB/src/stm32f4xx_rtc.c ****   } 
 998:FWLIB/src/stm32f4xx_rtc.c ****   else
 999:FWLIB/src/stm32f4xx_rtc.c ****   {
1000:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
1001:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
1002:FWLIB/src/stm32f4xx_rtc.c **** 
1003:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
ARM GAS  /tmp/ccROQL82.s 			page 19


1004:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
1005:FWLIB/src/stm32f4xx_rtc.c **** 
1006:FWLIB/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1007:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
1008:FWLIB/src/stm32f4xx_rtc.c ****     {
1009:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
1010:FWLIB/src/stm32f4xx_rtc.c ****     {
1011:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1012:FWLIB/src/stm32f4xx_rtc.c ****     }
1013:FWLIB/src/stm32f4xx_rtc.c ****     else
1014:FWLIB/src/stm32f4xx_rtc.c ****     {
1015:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1016:FWLIB/src/stm32f4xx_rtc.c ****     }
1017:FWLIB/src/stm32f4xx_rtc.c ****   }
1018:FWLIB/src/stm32f4xx_rtc.c ****     else
1019:FWLIB/src/stm32f4xx_rtc.c ****     {
1020:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1021:FWLIB/src/stm32f4xx_rtc.c ****     }
1022:FWLIB/src/stm32f4xx_rtc.c ****   }
1023:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1024:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1025:FWLIB/src/stm32f4xx_rtc.c ****   
1026:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1027:FWLIB/src/stm32f4xx_rtc.c **** }
1028:FWLIB/src/stm32f4xx_rtc.c **** 
1029:FWLIB/src/stm32f4xx_rtc.c **** /**
1030:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1031:FWLIB/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1032:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1033:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
1034:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1035:FWLIB/src/stm32f4xx_rtc.c ****   */
1036:FWLIB/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1037:FWLIB/src/stm32f4xx_rtc.c **** {
1038:FWLIB/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
1040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
1041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
1042:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
1043:FWLIB/src/stm32f4xx_rtc.c **** }
1044:FWLIB/src/stm32f4xx_rtc.c **** 
1045:FWLIB/src/stm32f4xx_rtc.c **** /**
1046:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1047:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1048:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1049:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1050:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1051:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1052:FWLIB/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1053:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1054:FWLIB/src/stm32f4xx_rtc.c ****   */
1055:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1056:FWLIB/src/stm32f4xx_rtc.c **** {
1057:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1058:FWLIB/src/stm32f4xx_rtc.c **** 
1059:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1060:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
ARM GAS  /tmp/ccROQL82.s 			page 20


1061:FWLIB/src/stm32f4xx_rtc.c ****   
1062:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1063:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
1064:FWLIB/src/stm32f4xx_rtc.c **** 
1065:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1066:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1067:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1068:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1069:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
1070:FWLIB/src/stm32f4xx_rtc.c **** 
1071:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1072:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1073:FWLIB/src/stm32f4xx_rtc.c ****   {
1074:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1075:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1076:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1077:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1078:FWLIB/src/stm32f4xx_rtc.c ****   }
1079:FWLIB/src/stm32f4xx_rtc.c **** }
1080:FWLIB/src/stm32f4xx_rtc.c **** 
1081:FWLIB/src/stm32f4xx_rtc.c **** /**
1082:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1083:FWLIB/src/stm32f4xx_rtc.c ****   */
1084:FWLIB/src/stm32f4xx_rtc.c **** 
1085:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1086:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1087:FWLIB/src/stm32f4xx_rtc.c ****  *
1088:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1089:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1090:FWLIB/src/stm32f4xx_rtc.c ****          ##### Alarms A and B configuration functions #####
1091:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1092:FWLIB/src/stm32f4xx_rtc.c ****  
1093:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Alarms.
1094:FWLIB/src/stm32f4xx_rtc.c **** 
1095:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1096:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1097:FWLIB/src/stm32f4xx_rtc.c ****   */
1098:FWLIB/src/stm32f4xx_rtc.c **** 
1099:FWLIB/src/stm32f4xx_rtc.c **** /**
1100:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1101:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1102:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1103:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1104:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1105:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1106:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1107:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1108:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1109:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1110:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1111:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1112:FWLIB/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1113:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1114:FWLIB/src/stm32f4xx_rtc.c ****   */
1115:FWLIB/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1116:FWLIB/src/stm32f4xx_rtc.c **** {
1117:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
ARM GAS  /tmp/ccROQL82.s 			page 21


1118:FWLIB/src/stm32f4xx_rtc.c ****   
1119:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1120:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1121:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1122:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1123:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1124:FWLIB/src/stm32f4xx_rtc.c **** 
1125:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1126:FWLIB/src/stm32f4xx_rtc.c ****   {
1127:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1128:FWLIB/src/stm32f4xx_rtc.c ****     {
1129:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1130:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1131:FWLIB/src/stm32f4xx_rtc.c ****     } 
1132:FWLIB/src/stm32f4xx_rtc.c ****     else
1133:FWLIB/src/stm32f4xx_rtc.c ****     {
1134:FWLIB/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1135:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1136:FWLIB/src/stm32f4xx_rtc.c ****     }
1137:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1138:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1139:FWLIB/src/stm32f4xx_rtc.c ****     
1140:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1141:FWLIB/src/stm32f4xx_rtc.c ****     {
1142:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1143:FWLIB/src/stm32f4xx_rtc.c ****     }
1144:FWLIB/src/stm32f4xx_rtc.c ****     else
1145:FWLIB/src/stm32f4xx_rtc.c ****     {
1146:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1147:FWLIB/src/stm32f4xx_rtc.c ****     }
1148:FWLIB/src/stm32f4xx_rtc.c ****   }
1149:FWLIB/src/stm32f4xx_rtc.c ****   else
1150:FWLIB/src/stm32f4xx_rtc.c ****   {
1151:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1152:FWLIB/src/stm32f4xx_rtc.c ****     {
1153:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1154:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1155:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1156:FWLIB/src/stm32f4xx_rtc.c ****     } 
1157:FWLIB/src/stm32f4xx_rtc.c ****     else
1158:FWLIB/src/stm32f4xx_rtc.c ****     {
1159:FWLIB/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1160:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1161:FWLIB/src/stm32f4xx_rtc.c ****     }
1162:FWLIB/src/stm32f4xx_rtc.c ****     
1163:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1164:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1165:FWLIB/src/stm32f4xx_rtc.c ****     
1166:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1167:FWLIB/src/stm32f4xx_rtc.c ****     {
1168:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1169:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1170:FWLIB/src/stm32f4xx_rtc.c ****     }
1171:FWLIB/src/stm32f4xx_rtc.c ****     else
1172:FWLIB/src/stm32f4xx_rtc.c ****     {
1173:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1174:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
ARM GAS  /tmp/ccROQL82.s 			page 22


1175:FWLIB/src/stm32f4xx_rtc.c ****     }    
1176:FWLIB/src/stm32f4xx_rtc.c ****   }
1177:FWLIB/src/stm32f4xx_rtc.c **** 
1178:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1179:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1180:FWLIB/src/stm32f4xx_rtc.c ****   {
1181:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1186:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1187:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1188:FWLIB/src/stm32f4xx_rtc.c ****   }  
1189:FWLIB/src/stm32f4xx_rtc.c ****   else
1190:FWLIB/src/stm32f4xx_rtc.c ****   {
1191:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1196:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1197:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1198:FWLIB/src/stm32f4xx_rtc.c ****   } 
1199:FWLIB/src/stm32f4xx_rtc.c **** 
1200:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1201:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1202:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1203:FWLIB/src/stm32f4xx_rtc.c **** 
1204:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1205:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1206:FWLIB/src/stm32f4xx_rtc.c ****   {
1207:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1208:FWLIB/src/stm32f4xx_rtc.c ****   }
1209:FWLIB/src/stm32f4xx_rtc.c ****   else
1210:FWLIB/src/stm32f4xx_rtc.c ****   {
1211:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1212:FWLIB/src/stm32f4xx_rtc.c ****   }
1213:FWLIB/src/stm32f4xx_rtc.c **** 
1214:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1215:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1216:FWLIB/src/stm32f4xx_rtc.c **** }
1217:FWLIB/src/stm32f4xx_rtc.c **** 
1218:FWLIB/src/stm32f4xx_rtc.c **** /**
1219:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1220:FWLIB/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1221:FWLIB/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1222:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1223:FWLIB/src/stm32f4xx_rtc.c ****   *         will be initialized.
1224:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1225:FWLIB/src/stm32f4xx_rtc.c ****   */
1226:FWLIB/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1227:FWLIB/src/stm32f4xx_rtc.c **** {
1228:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1229:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1230:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1231:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
ARM GAS  /tmp/ccROQL82.s 			page 23


1232:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1233:FWLIB/src/stm32f4xx_rtc.c **** 
1234:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1235:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1236:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1237:FWLIB/src/stm32f4xx_rtc.c **** 
1238:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1239:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1240:FWLIB/src/stm32f4xx_rtc.c **** }
1241:FWLIB/src/stm32f4xx_rtc.c **** 
1242:FWLIB/src/stm32f4xx_rtc.c **** /**
1243:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1244:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1245:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1246:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1247:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1248:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1249:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1250:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1251:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1252:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1253:FWLIB/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1254:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1255:FWLIB/src/stm32f4xx_rtc.c ****   */
1256:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1257:FWLIB/src/stm32f4xx_rtc.c **** {
1258:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1259:FWLIB/src/stm32f4xx_rtc.c **** 
1260:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1261:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1262:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1263:FWLIB/src/stm32f4xx_rtc.c **** 
1264:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1265:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1266:FWLIB/src/stm32f4xx_rtc.c ****   {
1267:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1268:FWLIB/src/stm32f4xx_rtc.c ****   }
1269:FWLIB/src/stm32f4xx_rtc.c ****   else
1270:FWLIB/src/stm32f4xx_rtc.c ****   {
1271:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1272:FWLIB/src/stm32f4xx_rtc.c ****   }
1273:FWLIB/src/stm32f4xx_rtc.c **** 
1274:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1275:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1276:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1277:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1278:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1279:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1280:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1281:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1282:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1283:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1284:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1285:FWLIB/src/stm32f4xx_rtc.c **** 
1286:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1287:FWLIB/src/stm32f4xx_rtc.c ****   {
1288:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
ARM GAS  /tmp/ccROQL82.s 			page 24


1289:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1290:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1291:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1292:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1293:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1294:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1295:FWLIB/src/stm32f4xx_rtc.c ****   }  
1296:FWLIB/src/stm32f4xx_rtc.c **** }
1297:FWLIB/src/stm32f4xx_rtc.c **** 
1298:FWLIB/src/stm32f4xx_rtc.c **** /**
1299:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1300:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1301:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1302:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1303:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1304:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1305:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1306:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1307:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1308:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1309:FWLIB/src/stm32f4xx_rtc.c ****   */
1310:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1311:FWLIB/src/stm32f4xx_rtc.c **** {
1312:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1313:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1314:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1315:FWLIB/src/stm32f4xx_rtc.c ****     
1316:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1317:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1318:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1319:FWLIB/src/stm32f4xx_rtc.c **** 
1320:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1321:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1322:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1323:FWLIB/src/stm32f4xx_rtc.c **** 
1324:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1325:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1326:FWLIB/src/stm32f4xx_rtc.c ****   {
1327:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1328:FWLIB/src/stm32f4xx_rtc.c **** 
1329:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1330:FWLIB/src/stm32f4xx_rtc.c ****   }
1331:FWLIB/src/stm32f4xx_rtc.c ****   else
1332:FWLIB/src/stm32f4xx_rtc.c ****   { 
1333:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1334:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1335:FWLIB/src/stm32f4xx_rtc.c ****    
1336:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1337:FWLIB/src/stm32f4xx_rtc.c ****     do
1338:FWLIB/src/stm32f4xx_rtc.c ****     {
1339:FWLIB/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1340:FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
1341:FWLIB/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1342:FWLIB/src/stm32f4xx_rtc.c ****     
1343:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1344:FWLIB/src/stm32f4xx_rtc.c ****     {
1345:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
ARM GAS  /tmp/ccROQL82.s 			page 25


1346:FWLIB/src/stm32f4xx_rtc.c ****     } 
1347:FWLIB/src/stm32f4xx_rtc.c ****     else
1348:FWLIB/src/stm32f4xx_rtc.c ****     {
1349:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1350:FWLIB/src/stm32f4xx_rtc.c ****     }        
1351:FWLIB/src/stm32f4xx_rtc.c ****   } 
1352:FWLIB/src/stm32f4xx_rtc.c **** 
1353:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1354:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1355:FWLIB/src/stm32f4xx_rtc.c ****   
1356:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1357:FWLIB/src/stm32f4xx_rtc.c **** }
1358:FWLIB/src/stm32f4xx_rtc.c **** 
1359:FWLIB/src/stm32f4xx_rtc.c **** /**
1360:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Sub seconds value and mask.*
1361:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1362:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1363:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1364:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1365:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1366:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Sub seconds value.
1367:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1368:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Sub seconds Mask.
1369:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1370:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1371:FWLIB/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1372:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1373:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1374:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1375:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1376:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1377:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1378:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1379:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1380:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1381:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1382:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1383:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1384:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1385:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1386:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1387:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1388:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1389:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1390:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1391:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1392:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1393:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1394:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1395:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1396:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1397:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1398:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1399:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1400:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1401:FWLIB/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1402:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
ARM GAS  /tmp/ccROQL82.s 			page 26


1403:FWLIB/src/stm32f4xx_rtc.c ****   */
1404:FWLIB/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1405:FWLIB/src/stm32f4xx_rtc.c **** {
1406:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1407:FWLIB/src/stm32f4xx_rtc.c **** 
1408:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1409:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1410:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1411:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1412:FWLIB/src/stm32f4xx_rtc.c ****   
1413:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1414:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1415:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1416:FWLIB/src/stm32f4xx_rtc.c ****   
1417:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1418:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1419:FWLIB/src/stm32f4xx_rtc.c ****   
1420:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1421:FWLIB/src/stm32f4xx_rtc.c ****   {
1422:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Alarm A Sub Second register */
1423:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
1424:FWLIB/src/stm32f4xx_rtc.c ****   }
1425:FWLIB/src/stm32f4xx_rtc.c ****   else
1426:FWLIB/src/stm32f4xx_rtc.c ****   {
1427:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B Sub Second register */
1428:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1429:FWLIB/src/stm32f4xx_rtc.c ****   }
1430:FWLIB/src/stm32f4xx_rtc.c **** 
1431:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1432:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1433:FWLIB/src/stm32f4xx_rtc.c **** 
1434:FWLIB/src/stm32f4xx_rtc.c **** }
1435:FWLIB/src/stm32f4xx_rtc.c **** 
1436:FWLIB/src/stm32f4xx_rtc.c **** /**
1437:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Sub seconds value.
1438:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1439:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1440:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1441:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1442:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1443:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Sub seconds value.
1444:FWLIB/src/stm32f4xx_rtc.c ****   */
1445:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1446:FWLIB/src/stm32f4xx_rtc.c **** {
1447:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1448:FWLIB/src/stm32f4xx_rtc.c ****   
1449:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1450:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1451:FWLIB/src/stm32f4xx_rtc.c ****   {
1452:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1453:FWLIB/src/stm32f4xx_rtc.c ****   }
1454:FWLIB/src/stm32f4xx_rtc.c ****   else
1455:FWLIB/src/stm32f4xx_rtc.c ****   {
1456:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1457:FWLIB/src/stm32f4xx_rtc.c ****   } 
1458:FWLIB/src/stm32f4xx_rtc.c ****   
1459:FWLIB/src/stm32f4xx_rtc.c ****   return (tmpreg);
ARM GAS  /tmp/ccROQL82.s 			page 27


1460:FWLIB/src/stm32f4xx_rtc.c **** }
1461:FWLIB/src/stm32f4xx_rtc.c **** 
1462:FWLIB/src/stm32f4xx_rtc.c **** /**
1463:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1464:FWLIB/src/stm32f4xx_rtc.c ****   */
1465:FWLIB/src/stm32f4xx_rtc.c **** 
1466:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1467:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1468:FWLIB/src/stm32f4xx_rtc.c ****  *
1469:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1470:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1471:FWLIB/src/stm32f4xx_rtc.c ****                  ##### WakeUp Timer configuration functions #####
1472:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1473:FWLIB/src/stm32f4xx_rtc.c **** 
1474:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC WakeUp.
1475:FWLIB/src/stm32f4xx_rtc.c **** 
1476:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1477:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1478:FWLIB/src/stm32f4xx_rtc.c ****   */
1479:FWLIB/src/stm32f4xx_rtc.c **** 
1480:FWLIB/src/stm32f4xx_rtc.c **** /**
1481:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1482:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1483:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1484:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1485:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1486:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1487:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1488:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1489:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1490:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1491:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1492:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1493:FWLIB/src/stm32f4xx_rtc.c ****   */
1494:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1495:FWLIB/src/stm32f4xx_rtc.c **** {
1496:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1498:FWLIB/src/stm32f4xx_rtc.c **** 
1499:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1501:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1502:FWLIB/src/stm32f4xx_rtc.c **** 
1503:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1504:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1505:FWLIB/src/stm32f4xx_rtc.c **** 
1506:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1507:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1508:FWLIB/src/stm32f4xx_rtc.c ****   
1509:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1510:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1511:FWLIB/src/stm32f4xx_rtc.c **** }
1512:FWLIB/src/stm32f4xx_rtc.c **** 
1513:FWLIB/src/stm32f4xx_rtc.c **** /**
1514:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1515:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1516:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
ARM GAS  /tmp/ccROQL82.s 			page 28


1517:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1518:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1519:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1520:FWLIB/src/stm32f4xx_rtc.c ****   */
1521:FWLIB/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1522:FWLIB/src/stm32f4xx_rtc.c **** {
1523:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1524:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1525:FWLIB/src/stm32f4xx_rtc.c ****   
1526:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1527:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1528:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1529:FWLIB/src/stm32f4xx_rtc.c ****   
1530:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1531:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1532:FWLIB/src/stm32f4xx_rtc.c ****   
1533:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1534:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1535:FWLIB/src/stm32f4xx_rtc.c **** }
1536:FWLIB/src/stm32f4xx_rtc.c **** 
1537:FWLIB/src/stm32f4xx_rtc.c **** /**
1538:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1539:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1540:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1541:FWLIB/src/stm32f4xx_rtc.c ****   */
1542:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1543:FWLIB/src/stm32f4xx_rtc.c **** {
1544:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1545:FWLIB/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1546:FWLIB/src/stm32f4xx_rtc.c **** }
1547:FWLIB/src/stm32f4xx_rtc.c **** 
1548:FWLIB/src/stm32f4xx_rtc.c **** /**
1549:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1550:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1551:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1552:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1553:FWLIB/src/stm32f4xx_rtc.c ****   */
1554:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1555:FWLIB/src/stm32f4xx_rtc.c **** {
1556:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1557:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1558:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1559:FWLIB/src/stm32f4xx_rtc.c ****   
1560:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1561:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1562:FWLIB/src/stm32f4xx_rtc.c **** 
1563:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1565:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1566:FWLIB/src/stm32f4xx_rtc.c **** 
1567:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1568:FWLIB/src/stm32f4xx_rtc.c ****   {
1569:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1570:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1571:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1572:FWLIB/src/stm32f4xx_rtc.c ****   }
1573:FWLIB/src/stm32f4xx_rtc.c ****   else
ARM GAS  /tmp/ccROQL82.s 			page 29


1574:FWLIB/src/stm32f4xx_rtc.c ****   {
1575:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1576:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1577:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1578:FWLIB/src/stm32f4xx_rtc.c ****     do
1579:FWLIB/src/stm32f4xx_rtc.c ****     {
1580:FWLIB/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1581:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
1582:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1583:FWLIB/src/stm32f4xx_rtc.c ****     
1584:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1585:FWLIB/src/stm32f4xx_rtc.c ****     {
1586:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1587:FWLIB/src/stm32f4xx_rtc.c ****     }
1588:FWLIB/src/stm32f4xx_rtc.c ****     else
1589:FWLIB/src/stm32f4xx_rtc.c ****     {
1590:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1591:FWLIB/src/stm32f4xx_rtc.c ****     }    
1592:FWLIB/src/stm32f4xx_rtc.c ****   }
1593:FWLIB/src/stm32f4xx_rtc.c **** 
1594:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1595:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1596:FWLIB/src/stm32f4xx_rtc.c ****   
1597:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1598:FWLIB/src/stm32f4xx_rtc.c **** }
1599:FWLIB/src/stm32f4xx_rtc.c **** 
1600:FWLIB/src/stm32f4xx_rtc.c **** /**
1601:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1602:FWLIB/src/stm32f4xx_rtc.c ****   */
1603:FWLIB/src/stm32f4xx_rtc.c **** 
1604:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1605:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1606:FWLIB/src/stm32f4xx_rtc.c ****  *
1607:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1608:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1609:FWLIB/src/stm32f4xx_rtc.c ****               ##### Daylight Saving configuration functions #####
1610:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1611:FWLIB/src/stm32f4xx_rtc.c **** 
1612:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC DayLight Saving.
1613:FWLIB/src/stm32f4xx_rtc.c **** 
1614:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1615:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1616:FWLIB/src/stm32f4xx_rtc.c ****   */
1617:FWLIB/src/stm32f4xx_rtc.c **** 
1618:FWLIB/src/stm32f4xx_rtc.c **** /**
1619:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1620:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1621:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1622:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1623:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1624:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1625:FWLIB/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1626:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1627:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1628:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1629:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1630:FWLIB/src/stm32f4xx_rtc.c ****   */
ARM GAS  /tmp/ccROQL82.s 			page 30


1631:FWLIB/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1632:FWLIB/src/stm32f4xx_rtc.c **** {
1633:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1634:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1635:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1636:FWLIB/src/stm32f4xx_rtc.c **** 
1637:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1638:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1639:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1640:FWLIB/src/stm32f4xx_rtc.c **** 
1641:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1642:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1643:FWLIB/src/stm32f4xx_rtc.c **** 
1644:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1645:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1646:FWLIB/src/stm32f4xx_rtc.c **** 
1647:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1648:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1649:FWLIB/src/stm32f4xx_rtc.c **** }
1650:FWLIB/src/stm32f4xx_rtc.c **** 
1651:FWLIB/src/stm32f4xx_rtc.c **** /**
1652:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1653:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1654:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1655:FWLIB/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1656:FWLIB/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1657:FWLIB/src/stm32f4xx_rtc.c ****   */
1658:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1659:FWLIB/src/stm32f4xx_rtc.c **** {
1660:FWLIB/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1661:FWLIB/src/stm32f4xx_rtc.c **** }
1662:FWLIB/src/stm32f4xx_rtc.c **** 
1663:FWLIB/src/stm32f4xx_rtc.c **** /**
1664:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1665:FWLIB/src/stm32f4xx_rtc.c ****   */
1666:FWLIB/src/stm32f4xx_rtc.c **** 
1667:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1668:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1669:FWLIB/src/stm32f4xx_rtc.c ****  *
1670:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1671:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1672:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Output pin Configuration function #####
1673:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1674:FWLIB/src/stm32f4xx_rtc.c **** 
1675:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC Output source.
1676:FWLIB/src/stm32f4xx_rtc.c **** 
1677:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1678:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1679:FWLIB/src/stm32f4xx_rtc.c ****   */
1680:FWLIB/src/stm32f4xx_rtc.c **** 
1681:FWLIB/src/stm32f4xx_rtc.c **** /**
1682:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1683:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1684:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1685:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1686:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1687:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
ARM GAS  /tmp/ccROQL82.s 			page 31


1688:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1689:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1690:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1691:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1692:FWLIB/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1693:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1694:FWLIB/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1695:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1696:FWLIB/src/stm32f4xx_rtc.c ****   */
1697:FWLIB/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1698:FWLIB/src/stm32f4xx_rtc.c **** {
1699:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1700:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1701:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1702:FWLIB/src/stm32f4xx_rtc.c **** 
1703:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1704:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1705:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1706:FWLIB/src/stm32f4xx_rtc.c **** 
1707:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1708:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1709:FWLIB/src/stm32f4xx_rtc.c **** 
1710:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1711:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1712:FWLIB/src/stm32f4xx_rtc.c **** 
1713:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1714:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1715:FWLIB/src/stm32f4xx_rtc.c **** }
1716:FWLIB/src/stm32f4xx_rtc.c **** 
1717:FWLIB/src/stm32f4xx_rtc.c **** /**
1718:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1719:FWLIB/src/stm32f4xx_rtc.c ****   */
1720:FWLIB/src/stm32f4xx_rtc.c **** 
1721:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1722:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1723:FWLIB/src/stm32f4xx_rtc.c ****  *
1724:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1725:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1726:FWLIB/src/stm32f4xx_rtc.c ****               ##### Digital Calibration configuration functions #####
1727:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1728:FWLIB/src/stm32f4xx_rtc.c **** 
1729:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1730:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1731:FWLIB/src/stm32f4xx_rtc.c ****   */
1732:FWLIB/src/stm32f4xx_rtc.c **** 
1733:FWLIB/src/stm32f4xx_rtc.c **** /**
1734:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1735:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1736:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1737:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1738:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1739:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1740:FWLIB/src/stm32f4xx_rtc.c ****   *    
1741:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1742:FWLIB/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1743:FWLIB/src/stm32f4xx_rtc.c ****   *           
1744:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
ARM GAS  /tmp/ccROQL82.s 			page 32


1745:FWLIB/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1746:FWLIB/src/stm32f4xx_rtc.c ****   *           
1747:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1748:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1749:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1750:FWLIB/src/stm32f4xx_rtc.c ****   */
1751:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1752:FWLIB/src/stm32f4xx_rtc.c **** {
1753:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1754:FWLIB/src/stm32f4xx_rtc.c ****    
1755:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1756:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1757:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1758:FWLIB/src/stm32f4xx_rtc.c **** 
1759:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1760:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1761:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1762:FWLIB/src/stm32f4xx_rtc.c **** 
1763:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1764:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1765:FWLIB/src/stm32f4xx_rtc.c ****   {
1766:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
1767:FWLIB/src/stm32f4xx_rtc.c ****   } 
1768:FWLIB/src/stm32f4xx_rtc.c ****   else
1769:FWLIB/src/stm32f4xx_rtc.c ****   {
1770:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1771:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
1772:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1773:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1774:FWLIB/src/stm32f4xx_rtc.c ****     
1775:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1776:FWLIB/src/stm32f4xx_rtc.c ****   } 
1777:FWLIB/src/stm32f4xx_rtc.c **** 
1778:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1779:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1780:FWLIB/src/stm32f4xx_rtc.c ****   
1781:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1782:FWLIB/src/stm32f4xx_rtc.c **** }
1783:FWLIB/src/stm32f4xx_rtc.c **** 
1784:FWLIB/src/stm32f4xx_rtc.c **** /**
1785:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1786:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1787:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1788:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1789:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1790:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1791:FWLIB/src/stm32f4xx_rtc.c ****   */
1792:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1793:FWLIB/src/stm32f4xx_rtc.c **** {
1794:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1795:FWLIB/src/stm32f4xx_rtc.c ****   
1796:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1797:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1798:FWLIB/src/stm32f4xx_rtc.c **** 
1799:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1800:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1801:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
ARM GAS  /tmp/ccROQL82.s 			page 33


1802:FWLIB/src/stm32f4xx_rtc.c ****   
1803:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1804:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1805:FWLIB/src/stm32f4xx_rtc.c ****   {
1806:FWLIB/src/stm32f4xx_rtc.c ****     status =  ERROR;
1807:FWLIB/src/stm32f4xx_rtc.c ****   }
1808:FWLIB/src/stm32f4xx_rtc.c ****   else
1809:FWLIB/src/stm32f4xx_rtc.c ****   {
1810:FWLIB/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
1811:FWLIB/src/stm32f4xx_rtc.c ****     {
1812:FWLIB/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1813:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
1814:FWLIB/src/stm32f4xx_rtc.c ****     }
1815:FWLIB/src/stm32f4xx_rtc.c ****     else
1816:FWLIB/src/stm32f4xx_rtc.c ****     { 
1817:FWLIB/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1818:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
1819:FWLIB/src/stm32f4xx_rtc.c ****     }
1820:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1821:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1822:FWLIB/src/stm32f4xx_rtc.c ****     
1823:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1824:FWLIB/src/stm32f4xx_rtc.c ****   } 
1825:FWLIB/src/stm32f4xx_rtc.c ****   
1826:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1827:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1828:FWLIB/src/stm32f4xx_rtc.c ****   
1829:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1830:FWLIB/src/stm32f4xx_rtc.c **** }
1831:FWLIB/src/stm32f4xx_rtc.c **** 
1832:FWLIB/src/stm32f4xx_rtc.c **** /**
1833:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1834:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1835:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1836:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1837:FWLIB/src/stm32f4xx_rtc.c ****   */
1838:FWLIB/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1839:FWLIB/src/stm32f4xx_rtc.c **** {
1840:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1841:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1842:FWLIB/src/stm32f4xx_rtc.c ****   
1843:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1844:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1845:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1846:FWLIB/src/stm32f4xx_rtc.c ****   
1847:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1848:FWLIB/src/stm32f4xx_rtc.c ****   {
1849:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1850:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1851:FWLIB/src/stm32f4xx_rtc.c ****   }
1852:FWLIB/src/stm32f4xx_rtc.c ****   else
1853:FWLIB/src/stm32f4xx_rtc.c ****   { 
1854:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1855:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1856:FWLIB/src/stm32f4xx_rtc.c ****   }
1857:FWLIB/src/stm32f4xx_rtc.c ****   
1858:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
ARM GAS  /tmp/ccROQL82.s 			page 34


1859:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1860:FWLIB/src/stm32f4xx_rtc.c **** }
1861:FWLIB/src/stm32f4xx_rtc.c **** 
1862:FWLIB/src/stm32f4xx_rtc.c **** /**
1863:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1864:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1865:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1866:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1867:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1868:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1869:FWLIB/src/stm32f4xx_rtc.c **** */
1870:FWLIB/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1871:FWLIB/src/stm32f4xx_rtc.c **** {
1872:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1873:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1874:FWLIB/src/stm32f4xx_rtc.c **** 
1875:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1876:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1877:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1878:FWLIB/src/stm32f4xx_rtc.c ****   
1879:FWLIB/src/stm32f4xx_rtc.c ****   /*clear flags before configuration */
1880:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1881:FWLIB/src/stm32f4xx_rtc.c **** 
1882:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1883:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1884:FWLIB/src/stm32f4xx_rtc.c **** 
1885:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1886:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1887:FWLIB/src/stm32f4xx_rtc.c **** }
1888:FWLIB/src/stm32f4xx_rtc.c **** 
1889:FWLIB/src/stm32f4xx_rtc.c **** /**
1890:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1891:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1892:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1893:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration period is 32s.
1894:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration period is 16s.
1895:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion period is 8s.
1896:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1897:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1898:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1899:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1900:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1901:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1902:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1903:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1904:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1905:FWLIB/src/stm32f4xx_rtc.c **** */
1906:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1907:FWLIB/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1908:FWLIB/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1909:FWLIB/src/stm32f4xx_rtc.c **** {
1910:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1911:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
1912:FWLIB/src/stm32f4xx_rtc.c **** 
1913:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1914:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1915:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
ARM GAS  /tmp/ccROQL82.s 			page 35


1916:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1917:FWLIB/src/stm32f4xx_rtc.c **** 
1918:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1919:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1920:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1921:FWLIB/src/stm32f4xx_rtc.c ****   
1922:FWLIB/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1923:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1924:FWLIB/src/stm32f4xx_rtc.c ****   {
1925:FWLIB/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1926:FWLIB/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1927:FWLIB/src/stm32f4xx_rtc.c ****     {
1928:FWLIB/src/stm32f4xx_rtc.c ****       recalpfcount++;
1929:FWLIB/src/stm32f4xx_rtc.c ****     }
1930:FWLIB/src/stm32f4xx_rtc.c ****   }
1931:FWLIB/src/stm32f4xx_rtc.c **** 
1932:FWLIB/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1933:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1934:FWLIB/src/stm32f4xx_rtc.c ****   {
1935:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1936:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1937:FWLIB/src/stm32f4xx_rtc.c **** 
1938:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1939:FWLIB/src/stm32f4xx_rtc.c ****   }
1940:FWLIB/src/stm32f4xx_rtc.c ****   else
1941:FWLIB/src/stm32f4xx_rtc.c ****   {
1942:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
1943:FWLIB/src/stm32f4xx_rtc.c ****   }
1944:FWLIB/src/stm32f4xx_rtc.c **** 
1945:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1946:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1947:FWLIB/src/stm32f4xx_rtc.c ****   
1948:FWLIB/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
1949:FWLIB/src/stm32f4xx_rtc.c **** }
1950:FWLIB/src/stm32f4xx_rtc.c **** 
1951:FWLIB/src/stm32f4xx_rtc.c **** /**
1952:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1953:FWLIB/src/stm32f4xx_rtc.c ****   */
1954:FWLIB/src/stm32f4xx_rtc.c **** 
1955:FWLIB/src/stm32f4xx_rtc.c **** 
1956:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1957:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1958:FWLIB/src/stm32f4xx_rtc.c ****  *
1959:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1960:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1961:FWLIB/src/stm32f4xx_rtc.c ****                  ##### TimeStamp configuration functions #####
1962:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1963:FWLIB/src/stm32f4xx_rtc.c **** 
1964:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1965:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1966:FWLIB/src/stm32f4xx_rtc.c ****   */
1967:FWLIB/src/stm32f4xx_rtc.c **** 
1968:FWLIB/src/stm32f4xx_rtc.c **** /**
1969:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1970:FWLIB/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1971:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1972:FWLIB/src/stm32f4xx_rtc.c ****   *         activated.
ARM GAS  /tmp/ccROQL82.s 			page 36


1973:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1974:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1975:FWLIB/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1976:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1977:FWLIB/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1978:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1979:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1980:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1981:FWLIB/src/stm32f4xx_rtc.c ****   */
1982:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1983:FWLIB/src/stm32f4xx_rtc.c **** {
1984:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1985:FWLIB/src/stm32f4xx_rtc.c **** 
1986:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1987:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1988:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1989:FWLIB/src/stm32f4xx_rtc.c **** 
1990:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1991:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1992:FWLIB/src/stm32f4xx_rtc.c **** 
1993:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1994:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1995:FWLIB/src/stm32f4xx_rtc.c ****   {
1996:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1997:FWLIB/src/stm32f4xx_rtc.c ****   }
1998:FWLIB/src/stm32f4xx_rtc.c ****   else
1999:FWLIB/src/stm32f4xx_rtc.c ****   {
2000:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
2001:FWLIB/src/stm32f4xx_rtc.c ****   }
2002:FWLIB/src/stm32f4xx_rtc.c **** 
2003:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2004:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2005:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2006:FWLIB/src/stm32f4xx_rtc.c **** 
2007:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
2008:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
2009:FWLIB/src/stm32f4xx_rtc.c **** 
2010:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2011:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2012:FWLIB/src/stm32f4xx_rtc.c **** }
2013:FWLIB/src/stm32f4xx_rtc.c **** 
2014:FWLIB/src/stm32f4xx_rtc.c **** /**
2015:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
2016:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
2017:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2018:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
2019:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
2020:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
2021:FWLIB/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
2022:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
2023:FWLIB/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
2024:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2025:FWLIB/src/stm32f4xx_rtc.c ****   */
2026:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2027:FWLIB/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2028:FWLIB/src/stm32f4xx_rtc.c **** {
2029:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
ARM GAS  /tmp/ccROQL82.s 			page 37


2030:FWLIB/src/stm32f4xx_rtc.c **** 
2031:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2032:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2033:FWLIB/src/stm32f4xx_rtc.c **** 
2034:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2035:FWLIB/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
2036:FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
2037:FWLIB/src/stm32f4xx_rtc.c **** 
2038:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
2040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
2041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
2042:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
2043:FWLIB/src/stm32f4xx_rtc.c **** 
2044:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2045:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
2046:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
2047:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
2048:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
2049:FWLIB/src/stm32f4xx_rtc.c **** 
2050:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2051:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
2052:FWLIB/src/stm32f4xx_rtc.c ****   {
2053:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2054:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
2055:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
2056:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
2057:FWLIB/src/stm32f4xx_rtc.c **** 
2058:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2059:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
2060:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
2061:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
2062:FWLIB/src/stm32f4xx_rtc.c ****   }
2063:FWLIB/src/stm32f4xx_rtc.c **** }
2064:FWLIB/src/stm32f4xx_rtc.c **** 
2065:FWLIB/src/stm32f4xx_rtc.c **** /**
2066:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Sub seconds value.
2067:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
2068:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Sub seconds value.
2069:FWLIB/src/stm32f4xx_rtc.c ****   */
2070:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2071:FWLIB/src/stm32f4xx_rtc.c **** {
2072:FWLIB/src/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
2073:FWLIB/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
2074:FWLIB/src/stm32f4xx_rtc.c **** }
2075:FWLIB/src/stm32f4xx_rtc.c **** 
2076:FWLIB/src/stm32f4xx_rtc.c **** /**
2077:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2078:FWLIB/src/stm32f4xx_rtc.c ****   */
2079:FWLIB/src/stm32f4xx_rtc.c **** 
2080:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2081:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2082:FWLIB/src/stm32f4xx_rtc.c ****  *
2083:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2084:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2085:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Tampers configuration functions #####
2086:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
ARM GAS  /tmp/ccROQL82.s 			page 38


2087:FWLIB/src/stm32f4xx_rtc.c **** 
2088:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2089:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2090:FWLIB/src/stm32f4xx_rtc.c ****   */
2091:FWLIB/src/stm32f4xx_rtc.c **** 
2092:FWLIB/src/stm32f4xx_rtc.c **** /**
2093:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2094:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2095:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2096:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2097:FWLIB/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2098:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2099:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2100:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2101:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2102:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2103:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2104:FWLIB/src/stm32f4xx_rtc.c ****   */
2105:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2106:FWLIB/src/stm32f4xx_rtc.c **** {
2107:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2109:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2110:FWLIB/src/stm32f4xx_rtc.c ****  
2111:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
2112:FWLIB/src/stm32f4xx_rtc.c ****   {  
2113:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2114:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
2115:FWLIB/src/stm32f4xx_rtc.c ****   }
2116:FWLIB/src/stm32f4xx_rtc.c ****   else
2117:FWLIB/src/stm32f4xx_rtc.c ****   { 
2118:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2119:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2120:FWLIB/src/stm32f4xx_rtc.c ****   }  
2121:FWLIB/src/stm32f4xx_rtc.c **** }
2122:FWLIB/src/stm32f4xx_rtc.c **** 
2123:FWLIB/src/stm32f4xx_rtc.c **** /**
2124:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2125:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2126:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2127:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2128:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2129:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2130:FWLIB/src/stm32f4xx_rtc.c ****   */
2131:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2132:FWLIB/src/stm32f4xx_rtc.c **** {
2133:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2134:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2135:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2136:FWLIB/src/stm32f4xx_rtc.c ****   
2137:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2138:FWLIB/src/stm32f4xx_rtc.c ****   {
2139:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2140:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2141:FWLIB/src/stm32f4xx_rtc.c ****   }
2142:FWLIB/src/stm32f4xx_rtc.c ****   else
2143:FWLIB/src/stm32f4xx_rtc.c ****   {
ARM GAS  /tmp/ccROQL82.s 			page 39


2144:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2145:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2146:FWLIB/src/stm32f4xx_rtc.c ****   }  
2147:FWLIB/src/stm32f4xx_rtc.c **** }
2148:FWLIB/src/stm32f4xx_rtc.c **** 
2149:FWLIB/src/stm32f4xx_rtc.c **** /**
2150:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2151:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2152:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2153:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2154:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2155:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2156:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2157:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2158:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2159:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2160:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2161:FWLIB/src/stm32f4xx_rtc.c ****   */
2162:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2163:FWLIB/src/stm32f4xx_rtc.c **** {
2164:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2165:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2166:FWLIB/src/stm32f4xx_rtc.c ****    
2167:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2168:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2169:FWLIB/src/stm32f4xx_rtc.c **** 
2170:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2171:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2172:FWLIB/src/stm32f4xx_rtc.c **** }
2173:FWLIB/src/stm32f4xx_rtc.c **** 
2174:FWLIB/src/stm32f4xx_rtc.c **** /**
2175:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2176:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2177:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2178:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2179:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2180:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2181:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2182:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2183:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2184:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2185:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2186:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2187:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2188:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2189:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2190:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2191:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2192:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2193:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2194:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2195:FWLIB/src/stm32f4xx_rtc.c ****   */
2196:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2197:FWLIB/src/stm32f4xx_rtc.c **** {
2198:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2199:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2200:FWLIB/src/stm32f4xx_rtc.c ****  
ARM GAS  /tmp/ccROQL82.s 			page 40


2201:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2202:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2203:FWLIB/src/stm32f4xx_rtc.c **** 
2204:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2205:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2206:FWLIB/src/stm32f4xx_rtc.c **** }
2207:FWLIB/src/stm32f4xx_rtc.c **** 
2208:FWLIB/src/stm32f4xx_rtc.c **** /**
2209:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2210:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2211:FWLIB/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2212:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2213:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are precharged before sampling during
2214:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are precharged before sampling during
2215:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during
2216:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during
2217:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2218:FWLIB/src/stm32f4xx_rtc.c ****   */
2219:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2220:FWLIB/src/stm32f4xx_rtc.c **** {
2221:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2222:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2223:FWLIB/src/stm32f4xx_rtc.c ****    
2224:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2225:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2226:FWLIB/src/stm32f4xx_rtc.c **** 
2227:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2228:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2229:FWLIB/src/stm32f4xx_rtc.c **** }
2230:FWLIB/src/stm32f4xx_rtc.c **** 
2231:FWLIB/src/stm32f4xx_rtc.c **** /**
2232:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2233:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2234:FWLIB/src/stm32f4xx_rtc.c ****   *         is reset.   
2235:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2236:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2237:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2238:FWLIB/src/stm32f4xx_rtc.c ****   */
2239:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2240:FWLIB/src/stm32f4xx_rtc.c **** {
2241:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2242:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2243:FWLIB/src/stm32f4xx_rtc.c ****    
2244:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2245:FWLIB/src/stm32f4xx_rtc.c ****   {
2246:FWLIB/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2247:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2248:FWLIB/src/stm32f4xx_rtc.c ****   }
2249:FWLIB/src/stm32f4xx_rtc.c ****   else
2250:FWLIB/src/stm32f4xx_rtc.c ****   {
2251:FWLIB/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2252:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2253:FWLIB/src/stm32f4xx_rtc.c ****   }
2254:FWLIB/src/stm32f4xx_rtc.c **** }
2255:FWLIB/src/stm32f4xx_rtc.c **** 
2256:FWLIB/src/stm32f4xx_rtc.c **** /**
2257:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
ARM GAS  /tmp/ccROQL82.s 			page 41


2258:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2259:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2260:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2261:FWLIB/src/stm32f4xx_rtc.c ****   */
2262:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2263:FWLIB/src/stm32f4xx_rtc.c **** {
2264:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2265:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2266:FWLIB/src/stm32f4xx_rtc.c ****   
2267:FWLIB/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
2268:FWLIB/src/stm32f4xx_rtc.c ****   {
2269:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2270:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2271:FWLIB/src/stm32f4xx_rtc.c ****   }
2272:FWLIB/src/stm32f4xx_rtc.c ****   else
2273:FWLIB/src/stm32f4xx_rtc.c ****   {
2274:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2275:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2276:FWLIB/src/stm32f4xx_rtc.c ****   } 
2277:FWLIB/src/stm32f4xx_rtc.c **** }
2278:FWLIB/src/stm32f4xx_rtc.c **** 
2279:FWLIB/src/stm32f4xx_rtc.c **** /**
2280:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2281:FWLIB/src/stm32f4xx_rtc.c ****   */
2282:FWLIB/src/stm32f4xx_rtc.c **** 
2283:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2284:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2285:FWLIB/src/stm32f4xx_rtc.c ****  *
2286:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2287:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2288:FWLIB/src/stm32f4xx_rtc.c ****              ##### Backup Data Registers configuration functions ##### 
2289:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2290:FWLIB/src/stm32f4xx_rtc.c **** 
2291:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2292:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2293:FWLIB/src/stm32f4xx_rtc.c ****   */
2294:FWLIB/src/stm32f4xx_rtc.c **** 
2295:FWLIB/src/stm32f4xx_rtc.c **** /**
2296:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2297:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2298:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2299:FWLIB/src/stm32f4xx_rtc.c ****   *                          specify the register.
2300:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2301:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2302:FWLIB/src/stm32f4xx_rtc.c ****   */
2303:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2304:FWLIB/src/stm32f4xx_rtc.c **** {
2305:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2306:FWLIB/src/stm32f4xx_rtc.c ****   
2307:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2308:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2309:FWLIB/src/stm32f4xx_rtc.c **** 
2310:FWLIB/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2311:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2312:FWLIB/src/stm32f4xx_rtc.c **** 
2313:FWLIB/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2314:FWLIB/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
ARM GAS  /tmp/ccROQL82.s 			page 42


2315:FWLIB/src/stm32f4xx_rtc.c **** }
2316:FWLIB/src/stm32f4xx_rtc.c **** 
2317:FWLIB/src/stm32f4xx_rtc.c **** /**
2318:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2319:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2320:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2321:FWLIB/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2322:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2323:FWLIB/src/stm32f4xx_rtc.c ****   */
2324:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2325:FWLIB/src/stm32f4xx_rtc.c **** {
2326:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2327:FWLIB/src/stm32f4xx_rtc.c ****   
2328:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2329:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2330:FWLIB/src/stm32f4xx_rtc.c **** 
2331:FWLIB/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2332:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2333:FWLIB/src/stm32f4xx_rtc.c ****   
2334:FWLIB/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2335:FWLIB/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2336:FWLIB/src/stm32f4xx_rtc.c **** }
2337:FWLIB/src/stm32f4xx_rtc.c **** 
2338:FWLIB/src/stm32f4xx_rtc.c **** /**
2339:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2340:FWLIB/src/stm32f4xx_rtc.c ****   */
2341:FWLIB/src/stm32f4xx_rtc.c **** 
2342:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2343:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2344:FWLIB/src/stm32f4xx_rtc.c ****  *           configuration functions  
2345:FWLIB/src/stm32f4xx_rtc.c ****  *
2346:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2347:FWLIB/src/stm32f4xx_rtc.c ****  ==================================================================================================
2348:FWLIB/src/stm32f4xx_rtc.c ****  ##### RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration functions #####
2349:FWLIB/src/stm32f4xx_rtc.c ****  ==================================================================================================
2350:FWLIB/src/stm32f4xx_rtc.c **** 
2351:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2352:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2353:FWLIB/src/stm32f4xx_rtc.c ****   */
2354:FWLIB/src/stm32f4xx_rtc.c **** 
2355:FWLIB/src/stm32f4xx_rtc.c **** /**
2356:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2357:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2358:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2359:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2360:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2361:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2362:FWLIB/src/stm32f4xx_rtc.c ****   */
2363:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2364:FWLIB/src/stm32f4xx_rtc.c **** {
2365:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2366:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2367:FWLIB/src/stm32f4xx_rtc.c ****   
2368:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
2369:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
2370:FWLIB/src/stm32f4xx_rtc.c **** }
2371:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccROQL82.s 			page 43


2372:FWLIB/src/stm32f4xx_rtc.c **** /**
2373:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2374:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2375:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2376:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2377:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2378:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2379:FWLIB/src/stm32f4xx_rtc.c ****   */
2380:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2381:FWLIB/src/stm32f4xx_rtc.c **** {
2382:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2383:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2384:FWLIB/src/stm32f4xx_rtc.c ****   
2385:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
2386:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
2387:FWLIB/src/stm32f4xx_rtc.c **** }
2388:FWLIB/src/stm32f4xx_rtc.c **** 
2389:FWLIB/src/stm32f4xx_rtc.c **** /**
2390:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2391:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2392:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2393:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2394:FWLIB/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2395:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2396:FWLIB/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2397:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2398:FWLIB/src/stm32f4xx_rtc.c ****   */
2399:FWLIB/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2400:FWLIB/src/stm32f4xx_rtc.c **** {
2401:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2402:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2403:FWLIB/src/stm32f4xx_rtc.c ****   
2404:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2405:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2406:FWLIB/src/stm32f4xx_rtc.c **** }
2407:FWLIB/src/stm32f4xx_rtc.c **** 
2408:FWLIB/src/stm32f4xx_rtc.c **** /**
2409:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2410:FWLIB/src/stm32f4xx_rtc.c ****   */
2411:FWLIB/src/stm32f4xx_rtc.c **** 
2412:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2413:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2414:FWLIB/src/stm32f4xx_rtc.c ****  *
2415:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2416:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2417:FWLIB/src/stm32f4xx_rtc.c ****               ##### Shift control synchronisation functions #####
2418:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2419:FWLIB/src/stm32f4xx_rtc.c **** 
2420:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2421:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2422:FWLIB/src/stm32f4xx_rtc.c ****   */
2423:FWLIB/src/stm32f4xx_rtc.c **** 
2424:FWLIB/src/stm32f4xx_rtc.c **** /**
2425:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2426:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2427:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2428:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
ARM GAS  /tmp/ccROQL82.s 			page 44


2429:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2430:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2431:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2432:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2433:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2434:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2435:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2436:FWLIB/src/stm32f4xx_rtc.c **** */
2437:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2438:FWLIB/src/stm32f4xx_rtc.c **** {
2439:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
2440:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
2441:FWLIB/src/stm32f4xx_rtc.c **** 
2442:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2443:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2444:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2445:FWLIB/src/stm32f4xx_rtc.c **** 
2446:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2447:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2448:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2449:FWLIB/src/stm32f4xx_rtc.c ****   
2450:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2451:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2452:FWLIB/src/stm32f4xx_rtc.c ****   {
2453:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2454:FWLIB/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2455:FWLIB/src/stm32f4xx_rtc.c ****     {
2456:FWLIB/src/stm32f4xx_rtc.c ****       shpfcount++;
2457:FWLIB/src/stm32f4xx_rtc.c ****     }
2458:FWLIB/src/stm32f4xx_rtc.c ****   }
2459:FWLIB/src/stm32f4xx_rtc.c **** 
2460:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2461:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2462:FWLIB/src/stm32f4xx_rtc.c ****   {
2463:FWLIB/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2464:FWLIB/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2465:FWLIB/src/stm32f4xx_rtc.c ****     {
2466:FWLIB/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2467:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2468:FWLIB/src/stm32f4xx_rtc.c ****     
2469:FWLIB/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2470:FWLIB/src/stm32f4xx_rtc.c ****       {
2471:FWLIB/src/stm32f4xx_rtc.c ****         status = ERROR;
2472:FWLIB/src/stm32f4xx_rtc.c ****       }
2473:FWLIB/src/stm32f4xx_rtc.c ****       else
2474:FWLIB/src/stm32f4xx_rtc.c ****       {
2475:FWLIB/src/stm32f4xx_rtc.c ****         status = SUCCESS;
2476:FWLIB/src/stm32f4xx_rtc.c ****       }
2477:FWLIB/src/stm32f4xx_rtc.c ****     }
2478:FWLIB/src/stm32f4xx_rtc.c ****     else
2479:FWLIB/src/stm32f4xx_rtc.c ****     {
2480:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
2481:FWLIB/src/stm32f4xx_rtc.c ****     }
2482:FWLIB/src/stm32f4xx_rtc.c ****   }
2483:FWLIB/src/stm32f4xx_rtc.c ****   else
2484:FWLIB/src/stm32f4xx_rtc.c ****   {
2485:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
ARM GAS  /tmp/ccROQL82.s 			page 45


2486:FWLIB/src/stm32f4xx_rtc.c ****   }
2487:FWLIB/src/stm32f4xx_rtc.c **** 
2488:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2489:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
2490:FWLIB/src/stm32f4xx_rtc.c ****   
2491:FWLIB/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
2492:FWLIB/src/stm32f4xx_rtc.c **** }
2493:FWLIB/src/stm32f4xx_rtc.c **** 
2494:FWLIB/src/stm32f4xx_rtc.c **** /**
2495:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2496:FWLIB/src/stm32f4xx_rtc.c ****   */
2497:FWLIB/src/stm32f4xx_rtc.c **** 
2498:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2499:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2500:FWLIB/src/stm32f4xx_rtc.c ****  *
2501:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2502:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2503:FWLIB/src/stm32f4xx_rtc.c ****               ##### Interrupts and flags management functions #####
2504:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2505:FWLIB/src/stm32f4xx_rtc.c ****  [..] All RTC interrupts are connected to the EXTI controller.
2506:FWLIB/src/stm32f4xx_rtc.c ****  
2507:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Alarm interrupt, the following sequence is required:
2508:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 17 in interrupt mode and select 
2509:FWLIB/src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2510:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_Alarm IRQ channel in the NVIC using the 
2511:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2512:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2513:FWLIB/src/stm32f4xx_rtc.c ****             the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2514:FWLIB/src/stm32f4xx_rtc.c **** 
2515:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Wakeup interrupt, the following sequence is required:
2516:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 22 in interrupt mode and select the
2517:FWLIB/src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2518:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_WKUP IRQ channel in the NVIC using the 
2519:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2520:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate the RTC wakeup timer event using the 
2521:FWLIB/src/stm32f4xx_rtc.c ****             RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() 
2522:FWLIB/src/stm32f4xx_rtc.c ****             functions.
2523:FWLIB/src/stm32f4xx_rtc.c **** 
2524:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Tamper interrupt, the following sequence is required:
2525:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select 
2526:FWLIB/src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2527:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the
2528:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2529:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC tamper event using the 
2530:FWLIB/src/stm32f4xx_rtc.c ****             RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2531:FWLIB/src/stm32f4xx_rtc.c **** 
2532:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC TimeStamp interrupt, the following sequence is required:
2533:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select the
2534:FWLIB/src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2535:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the 
2536:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2537:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC time stamp event using the 
2538:FWLIB/src/stm32f4xx_rtc.c ****             RTC_TimeStampCmd() functions.
2539:FWLIB/src/stm32f4xx_rtc.c **** 
2540:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2541:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2542:FWLIB/src/stm32f4xx_rtc.c ****   */
ARM GAS  /tmp/ccROQL82.s 			page 46


2543:FWLIB/src/stm32f4xx_rtc.c **** 
2544:FWLIB/src/stm32f4xx_rtc.c **** /**
2545:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2546:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2547:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2548:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2549:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2550:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2551:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2552:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2553:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2554:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2555:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2556:FWLIB/src/stm32f4xx_rtc.c ****   */
2557:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2558:FWLIB/src/stm32f4xx_rtc.c **** {
2559:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2560:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2561:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2562:FWLIB/src/stm32f4xx_rtc.c **** 
2563:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2565:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2566:FWLIB/src/stm32f4xx_rtc.c **** 
2567:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2568:FWLIB/src/stm32f4xx_rtc.c ****   {
2569:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2570:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2571:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2572:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2573:FWLIB/src/stm32f4xx_rtc.c ****   }
2574:FWLIB/src/stm32f4xx_rtc.c ****   else
2575:FWLIB/src/stm32f4xx_rtc.c ****   {
2576:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2577:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2578:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2579:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2580:FWLIB/src/stm32f4xx_rtc.c ****   }
2581:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2582:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2583:FWLIB/src/stm32f4xx_rtc.c **** }
2584:FWLIB/src/stm32f4xx_rtc.c **** 
2585:FWLIB/src/stm32f4xx_rtc.c **** /**
2586:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2587:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2588:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2589:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag.
2590:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2591:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2592:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2593:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2594:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2595:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2596:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2597:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2598:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2599:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_SHPF: Shift operation pending flag.
ARM GAS  /tmp/ccROQL82.s 			page 47


2600:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2601:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2602:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2603:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2604:FWLIB/src/stm32f4xx_rtc.c ****   */
2605:FWLIB/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2606:FWLIB/src/stm32f4xx_rtc.c **** {
2607:FWLIB/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
2608:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2609:FWLIB/src/stm32f4xx_rtc.c ****   
2610:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2611:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2612:FWLIB/src/stm32f4xx_rtc.c ****   
2613:FWLIB/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2614:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2615:FWLIB/src/stm32f4xx_rtc.c ****   
2616:FWLIB/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2617:FWLIB/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2618:FWLIB/src/stm32f4xx_rtc.c ****   {
2619:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2620:FWLIB/src/stm32f4xx_rtc.c ****   }
2621:FWLIB/src/stm32f4xx_rtc.c ****   else
2622:FWLIB/src/stm32f4xx_rtc.c ****   {
2623:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2624:FWLIB/src/stm32f4xx_rtc.c ****   }
2625:FWLIB/src/stm32f4xx_rtc.c ****   return bitstatus;
2626:FWLIB/src/stm32f4xx_rtc.c **** }
2627:FWLIB/src/stm32f4xx_rtc.c **** 
2628:FWLIB/src/stm32f4xx_rtc.c **** /**
2629:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2630:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2631:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2632:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2633:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2634:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2635:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2636:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2637:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2638:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2639:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2640:FWLIB/src/stm32f4xx_rtc.c ****   */
2641:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2642:FWLIB/src/stm32f4xx_rtc.c **** {
2643:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2644:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2645:FWLIB/src/stm32f4xx_rtc.c **** 
2646:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2647:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
2648:FWLIB/src/stm32f4xx_rtc.c **** }
2649:FWLIB/src/stm32f4xx_rtc.c **** 
2650:FWLIB/src/stm32f4xx_rtc.c **** /**
2651:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2652:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2653:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2654:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2655:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2656:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
ARM GAS  /tmp/ccROQL82.s 			page 48


2657:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2658:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2659:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2660:FWLIB/src/stm32f4xx_rtc.c ****   */
2661:FWLIB/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2662:FWLIB/src/stm32f4xx_rtc.c **** {
2663:FWLIB/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
2664:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2665:FWLIB/src/stm32f4xx_rtc.c ****  
2666:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2667:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2668:FWLIB/src/stm32f4xx_rtc.c ****   
2669:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2670:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2671:FWLIB/src/stm32f4xx_rtc.c ****  
2672:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2673:FWLIB/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
2674:FWLIB/src/stm32f4xx_rtc.c ****   
2675:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2676:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2677:FWLIB/src/stm32f4xx_rtc.c ****   
2678:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2679:FWLIB/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2680:FWLIB/src/stm32f4xx_rtc.c ****   {
2681:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2682:FWLIB/src/stm32f4xx_rtc.c ****   }
2683:FWLIB/src/stm32f4xx_rtc.c ****   else
2684:FWLIB/src/stm32f4xx_rtc.c ****   {
2685:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2686:FWLIB/src/stm32f4xx_rtc.c ****   }
2687:FWLIB/src/stm32f4xx_rtc.c ****   return bitstatus;
2688:FWLIB/src/stm32f4xx_rtc.c **** }
2689:FWLIB/src/stm32f4xx_rtc.c **** 
2690:FWLIB/src/stm32f4xx_rtc.c **** /**
2691:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2692:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2693:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2694:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2695:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2696:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2697:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2698:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2699:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2700:FWLIB/src/stm32f4xx_rtc.c ****   */
2701:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2702:FWLIB/src/stm32f4xx_rtc.c **** {
2703:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2704:FWLIB/src/stm32f4xx_rtc.c **** 
2705:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2706:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2707:FWLIB/src/stm32f4xx_rtc.c **** 
2708:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2709:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2710:FWLIB/src/stm32f4xx_rtc.c **** 
2711:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2712:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2713:FWLIB/src/stm32f4xx_rtc.c **** }
ARM GAS  /tmp/ccROQL82.s 			page 49


2714:FWLIB/src/stm32f4xx_rtc.c **** 
2715:FWLIB/src/stm32f4xx_rtc.c **** /**
2716:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2717:FWLIB/src/stm32f4xx_rtc.c ****   */
2718:FWLIB/src/stm32f4xx_rtc.c **** 
2719:FWLIB/src/stm32f4xx_rtc.c **** /**
2720:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2721:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2722:FWLIB/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2723:FWLIB/src/stm32f4xx_rtc.c ****   */
2724:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2725:FWLIB/src/stm32f4xx_rtc.c **** {
  25              		.loc 1 2725 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2726:FWLIB/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  31              		.loc 1 2726 0
  32 0000 0023     		movs	r3, #0
2727:FWLIB/src/stm32f4xx_rtc.c ****   
2728:FWLIB/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  33              		.loc 1 2728 0
  34 0002 03E0     		b	.L2
  35              	.LVL1:
  36              	.L3:
2729:FWLIB/src/stm32f4xx_rtc.c ****   {
2730:FWLIB/src/stm32f4xx_rtc.c ****     bcdhigh++;
  37              		.loc 1 2730 0
  38 0004 0133     		adds	r3, r3, #1
  39              	.LVL2:
  40 0006 DBB2     		uxtb	r3, r3
  41              	.LVL3:
2731:FWLIB/src/stm32f4xx_rtc.c ****     Value -= 10;
  42              		.loc 1 2731 0
  43 0008 0A38     		subs	r0, r0, #10
  44              	.LVL4:
  45 000a C0B2     		uxtb	r0, r0
  46              	.LVL5:
  47              	.L2:
2728:FWLIB/src/stm32f4xx_rtc.c ****   {
  48              		.loc 1 2728 0
  49 000c 0928     		cmp	r0, #9
  50 000e F9D8     		bhi	.L3
2732:FWLIB/src/stm32f4xx_rtc.c ****   }
2733:FWLIB/src/stm32f4xx_rtc.c ****   
2734:FWLIB/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  51              		.loc 1 2734 0
  52 0010 1B01     		lsls	r3, r3, #4
  53              	.LVL6:
  54 0012 DBB2     		uxtb	r3, r3
2735:FWLIB/src/stm32f4xx_rtc.c **** }
  55              		.loc 1 2735 0
  56 0014 1843     		orrs	r0, r0, r3
  57              	.LVL7:
  58 0016 7047     		bx	lr
ARM GAS  /tmp/ccROQL82.s 			page 50


  59              		.cfi_endproc
  60              	.LFE167:
  62              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
  63              		.align	1
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu softvfp
  69              	RTC_Bcd2ToByte:
  70              	.LFB168:
2736:FWLIB/src/stm32f4xx_rtc.c **** 
2737:FWLIB/src/stm32f4xx_rtc.c **** /**
2738:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2739:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2740:FWLIB/src/stm32f4xx_rtc.c ****   * @retval Converted word
2741:FWLIB/src/stm32f4xx_rtc.c ****   */
2742:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2743:FWLIB/src/stm32f4xx_rtc.c **** {
  71              		.loc 1 2743 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  76              	.LVL8:
2744:FWLIB/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
2745:FWLIB/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  77              		.loc 1 2745 0
  78 0000 0209     		lsrs	r2, r0, #4
  79 0002 02EB8202 		add	r2, r2, r2, lsl #2
  80 0006 5300     		lsls	r3, r2, #1
  81 0008 DBB2     		uxtb	r3, r3
  82              	.LVL9:
2746:FWLIB/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  83              		.loc 1 2746 0
  84 000a 00F00F00 		and	r0, r0, #15
  85              	.LVL10:
  86 000e 1844     		add	r0, r0, r3
2747:FWLIB/src/stm32f4xx_rtc.c **** }
  87              		.loc 1 2747 0
  88 0010 C0B2     		uxtb	r0, r0
  89 0012 7047     		bx	lr
  90              		.cfi_endproc
  91              	.LFE168:
  93              		.section	.text.RTC_StructInit,"ax",%progbits
  94              		.align	1
  95              		.global	RTC_StructInit
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
  99              		.fpu softvfp
 101              	RTC_StructInit:
 102              	.LFB114:
 504:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 103              		.loc 1 504 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccROQL82.s 			page 51


 107              		@ link register save eliminated.
 108              	.LVL11:
 506:FWLIB/src/stm32f4xx_rtc.c ****     
 109              		.loc 1 506 0
 110 0000 0023     		movs	r3, #0
 111 0002 0360     		str	r3, [r0]
 509:FWLIB/src/stm32f4xx_rtc.c **** 
 112              		.loc 1 509 0
 113 0004 7F23     		movs	r3, #127
 114 0006 4360     		str	r3, [r0, #4]
 512:FWLIB/src/stm32f4xx_rtc.c **** }
 115              		.loc 1 512 0
 116 0008 FF23     		movs	r3, #255
 117 000a 8360     		str	r3, [r0, #8]
 118 000c 7047     		bx	lr
 119              		.cfi_endproc
 120              	.LFE114:
 122              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 123              		.align	1
 124              		.global	RTC_WriteProtectionCmd
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 128              		.fpu softvfp
 130              	RTC_WriteProtectionCmd:
 131              	.LFB115:
 526:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 132              		.loc 1 526 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 137              	.LVL12:
 530:FWLIB/src/stm32f4xx_rtc.c ****   {
 138              		.loc 1 530 0
 139 0000 28B9     		cbnz	r0, .L9
 538:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 140              		.loc 1 538 0
 141 0002 054B     		ldr	r3, .L10
 142 0004 CA22     		movs	r2, #202
 143 0006 5A62     		str	r2, [r3, #36]
 539:FWLIB/src/stm32f4xx_rtc.c ****   }
 144              		.loc 1 539 0
 145 0008 5322     		movs	r2, #83
 146 000a 5A62     		str	r2, [r3, #36]
 147 000c 7047     		bx	lr
 148              	.L9:
 533:FWLIB/src/stm32f4xx_rtc.c ****   }
 149              		.loc 1 533 0
 150 000e FF22     		movs	r2, #255
 151 0010 014B     		ldr	r3, .L10
 152 0012 5A62     		str	r2, [r3, #36]
 153 0014 7047     		bx	lr
 154              	.L11:
 155 0016 00BF     		.align	2
 156              	.L10:
 157 0018 00280040 		.word	1073752064
ARM GAS  /tmp/ccROQL82.s 			page 52


 158              		.cfi_endproc
 159              	.LFE115:
 161              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 162              		.align	1
 163              		.global	RTC_EnterInitMode
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu softvfp
 169              	RTC_EnterInitMode:
 170              	.LFB116:
 553:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 171              		.loc 1 553 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 8
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 176 0000 82B0     		sub	sp, sp, #8
 177              	.LCFI0:
 178              		.cfi_def_cfa_offset 8
 554:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 179              		.loc 1 554 0
 180 0002 0023     		movs	r3, #0
 181 0004 0193     		str	r3, [sp, #4]
 182              	.LVL13:
 559:FWLIB/src/stm32f4xx_rtc.c ****   {
 183              		.loc 1 559 0
 184 0006 114B     		ldr	r3, .L20
 185 0008 DB68     		ldr	r3, [r3, #12]
 186 000a 13F0400F 		tst	r3, #64
 187 000e 19D1     		bne	.L16
 562:FWLIB/src/stm32f4xx_rtc.c ****     
 188              		.loc 1 562 0
 189 0010 4FF0FF32 		mov	r2, #-1
 190 0014 0D4B     		ldr	r3, .L20
 191 0016 DA60     		str	r2, [r3, #12]
 192              	.LVL14:
 193              	.L15:
 567:FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 194              		.loc 1 567 0 discriminator 2
 195 0018 0C4B     		ldr	r3, .L20
 196 001a DA68     		ldr	r2, [r3, #12]
 197 001c 02F04002 		and	r2, r2, #64
 198              	.LVL15:
 568:FWLIB/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 199              		.loc 1 568 0 discriminator 2
 200 0020 019B     		ldr	r3, [sp, #4]
 201 0022 0133     		adds	r3, r3, #1
 202 0024 0193     		str	r3, [sp, #4]
 569:FWLIB/src/stm32f4xx_rtc.c ****     
 203              		.loc 1 569 0 discriminator 2
 204 0026 019B     		ldr	r3, [sp, #4]
 205 0028 B3F5803F 		cmp	r3, #65536
 206 002c 01D0     		beq	.L14
 569:FWLIB/src/stm32f4xx_rtc.c ****     
 207              		.loc 1 569 0 is_stmt 0 discriminator 1
 208 002e 002A     		cmp	r2, #0
ARM GAS  /tmp/ccROQL82.s 			page 53


 209 0030 F2D0     		beq	.L15
 210              	.L14:
 571:FWLIB/src/stm32f4xx_rtc.c ****     {
 211              		.loc 1 571 0 is_stmt 1
 212 0032 064B     		ldr	r3, .L20
 213 0034 DB68     		ldr	r3, [r3, #12]
 214 0036 13F0400F 		tst	r3, #64
 215 003a 01D1     		bne	.L19
 577:FWLIB/src/stm32f4xx_rtc.c ****     }        
 216              		.loc 1 577 0
 217 003c 0020     		movs	r0, #0
 218 003e 02E0     		b	.L13
 219              	.L19:
 573:FWLIB/src/stm32f4xx_rtc.c ****     }
 220              		.loc 1 573 0
 221 0040 0120     		movs	r0, #1
 222 0042 00E0     		b	.L13
 223              	.LVL16:
 224              	.L16:
 582:FWLIB/src/stm32f4xx_rtc.c ****   } 
 225              		.loc 1 582 0
 226 0044 0120     		movs	r0, #1
 227              	.LVL17:
 228              	.L13:
 586:FWLIB/src/stm32f4xx_rtc.c **** 
 229              		.loc 1 586 0
 230 0046 02B0     		add	sp, sp, #8
 231              	.LCFI1:
 232              		.cfi_def_cfa_offset 0
 233              		@ sp needed
 234 0048 7047     		bx	lr
 235              	.L21:
 236 004a 00BF     		.align	2
 237              	.L20:
 238 004c 00280040 		.word	1073752064
 239              		.cfi_endproc
 240              	.LFE116:
 242              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 243              		.align	1
 244              		.global	RTC_ExitInitMode
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu softvfp
 250              	RTC_ExitInitMode:
 251              	.LFB117:
 598:FWLIB/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 252              		.loc 1 598 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 600:FWLIB/src/stm32f4xx_rtc.c **** }
 257              		.loc 1 600 0
 258 0000 024A     		ldr	r2, .L23
 259 0002 D368     		ldr	r3, [r2, #12]
 260 0004 23F08003 		bic	r3, r3, #128
ARM GAS  /tmp/ccROQL82.s 			page 54


 261 0008 D360     		str	r3, [r2, #12]
 262 000a 7047     		bx	lr
 263              	.L24:
 264              		.align	2
 265              	.L23:
 266 000c 00280040 		.word	1073752064
 267              		.cfi_endproc
 268              	.LFE117:
 270              		.section	.text.RTC_Init,"ax",%progbits
 271              		.align	1
 272              		.global	RTC_Init
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu softvfp
 278              	RTC_Init:
 279              	.LFB113:
 458:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 280              		.loc 1 458 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              	.LVL18:
 285 0000 10B5     		push	{r4, lr}
 286              	.LCFI2:
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 4, -8
 289              		.cfi_offset 14, -4
 290 0002 0446     		mov	r4, r0
 291              	.LVL19:
 467:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 292              		.loc 1 467 0
 293 0004 104B     		ldr	r3, .L29
 294 0006 CA22     		movs	r2, #202
 295 0008 5A62     		str	r2, [r3, #36]
 468:FWLIB/src/stm32f4xx_rtc.c **** 
 296              		.loc 1 468 0
 297 000a 5322     		movs	r2, #83
 298 000c 5A62     		str	r2, [r3, #36]
 471:FWLIB/src/stm32f4xx_rtc.c ****   {
 299              		.loc 1 471 0
 300 000e FFF7FEFF 		bl	RTC_EnterInitMode
 301              	.LVL20:
 302 0012 0346     		mov	r3, r0
 303 0014 20B9     		cbnz	r0, .L28
 304              	.LVL21:
 305              	.L26:
 492:FWLIB/src/stm32f4xx_rtc.c ****   
 306              		.loc 1 492 0
 307 0016 FF21     		movs	r1, #255
 308 0018 0B4A     		ldr	r2, .L29
 309 001a 5162     		str	r1, [r2, #36]
 495:FWLIB/src/stm32f4xx_rtc.c **** 
 310              		.loc 1 495 0
 311 001c 1846     		mov	r0, r3
 312 001e 10BD     		pop	{r4, pc}
 313              	.LVL22:
ARM GAS  /tmp/ccROQL82.s 			page 55


 314              	.L28:
 478:FWLIB/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 315              		.loc 1 478 0
 316 0020 094B     		ldr	r3, .L29
 317 0022 9A68     		ldr	r2, [r3, #8]
 318 0024 22F04002 		bic	r2, r2, #64
 319 0028 9A60     		str	r2, [r3, #8]
 480:FWLIB/src/stm32f4xx_rtc.c ****   
 320              		.loc 1 480 0
 321 002a 9A68     		ldr	r2, [r3, #8]
 322 002c 2168     		ldr	r1, [r4]
 323 002e 0A43     		orrs	r2, r2, r1
 324 0030 9A60     		str	r2, [r3, #8]
 483:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 325              		.loc 1 483 0
 326 0032 A268     		ldr	r2, [r4, #8]
 327 0034 1A61     		str	r2, [r3, #16]
 484:FWLIB/src/stm32f4xx_rtc.c **** 
 328              		.loc 1 484 0
 329 0036 1A69     		ldr	r2, [r3, #16]
 330 0038 6168     		ldr	r1, [r4, #4]
 331 003a 42EA0142 		orr	r2, r2, r1, lsl #16
 332 003e 1A61     		str	r2, [r3, #16]
 487:FWLIB/src/stm32f4xx_rtc.c **** 
 333              		.loc 1 487 0
 334 0040 FFF7FEFF 		bl	RTC_ExitInitMode
 335              	.LVL23:
 489:FWLIB/src/stm32f4xx_rtc.c ****   }
 336              		.loc 1 489 0
 337 0044 0123     		movs	r3, #1
 338 0046 E6E7     		b	.L26
 339              	.L30:
 340              		.align	2
 341              	.L29:
 342 0048 00280040 		.word	1073752064
 343              		.cfi_endproc
 344              	.LFE113:
 346              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 347              		.align	1
 348              		.global	RTC_WaitForSynchro
 349              		.syntax unified
 350              		.thumb
 351              		.thumb_func
 352              		.fpu softvfp
 354              	RTC_WaitForSynchro:
 355              	.LFB118:
 620:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 356              		.loc 1 620 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 8
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 361 0000 82B0     		sub	sp, sp, #8
 362              	.LCFI3:
 363              		.cfi_def_cfa_offset 8
 621:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 364              		.loc 1 621 0
ARM GAS  /tmp/ccROQL82.s 			page 56


 365 0002 0023     		movs	r3, #0
 366 0004 0193     		str	r3, [sp, #4]
 367              	.LVL24:
 626:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 368              		.loc 1 626 0
 369 0006 114B     		ldr	r3, .L38
 370 0008 CA22     		movs	r2, #202
 371 000a 5A62     		str	r2, [r3, #36]
 627:FWLIB/src/stm32f4xx_rtc.c ****     
 372              		.loc 1 627 0
 373 000c 5322     		movs	r2, #83
 374 000e 5A62     		str	r2, [r3, #36]
 630:FWLIB/src/stm32f4xx_rtc.c ****     
 375              		.loc 1 630 0
 376 0010 DA68     		ldr	r2, [r3, #12]
 377 0012 22F0A002 		bic	r2, r2, #160
 378 0016 DA60     		str	r2, [r3, #12]
 379              	.LVL25:
 380              	.L33:
 635:FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 381              		.loc 1 635 0 discriminator 2
 382 0018 0C4B     		ldr	r3, .L38
 383 001a DA68     		ldr	r2, [r3, #12]
 384 001c 02F02002 		and	r2, r2, #32
 385              	.LVL26:
 636:FWLIB/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 386              		.loc 1 636 0 discriminator 2
 387 0020 019B     		ldr	r3, [sp, #4]
 388 0022 0133     		adds	r3, r3, #1
 389 0024 0193     		str	r3, [sp, #4]
 637:FWLIB/src/stm32f4xx_rtc.c ****     
 390              		.loc 1 637 0 discriminator 2
 391 0026 019B     		ldr	r3, [sp, #4]
 392 0028 B3F5003F 		cmp	r3, #131072
 393 002c 01D0     		beq	.L32
 637:FWLIB/src/stm32f4xx_rtc.c ****     
 394              		.loc 1 637 0 is_stmt 0 discriminator 1
 395 002e 002A     		cmp	r2, #0
 396 0030 F2D0     		beq	.L33
 397              	.L32:
 639:FWLIB/src/stm32f4xx_rtc.c ****   {
 398              		.loc 1 639 0 is_stmt 1
 399 0032 064B     		ldr	r3, .L38
 400 0034 DB68     		ldr	r3, [r3, #12]
 401 0036 13F0200F 		tst	r3, #32
 402 003a 05D1     		bne	.L37
 645:FWLIB/src/stm32f4xx_rtc.c ****   }        
 403              		.loc 1 645 0
 404 003c 0020     		movs	r0, #0
 405              	.L34:
 406              	.LVL27:
 649:FWLIB/src/stm32f4xx_rtc.c ****     
 407              		.loc 1 649 0
 408 003e FF22     		movs	r2, #255
 409              	.LVL28:
 410 0040 024B     		ldr	r3, .L38
 411 0042 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccROQL82.s 			page 57


 652:FWLIB/src/stm32f4xx_rtc.c **** 
 412              		.loc 1 652 0
 413 0044 02B0     		add	sp, sp, #8
 414              	.LCFI4:
 415              		.cfi_remember_state
 416              		.cfi_def_cfa_offset 0
 417              		@ sp needed
 418 0046 7047     		bx	lr
 419              	.LVL29:
 420              	.L37:
 421              	.LCFI5:
 422              		.cfi_restore_state
 641:FWLIB/src/stm32f4xx_rtc.c ****   }
 423              		.loc 1 641 0
 424 0048 0120     		movs	r0, #1
 425 004a F8E7     		b	.L34
 426              	.L39:
 427              		.align	2
 428              	.L38:
 429 004c 00280040 		.word	1073752064
 430              		.cfi_endproc
 431              	.LFE118:
 433              		.section	.text.RTC_DeInit,"ax",%progbits
 434              		.align	1
 435              		.global	RTC_DeInit
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu softvfp
 441              	RTC_DeInit:
 442              	.LFB112:
 376:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 443              		.loc 1 376 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 8
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447 0000 00B5     		push	{lr}
 448              	.LCFI6:
 449              		.cfi_def_cfa_offset 4
 450              		.cfi_offset 14, -4
 451 0002 83B0     		sub	sp, sp, #12
 452              	.LCFI7:
 453              		.cfi_def_cfa_offset 16
 377:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 454              		.loc 1 377 0
 455 0004 0023     		movs	r3, #0
 456 0006 0193     		str	r3, [sp, #4]
 457              	.LVL30:
 382:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 458              		.loc 1 382 0
 459 0008 224B     		ldr	r3, .L48
 460 000a CA22     		movs	r2, #202
 461 000c 5A62     		str	r2, [r3, #36]
 383:FWLIB/src/stm32f4xx_rtc.c **** 
 462              		.loc 1 383 0
 463 000e 5322     		movs	r2, #83
 464 0010 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccROQL82.s 			page 58


 386:FWLIB/src/stm32f4xx_rtc.c ****   {
 465              		.loc 1 386 0
 466 0012 FFF7FEFF 		bl	RTC_EnterInitMode
 467              	.LVL31:
 468 0016 0346     		mov	r3, r0
 469 0018 E0B1     		cbz	r0, .L41
 393:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 470              		.loc 1 393 0
 471 001a 1E4B     		ldr	r3, .L48
 472 001c 0022     		movs	r2, #0
 473 001e 1A60     		str	r2, [r3]
 394:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 474              		.loc 1 394 0
 475 0020 42F20112 		movw	r2, #8449
 476 0024 5A60     		str	r2, [r3, #4]
 396:FWLIB/src/stm32f4xx_rtc.c ****   
 477              		.loc 1 396 0
 478 0026 9A68     		ldr	r2, [r3, #8]
 479 0028 02F00702 		and	r2, r2, #7
 480 002c 9A60     		str	r2, [r3, #8]
 481              	.LVL32:
 482              	.L43:
 401:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 483              		.loc 1 401 0 discriminator 2
 484 002e 194B     		ldr	r3, .L48
 485 0030 DA68     		ldr	r2, [r3, #12]
 486 0032 02F00402 		and	r2, r2, #4
 487              	.LVL33:
 402:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 488              		.loc 1 402 0 discriminator 2
 489 0036 019B     		ldr	r3, [sp, #4]
 490 0038 0133     		adds	r3, r3, #1
 491 003a 0193     		str	r3, [sp, #4]
 403:FWLIB/src/stm32f4xx_rtc.c ****     
 492              		.loc 1 403 0 discriminator 2
 493 003c 019B     		ldr	r3, [sp, #4]
 494 003e B3F5803F 		cmp	r3, #65536
 495 0042 01D0     		beq	.L42
 403:FWLIB/src/stm32f4xx_rtc.c ****     
 496              		.loc 1 403 0 is_stmt 0 discriminator 1
 497 0044 002A     		cmp	r2, #0
 498 0046 F2D0     		beq	.L43
 499              	.L42:
 405:FWLIB/src/stm32f4xx_rtc.c ****     {
 500              		.loc 1 405 0 is_stmt 1
 501 0048 124B     		ldr	r3, .L48
 502 004a DB68     		ldr	r3, [r3, #12]
 503 004c 13F0040F 		tst	r3, #4
 504 0050 07D1     		bne	.L47
 407:FWLIB/src/stm32f4xx_rtc.c ****     }
 505              		.loc 1 407 0
 506 0052 0023     		movs	r3, #0
 507              	.LVL34:
 508              	.L41:
 441:FWLIB/src/stm32f4xx_rtc.c ****   
 509              		.loc 1 441 0
 510 0054 FF21     		movs	r1, #255
ARM GAS  /tmp/ccROQL82.s 			page 59


 511 0056 0F4A     		ldr	r2, .L48
 512 0058 5162     		str	r1, [r2, #36]
 444:FWLIB/src/stm32f4xx_rtc.c **** 
 513              		.loc 1 444 0
 514 005a 1846     		mov	r0, r3
 515 005c 03B0     		add	sp, sp, #12
 516              	.LCFI8:
 517              		.cfi_remember_state
 518              		.cfi_def_cfa_offset 4
 519              		@ sp needed
 520 005e 5DF804FB 		ldr	pc, [sp], #4
 521              	.LVL35:
 522              	.L47:
 523              	.LCFI9:
 524              		.cfi_restore_state
 412:FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 525              		.loc 1 412 0
 526 0062 0C4B     		ldr	r3, .L48
 527 0064 9A68     		ldr	r2, [r3, #8]
 528              	.LVL36:
 529 0066 0022     		movs	r2, #0
 530 0068 9A60     		str	r2, [r3, #8]
 413:FWLIB/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 531              		.loc 1 413 0
 532 006a 4FF6FF71 		movw	r1, #65535
 533 006e 5961     		str	r1, [r3, #20]
 414:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 534              		.loc 1 414 0
 535 0070 0949     		ldr	r1, .L48+4
 536 0072 1961     		str	r1, [r3, #16]
 415:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 537              		.loc 1 415 0
 538 0074 9A61     		str	r2, [r3, #24]
 416:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 539              		.loc 1 416 0
 540 0076 DA61     		str	r2, [r3, #28]
 417:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 541              		.loc 1 417 0
 542 0078 1A62     		str	r2, [r3, #32]
 418:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 543              		.loc 1 418 0
 544 007a DA62     		str	r2, [r3, #44]
 419:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 545              		.loc 1 419 0
 546 007c DA63     		str	r2, [r3, #60]
 420:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 547              		.loc 1 420 0
 548 007e 5A64     		str	r2, [r3, #68]
 421:FWLIB/src/stm32f4xx_rtc.c ****       
 549              		.loc 1 421 0
 550 0080 9A64     		str	r2, [r3, #72]
 424:FWLIB/src/stm32f4xx_rtc.c ****       
 551              		.loc 1 424 0
 552 0082 DA60     		str	r2, [r3, #12]
 427:FWLIB/src/stm32f4xx_rtc.c ****   
 553              		.loc 1 427 0
 554 0084 1A64     		str	r2, [r3, #64]
ARM GAS  /tmp/ccROQL82.s 			page 60


 429:FWLIB/src/stm32f4xx_rtc.c ****       {
 555              		.loc 1 429 0
 556 0086 FFF7FEFF 		bl	RTC_WaitForSynchro
 557              	.LVL37:
 558 008a 0346     		mov	r3, r0
 559 008c 0028     		cmp	r0, #0
 560 008e E1D0     		beq	.L41
 435:FWLIB/src/stm32f4xx_rtc.c ****       }
 561              		.loc 1 435 0
 562 0090 0123     		movs	r3, #1
 563 0092 DFE7     		b	.L41
 564              	.L49:
 565              		.align	2
 566              	.L48:
 567 0094 00280040 		.word	1073752064
 568 0098 FF007F00 		.word	8323327
 569              		.cfi_endproc
 570              	.LFE112:
 572              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 573              		.align	1
 574              		.global	RTC_RefClockCmd
 575              		.syntax unified
 576              		.thumb
 577              		.thumb_func
 578              		.fpu softvfp
 580              	RTC_RefClockCmd:
 581              	.LFB119:
 663:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 582              		.loc 1 663 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              	.LVL38:
 587 0000 10B5     		push	{r4, lr}
 588              	.LCFI10:
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 4, -8
 591              		.cfi_offset 14, -4
 592 0002 0446     		mov	r4, r0
 593              	.LVL39:
 670:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 594              		.loc 1 670 0
 595 0004 0E4B     		ldr	r3, .L55
 596 0006 CA22     		movs	r2, #202
 597 0008 5A62     		str	r2, [r3, #36]
 671:FWLIB/src/stm32f4xx_rtc.c ****     
 598              		.loc 1 671 0
 599 000a 5322     		movs	r2, #83
 600 000c 5A62     		str	r2, [r3, #36]
 674:FWLIB/src/stm32f4xx_rtc.c ****   {
 601              		.loc 1 674 0
 602 000e FFF7FEFF 		bl	RTC_EnterInitMode
 603              	.LVL40:
 604 0012 0346     		mov	r3, r0
 605 0014 40B1     		cbz	r0, .L51
 680:FWLIB/src/stm32f4xx_rtc.c ****     {
 606              		.loc 1 680 0
ARM GAS  /tmp/ccROQL82.s 			page 61


 607 0016 64B1     		cbz	r4, .L52
 683:FWLIB/src/stm32f4xx_rtc.c ****     }
 608              		.loc 1 683 0
 609 0018 094A     		ldr	r2, .L55
 610 001a 9368     		ldr	r3, [r2, #8]
 611 001c 43F01003 		orr	r3, r3, #16
 612 0020 9360     		str	r3, [r2, #8]
 613              	.L53:
 691:FWLIB/src/stm32f4xx_rtc.c ****     
 614              		.loc 1 691 0
 615 0022 FFF7FEFF 		bl	RTC_ExitInitMode
 616              	.LVL41:
 693:FWLIB/src/stm32f4xx_rtc.c ****   }
 617              		.loc 1 693 0
 618 0026 0123     		movs	r3, #1
 619              	.LVL42:
 620              	.L51:
 697:FWLIB/src/stm32f4xx_rtc.c ****   
 621              		.loc 1 697 0
 622 0028 FF21     		movs	r1, #255
 623 002a 054A     		ldr	r2, .L55
 624 002c 5162     		str	r1, [r2, #36]
 700:FWLIB/src/stm32f4xx_rtc.c **** 
 625              		.loc 1 700 0
 626 002e 1846     		mov	r0, r3
 627 0030 10BD     		pop	{r4, pc}
 628              	.LVL43:
 629              	.L52:
 688:FWLIB/src/stm32f4xx_rtc.c ****     }
 630              		.loc 1 688 0
 631 0032 034A     		ldr	r2, .L55
 632 0034 9368     		ldr	r3, [r2, #8]
 633 0036 23F01003 		bic	r3, r3, #16
 634 003a 9360     		str	r3, [r2, #8]
 635 003c F1E7     		b	.L53
 636              	.L56:
 637 003e 00BF     		.align	2
 638              	.L55:
 639 0040 00280040 		.word	1073752064
 640              		.cfi_endproc
 641              	.LFE119:
 643              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 644              		.align	1
 645              		.global	RTC_BypassShadowCmd
 646              		.syntax unified
 647              		.thumb
 648              		.thumb_func
 649              		.fpu softvfp
 651              	RTC_BypassShadowCmd:
 652              	.LFB120:
 711:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 653              		.loc 1 711 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 658              	.LVL44:
ARM GAS  /tmp/ccROQL82.s 			page 62


 716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 659              		.loc 1 716 0
 660 0000 0A4B     		ldr	r3, .L61
 661 0002 CA22     		movs	r2, #202
 662 0004 5A62     		str	r2, [r3, #36]
 717:FWLIB/src/stm32f4xx_rtc.c ****   
 663              		.loc 1 717 0
 664 0006 5322     		movs	r2, #83
 665 0008 5A62     		str	r2, [r3, #36]
 719:FWLIB/src/stm32f4xx_rtc.c ****   {
 666              		.loc 1 719 0
 667 000a 40B9     		cbnz	r0, .L60
 727:FWLIB/src/stm32f4xx_rtc.c ****   }
 668              		.loc 1 727 0
 669 000c 074A     		ldr	r2, .L61
 670 000e 9368     		ldr	r3, [r2, #8]
 671 0010 03F0DF03 		and	r3, r3, #223
 672 0014 9360     		str	r3, [r2, #8]
 673              	.L59:
 731:FWLIB/src/stm32f4xx_rtc.c **** }
 674              		.loc 1 731 0
 675 0016 FF22     		movs	r2, #255
 676 0018 044B     		ldr	r3, .L61
 677 001a 5A62     		str	r2, [r3, #36]
 678 001c 7047     		bx	lr
 679              	.L60:
 722:FWLIB/src/stm32f4xx_rtc.c ****   }
 680              		.loc 1 722 0
 681 001e 1A46     		mov	r2, r3
 682 0020 9B68     		ldr	r3, [r3, #8]
 683 0022 43F02003 		orr	r3, r3, #32
 684 0026 9360     		str	r3, [r2, #8]
 685 0028 F5E7     		b	.L59
 686              	.L62:
 687 002a 00BF     		.align	2
 688              	.L61:
 689 002c 00280040 		.word	1073752064
 690              		.cfi_endproc
 691              	.LFE120:
 693              		.section	.text.RTC_SetTime,"ax",%progbits
 694              		.align	1
 695              		.global	RTC_SetTime
 696              		.syntax unified
 697              		.thumb
 698              		.thumb_func
 699              		.fpu softvfp
 701              	RTC_SetTime:
 702              	.LFB121:
 766:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 703              		.loc 1 766 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707              	.LVL45:
 708 0000 38B5     		push	{r3, r4, r5, lr}
 709              	.LCFI11:
 710              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccROQL82.s 			page 63


 711              		.cfi_offset 3, -16
 712              		.cfi_offset 4, -12
 713              		.cfi_offset 5, -8
 714              		.cfi_offset 14, -4
 715 0002 0D46     		mov	r5, r1
 716              	.LVL46:
 773:FWLIB/src/stm32f4xx_rtc.c ****   {
 717              		.loc 1 773 0
 718 0004 0346     		mov	r3, r0
 719 0006 F8B9     		cbnz	r0, .L64
 775:FWLIB/src/stm32f4xx_rtc.c ****     {
 720              		.loc 1 775 0
 721 0008 264A     		ldr	r2, .L74
 722 000a 9268     		ldr	r2, [r2, #8]
 723 000c 12F0400F 		tst	r2, #64
 724 0010 01D1     		bne	.L65
 782:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 725              		.loc 1 782 0
 726 0012 0022     		movs	r2, #0
 727 0014 CA70     		strb	r2, [r1, #3]
 728              	.L65:
 806:FWLIB/src/stm32f4xx_rtc.c ****   {
 729              		.loc 1 806 0
 730 0016 FBB1     		cbz	r3, .L66
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 731              		.loc 1 808 0
 732 0018 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 733              		.loc 1 809 0
 734 001a 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 735              	.LVL47:
 736 001c 0002     		lsls	r0, r0, #8
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 737              		.loc 1 808 0
 738 001e 40EA0440 		orr	r0, r0, r4, lsl #16
 810:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 739              		.loc 1 810 0
 740 0022 AC78     		ldrb	r4, [r5, #2]	@ zero_extendqisi2
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 741              		.loc 1 809 0
 742 0024 2043     		orrs	r0, r0, r4
 811:FWLIB/src/stm32f4xx_rtc.c ****   }  
 743              		.loc 1 811 0
 744 0026 EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 745              		.loc 1 808 0
 746 0028 40EA0444 		orr	r4, r0, r4, lsl #16
 747              	.LVL48:
 748              	.L67:
 822:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 749              		.loc 1 822 0
 750 002c 1D4B     		ldr	r3, .L74
 751 002e CA22     		movs	r2, #202
 752 0030 5A62     		str	r2, [r3, #36]
 823:FWLIB/src/stm32f4xx_rtc.c **** 
 753              		.loc 1 823 0
 754 0032 5322     		movs	r2, #83
ARM GAS  /tmp/ccROQL82.s 			page 64


 755 0034 5A62     		str	r2, [r3, #36]
 826:FWLIB/src/stm32f4xx_rtc.c ****   {
 756              		.loc 1 826 0
 757 0036 FFF7FEFF 		bl	RTC_EnterInitMode
 758              	.LVL49:
 759 003a 0346     		mov	r3, r0
 760 003c E8B9     		cbnz	r0, .L72
 761              	.LVL50:
 762              	.L68:
 856:FWLIB/src/stm32f4xx_rtc.c ****     
 763              		.loc 1 856 0
 764 003e FF21     		movs	r1, #255
 765 0040 184A     		ldr	r2, .L74
 766 0042 5162     		str	r1, [r2, #36]
 859:FWLIB/src/stm32f4xx_rtc.c **** 
 767              		.loc 1 859 0
 768 0044 1846     		mov	r0, r3
 769 0046 38BD     		pop	{r3, r4, r5, pc}
 770              	.LVL51:
 771              	.L64:
 790:FWLIB/src/stm32f4xx_rtc.c ****     {
 772              		.loc 1 790 0
 773 0048 164A     		ldr	r2, .L74
 774 004a 9268     		ldr	r2, [r2, #8]
 775 004c 12F0400F 		tst	r2, #64
 776 0050 E1D1     		bne	.L65
 798:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 777              		.loc 1 798 0
 778 0052 0022     		movs	r2, #0
 779 0054 CA70     		strb	r2, [r1, #3]
 780 0056 DEE7     		b	.L65
 781              	.L66:
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 782              		.loc 1 815 0
 783 0058 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 784              	.LVL52:
 785 005a FFF7FEFF 		bl	RTC_ByteToBcd2
 786              	.LVL53:
 787 005e 0404     		lsls	r4, r0, #16
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 788              		.loc 1 816 0
 789 0060 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 790 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 791              	.LVL54:
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 792              		.loc 1 815 0
 793 0066 44EA0024 		orr	r4, r4, r0, lsl #8
 817:FWLIB/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 794              		.loc 1 817 0
 795 006a A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 796 006c FFF7FEFF 		bl	RTC_ByteToBcd2
 797              	.LVL55:
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 798              		.loc 1 816 0
 799 0070 2043     		orrs	r0, r0, r4
 818:FWLIB/src/stm32f4xx_rtc.c ****   }  
 800              		.loc 1 818 0
ARM GAS  /tmp/ccROQL82.s 			page 65


 801 0072 EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 802              		.loc 1 815 0
 803 0074 40EA0444 		orr	r4, r0, r4, lsl #16
 804              	.LVL56:
 805 0078 D8E7     		b	.L67
 806              	.L72:
 833:FWLIB/src/stm32f4xx_rtc.c **** 
 807              		.loc 1 833 0
 808 007a 04F07F30 		and	r0, r4, #2139062143
 809 007e 20F0FE40 		bic	r0, r0, #2130706432
 810 0082 084C     		ldr	r4, .L74
 811              	.LVL57:
 812 0084 2060     		str	r0, [r4]
 836:FWLIB/src/stm32f4xx_rtc.c **** 
 813              		.loc 1 836 0
 814 0086 FFF7FEFF 		bl	RTC_ExitInitMode
 815              	.LVL58:
 839:FWLIB/src/stm32f4xx_rtc.c ****     {
 816              		.loc 1 839 0
 817 008a A368     		ldr	r3, [r4, #8]
 818 008c 13F0200F 		tst	r3, #32
 819 0090 01D0     		beq	.L73
 852:FWLIB/src/stm32f4xx_rtc.c ****     }
 820              		.loc 1 852 0
 821 0092 0123     		movs	r3, #1
 822 0094 D3E7     		b	.L68
 823              	.L73:
 841:FWLIB/src/stm32f4xx_rtc.c ****     {
 824              		.loc 1 841 0
 825 0096 FFF7FEFF 		bl	RTC_WaitForSynchro
 826              	.LVL59:
 827 009a 0346     		mov	r3, r0
 828 009c 0028     		cmp	r0, #0
 829 009e CED0     		beq	.L68
 847:FWLIB/src/stm32f4xx_rtc.c ****     }
 830              		.loc 1 847 0
 831 00a0 0123     		movs	r3, #1
 832 00a2 CCE7     		b	.L68
 833              	.L75:
 834              		.align	2
 835              	.L74:
 836 00a4 00280040 		.word	1073752064
 837              		.cfi_endproc
 838              	.LFE121:
 840              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 841              		.align	1
 842              		.global	RTC_TimeStructInit
 843              		.syntax unified
 844              		.thumb
 845              		.thumb_func
 846              		.fpu softvfp
 848              	RTC_TimeStructInit:
 849              	.LFB122:
 869:FWLIB/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 850              		.loc 1 869 0
 851              		.cfi_startproc
ARM GAS  /tmp/ccROQL82.s 			page 66


 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854              		@ link register save eliminated.
 855              	.LVL60:
 871:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 856              		.loc 1 871 0
 857 0000 0023     		movs	r3, #0
 858 0002 C370     		strb	r3, [r0, #3]
 872:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 859              		.loc 1 872 0
 860 0004 0370     		strb	r3, [r0]
 873:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 861              		.loc 1 873 0
 862 0006 4370     		strb	r3, [r0, #1]
 874:FWLIB/src/stm32f4xx_rtc.c **** }
 863              		.loc 1 874 0
 864 0008 8370     		strb	r3, [r0, #2]
 865 000a 7047     		bx	lr
 866              		.cfi_endproc
 867              	.LFE122:
 869              		.section	.text.RTC_GetTime,"ax",%progbits
 870              		.align	1
 871              		.global	RTC_GetTime
 872              		.syntax unified
 873              		.thumb
 874              		.thumb_func
 875              		.fpu softvfp
 877              	RTC_GetTime:
 878              	.LFB123:
 888:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 879              		.loc 1 888 0
 880              		.cfi_startproc
 881              		@ args = 0, pretend = 0, frame = 0
 882              		@ frame_needed = 0, uses_anonymous_args = 0
 883              	.LVL61:
 884 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 885              	.LCFI12:
 886              		.cfi_def_cfa_offset 24
 887              		.cfi_offset 3, -24
 888              		.cfi_offset 4, -20
 889              		.cfi_offset 5, -16
 890              		.cfi_offset 6, -12
 891              		.cfi_offset 7, -8
 892              		.cfi_offset 14, -4
 893              	.LVL62:
 895:FWLIB/src/stm32f4xx_rtc.c ****   
 894              		.loc 1 895 0
 895 0002 114B     		ldr	r3, .L80
 896 0004 1B68     		ldr	r3, [r3]
 897 0006 03F07F33 		and	r3, r3, #2139062143
 898 000a 23F0FE43 		bic	r3, r3, #2130706432
 899              	.LVL63:
 898:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 900              		.loc 1 898 0
 901 000e 1A0C     		lsrs	r2, r3, #16
 902 0010 02F03F07 		and	r7, r2, #63
 903 0014 0F70     		strb	r7, [r1]
ARM GAS  /tmp/ccROQL82.s 			page 67


 899:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 904              		.loc 1 899 0
 905 0016 C3F30626 		ubfx	r6, r3, #8, #7
 906 001a 4E70     		strb	r6, [r1, #1]
 900:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 907              		.loc 1 900 0
 908 001c 03F07F04 		and	r4, r3, #127
 909 0020 8C70     		strb	r4, [r1, #2]
 901:FWLIB/src/stm32f4xx_rtc.c **** 
 910              		.loc 1 901 0
 911 0022 02F04002 		and	r2, r2, #64
 912 0026 CA70     		strb	r2, [r1, #3]
 904:FWLIB/src/stm32f4xx_rtc.c ****   {
 913              		.loc 1 904 0
 914 0028 60B9     		cbnz	r0, .L77
 915 002a 0D46     		mov	r5, r1
 907:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 916              		.loc 1 907 0
 917 002c 3846     		mov	r0, r7
 918              	.LVL64:
 919 002e FFF7FEFF 		bl	RTC_Bcd2ToByte
 920              	.LVL65:
 921 0032 2870     		strb	r0, [r5]
 908:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 922              		.loc 1 908 0
 923 0034 3046     		mov	r0, r6
 924 0036 FFF7FEFF 		bl	RTC_Bcd2ToByte
 925              	.LVL66:
 926 003a 6870     		strb	r0, [r5, #1]
 909:FWLIB/src/stm32f4xx_rtc.c ****   }
 927              		.loc 1 909 0
 928 003c 2046     		mov	r0, r4
 929 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 930              	.LVL67:
 931 0042 A870     		strb	r0, [r5, #2]
 932              	.LVL68:
 933              	.L77:
 934 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 935              	.L81:
 936 0046 00BF     		.align	2
 937              	.L80:
 938 0048 00280040 		.word	1073752064
 939              		.cfi_endproc
 940              	.LFE123:
 942              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 943              		.align	1
 944              		.global	RTC_GetSubSecond
 945              		.syntax unified
 946              		.thumb
 947              		.thumb_func
 948              		.fpu softvfp
 950              	RTC_GetSubSecond:
 951              	.LFB124:
 921:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 952              		.loc 1 921 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccROQL82.s 			page 68


 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              		@ link register save eliminated.
 957              	.LVL69:
 925:FWLIB/src/stm32f4xx_rtc.c ****   
 958              		.loc 1 925 0
 959 0000 014B     		ldr	r3, .L83
 960 0002 986A     		ldr	r0, [r3, #40]
 961              	.LVL70:
 928:FWLIB/src/stm32f4xx_rtc.c ****   
 962              		.loc 1 928 0
 963 0004 5B68     		ldr	r3, [r3, #4]
 931:FWLIB/src/stm32f4xx_rtc.c **** 
 964              		.loc 1 931 0
 965 0006 7047     		bx	lr
 966              	.L84:
 967              		.align	2
 968              	.L83:
 969 0008 00280040 		.word	1073752064
 970              		.cfi_endproc
 971              	.LFE124:
 973              		.section	.text.RTC_SetDate,"ax",%progbits
 974              		.align	1
 975              		.global	RTC_SetDate
 976              		.syntax unified
 977              		.thumb
 978              		.thumb_func
 979              		.fpu softvfp
 981              	RTC_SetDate:
 982              	.LFB125:
 946:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 983              		.loc 1 946 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987              	.LVL71:
 988 0000 38B5     		push	{r3, r4, r5, lr}
 989              	.LCFI13:
 990              		.cfi_def_cfa_offset 16
 991              		.cfi_offset 3, -16
 992              		.cfi_offset 4, -12
 993              		.cfi_offset 5, -8
 994              		.cfi_offset 14, -4
 995 0002 0D46     		mov	r5, r1
 996              	.LVL72:
 953:FWLIB/src/stm32f4xx_rtc.c ****   {
 997              		.loc 1 953 0
 998 0004 0246     		mov	r2, r0
 999 0006 38B9     		cbnz	r0, .L86
 953:FWLIB/src/stm32f4xx_rtc.c ****   {
 1000              		.loc 1 953 0 is_stmt 0 discriminator 1
 1001 0008 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1002 000a 13F0100F 		tst	r3, #16
 1003 000e 03D0     		beq	.L86
 955:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1004              		.loc 1 955 0 is_stmt 1
 1005 0010 03F0EF03 		and	r3, r3, #239
 1006 0014 0A33     		adds	r3, r3, #10
ARM GAS  /tmp/ccROQL82.s 			page 69


 1007 0016 4B70     		strb	r3, [r1, #1]
 1008              	.L86:
 974:FWLIB/src/stm32f4xx_rtc.c ****   {
 1009              		.loc 1 974 0
 1010 0018 BAB1     		cbz	r2, .L87
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1011              		.loc 1 976 0
 1012 001a EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 977:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1013              		.loc 1 977 0
 1014 001c 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1015              	.LVL73:
 1016 001e 0002     		lsls	r0, r0, #8
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1017              		.loc 1 976 0
 1018 0020 40EA0440 		orr	r0, r0, r4, lsl #16
 978:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1019              		.loc 1 978 0
 1020 0024 AC78     		ldrb	r4, [r5, #2]	@ zero_extendqisi2
 977:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1021              		.loc 1 977 0
 1022 0026 2043     		orrs	r0, r0, r4
 979:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1023              		.loc 1 979 0
 1024 0028 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1025              		.loc 1 976 0
 1026 002a 40EA4434 		orr	r4, r0, r4, lsl #13
 1027              	.LVL74:
 1028              	.L88:
 990:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1029              		.loc 1 990 0
 1030 002e 1A4B     		ldr	r3, .L95
 1031 0030 CA22     		movs	r2, #202
 1032 0032 5A62     		str	r2, [r3, #36]
 991:FWLIB/src/stm32f4xx_rtc.c **** 
 1033              		.loc 1 991 0
 1034 0034 5322     		movs	r2, #83
 1035 0036 5A62     		str	r2, [r3, #36]
 994:FWLIB/src/stm32f4xx_rtc.c ****   {
 1036              		.loc 1 994 0
 1037 0038 FFF7FEFF 		bl	RTC_EnterInitMode
 1038              	.LVL75:
 1039 003c 0346     		mov	r3, r0
 1040 003e A8B9     		cbnz	r0, .L93
 1041              	.LVL76:
 1042              	.L89:
1024:FWLIB/src/stm32f4xx_rtc.c ****   
 1043              		.loc 1 1024 0
 1044 0040 FF21     		movs	r1, #255
 1045 0042 154A     		ldr	r2, .L95
 1046 0044 5162     		str	r1, [r2, #36]
1027:FWLIB/src/stm32f4xx_rtc.c **** 
 1047              		.loc 1 1027 0
 1048 0046 1846     		mov	r0, r3
 1049 0048 38BD     		pop	{r3, r4, r5, pc}
 1050              	.LVL77:
ARM GAS  /tmp/ccROQL82.s 			page 70


 1051              	.L87:
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1052              		.loc 1 983 0
 1053 004a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 1054              	.LVL78:
 1055 004c FFF7FEFF 		bl	RTC_ByteToBcd2
 1056              	.LVL79:
 1057 0050 0404     		lsls	r4, r0, #16
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1058              		.loc 1 984 0
 1059 0052 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1060 0054 FFF7FEFF 		bl	RTC_ByteToBcd2
 1061              	.LVL80:
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1062              		.loc 1 983 0
 1063 0058 44EA0024 		orr	r4, r4, r0, lsl #8
 985:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1064              		.loc 1 985 0
 1065 005c A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1066 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1067              	.LVL81:
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1068              		.loc 1 984 0
 1069 0062 2043     		orrs	r0, r0, r4
 986:FWLIB/src/stm32f4xx_rtc.c ****   }
 1070              		.loc 1 986 0
 1071 0064 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1072              		.loc 1 983 0
 1073 0066 40EA4434 		orr	r4, r0, r4, lsl #13
 1074              	.LVL82:
 1075 006a E0E7     		b	.L88
 1076              	.L93:
1001:FWLIB/src/stm32f4xx_rtc.c **** 
 1077              		.loc 1 1001 0
 1078 006c 24F07F40 		bic	r0, r4, #-16777216
 1079 0070 20F0C000 		bic	r0, r0, #192
 1080 0074 084C     		ldr	r4, .L95
 1081              	.LVL83:
 1082 0076 6060     		str	r0, [r4, #4]
1004:FWLIB/src/stm32f4xx_rtc.c **** 
 1083              		.loc 1 1004 0
 1084 0078 FFF7FEFF 		bl	RTC_ExitInitMode
 1085              	.LVL84:
1007:FWLIB/src/stm32f4xx_rtc.c ****     {
 1086              		.loc 1 1007 0
 1087 007c A368     		ldr	r3, [r4, #8]
 1088 007e 13F0200F 		tst	r3, #32
 1089 0082 01D0     		beq	.L94
1020:FWLIB/src/stm32f4xx_rtc.c ****     }
 1090              		.loc 1 1020 0
 1091 0084 0123     		movs	r3, #1
 1092 0086 DBE7     		b	.L89
 1093              	.L94:
1009:FWLIB/src/stm32f4xx_rtc.c ****     {
 1094              		.loc 1 1009 0
 1095 0088 FFF7FEFF 		bl	RTC_WaitForSynchro
ARM GAS  /tmp/ccROQL82.s 			page 71


 1096              	.LVL85:
 1097 008c 0346     		mov	r3, r0
 1098 008e 0028     		cmp	r0, #0
 1099 0090 D6D0     		beq	.L89
1015:FWLIB/src/stm32f4xx_rtc.c ****     }
 1100              		.loc 1 1015 0
 1101 0092 0123     		movs	r3, #1
 1102 0094 D4E7     		b	.L89
 1103              	.L96:
 1104 0096 00BF     		.align	2
 1105              	.L95:
 1106 0098 00280040 		.word	1073752064
 1107              		.cfi_endproc
 1108              	.LFE125:
 1110              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1111              		.align	1
 1112              		.global	RTC_DateStructInit
 1113              		.syntax unified
 1114              		.thumb
 1115              		.thumb_func
 1116              		.fpu softvfp
 1118              	RTC_DateStructInit:
 1119              	.LFB126:
1037:FWLIB/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
 1120              		.loc 1 1037 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124              		@ link register save eliminated.
 1125              	.LVL86:
1039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1126              		.loc 1 1039 0
 1127 0000 0123     		movs	r3, #1
 1128 0002 0370     		strb	r3, [r0]
1040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1129              		.loc 1 1040 0
 1130 0004 8370     		strb	r3, [r0, #2]
1041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1131              		.loc 1 1041 0
 1132 0006 4370     		strb	r3, [r0, #1]
1042:FWLIB/src/stm32f4xx_rtc.c **** }
 1133              		.loc 1 1042 0
 1134 0008 0023     		movs	r3, #0
 1135 000a C370     		strb	r3, [r0, #3]
 1136 000c 7047     		bx	lr
 1137              		.cfi_endproc
 1138              	.LFE126:
 1140              		.section	.text.RTC_GetDate,"ax",%progbits
 1141              		.align	1
 1142              		.global	RTC_GetDate
 1143              		.syntax unified
 1144              		.thumb
 1145              		.thumb_func
 1146              		.fpu softvfp
 1148              	RTC_GetDate:
 1149              	.LFB127:
1056:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
ARM GAS  /tmp/ccROQL82.s 			page 72


 1150              		.loc 1 1056 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 0
 1153              		@ frame_needed = 0, uses_anonymous_args = 0
 1154              	.LVL87:
 1155 0000 70B5     		push	{r4, r5, r6, lr}
 1156              	.LCFI14:
 1157              		.cfi_def_cfa_offset 16
 1158              		.cfi_offset 4, -16
 1159              		.cfi_offset 5, -12
 1160              		.cfi_offset 6, -8
 1161              		.cfi_offset 14, -4
 1162              	.LVL88:
1063:FWLIB/src/stm32f4xx_rtc.c **** 
 1163              		.loc 1 1063 0
 1164 0002 104B     		ldr	r3, .L101
 1165 0004 5B68     		ldr	r3, [r3, #4]
 1166 0006 23F07F43 		bic	r3, r3, #-16777216
 1167 000a 23F0C003 		bic	r3, r3, #192
 1168              	.LVL89:
1066:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1169              		.loc 1 1066 0
 1170 000e 1A0C     		lsrs	r2, r3, #16
 1171 0010 CA70     		strb	r2, [r1, #3]
1067:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1172              		.loc 1 1067 0
 1173 0012 C3F30426 		ubfx	r6, r3, #8, #5
 1174 0016 4E70     		strb	r6, [r1, #1]
1068:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1175              		.loc 1 1068 0
 1176 0018 03F03F05 		and	r5, r3, #63
 1177 001c 8D70     		strb	r5, [r1, #2]
1069:FWLIB/src/stm32f4xx_rtc.c **** 
 1178              		.loc 1 1069 0
 1179 001e C3F34233 		ubfx	r3, r3, #13, #3
 1180              	.LVL90:
 1181 0022 0B70     		strb	r3, [r1]
1072:FWLIB/src/stm32f4xx_rtc.c ****   {
 1182              		.loc 1 1072 0
 1183 0024 60B9     		cbnz	r0, .L98
 1184 0026 0C46     		mov	r4, r1
1075:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1185              		.loc 1 1075 0
 1186 0028 1046     		mov	r0, r2
 1187              	.LVL91:
 1188 002a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1189              	.LVL92:
 1190 002e E070     		strb	r0, [r4, #3]
1076:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1191              		.loc 1 1076 0
 1192 0030 3046     		mov	r0, r6
 1193 0032 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1194              	.LVL93:
 1195 0036 6070     		strb	r0, [r4, #1]
1077:FWLIB/src/stm32f4xx_rtc.c ****   }
 1196              		.loc 1 1077 0
 1197 0038 2846     		mov	r0, r5
ARM GAS  /tmp/ccROQL82.s 			page 73


 1198 003a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1199              	.LVL94:
 1200 003e A070     		strb	r0, [r4, #2]
 1201              	.LVL95:
 1202              	.L98:
 1203 0040 70BD     		pop	{r4, r5, r6, pc}
 1204              	.L102:
 1205 0042 00BF     		.align	2
 1206              	.L101:
 1207 0044 00280040 		.word	1073752064
 1208              		.cfi_endproc
 1209              	.LFE127:
 1211              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1212              		.align	1
 1213              		.global	RTC_SetAlarm
 1214              		.syntax unified
 1215              		.thumb
 1216              		.thumb_func
 1217              		.fpu softvfp
 1219              	RTC_SetAlarm:
 1220              	.LFB128:
1116:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1221              		.loc 1 1116 0
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 0
 1224              		@ frame_needed = 0, uses_anonymous_args = 0
 1225              	.LVL96:
 1226 0000 70B5     		push	{r4, r5, r6, lr}
 1227              	.LCFI15:
 1228              		.cfi_def_cfa_offset 16
 1229              		.cfi_offset 4, -16
 1230              		.cfi_offset 5, -12
 1231              		.cfi_offset 6, -8
 1232              		.cfi_offset 14, -4
 1233 0002 0D46     		mov	r5, r1
 1234 0004 1646     		mov	r6, r2
 1235              	.LVL97:
1125:FWLIB/src/stm32f4xx_rtc.c ****   {
 1236              		.loc 1 1125 0
 1237 0006 0346     		mov	r3, r0
 1238 0008 30BB     		cbnz	r0, .L104
1127:FWLIB/src/stm32f4xx_rtc.c ****     {
 1239              		.loc 1 1127 0
 1240 000a 254A     		ldr	r2, .L114
 1241              	.LVL98:
 1242 000c 9268     		ldr	r2, [r2, #8]
 1243 000e 12F0400F 		tst	r2, #64
 1244 0012 01D1     		bne	.L106
1134:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
 1245              		.loc 1 1134 0
 1246 0014 0022     		movs	r2, #0
 1247 0016 F270     		strb	r2, [r6, #3]
 1248              	.L106:
1179:FWLIB/src/stm32f4xx_rtc.c ****   {
 1249              		.loc 1 1179 0
 1250 0018 33B3     		cbz	r3, .L108
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
ARM GAS  /tmp/ccROQL82.s 			page 74


 1251              		.loc 1 1181 0
 1252 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1253              		.loc 1 1182 0
 1254 001c 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1255              	.LVL99:
 1256 001e 0002     		lsls	r0, r0, #8
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1257              		.loc 1 1181 0
 1258 0020 40EA0340 		orr	r0, r0, r3, lsl #16
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1259              		.loc 1 1183 0
 1260 0024 B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1261              		.loc 1 1182 0
 1262 0026 1843     		orrs	r0, r0, r3
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1263              		.loc 1 1184 0
 1264 0028 F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1265              		.loc 1 1183 0
 1266 002a 40EA0340 		orr	r0, r0, r3, lsl #16
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1267              		.loc 1 1185 0
 1268 002e 337B     		ldrb	r3, [r6, #12]	@ zero_extendqisi2
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1269              		.loc 1 1184 0
 1270 0030 40EA0360 		orr	r0, r0, r3, lsl #24
1186:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1271              		.loc 1 1186 0
 1272 0034 B368     		ldr	r3, [r6, #8]
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1273              		.loc 1 1185 0
 1274 0036 1843     		orrs	r0, r0, r3
1187:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1275              		.loc 1 1187 0
 1276 0038 7368     		ldr	r3, [r6, #4]
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1277              		.loc 1 1181 0
 1278 003a 1843     		orrs	r0, r0, r3
 1279              	.LVL100:
 1280              	.L109:
1201:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1281              		.loc 1 1201 0
 1282 003c 184B     		ldr	r3, .L114
 1283 003e CA22     		movs	r2, #202
 1284 0040 5A62     		str	r2, [r3, #36]
1202:FWLIB/src/stm32f4xx_rtc.c **** 
 1285              		.loc 1 1202 0
 1286 0042 5322     		movs	r2, #83
 1287 0044 5A62     		str	r2, [r3, #36]
1205:FWLIB/src/stm32f4xx_rtc.c ****   {
 1288              		.loc 1 1205 0
 1289 0046 B5F5807F 		cmp	r5, #256
 1290 004a 27D0     		beq	.L113
1211:FWLIB/src/stm32f4xx_rtc.c ****   }
 1291              		.loc 1 1211 0
ARM GAS  /tmp/ccROQL82.s 			page 75


 1292 004c 144B     		ldr	r3, .L114
 1293 004e 1862     		str	r0, [r3, #32]
 1294              	.L111:
1215:FWLIB/src/stm32f4xx_rtc.c **** }
 1295              		.loc 1 1215 0
 1296 0050 FF22     		movs	r2, #255
 1297 0052 134B     		ldr	r3, .L114
 1298 0054 5A62     		str	r2, [r3, #36]
 1299 0056 70BD     		pop	{r4, r5, r6, pc}
 1300              	.LVL101:
 1301              	.L104:
1151:FWLIB/src/stm32f4xx_rtc.c ****     {
 1302              		.loc 1 1151 0
 1303 0058 114A     		ldr	r2, .L114
 1304              	.LVL102:
 1305 005a 9268     		ldr	r2, [r2, #8]
 1306 005c 12F0400F 		tst	r2, #64
 1307 0060 DAD1     		bne	.L106
1159:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
 1308              		.loc 1 1159 0
 1309 0062 0022     		movs	r2, #0
 1310 0064 F270     		strb	r2, [r6, #3]
 1311 0066 D7E7     		b	.L106
 1312              	.L108:
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1313              		.loc 1 1191 0
 1314 0068 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 1315              	.LVL103:
 1316 006a FFF7FEFF 		bl	RTC_ByteToBcd2
 1317              	.LVL104:
 1318 006e 0404     		lsls	r4, r0, #16
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1319              		.loc 1 1192 0
 1320 0070 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1321 0072 FFF7FEFF 		bl	RTC_ByteToBcd2
 1322              	.LVL105:
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1323              		.loc 1 1191 0
 1324 0076 44EA0024 		orr	r4, r4, r0, lsl #8
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1325              		.loc 1 1193 0
 1326 007a B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 1327 007c FFF7FEFF 		bl	RTC_ByteToBcd2
 1328              	.LVL106:
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1329              		.loc 1 1192 0
 1330 0080 0443     		orrs	r4, r4, r0
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1331              		.loc 1 1194 0
 1332 0082 F078     		ldrb	r0, [r6, #3]	@ zero_extendqisi2
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1333              		.loc 1 1193 0
 1334 0084 44EA0044 		orr	r4, r4, r0, lsl #16
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1335              		.loc 1 1195 0
 1336 0088 307B     		ldrb	r0, [r6, #12]	@ zero_extendqisi2
 1337 008a FFF7FEFF 		bl	RTC_ByteToBcd2
ARM GAS  /tmp/ccROQL82.s 			page 76


 1338              	.LVL107:
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1339              		.loc 1 1194 0
 1340 008e 44EA0060 		orr	r0, r4, r0, lsl #24
1196:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1341              		.loc 1 1196 0
 1342 0092 B468     		ldr	r4, [r6, #8]
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1343              		.loc 1 1195 0
 1344 0094 2043     		orrs	r0, r0, r4
1197:FWLIB/src/stm32f4xx_rtc.c ****   } 
 1345              		.loc 1 1197 0
 1346 0096 7368     		ldr	r3, [r6, #4]
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1347              		.loc 1 1191 0
 1348 0098 1843     		orrs	r0, r0, r3
 1349              	.LVL108:
 1350 009a CFE7     		b	.L109
 1351              	.L113:
1207:FWLIB/src/stm32f4xx_rtc.c ****   }
 1352              		.loc 1 1207 0
 1353 009c D861     		str	r0, [r3, #28]
 1354 009e D7E7     		b	.L111
 1355              	.L115:
 1356              		.align	2
 1357              	.L114:
 1358 00a0 00280040 		.word	1073752064
 1359              		.cfi_endproc
 1360              	.LFE128:
 1362              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1363              		.align	1
 1364              		.global	RTC_AlarmStructInit
 1365              		.syntax unified
 1366              		.thumb
 1367              		.thumb_func
 1368              		.fpu softvfp
 1370              	RTC_AlarmStructInit:
 1371              	.LFB129:
1227:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
 1372              		.loc 1 1227 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 0
 1375              		@ frame_needed = 0, uses_anonymous_args = 0
 1376              		@ link register save eliminated.
 1377              	.LVL109:
1229:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1378              		.loc 1 1229 0
 1379 0000 0023     		movs	r3, #0
 1380 0002 C370     		strb	r3, [r0, #3]
1230:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1381              		.loc 1 1230 0
 1382 0004 0370     		strb	r3, [r0]
1231:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1383              		.loc 1 1231 0
 1384 0006 4370     		strb	r3, [r0, #1]
1232:FWLIB/src/stm32f4xx_rtc.c **** 
 1385              		.loc 1 1232 0
ARM GAS  /tmp/ccROQL82.s 			page 77


 1386 0008 8370     		strb	r3, [r0, #2]
1235:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1387              		.loc 1 1235 0
 1388 000a 8360     		str	r3, [r0, #8]
1236:FWLIB/src/stm32f4xx_rtc.c **** 
 1389              		.loc 1 1236 0
 1390 000c 0122     		movs	r2, #1
 1391 000e 0273     		strb	r2, [r0, #12]
1239:FWLIB/src/stm32f4xx_rtc.c **** }
 1392              		.loc 1 1239 0
 1393 0010 4360     		str	r3, [r0, #4]
 1394 0012 7047     		bx	lr
 1395              		.cfi_endproc
 1396              	.LFE129:
 1398              		.section	.text.RTC_GetAlarm,"ax",%progbits
 1399              		.align	1
 1400              		.global	RTC_GetAlarm
 1401              		.syntax unified
 1402              		.thumb
 1403              		.thumb_func
 1404              		.fpu softvfp
 1406              	RTC_GetAlarm:
 1407              	.LFB130:
1257:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1408              		.loc 1 1257 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 0
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
 1412              	.LVL110:
 1413 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1414              	.LCFI16:
 1415              		.cfi_def_cfa_offset 24
 1416              		.cfi_offset 3, -24
 1417              		.cfi_offset 4, -20
 1418              		.cfi_offset 5, -16
 1419              		.cfi_offset 6, -12
 1420              		.cfi_offset 7, -8
 1421              		.cfi_offset 14, -4
 1422              	.LVL111:
1265:FWLIB/src/stm32f4xx_rtc.c ****   {
 1423              		.loc 1 1265 0
 1424 0002 B1F5807F 		cmp	r1, #256
 1425 0006 2CD0     		beq	.L122
1271:FWLIB/src/stm32f4xx_rtc.c ****   }
 1426              		.loc 1 1271 0
 1427 0008 174B     		ldr	r3, .L123
 1428 000a 1B6A     		ldr	r3, [r3, #32]
 1429              	.LVL112:
 1430              	.L119:
1275:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1431              		.loc 1 1275 0
 1432 000c C3F30741 		ubfx	r1, r3, #16, #8
 1433              	.LVL113:
 1434 0010 01F03F0E 		and	lr, r1, #63
 1435 0014 82F800E0 		strb	lr, [r2]
1277:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1436              		.loc 1 1277 0
ARM GAS  /tmp/ccROQL82.s 			page 78


 1437 0018 C3F30626 		ubfx	r6, r3, #8, #7
 1438 001c 5670     		strb	r6, [r2, #1]
1279:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
 1439              		.loc 1 1279 0
 1440 001e 03F07F05 		and	r5, r3, #127
 1441 0022 9570     		strb	r5, [r2, #2]
1281:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1442              		.loc 1 1281 0
 1443 0024 01F04001 		and	r1, r1, #64
 1444 0028 D170     		strb	r1, [r2, #3]
1282:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1445              		.loc 1 1282 0
 1446 002a C3F30567 		ubfx	r7, r3, #24, #6
 1447 002e 1773     		strb	r7, [r2, #12]
1283:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1448              		.loc 1 1283 0
 1449 0030 03F08041 		and	r1, r3, #1073741824
 1450 0034 9160     		str	r1, [r2, #8]
1284:FWLIB/src/stm32f4xx_rtc.c **** 
 1451              		.loc 1 1284 0
 1452 0036 03F08033 		and	r3, r3, #-2139062144
 1453              	.LVL114:
 1454 003a 5360     		str	r3, [r2, #4]
1286:FWLIB/src/stm32f4xx_rtc.c ****   {
 1455              		.loc 1 1286 0
 1456 003c 80B9     		cbnz	r0, .L117
 1457 003e 1446     		mov	r4, r2
1288:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1458              		.loc 1 1288 0
 1459 0040 7046     		mov	r0, lr
 1460              	.LVL115:
 1461 0042 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1462              	.LVL116:
 1463 0046 2070     		strb	r0, [r4]
1290:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1464              		.loc 1 1290 0
 1465 0048 3046     		mov	r0, r6
 1466 004a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1467              	.LVL117:
 1468 004e 6070     		strb	r0, [r4, #1]
1292:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1469              		.loc 1 1292 0
 1470 0050 2846     		mov	r0, r5
 1471 0052 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1472              	.LVL118:
 1473 0056 A070     		strb	r0, [r4, #2]
1294:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1474              		.loc 1 1294 0
 1475 0058 3846     		mov	r0, r7
 1476 005a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1477              	.LVL119:
 1478 005e 2073     		strb	r0, [r4, #12]
 1479              	.LVL120:
 1480              	.L117:
 1481 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1482              	.LVL121:
 1483              	.L122:
ARM GAS  /tmp/ccROQL82.s 			page 79


1267:FWLIB/src/stm32f4xx_rtc.c ****   }
 1484              		.loc 1 1267 0
 1485 0062 014B     		ldr	r3, .L123
 1486 0064 DB69     		ldr	r3, [r3, #28]
 1487              	.LVL122:
 1488 0066 D1E7     		b	.L119
 1489              	.L124:
 1490              		.align	2
 1491              	.L123:
 1492 0068 00280040 		.word	1073752064
 1493              		.cfi_endproc
 1494              	.LFE130:
 1496              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1497              		.align	1
 1498              		.global	RTC_AlarmCmd
 1499              		.syntax unified
 1500              		.thumb
 1501              		.thumb_func
 1502              		.fpu softvfp
 1504              	RTC_AlarmCmd:
 1505              	.LFB131:
1311:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1506              		.loc 1 1311 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 8
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              		@ link register save eliminated.
 1511              	.LVL123:
 1512 0000 82B0     		sub	sp, sp, #8
 1513              	.LCFI17:
 1514              		.cfi_def_cfa_offset 8
1312:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1515              		.loc 1 1312 0
 1516 0002 0023     		movs	r3, #0
 1517 0004 0193     		str	r3, [sp, #4]
 1518              	.LVL124:
1321:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1519              		.loc 1 1321 0
 1520 0006 154B     		ldr	r3, .L134
 1521 0008 CA22     		movs	r2, #202
 1522 000a 5A62     		str	r2, [r3, #36]
1322:FWLIB/src/stm32f4xx_rtc.c **** 
 1523              		.loc 1 1322 0
 1524 000c 5322     		movs	r2, #83
 1525 000e 5A62     		str	r2, [r3, #36]
1325:FWLIB/src/stm32f4xx_rtc.c ****   {
 1526              		.loc 1 1325 0
 1527 0010 B9B9     		cbnz	r1, .L132
1334:FWLIB/src/stm32f4xx_rtc.c ****    
 1528              		.loc 1 1334 0
 1529 0012 124A     		ldr	r2, .L134
 1530 0014 9368     		ldr	r3, [r2, #8]
 1531 0016 23EA0003 		bic	r3, r3, r0
 1532 001a 9360     		str	r3, [r2, #8]
 1533              	.LVL125:
 1534              	.L129:
1339:FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
ARM GAS  /tmp/ccROQL82.s 			page 80


 1535              		.loc 1 1339 0 discriminator 2
 1536 001c 0F4B     		ldr	r3, .L134
 1537 001e DA68     		ldr	r2, [r3, #12]
 1538 0020 010A     		lsrs	r1, r0, #8
 1539 0022 0A40     		ands	r2, r2, r1
 1540              	.LVL126:
1340:FWLIB/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1541              		.loc 1 1340 0 discriminator 2
 1542 0024 019B     		ldr	r3, [sp, #4]
 1543 0026 0133     		adds	r3, r3, #1
 1544 0028 0193     		str	r3, [sp, #4]
1341:FWLIB/src/stm32f4xx_rtc.c ****     
 1545              		.loc 1 1341 0 discriminator 2
 1546 002a 019B     		ldr	r3, [sp, #4]
 1547 002c B3F5803F 		cmp	r3, #65536
 1548 0030 01D0     		beq	.L128
1341:FWLIB/src/stm32f4xx_rtc.c ****     
 1549              		.loc 1 1341 0 is_stmt 0 discriminator 1
 1550 0032 002A     		cmp	r2, #0
 1551 0034 F2D0     		beq	.L129
 1552              	.L128:
1343:FWLIB/src/stm32f4xx_rtc.c ****     {
 1553              		.loc 1 1343 0 is_stmt 1
 1554 0036 094B     		ldr	r3, .L134
 1555 0038 DB68     		ldr	r3, [r3, #12]
 1556 003a 1942     		tst	r1, r3
 1557 003c 0BD0     		beq	.L133
1349:FWLIB/src/stm32f4xx_rtc.c ****     }        
 1558              		.loc 1 1349 0
 1559 003e 0120     		movs	r0, #1
 1560              	.LVL127:
 1561 0040 04E0     		b	.L127
 1562              	.LVL128:
 1563              	.L132:
1327:FWLIB/src/stm32f4xx_rtc.c **** 
 1564              		.loc 1 1327 0
 1565 0042 1A46     		mov	r2, r3
 1566 0044 9B68     		ldr	r3, [r3, #8]
 1567 0046 1843     		orrs	r0, r0, r3
 1568              	.LVL129:
 1569 0048 9060     		str	r0, [r2, #8]
 1570              	.LVL130:
1329:FWLIB/src/stm32f4xx_rtc.c ****   }
 1571              		.loc 1 1329 0
 1572 004a 0120     		movs	r0, #1
 1573              	.LVL131:
 1574              	.L127:
1354:FWLIB/src/stm32f4xx_rtc.c ****   
 1575              		.loc 1 1354 0
 1576 004c FF22     		movs	r2, #255
 1577 004e 034B     		ldr	r3, .L134
 1578 0050 5A62     		str	r2, [r3, #36]
1357:FWLIB/src/stm32f4xx_rtc.c **** 
 1579              		.loc 1 1357 0
 1580 0052 02B0     		add	sp, sp, #8
 1581              	.LCFI18:
 1582              		.cfi_remember_state
ARM GAS  /tmp/ccROQL82.s 			page 81


 1583              		.cfi_def_cfa_offset 0
 1584              		@ sp needed
 1585 0054 7047     		bx	lr
 1586              	.LVL132:
 1587              	.L133:
 1588              	.LCFI19:
 1589              		.cfi_restore_state
1345:FWLIB/src/stm32f4xx_rtc.c ****     } 
 1590              		.loc 1 1345 0
 1591 0056 0020     		movs	r0, #0
 1592              	.LVL133:
 1593 0058 F8E7     		b	.L127
 1594              	.L135:
 1595 005a 00BF     		.align	2
 1596              	.L134:
 1597 005c 00280040 		.word	1073752064
 1598              		.cfi_endproc
 1599              	.LFE131:
 1601              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 1602              		.align	1
 1603              		.global	RTC_AlarmSubSecondConfig
 1604              		.syntax unified
 1605              		.thumb
 1606              		.thumb_func
 1607              		.fpu softvfp
 1609              	RTC_AlarmSubSecondConfig:
 1610              	.LFB132:
1405:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1611              		.loc 1 1405 0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 0
 1614              		@ frame_needed = 0, uses_anonymous_args = 0
 1615              		@ link register save eliminated.
 1616              	.LVL134:
 1617 0000 10B4     		push	{r4}
 1618              	.LCFI20:
 1619              		.cfi_def_cfa_offset 4
 1620              		.cfi_offset 4, -4
 1621              	.LVL135:
1414:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1622              		.loc 1 1414 0
 1623 0002 094B     		ldr	r3, .L141
 1624 0004 CA24     		movs	r4, #202
 1625 0006 5C62     		str	r4, [r3, #36]
1415:FWLIB/src/stm32f4xx_rtc.c ****   
 1626              		.loc 1 1415 0
 1627 0008 5324     		movs	r4, #83
 1628 000a 5C62     		str	r4, [r3, #36]
1418:FWLIB/src/stm32f4xx_rtc.c ****   
 1629              		.loc 1 1418 0
 1630 000c 0A43     		orrs	r2, r2, r1
 1631              	.LVL136:
1420:FWLIB/src/stm32f4xx_rtc.c ****   {
 1632              		.loc 1 1420 0
 1633 000e B0F5807F 		cmp	r0, #256
 1634 0012 06D0     		beq	.L140
1428:FWLIB/src/stm32f4xx_rtc.c ****   }
ARM GAS  /tmp/ccROQL82.s 			page 82


 1635              		.loc 1 1428 0
 1636 0014 044B     		ldr	r3, .L141
 1637 0016 9A64     		str	r2, [r3, #72]
 1638              	.L138:
1432:FWLIB/src/stm32f4xx_rtc.c **** 
 1639              		.loc 1 1432 0
 1640 0018 FF22     		movs	r2, #255
 1641              	.LVL137:
 1642 001a 034B     		ldr	r3, .L141
 1643 001c 5A62     		str	r2, [r3, #36]
1434:FWLIB/src/stm32f4xx_rtc.c **** 
 1644              		.loc 1 1434 0
 1645 001e 10BC     		pop	{r4}
 1646              	.LCFI21:
 1647              		.cfi_remember_state
 1648              		.cfi_restore 4
 1649              		.cfi_def_cfa_offset 0
 1650 0020 7047     		bx	lr
 1651              	.LVL138:
 1652              	.L140:
 1653              	.LCFI22:
 1654              		.cfi_restore_state
1423:FWLIB/src/stm32f4xx_rtc.c ****   }
 1655              		.loc 1 1423 0
 1656 0022 5A64     		str	r2, [r3, #68]
 1657 0024 F8E7     		b	.L138
 1658              	.L142:
 1659 0026 00BF     		.align	2
 1660              	.L141:
 1661 0028 00280040 		.word	1073752064
 1662              		.cfi_endproc
 1663              	.LFE132:
 1665              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 1666              		.align	1
 1667              		.global	RTC_GetAlarmSubSecond
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1671              		.fpu softvfp
 1673              	RTC_GetAlarmSubSecond:
 1674              	.LFB133:
1446:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1675              		.loc 1 1446 0
 1676              		.cfi_startproc
 1677              		@ args = 0, pretend = 0, frame = 0
 1678              		@ frame_needed = 0, uses_anonymous_args = 0
 1679              		@ link register save eliminated.
 1680              	.LVL139:
1450:FWLIB/src/stm32f4xx_rtc.c ****   {
 1681              		.loc 1 1450 0
 1682 0000 B0F5807F 		cmp	r0, #256
 1683 0004 04D0     		beq	.L146
1456:FWLIB/src/stm32f4xx_rtc.c ****   } 
 1684              		.loc 1 1456 0
 1685 0006 054B     		ldr	r3, .L147
 1686 0008 986C     		ldr	r0, [r3, #72]
 1687              	.LVL140:
ARM GAS  /tmp/ccROQL82.s 			page 83


 1688 000a C0F30E00 		ubfx	r0, r0, #0, #15
 1689              	.LVL141:
1460:FWLIB/src/stm32f4xx_rtc.c **** 
 1690              		.loc 1 1460 0
 1691 000e 7047     		bx	lr
 1692              	.LVL142:
 1693              	.L146:
1452:FWLIB/src/stm32f4xx_rtc.c ****   }
 1694              		.loc 1 1452 0
 1695 0010 024B     		ldr	r3, .L147
 1696 0012 586C     		ldr	r0, [r3, #68]
 1697              	.LVL143:
 1698 0014 C0F30E00 		ubfx	r0, r0, #0, #15
 1699              	.LVL144:
 1700 0018 7047     		bx	lr
 1701              	.L148:
 1702 001a 00BF     		.align	2
 1703              	.L147:
 1704 001c 00280040 		.word	1073752064
 1705              		.cfi_endproc
 1706              	.LFE133:
 1708              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 1709              		.align	1
 1710              		.global	RTC_WakeUpClockConfig
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1714              		.fpu softvfp
 1716              	RTC_WakeUpClockConfig:
 1717              	.LFB134:
1495:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1718              		.loc 1 1495 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 0
 1721              		@ frame_needed = 0, uses_anonymous_args = 0
 1722              		@ link register save eliminated.
 1723              	.LVL145:
1500:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1724              		.loc 1 1500 0
 1725 0000 074B     		ldr	r3, .L150
 1726 0002 CA22     		movs	r2, #202
 1727 0004 5A62     		str	r2, [r3, #36]
1501:FWLIB/src/stm32f4xx_rtc.c **** 
 1728              		.loc 1 1501 0
 1729 0006 5322     		movs	r2, #83
 1730 0008 5A62     		str	r2, [r3, #36]
1504:FWLIB/src/stm32f4xx_rtc.c **** 
 1731              		.loc 1 1504 0
 1732 000a 9A68     		ldr	r2, [r3, #8]
 1733 000c 22F00702 		bic	r2, r2, #7
 1734 0010 9A60     		str	r2, [r3, #8]
1507:FWLIB/src/stm32f4xx_rtc.c ****   
 1735              		.loc 1 1507 0
 1736 0012 9A68     		ldr	r2, [r3, #8]
 1737 0014 1043     		orrs	r0, r0, r2
 1738              	.LVL146:
 1739 0016 9860     		str	r0, [r3, #8]
ARM GAS  /tmp/ccROQL82.s 			page 84


1510:FWLIB/src/stm32f4xx_rtc.c **** }
 1740              		.loc 1 1510 0
 1741 0018 FF22     		movs	r2, #255
 1742 001a 5A62     		str	r2, [r3, #36]
 1743 001c 7047     		bx	lr
 1744              	.L151:
 1745 001e 00BF     		.align	2
 1746              	.L150:
 1747 0020 00280040 		.word	1073752064
 1748              		.cfi_endproc
 1749              	.LFE134:
 1751              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 1752              		.align	1
 1753              		.global	RTC_SetWakeUpCounter
 1754              		.syntax unified
 1755              		.thumb
 1756              		.thumb_func
 1757              		.fpu softvfp
 1759              	RTC_SetWakeUpCounter:
 1760              	.LFB135:
1522:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1761              		.loc 1 1522 0
 1762              		.cfi_startproc
 1763              		@ args = 0, pretend = 0, frame = 0
 1764              		@ frame_needed = 0, uses_anonymous_args = 0
 1765              		@ link register save eliminated.
 1766              	.LVL147:
1527:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1767              		.loc 1 1527 0
 1768 0000 044B     		ldr	r3, .L153
 1769 0002 CA22     		movs	r2, #202
 1770 0004 5A62     		str	r2, [r3, #36]
1528:FWLIB/src/stm32f4xx_rtc.c ****   
 1771              		.loc 1 1528 0
 1772 0006 5322     		movs	r2, #83
 1773 0008 5A62     		str	r2, [r3, #36]
1531:FWLIB/src/stm32f4xx_rtc.c ****   
 1774              		.loc 1 1531 0
 1775 000a 5861     		str	r0, [r3, #20]
1534:FWLIB/src/stm32f4xx_rtc.c **** }
 1776              		.loc 1 1534 0
 1777 000c FF22     		movs	r2, #255
 1778 000e 5A62     		str	r2, [r3, #36]
 1779 0010 7047     		bx	lr
 1780              	.L154:
 1781 0012 00BF     		.align	2
 1782              	.L153:
 1783 0014 00280040 		.word	1073752064
 1784              		.cfi_endproc
 1785              	.LFE135:
 1787              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 1788              		.align	1
 1789              		.global	RTC_GetWakeUpCounter
 1790              		.syntax unified
 1791              		.thumb
 1792              		.thumb_func
 1793              		.fpu softvfp
ARM GAS  /tmp/ccROQL82.s 			page 85


 1795              	RTC_GetWakeUpCounter:
 1796              	.LFB136:
1543:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the counter value */
 1797              		.loc 1 1543 0
 1798              		.cfi_startproc
 1799              		@ args = 0, pretend = 0, frame = 0
 1800              		@ frame_needed = 0, uses_anonymous_args = 0
 1801              		@ link register save eliminated.
1545:FWLIB/src/stm32f4xx_rtc.c **** }
 1802              		.loc 1 1545 0
 1803 0000 014B     		ldr	r3, .L156
 1804 0002 5869     		ldr	r0, [r3, #20]
1546:FWLIB/src/stm32f4xx_rtc.c **** 
 1805              		.loc 1 1546 0
 1806 0004 80B2     		uxth	r0, r0
 1807 0006 7047     		bx	lr
 1808              	.L157:
 1809              		.align	2
 1810              	.L156:
 1811 0008 00280040 		.word	1073752064
 1812              		.cfi_endproc
 1813              	.LFE136:
 1815              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 1816              		.align	1
 1817              		.global	RTC_WakeUpCmd
 1818              		.syntax unified
 1819              		.thumb
 1820              		.thumb_func
 1821              		.fpu softvfp
 1823              	RTC_WakeUpCmd:
 1824              	.LFB137:
1555:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 1825              		.loc 1 1555 0
 1826              		.cfi_startproc
 1827              		@ args = 0, pretend = 0, frame = 8
 1828              		@ frame_needed = 0, uses_anonymous_args = 0
 1829              		@ link register save eliminated.
 1830              	.LVL148:
 1831 0000 82B0     		sub	sp, sp, #8
 1832              	.LCFI23:
 1833              		.cfi_def_cfa_offset 8
1556:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 1834              		.loc 1 1556 0
 1835 0002 0023     		movs	r3, #0
 1836 0004 0193     		str	r3, [sp, #4]
 1837              	.LVL149:
1564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1838              		.loc 1 1564 0
 1839 0006 164B     		ldr	r3, .L167
 1840 0008 CA22     		movs	r2, #202
 1841 000a 5A62     		str	r2, [r3, #36]
1565:FWLIB/src/stm32f4xx_rtc.c **** 
 1842              		.loc 1 1565 0
 1843 000c 5322     		movs	r2, #83
 1844 000e 5A62     		str	r2, [r3, #36]
1567:FWLIB/src/stm32f4xx_rtc.c ****   {
 1845              		.loc 1 1567 0
ARM GAS  /tmp/ccROQL82.s 			page 86


 1846 0010 C0B9     		cbnz	r0, .L165
1576:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 1847              		.loc 1 1576 0
 1848 0012 134A     		ldr	r2, .L167
 1849 0014 9368     		ldr	r3, [r2, #8]
 1850 0016 23F48063 		bic	r3, r3, #1024
 1851 001a 9360     		str	r3, [r2, #8]
 1852              	.LVL150:
 1853              	.L162:
1580:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 1854              		.loc 1 1580 0 discriminator 2
 1855 001c 104B     		ldr	r3, .L167
 1856 001e DA68     		ldr	r2, [r3, #12]
 1857 0020 02F00402 		and	r2, r2, #4
 1858              	.LVL151:
1581:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1859              		.loc 1 1581 0 discriminator 2
 1860 0024 019B     		ldr	r3, [sp, #4]
 1861 0026 0133     		adds	r3, r3, #1
 1862 0028 0193     		str	r3, [sp, #4]
1582:FWLIB/src/stm32f4xx_rtc.c ****     
 1863              		.loc 1 1582 0 discriminator 2
 1864 002a 019B     		ldr	r3, [sp, #4]
 1865 002c B3F5803F 		cmp	r3, #65536
 1866 0030 01D0     		beq	.L161
1582:FWLIB/src/stm32f4xx_rtc.c ****     
 1867              		.loc 1 1582 0 is_stmt 0 discriminator 1
 1868 0032 002A     		cmp	r2, #0
 1869 0034 F2D0     		beq	.L162
 1870              	.L161:
1584:FWLIB/src/stm32f4xx_rtc.c ****     {
 1871              		.loc 1 1584 0 is_stmt 1
 1872 0036 0A4B     		ldr	r3, .L167
 1873 0038 DB68     		ldr	r3, [r3, #12]
 1874 003a 13F0040F 		tst	r3, #4
 1875 003e 0CD0     		beq	.L166
1590:FWLIB/src/stm32f4xx_rtc.c ****     }    
 1876              		.loc 1 1590 0
 1877 0040 0120     		movs	r0, #1
 1878              	.LVL152:
 1879 0042 05E0     		b	.L160
 1880              	.LVL153:
 1881              	.L165:
1570:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1882              		.loc 1 1570 0
 1883 0044 1A46     		mov	r2, r3
 1884 0046 9B68     		ldr	r3, [r3, #8]
 1885 0048 43F48063 		orr	r3, r3, #1024
 1886 004c 9360     		str	r3, [r2, #8]
 1887              	.LVL154:
1571:FWLIB/src/stm32f4xx_rtc.c ****   }
 1888              		.loc 1 1571 0
 1889 004e 0120     		movs	r0, #1
 1890              	.LVL155:
 1891              	.L160:
1595:FWLIB/src/stm32f4xx_rtc.c ****   
 1892              		.loc 1 1595 0
ARM GAS  /tmp/ccROQL82.s 			page 87


 1893 0050 FF22     		movs	r2, #255
 1894 0052 034B     		ldr	r3, .L167
 1895 0054 5A62     		str	r2, [r3, #36]
1598:FWLIB/src/stm32f4xx_rtc.c **** 
 1896              		.loc 1 1598 0
 1897 0056 02B0     		add	sp, sp, #8
 1898              	.LCFI24:
 1899              		.cfi_remember_state
 1900              		.cfi_def_cfa_offset 0
 1901              		@ sp needed
 1902 0058 7047     		bx	lr
 1903              	.LVL156:
 1904              	.L166:
 1905              	.LCFI25:
 1906              		.cfi_restore_state
1586:FWLIB/src/stm32f4xx_rtc.c ****     }
 1907              		.loc 1 1586 0
 1908 005a 0020     		movs	r0, #0
 1909              	.LVL157:
 1910 005c F8E7     		b	.L160
 1911              	.L168:
 1912 005e 00BF     		.align	2
 1913              	.L167:
 1914 0060 00280040 		.word	1073752064
 1915              		.cfi_endproc
 1916              	.LFE137:
 1918              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 1919              		.align	1
 1920              		.global	RTC_DayLightSavingConfig
 1921              		.syntax unified
 1922              		.thumb
 1923              		.thumb_func
 1924              		.fpu softvfp
 1926              	RTC_DayLightSavingConfig:
 1927              	.LFB138:
1632:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1928              		.loc 1 1632 0
 1929              		.cfi_startproc
 1930              		@ args = 0, pretend = 0, frame = 0
 1931              		@ frame_needed = 0, uses_anonymous_args = 0
 1932              		@ link register save eliminated.
 1933              	.LVL158:
1638:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1934              		.loc 1 1638 0
 1935 0000 074B     		ldr	r3, .L170
 1936 0002 CA22     		movs	r2, #202
 1937 0004 5A62     		str	r2, [r3, #36]
1639:FWLIB/src/stm32f4xx_rtc.c **** 
 1938              		.loc 1 1639 0
 1939 0006 5322     		movs	r2, #83
 1940 0008 5A62     		str	r2, [r3, #36]
1642:FWLIB/src/stm32f4xx_rtc.c **** 
 1941              		.loc 1 1642 0
 1942 000a 9A68     		ldr	r2, [r3, #8]
 1943 000c 22F48022 		bic	r2, r2, #262144
 1944 0010 9A60     		str	r2, [r3, #8]
1645:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccROQL82.s 			page 88


 1945              		.loc 1 1645 0
 1946 0012 9A68     		ldr	r2, [r3, #8]
 1947 0014 0143     		orrs	r1, r1, r0
 1948              	.LVL159:
 1949 0016 0A43     		orrs	r2, r2, r1
 1950 0018 9A60     		str	r2, [r3, #8]
1648:FWLIB/src/stm32f4xx_rtc.c **** }
 1951              		.loc 1 1648 0
 1952 001a FF22     		movs	r2, #255
 1953 001c 5A62     		str	r2, [r3, #36]
 1954 001e 7047     		bx	lr
 1955              	.L171:
 1956              		.align	2
 1957              	.L170:
 1958 0020 00280040 		.word	1073752064
 1959              		.cfi_endproc
 1960              	.LFE138:
 1962              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 1963              		.align	1
 1964              		.global	RTC_GetStoreOperation
 1965              		.syntax unified
 1966              		.thumb
 1967              		.thumb_func
 1968              		.fpu softvfp
 1970              	RTC_GetStoreOperation:
 1971              	.LFB139:
1659:FWLIB/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 1972              		.loc 1 1659 0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 0
 1975              		@ frame_needed = 0, uses_anonymous_args = 0
 1976              		@ link register save eliminated.
1660:FWLIB/src/stm32f4xx_rtc.c **** }
 1977              		.loc 1 1660 0
 1978 0000 024B     		ldr	r3, .L173
 1979 0002 9868     		ldr	r0, [r3, #8]
1661:FWLIB/src/stm32f4xx_rtc.c **** 
 1980              		.loc 1 1661 0
 1981 0004 00F48020 		and	r0, r0, #262144
 1982 0008 7047     		bx	lr
 1983              	.L174:
 1984 000a 00BF     		.align	2
 1985              	.L173:
 1986 000c 00280040 		.word	1073752064
 1987              		.cfi_endproc
 1988              	.LFE139:
 1990              		.section	.text.RTC_OutputConfig,"ax",%progbits
 1991              		.align	1
 1992              		.global	RTC_OutputConfig
 1993              		.syntax unified
 1994              		.thumb
 1995              		.thumb_func
 1996              		.fpu softvfp
 1998              	RTC_OutputConfig:
 1999              	.LFB140:
1698:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2000              		.loc 1 1698 0
ARM GAS  /tmp/ccROQL82.s 			page 89


 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 0
 2003              		@ frame_needed = 0, uses_anonymous_args = 0
 2004              		@ link register save eliminated.
 2005              	.LVL160:
1704:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2006              		.loc 1 1704 0
 2007 0000 074B     		ldr	r3, .L176
 2008 0002 CA22     		movs	r2, #202
 2009 0004 5A62     		str	r2, [r3, #36]
1705:FWLIB/src/stm32f4xx_rtc.c **** 
 2010              		.loc 1 1705 0
 2011 0006 5322     		movs	r2, #83
 2012 0008 5A62     		str	r2, [r3, #36]
1708:FWLIB/src/stm32f4xx_rtc.c **** 
 2013              		.loc 1 1708 0
 2014 000a 9A68     		ldr	r2, [r3, #8]
 2015 000c 22F4E002 		bic	r2, r2, #7340032
 2016 0010 9A60     		str	r2, [r3, #8]
1711:FWLIB/src/stm32f4xx_rtc.c **** 
 2017              		.loc 1 1711 0
 2018 0012 9A68     		ldr	r2, [r3, #8]
 2019 0014 0143     		orrs	r1, r1, r0
 2020              	.LVL161:
 2021 0016 0A43     		orrs	r2, r2, r1
 2022 0018 9A60     		str	r2, [r3, #8]
1714:FWLIB/src/stm32f4xx_rtc.c **** }
 2023              		.loc 1 1714 0
 2024 001a FF22     		movs	r2, #255
 2025 001c 5A62     		str	r2, [r3, #36]
 2026 001e 7047     		bx	lr
 2027              	.L177:
 2028              		.align	2
 2029              	.L176:
 2030 0020 00280040 		.word	1073752064
 2031              		.cfi_endproc
 2032              	.LFE140:
 2034              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2035              		.align	1
 2036              		.global	RTC_CoarseCalibConfig
 2037              		.syntax unified
 2038              		.thumb
 2039              		.thumb_func
 2040              		.fpu softvfp
 2042              	RTC_CoarseCalibConfig:
 2043              	.LFB141:
1752:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2044              		.loc 1 1752 0
 2045              		.cfi_startproc
 2046              		@ args = 0, pretend = 0, frame = 0
 2047              		@ frame_needed = 0, uses_anonymous_args = 0
 2048              	.LVL162:
 2049 0000 38B5     		push	{r3, r4, r5, lr}
 2050              	.LCFI26:
 2051              		.cfi_def_cfa_offset 16
 2052              		.cfi_offset 3, -16
 2053              		.cfi_offset 4, -12
ARM GAS  /tmp/ccROQL82.s 			page 90


 2054              		.cfi_offset 5, -8
 2055              		.cfi_offset 14, -4
 2056 0002 0446     		mov	r4, r0
 2057 0004 0D46     		mov	r5, r1
 2058              	.LVL163:
1760:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2059              		.loc 1 1760 0
 2060 0006 0A4B     		ldr	r3, .L182
 2061 0008 CA22     		movs	r2, #202
 2062 000a 5A62     		str	r2, [r3, #36]
1761:FWLIB/src/stm32f4xx_rtc.c **** 
 2063              		.loc 1 1761 0
 2064 000c 5322     		movs	r2, #83
 2065 000e 5A62     		str	r2, [r3, #36]
1764:FWLIB/src/stm32f4xx_rtc.c ****   {
 2066              		.loc 1 1764 0
 2067 0010 FFF7FEFF 		bl	RTC_EnterInitMode
 2068              	.LVL164:
 2069 0014 0346     		mov	r3, r0
 2070 0016 20B9     		cbnz	r0, .L181
 2071              	.LVL165:
 2072              	.L179:
1779:FWLIB/src/stm32f4xx_rtc.c ****   
 2073              		.loc 1 1779 0
 2074 0018 FF21     		movs	r1, #255
 2075 001a 054A     		ldr	r2, .L182
 2076 001c 5162     		str	r1, [r2, #36]
1782:FWLIB/src/stm32f4xx_rtc.c **** 
 2077              		.loc 1 1782 0
 2078 001e 1846     		mov	r0, r3
 2079 0020 38BD     		pop	{r3, r4, r5, pc}
 2080              	.LVL166:
 2081              	.L181:
1771:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 2082              		.loc 1 1771 0
 2083 0022 2C43     		orrs	r4, r4, r5
 2084              	.LVL167:
 2085 0024 024B     		ldr	r3, .L182
 2086 0026 9C61     		str	r4, [r3, #24]
1773:FWLIB/src/stm32f4xx_rtc.c ****     
 2087              		.loc 1 1773 0
 2088 0028 FFF7FEFF 		bl	RTC_ExitInitMode
 2089              	.LVL168:
1775:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2090              		.loc 1 1775 0
 2091 002c 0123     		movs	r3, #1
 2092 002e F3E7     		b	.L179
 2093              	.L183:
 2094              		.align	2
 2095              	.L182:
 2096 0030 00280040 		.word	1073752064
 2097              		.cfi_endproc
 2098              	.LFE141:
 2100              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2101              		.align	1
 2102              		.global	RTC_CoarseCalibCmd
 2103              		.syntax unified
ARM GAS  /tmp/ccROQL82.s 			page 91


 2104              		.thumb
 2105              		.thumb_func
 2106              		.fpu softvfp
 2108              	RTC_CoarseCalibCmd:
 2109              	.LFB142:
1793:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2110              		.loc 1 1793 0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 0
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 2114              	.LVL169:
 2115 0000 10B5     		push	{r4, lr}
 2116              	.LCFI27:
 2117              		.cfi_def_cfa_offset 8
 2118              		.cfi_offset 4, -8
 2119              		.cfi_offset 14, -4
 2120 0002 0446     		mov	r4, r0
 2121              	.LVL170:
1800:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2122              		.loc 1 1800 0
 2123 0004 0E4B     		ldr	r3, .L189
 2124 0006 CA22     		movs	r2, #202
 2125 0008 5A62     		str	r2, [r3, #36]
1801:FWLIB/src/stm32f4xx_rtc.c ****   
 2126              		.loc 1 1801 0
 2127 000a 5322     		movs	r2, #83
 2128 000c 5A62     		str	r2, [r3, #36]
1804:FWLIB/src/stm32f4xx_rtc.c ****   {
 2129              		.loc 1 1804 0
 2130 000e FFF7FEFF 		bl	RTC_EnterInitMode
 2131              	.LVL171:
 2132 0012 0346     		mov	r3, r0
 2133 0014 40B1     		cbz	r0, .L185
1810:FWLIB/src/stm32f4xx_rtc.c ****     {
 2134              		.loc 1 1810 0
 2135 0016 64B1     		cbz	r4, .L186
1813:FWLIB/src/stm32f4xx_rtc.c ****     }
 2136              		.loc 1 1813 0
 2137 0018 094A     		ldr	r2, .L189
 2138 001a 9368     		ldr	r3, [r2, #8]
 2139 001c 43F08003 		orr	r3, r3, #128
 2140 0020 9360     		str	r3, [r2, #8]
 2141              	.L187:
1821:FWLIB/src/stm32f4xx_rtc.c ****     
 2142              		.loc 1 1821 0
 2143 0022 FFF7FEFF 		bl	RTC_ExitInitMode
 2144              	.LVL172:
1823:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2145              		.loc 1 1823 0
 2146 0026 0123     		movs	r3, #1
 2147              	.LVL173:
 2148              	.L185:
1827:FWLIB/src/stm32f4xx_rtc.c ****   
 2149              		.loc 1 1827 0
 2150 0028 FF21     		movs	r1, #255
 2151 002a 054A     		ldr	r2, .L189
 2152 002c 5162     		str	r1, [r2, #36]
ARM GAS  /tmp/ccROQL82.s 			page 92


1830:FWLIB/src/stm32f4xx_rtc.c **** 
 2153              		.loc 1 1830 0
 2154 002e 1846     		mov	r0, r3
 2155 0030 10BD     		pop	{r4, pc}
 2156              	.LVL174:
 2157              	.L186:
1818:FWLIB/src/stm32f4xx_rtc.c ****     }
 2158              		.loc 1 1818 0
 2159 0032 034A     		ldr	r2, .L189
 2160 0034 9368     		ldr	r3, [r2, #8]
 2161 0036 23F08003 		bic	r3, r3, #128
 2162 003a 9360     		str	r3, [r2, #8]
 2163 003c F1E7     		b	.L187
 2164              	.L190:
 2165 003e 00BF     		.align	2
 2166              	.L189:
 2167 0040 00280040 		.word	1073752064
 2168              		.cfi_endproc
 2169              	.LFE142:
 2171              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2172              		.align	1
 2173              		.global	RTC_CalibOutputCmd
 2174              		.syntax unified
 2175              		.thumb
 2176              		.thumb_func
 2177              		.fpu softvfp
 2179              	RTC_CalibOutputCmd:
 2180              	.LFB143:
1839:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2181              		.loc 1 1839 0
 2182              		.cfi_startproc
 2183              		@ args = 0, pretend = 0, frame = 0
 2184              		@ frame_needed = 0, uses_anonymous_args = 0
 2185              		@ link register save eliminated.
 2186              	.LVL175:
1844:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2187              		.loc 1 1844 0
 2188 0000 0A4B     		ldr	r3, .L195
 2189 0002 CA22     		movs	r2, #202
 2190 0004 5A62     		str	r2, [r3, #36]
1845:FWLIB/src/stm32f4xx_rtc.c ****   
 2191              		.loc 1 1845 0
 2192 0006 5322     		movs	r2, #83
 2193 0008 5A62     		str	r2, [r3, #36]
1847:FWLIB/src/stm32f4xx_rtc.c ****   {
 2194              		.loc 1 1847 0
 2195 000a 40B9     		cbnz	r0, .L194
1855:FWLIB/src/stm32f4xx_rtc.c ****   }
 2196              		.loc 1 1855 0
 2197 000c 074A     		ldr	r2, .L195
 2198 000e 9368     		ldr	r3, [r2, #8]
 2199 0010 23F40003 		bic	r3, r3, #8388608
 2200 0014 9360     		str	r3, [r2, #8]
 2201              	.L193:
1859:FWLIB/src/stm32f4xx_rtc.c **** }
 2202              		.loc 1 1859 0
 2203 0016 FF22     		movs	r2, #255
ARM GAS  /tmp/ccROQL82.s 			page 93


 2204 0018 044B     		ldr	r3, .L195
 2205 001a 5A62     		str	r2, [r3, #36]
 2206 001c 7047     		bx	lr
 2207              	.L194:
1850:FWLIB/src/stm32f4xx_rtc.c ****   }
 2208              		.loc 1 1850 0
 2209 001e 1A46     		mov	r2, r3
 2210 0020 9B68     		ldr	r3, [r3, #8]
 2211 0022 43F40003 		orr	r3, r3, #8388608
 2212 0026 9360     		str	r3, [r2, #8]
 2213 0028 F5E7     		b	.L193
 2214              	.L196:
 2215 002a 00BF     		.align	2
 2216              	.L195:
 2217 002c 00280040 		.word	1073752064
 2218              		.cfi_endproc
 2219              	.LFE143:
 2221              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2222              		.align	1
 2223              		.global	RTC_CalibOutputConfig
 2224              		.syntax unified
 2225              		.thumb
 2226              		.thumb_func
 2227              		.fpu softvfp
 2229              	RTC_CalibOutputConfig:
 2230              	.LFB144:
1871:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2231              		.loc 1 1871 0
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 0
 2234              		@ frame_needed = 0, uses_anonymous_args = 0
 2235              		@ link register save eliminated.
 2236              	.LVL176:
1876:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2237              		.loc 1 1876 0
 2238 0000 074B     		ldr	r3, .L198
 2239 0002 CA22     		movs	r2, #202
 2240 0004 5A62     		str	r2, [r3, #36]
1877:FWLIB/src/stm32f4xx_rtc.c ****   
 2241              		.loc 1 1877 0
 2242 0006 5322     		movs	r2, #83
 2243 0008 5A62     		str	r2, [r3, #36]
1880:FWLIB/src/stm32f4xx_rtc.c **** 
 2244              		.loc 1 1880 0
 2245 000a 9A68     		ldr	r2, [r3, #8]
 2246 000c 22F40022 		bic	r2, r2, #524288
 2247 0010 9A60     		str	r2, [r3, #8]
1883:FWLIB/src/stm32f4xx_rtc.c **** 
 2248              		.loc 1 1883 0
 2249 0012 9A68     		ldr	r2, [r3, #8]
 2250 0014 1043     		orrs	r0, r0, r2
 2251              	.LVL177:
 2252 0016 9860     		str	r0, [r3, #8]
1886:FWLIB/src/stm32f4xx_rtc.c **** }
 2253              		.loc 1 1886 0
 2254 0018 FF22     		movs	r2, #255
 2255 001a 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccROQL82.s 			page 94


 2256 001c 7047     		bx	lr
 2257              	.L199:
 2258 001e 00BF     		.align	2
 2259              	.L198:
 2260 0020 00280040 		.word	1073752064
 2261              		.cfi_endproc
 2262              	.LFE144:
 2264              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2265              		.align	1
 2266              		.global	RTC_SmoothCalibConfig
 2267              		.syntax unified
 2268              		.thumb
 2269              		.thumb_func
 2270              		.fpu softvfp
 2272              	RTC_SmoothCalibConfig:
 2273              	.LFB145:
1909:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2274              		.loc 1 1909 0
 2275              		.cfi_startproc
 2276              		@ args = 0, pretend = 0, frame = 0
 2277              		@ frame_needed = 0, uses_anonymous_args = 0
 2278              		@ link register save eliminated.
 2279              	.LVL178:
 2280 0000 10B4     		push	{r4}
 2281              	.LCFI28:
 2282              		.cfi_def_cfa_offset 4
 2283              		.cfi_offset 4, -4
 2284              	.LVL179:
1919:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2285              		.loc 1 1919 0
 2286 0002 134B     		ldr	r3, .L208
 2287 0004 CA24     		movs	r4, #202
 2288 0006 5C62     		str	r4, [r3, #36]
1920:FWLIB/src/stm32f4xx_rtc.c ****   
 2289              		.loc 1 1920 0
 2290 0008 5324     		movs	r4, #83
 2291 000a 5C62     		str	r4, [r3, #36]
1923:FWLIB/src/stm32f4xx_rtc.c ****   {
 2292              		.loc 1 1923 0
 2293 000c DB68     		ldr	r3, [r3, #12]
 2294 000e 13F4803F 		tst	r3, #65536
 2295 0012 18D1     		bne	.L205
 2296              	.LVL180:
 2297              	.L202:
1933:FWLIB/src/stm32f4xx_rtc.c ****   {
 2298              		.loc 1 1933 0
 2299 0014 0E4B     		ldr	r3, .L208
 2300 0016 DB68     		ldr	r3, [r3, #12]
 2301 0018 13F4803F 		tst	r3, #65536
 2302 001c 15D1     		bne	.L206
1936:FWLIB/src/stm32f4xx_rtc.c **** 
 2303              		.loc 1 1936 0
 2304 001e 0843     		orrs	r0, r0, r1
 2305              	.LVL181:
 2306 0020 0243     		orrs	r2, r2, r0
 2307              	.LVL182:
 2308 0022 0B4B     		ldr	r3, .L208
ARM GAS  /tmp/ccROQL82.s 			page 95


 2309 0024 DA63     		str	r2, [r3, #60]
 2310              	.LVL183:
1938:FWLIB/src/stm32f4xx_rtc.c ****   }
 2311              		.loc 1 1938 0
 2312 0026 0120     		movs	r0, #1
 2313              	.LVL184:
 2314              	.L204:
1946:FWLIB/src/stm32f4xx_rtc.c ****   
 2315              		.loc 1 1946 0
 2316 0028 FF22     		movs	r2, #255
 2317 002a 094B     		ldr	r3, .L208
 2318 002c 5A62     		str	r2, [r3, #36]
1949:FWLIB/src/stm32f4xx_rtc.c **** 
 2319              		.loc 1 1949 0
 2320 002e 10BC     		pop	{r4}
 2321              	.LCFI29:
 2322              		.cfi_remember_state
 2323              		.cfi_restore 4
 2324              		.cfi_def_cfa_offset 0
 2325 0030 7047     		bx	lr
 2326              	.LVL185:
 2327              	.L203:
 2328              	.LCFI30:
 2329              		.cfi_restore_state
1928:FWLIB/src/stm32f4xx_rtc.c ****     }
 2330              		.loc 1 1928 0
 2331 0032 0133     		adds	r3, r3, #1
 2332              	.LVL186:
 2333              	.L201:
1926:FWLIB/src/stm32f4xx_rtc.c ****     {
 2334              		.loc 1 1926 0
 2335 0034 064C     		ldr	r4, .L208
 2336 0036 E468     		ldr	r4, [r4, #12]
 2337 0038 14F4803F 		tst	r4, #65536
 2338 003c EAD0     		beq	.L202
1926:FWLIB/src/stm32f4xx_rtc.c ****     {
 2339              		.loc 1 1926 0 is_stmt 0 discriminator 1
 2340 003e B3F5003F 		cmp	r3, #131072
 2341 0042 F6D1     		bne	.L203
 2342 0044 E6E7     		b	.L202
 2343              	.LVL187:
 2344              	.L205:
 2345 0046 0023     		movs	r3, #0
 2346 0048 F4E7     		b	.L201
 2347              	.LVL188:
 2348              	.L206:
1942:FWLIB/src/stm32f4xx_rtc.c ****   }
 2349              		.loc 1 1942 0 is_stmt 1
 2350 004a 0020     		movs	r0, #0
 2351              	.LVL189:
 2352 004c ECE7     		b	.L204
 2353              	.L209:
 2354 004e 00BF     		.align	2
 2355              	.L208:
 2356 0050 00280040 		.word	1073752064
 2357              		.cfi_endproc
 2358              	.LFE145:
ARM GAS  /tmp/ccROQL82.s 			page 96


 2360              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 2361              		.align	1
 2362              		.global	RTC_TimeStampCmd
 2363              		.syntax unified
 2364              		.thumb
 2365              		.thumb_func
 2366              		.fpu softvfp
 2368              	RTC_TimeStampCmd:
 2369              	.LFB146:
1983:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2370              		.loc 1 1983 0
 2371              		.cfi_startproc
 2372              		@ args = 0, pretend = 0, frame = 0
 2373              		@ frame_needed = 0, uses_anonymous_args = 0
 2374              		@ link register save eliminated.
 2375              	.LVL190:
1991:FWLIB/src/stm32f4xx_rtc.c **** 
 2376              		.loc 1 1991 0
 2377 0000 0A4B     		ldr	r3, .L214
 2378 0002 9B68     		ldr	r3, [r3, #8]
 2379 0004 23F40063 		bic	r3, r3, #2048
 2380 0008 23F00803 		bic	r3, r3, #8
 2381              	.LVL191:
1994:FWLIB/src/stm32f4xx_rtc.c ****   {
 2382              		.loc 1 1994 0
 2383 000c 49B9     		cbnz	r1, .L213
2000:FWLIB/src/stm32f4xx_rtc.c ****   }
 2384              		.loc 1 2000 0
 2385 000e 0343     		orrs	r3, r3, r0
 2386              	.LVL192:
 2387              	.L212:
2004:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2388              		.loc 1 2004 0
 2389 0010 064A     		ldr	r2, .L214
 2390 0012 CA21     		movs	r1, #202
 2391              	.LVL193:
 2392 0014 5162     		str	r1, [r2, #36]
2005:FWLIB/src/stm32f4xx_rtc.c **** 
 2393              		.loc 1 2005 0
 2394 0016 5321     		movs	r1, #83
 2395 0018 5162     		str	r1, [r2, #36]
2008:FWLIB/src/stm32f4xx_rtc.c **** 
 2396              		.loc 1 2008 0
 2397 001a 9360     		str	r3, [r2, #8]
2011:FWLIB/src/stm32f4xx_rtc.c **** }
 2398              		.loc 1 2011 0
 2399 001c FF23     		movs	r3, #255
 2400              	.LVL194:
 2401 001e 5362     		str	r3, [r2, #36]
 2402              	.LVL195:
 2403 0020 7047     		bx	lr
 2404              	.LVL196:
 2405              	.L213:
1996:FWLIB/src/stm32f4xx_rtc.c ****   }
 2406              		.loc 1 1996 0
 2407 0022 0343     		orrs	r3, r3, r0
 2408              	.LVL197:
ARM GAS  /tmp/ccROQL82.s 			page 97


 2409 0024 43F40063 		orr	r3, r3, #2048
 2410              	.LVL198:
 2411 0028 F2E7     		b	.L212
 2412              	.L215:
 2413 002a 00BF     		.align	2
 2414              	.L214:
 2415 002c 00280040 		.word	1073752064
 2416              		.cfi_endproc
 2417              	.LFE146:
 2419              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 2420              		.align	1
 2421              		.global	RTC_GetTimeStamp
 2422              		.syntax unified
 2423              		.thumb
 2424              		.thumb_func
 2425              		.fpu softvfp
 2427              	RTC_GetTimeStamp:
 2428              	.LFB147:
2028:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 2429              		.loc 1 2028 0
 2430              		.cfi_startproc
 2431              		@ args = 0, pretend = 0, frame = 0
 2432              		@ frame_needed = 0, uses_anonymous_args = 0
 2433              	.LVL199:
 2434 0000 70B5     		push	{r4, r5, r6, lr}
 2435              	.LCFI31:
 2436              		.cfi_def_cfa_offset 16
 2437              		.cfi_offset 4, -16
 2438              		.cfi_offset 5, -12
 2439              		.cfi_offset 6, -8
 2440              		.cfi_offset 14, -4
 2441              	.LVL200:
2035:FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2442              		.loc 1 2035 0
 2443 0002 1D4B     		ldr	r3, .L219
 2444 0004 1C6B     		ldr	r4, [r3, #48]
 2445 0006 04F07F34 		and	r4, r4, #2139062143
 2446 000a 24F0FE44 		bic	r4, r4, #2130706432
 2447              	.LVL201:
2036:FWLIB/src/stm32f4xx_rtc.c **** 
 2448              		.loc 1 2036 0
 2449 000e 5B6B     		ldr	r3, [r3, #52]
 2450 0010 23F07F43 		bic	r3, r3, #-16777216
 2451 0014 23F0C003 		bic	r3, r3, #192
 2452              	.LVL202:
2039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2453              		.loc 1 2039 0
 2454 0018 250C     		lsrs	r5, r4, #16
 2455 001a 05F03F06 		and	r6, r5, #63
 2456 001e 0E70     		strb	r6, [r1]
2040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2457              		.loc 1 2040 0
 2458 0020 C4F30626 		ubfx	r6, r4, #8, #7
 2459 0024 4E70     		strb	r6, [r1, #1]
2041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2460              		.loc 1 2041 0
 2461 0026 8C70     		strb	r4, [r1, #2]
ARM GAS  /tmp/ccROQL82.s 			page 98


2042:FWLIB/src/stm32f4xx_rtc.c **** 
 2462              		.loc 1 2042 0
 2463 0028 05F04005 		and	r5, r5, #64
 2464 002c CD70     		strb	r5, [r1, #3]
2045:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2465              		.loc 1 2045 0
 2466 002e 0024     		movs	r4, #0
 2467              	.LVL203:
 2468 0030 D470     		strb	r4, [r2, #3]
2046:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2469              		.loc 1 2046 0
 2470 0032 C3F30424 		ubfx	r4, r3, #8, #5
 2471 0036 5470     		strb	r4, [r2, #1]
2047:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2472              		.loc 1 2047 0
 2473 0038 9370     		strb	r3, [r2, #2]
2048:FWLIB/src/stm32f4xx_rtc.c **** 
 2474              		.loc 1 2048 0
 2475 003a C3F34233 		ubfx	r3, r3, #13, #3
 2476              	.LVL204:
 2477 003e 1370     		strb	r3, [r2]
2051:FWLIB/src/stm32f4xx_rtc.c ****   {
 2478              		.loc 1 2051 0
 2479 0040 C8B9     		cbnz	r0, .L216
 2480 0042 1446     		mov	r4, r2
 2481 0044 0D46     		mov	r5, r1
2054:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2482              		.loc 1 2054 0
 2483 0046 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 2484              	.LVL205:
 2485 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2486              	.LVL206:
 2487 004c 2870     		strb	r0, [r5]
2055:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2488              		.loc 1 2055 0
 2489 004e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2490 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2491              	.LVL207:
 2492 0054 6870     		strb	r0, [r5, #1]
2056:FWLIB/src/stm32f4xx_rtc.c **** 
 2493              		.loc 1 2056 0
 2494 0056 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 2495 0058 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2496              	.LVL208:
 2497 005c A870     		strb	r0, [r5, #2]
2059:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2498              		.loc 1 2059 0
 2499 005e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2500 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2501              	.LVL209:
 2502 0064 6070     		strb	r0, [r4, #1]
2060:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2503              		.loc 1 2060 0
 2504 0066 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2505 0068 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2506              	.LVL210:
 2507 006c A070     		strb	r0, [r4, #2]
ARM GAS  /tmp/ccROQL82.s 			page 99


2061:FWLIB/src/stm32f4xx_rtc.c ****   }
 2508              		.loc 1 2061 0
 2509 006e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 2510 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2511              	.LVL211:
 2512 0074 2070     		strb	r0, [r4]
 2513              	.LVL212:
 2514              	.L216:
 2515 0076 70BD     		pop	{r4, r5, r6, pc}
 2516              	.L220:
 2517              		.align	2
 2518              	.L219:
 2519 0078 00280040 		.word	1073752064
 2520              		.cfi_endproc
 2521              	.LFE147:
 2523              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 2524              		.align	1
 2525              		.global	RTC_GetTimeStampSubSecond
 2526              		.syntax unified
 2527              		.thumb
 2528              		.thumb_func
 2529              		.fpu softvfp
 2531              	RTC_GetTimeStampSubSecond:
 2532              	.LFB148:
2071:FWLIB/src/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
 2533              		.loc 1 2071 0
 2534              		.cfi_startproc
 2535              		@ args = 0, pretend = 0, frame = 0
 2536              		@ frame_needed = 0, uses_anonymous_args = 0
 2537              		@ link register save eliminated.
2073:FWLIB/src/stm32f4xx_rtc.c **** }
 2538              		.loc 1 2073 0
 2539 0000 014B     		ldr	r3, .L222
 2540 0002 986B     		ldr	r0, [r3, #56]
2074:FWLIB/src/stm32f4xx_rtc.c **** 
 2541              		.loc 1 2074 0
 2542 0004 7047     		bx	lr
 2543              	.L223:
 2544 0006 00BF     		.align	2
 2545              	.L222:
 2546 0008 00280040 		.word	1073752064
 2547              		.cfi_endproc
 2548              	.LFE148:
 2550              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 2551              		.align	1
 2552              		.global	RTC_TamperTriggerConfig
 2553              		.syntax unified
 2554              		.thumb
 2555              		.thumb_func
 2556              		.fpu softvfp
 2558              	RTC_TamperTriggerConfig:
 2559              	.LFB149:
2106:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2560              		.loc 1 2106 0
 2561              		.cfi_startproc
 2562              		@ args = 0, pretend = 0, frame = 0
 2563              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccROQL82.s 			page 100


 2564              		@ link register save eliminated.
 2565              	.LVL213:
2111:FWLIB/src/stm32f4xx_rtc.c ****   {  
 2566              		.loc 1 2111 0
 2567 0000 29B1     		cbz	r1, .L227
2119:FWLIB/src/stm32f4xx_rtc.c ****   }  
 2568              		.loc 1 2119 0
 2569 0002 064A     		ldr	r2, .L228
 2570 0004 136C     		ldr	r3, [r2, #64]
 2571 0006 43EA4000 		orr	r0, r3, r0, lsl #1
 2572              	.LVL214:
 2573 000a 1064     		str	r0, [r2, #64]
 2574 000c 7047     		bx	lr
 2575              	.LVL215:
 2576              	.L227:
2114:FWLIB/src/stm32f4xx_rtc.c ****   }
 2577              		.loc 1 2114 0
 2578 000e 034A     		ldr	r2, .L228
 2579 0010 136C     		ldr	r3, [r2, #64]
 2580 0012 23EA4000 		bic	r0, r3, r0, lsl #1
 2581              	.LVL216:
 2582 0016 1064     		str	r0, [r2, #64]
 2583 0018 7047     		bx	lr
 2584              	.L229:
 2585 001a 00BF     		.align	2
 2586              	.L228:
 2587 001c 00280040 		.word	1073752064
 2588              		.cfi_endproc
 2589              	.LFE149:
 2591              		.section	.text.RTC_TamperCmd,"ax",%progbits
 2592              		.align	1
 2593              		.global	RTC_TamperCmd
 2594              		.syntax unified
 2595              		.thumb
 2596              		.thumb_func
 2597              		.fpu softvfp
 2599              	RTC_TamperCmd:
 2600              	.LFB150:
2132:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2601              		.loc 1 2132 0
 2602              		.cfi_startproc
 2603              		@ args = 0, pretend = 0, frame = 0
 2604              		@ frame_needed = 0, uses_anonymous_args = 0
 2605              		@ link register save eliminated.
 2606              	.LVL217:
2137:FWLIB/src/stm32f4xx_rtc.c ****   {
 2607              		.loc 1 2137 0
 2608 0000 29B9     		cbnz	r1, .L233
2145:FWLIB/src/stm32f4xx_rtc.c ****   }  
 2609              		.loc 1 2145 0
 2610 0002 054A     		ldr	r2, .L234
 2611 0004 136C     		ldr	r3, [r2, #64]
 2612 0006 23EA0000 		bic	r0, r3, r0
 2613              	.LVL218:
 2614 000a 1064     		str	r0, [r2, #64]
 2615 000c 7047     		bx	lr
 2616              	.LVL219:
ARM GAS  /tmp/ccROQL82.s 			page 101


 2617              	.L233:
2140:FWLIB/src/stm32f4xx_rtc.c ****   }
 2618              		.loc 1 2140 0
 2619 000e 024A     		ldr	r2, .L234
 2620 0010 136C     		ldr	r3, [r2, #64]
 2621 0012 1843     		orrs	r0, r0, r3
 2622              	.LVL220:
 2623 0014 1064     		str	r0, [r2, #64]
 2624 0016 7047     		bx	lr
 2625              	.L235:
 2626              		.align	2
 2627              	.L234:
 2628 0018 00280040 		.word	1073752064
 2629              		.cfi_endproc
 2630              	.LFE150:
 2632              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 2633              		.align	1
 2634              		.global	RTC_TamperFilterConfig
 2635              		.syntax unified
 2636              		.thumb
 2637              		.thumb_func
 2638              		.fpu softvfp
 2640              	RTC_TamperFilterConfig:
 2641              	.LFB151:
2163:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2642              		.loc 1 2163 0
 2643              		.cfi_startproc
 2644              		@ args = 0, pretend = 0, frame = 0
 2645              		@ frame_needed = 0, uses_anonymous_args = 0
 2646              		@ link register save eliminated.
 2647              	.LVL221:
2168:FWLIB/src/stm32f4xx_rtc.c **** 
 2648              		.loc 1 2168 0
 2649 0000 044B     		ldr	r3, .L237
 2650 0002 1A6C     		ldr	r2, [r3, #64]
 2651 0004 22F4C052 		bic	r2, r2, #6144
 2652 0008 1A64     		str	r2, [r3, #64]
2171:FWLIB/src/stm32f4xx_rtc.c **** }
 2653              		.loc 1 2171 0
 2654 000a 1A6C     		ldr	r2, [r3, #64]
 2655 000c 1043     		orrs	r0, r0, r2
 2656              	.LVL222:
 2657 000e 1864     		str	r0, [r3, #64]
 2658 0010 7047     		bx	lr
 2659              	.L238:
 2660 0012 00BF     		.align	2
 2661              	.L237:
 2662 0014 00280040 		.word	1073752064
 2663              		.cfi_endproc
 2664              	.LFE151:
 2666              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 2667              		.align	1
 2668              		.global	RTC_TamperSamplingFreqConfig
 2669              		.syntax unified
 2670              		.thumb
 2671              		.thumb_func
 2672              		.fpu softvfp
ARM GAS  /tmp/ccROQL82.s 			page 102


 2674              	RTC_TamperSamplingFreqConfig:
 2675              	.LFB152:
2197:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2676              		.loc 1 2197 0
 2677              		.cfi_startproc
 2678              		@ args = 0, pretend = 0, frame = 0
 2679              		@ frame_needed = 0, uses_anonymous_args = 0
 2680              		@ link register save eliminated.
 2681              	.LVL223:
2202:FWLIB/src/stm32f4xx_rtc.c **** 
 2682              		.loc 1 2202 0
 2683 0000 044B     		ldr	r3, .L240
 2684 0002 1A6C     		ldr	r2, [r3, #64]
 2685 0004 22F4E062 		bic	r2, r2, #1792
 2686 0008 1A64     		str	r2, [r3, #64]
2205:FWLIB/src/stm32f4xx_rtc.c **** }
 2687              		.loc 1 2205 0
 2688 000a 1A6C     		ldr	r2, [r3, #64]
 2689 000c 1043     		orrs	r0, r0, r2
 2690              	.LVL224:
 2691 000e 1864     		str	r0, [r3, #64]
 2692 0010 7047     		bx	lr
 2693              	.L241:
 2694 0012 00BF     		.align	2
 2695              	.L240:
 2696 0014 00280040 		.word	1073752064
 2697              		.cfi_endproc
 2698              	.LFE152:
 2700              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 2701              		.align	1
 2702              		.global	RTC_TamperPinsPrechargeDuration
 2703              		.syntax unified
 2704              		.thumb
 2705              		.thumb_func
 2706              		.fpu softvfp
 2708              	RTC_TamperPinsPrechargeDuration:
 2709              	.LFB153:
2220:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2710              		.loc 1 2220 0
 2711              		.cfi_startproc
 2712              		@ args = 0, pretend = 0, frame = 0
 2713              		@ frame_needed = 0, uses_anonymous_args = 0
 2714              		@ link register save eliminated.
 2715              	.LVL225:
2225:FWLIB/src/stm32f4xx_rtc.c **** 
 2716              		.loc 1 2225 0
 2717 0000 044B     		ldr	r3, .L243
 2718 0002 1A6C     		ldr	r2, [r3, #64]
 2719 0004 22F4C042 		bic	r2, r2, #24576
 2720 0008 1A64     		str	r2, [r3, #64]
2228:FWLIB/src/stm32f4xx_rtc.c **** }
 2721              		.loc 1 2228 0
 2722 000a 1A6C     		ldr	r2, [r3, #64]
 2723 000c 1043     		orrs	r0, r0, r2
 2724              	.LVL226:
 2725 000e 1864     		str	r0, [r3, #64]
 2726 0010 7047     		bx	lr
ARM GAS  /tmp/ccROQL82.s 			page 103


 2727              	.L244:
 2728 0012 00BF     		.align	2
 2729              	.L243:
 2730 0014 00280040 		.word	1073752064
 2731              		.cfi_endproc
 2732              	.LFE153:
 2734              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 2735              		.align	1
 2736              		.global	RTC_TimeStampOnTamperDetectionCmd
 2737              		.syntax unified
 2738              		.thumb
 2739              		.thumb_func
 2740              		.fpu softvfp
 2742              	RTC_TimeStampOnTamperDetectionCmd:
 2743              	.LFB154:
2240:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2744              		.loc 1 2240 0
 2745              		.cfi_startproc
 2746              		@ args = 0, pretend = 0, frame = 0
 2747              		@ frame_needed = 0, uses_anonymous_args = 0
 2748              		@ link register save eliminated.
 2749              	.LVL227:
2244:FWLIB/src/stm32f4xx_rtc.c ****   {
 2750              		.loc 1 2244 0
 2751 0000 28B9     		cbnz	r0, .L248
2252:FWLIB/src/stm32f4xx_rtc.c ****   }
 2752              		.loc 1 2252 0
 2753 0002 064A     		ldr	r2, .L249
 2754 0004 136C     		ldr	r3, [r2, #64]
 2755 0006 23F08003 		bic	r3, r3, #128
 2756 000a 1364     		str	r3, [r2, #64]
 2757 000c 7047     		bx	lr
 2758              	.L248:
2247:FWLIB/src/stm32f4xx_rtc.c ****   }
 2759              		.loc 1 2247 0
 2760 000e 034A     		ldr	r2, .L249
 2761 0010 136C     		ldr	r3, [r2, #64]
 2762 0012 43F08003 		orr	r3, r3, #128
 2763 0016 1364     		str	r3, [r2, #64]
 2764 0018 7047     		bx	lr
 2765              	.L250:
 2766 001a 00BF     		.align	2
 2767              	.L249:
 2768 001c 00280040 		.word	1073752064
 2769              		.cfi_endproc
 2770              	.LFE154:
 2772              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 2773              		.align	1
 2774              		.global	RTC_TamperPullUpCmd
 2775              		.syntax unified
 2776              		.thumb
 2777              		.thumb_func
 2778              		.fpu softvfp
 2780              	RTC_TamperPullUpCmd:
 2781              	.LFB155:
2263:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2782              		.loc 1 2263 0
ARM GAS  /tmp/ccROQL82.s 			page 104


 2783              		.cfi_startproc
 2784              		@ args = 0, pretend = 0, frame = 0
 2785              		@ frame_needed = 0, uses_anonymous_args = 0
 2786              		@ link register save eliminated.
 2787              	.LVL228:
2267:FWLIB/src/stm32f4xx_rtc.c ****   {
 2788              		.loc 1 2267 0
 2789 0000 28B9     		cbnz	r0, .L254
2275:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2790              		.loc 1 2275 0
 2791 0002 064A     		ldr	r2, .L255
 2792 0004 136C     		ldr	r3, [r2, #64]
 2793 0006 43F40043 		orr	r3, r3, #32768
 2794 000a 1364     		str	r3, [r2, #64]
 2795 000c 7047     		bx	lr
 2796              	.L254:
2270:FWLIB/src/stm32f4xx_rtc.c ****   }
 2797              		.loc 1 2270 0
 2798 000e 034A     		ldr	r2, .L255
 2799 0010 136C     		ldr	r3, [r2, #64]
 2800 0012 23F40043 		bic	r3, r3, #32768
 2801 0016 1364     		str	r3, [r2, #64]
 2802 0018 7047     		bx	lr
 2803              	.L256:
 2804 001a 00BF     		.align	2
 2805              	.L255:
 2806 001c 00280040 		.word	1073752064
 2807              		.cfi_endproc
 2808              	.LFE155:
 2810              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 2811              		.align	1
 2812              		.global	RTC_WriteBackupRegister
 2813              		.syntax unified
 2814              		.thumb
 2815              		.thumb_func
 2816              		.fpu softvfp
 2818              	RTC_WriteBackupRegister:
 2819              	.LFB156:
2304:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2820              		.loc 1 2304 0
 2821              		.cfi_startproc
 2822              		@ args = 0, pretend = 0, frame = 8
 2823              		@ frame_needed = 0, uses_anonymous_args = 0
 2824              		@ link register save eliminated.
 2825              	.LVL229:
 2826 0000 82B0     		sub	sp, sp, #8
 2827              	.LCFI32:
 2828              		.cfi_def_cfa_offset 8
2305:FWLIB/src/stm32f4xx_rtc.c ****   
 2829              		.loc 1 2305 0
 2830 0002 0023     		movs	r3, #0
 2831 0004 0193     		str	r3, [sp, #4]
2310:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2832              		.loc 1 2310 0
 2833 0006 054B     		ldr	r3, .L259
 2834 0008 0193     		str	r3, [sp, #4]
2311:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccROQL82.s 			page 105


 2835              		.loc 1 2311 0
 2836 000a 019B     		ldr	r3, [sp, #4]
 2837 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2838              	.LVL230:
 2839 0010 0190     		str	r0, [sp, #4]
2314:FWLIB/src/stm32f4xx_rtc.c **** }
 2840              		.loc 1 2314 0
 2841 0012 019B     		ldr	r3, [sp, #4]
 2842 0014 1960     		str	r1, [r3]
2315:FWLIB/src/stm32f4xx_rtc.c **** 
 2843              		.loc 1 2315 0
 2844 0016 02B0     		add	sp, sp, #8
 2845              	.LCFI33:
 2846              		.cfi_def_cfa_offset 0
 2847              		@ sp needed
 2848 0018 7047     		bx	lr
 2849              	.L260:
 2850 001a 00BF     		.align	2
 2851              	.L259:
 2852 001c 50280040 		.word	1073752144
 2853              		.cfi_endproc
 2854              	.LFE156:
 2856              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 2857              		.align	1
 2858              		.global	RTC_ReadBackupRegister
 2859              		.syntax unified
 2860              		.thumb
 2861              		.thumb_func
 2862              		.fpu softvfp
 2864              	RTC_ReadBackupRegister:
 2865              	.LFB157:
2325:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2866              		.loc 1 2325 0
 2867              		.cfi_startproc
 2868              		@ args = 0, pretend = 0, frame = 8
 2869              		@ frame_needed = 0, uses_anonymous_args = 0
 2870              		@ link register save eliminated.
 2871              	.LVL231:
 2872 0000 82B0     		sub	sp, sp, #8
 2873              	.LCFI34:
 2874              		.cfi_def_cfa_offset 8
2326:FWLIB/src/stm32f4xx_rtc.c ****   
 2875              		.loc 1 2326 0
 2876 0002 0023     		movs	r3, #0
 2877 0004 0193     		str	r3, [sp, #4]
2331:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2878              		.loc 1 2331 0
 2879 0006 054B     		ldr	r3, .L263
 2880 0008 0193     		str	r3, [sp, #4]
2332:FWLIB/src/stm32f4xx_rtc.c ****   
 2881              		.loc 1 2332 0
 2882 000a 019B     		ldr	r3, [sp, #4]
 2883 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2884              	.LVL232:
 2885 0010 0190     		str	r0, [sp, #4]
2335:FWLIB/src/stm32f4xx_rtc.c **** }
 2886              		.loc 1 2335 0
ARM GAS  /tmp/ccROQL82.s 			page 106


 2887 0012 019B     		ldr	r3, [sp, #4]
 2888 0014 1868     		ldr	r0, [r3]
2336:FWLIB/src/stm32f4xx_rtc.c **** 
 2889              		.loc 1 2336 0
 2890 0016 02B0     		add	sp, sp, #8
 2891              	.LCFI35:
 2892              		.cfi_def_cfa_offset 0
 2893              		@ sp needed
 2894 0018 7047     		bx	lr
 2895              	.L264:
 2896 001a 00BF     		.align	2
 2897              	.L263:
 2898 001c 50280040 		.word	1073752144
 2899              		.cfi_endproc
 2900              	.LFE157:
 2902              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 2903              		.align	1
 2904              		.global	RTC_TamperPinSelection
 2905              		.syntax unified
 2906              		.thumb
 2907              		.thumb_func
 2908              		.fpu softvfp
 2910              	RTC_TamperPinSelection:
 2911              	.LFB158:
2364:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2912              		.loc 1 2364 0
 2913              		.cfi_startproc
 2914              		@ args = 0, pretend = 0, frame = 0
 2915              		@ frame_needed = 0, uses_anonymous_args = 0
 2916              		@ link register save eliminated.
 2917              	.LVL233:
2368:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 2918              		.loc 1 2368 0
 2919 0000 044B     		ldr	r3, .L266
 2920 0002 1A6C     		ldr	r2, [r3, #64]
 2921 0004 22F48032 		bic	r2, r2, #65536
 2922 0008 1A64     		str	r2, [r3, #64]
2369:FWLIB/src/stm32f4xx_rtc.c **** }
 2923              		.loc 1 2369 0
 2924 000a 1A6C     		ldr	r2, [r3, #64]
 2925 000c 1043     		orrs	r0, r0, r2
 2926              	.LVL234:
 2927 000e 1864     		str	r0, [r3, #64]
 2928 0010 7047     		bx	lr
 2929              	.L267:
 2930 0012 00BF     		.align	2
 2931              	.L266:
 2932 0014 00280040 		.word	1073752064
 2933              		.cfi_endproc
 2934              	.LFE158:
 2936              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 2937              		.align	1
 2938              		.global	RTC_TimeStampPinSelection
 2939              		.syntax unified
 2940              		.thumb
 2941              		.thumb_func
 2942              		.fpu softvfp
ARM GAS  /tmp/ccROQL82.s 			page 107


 2944              	RTC_TimeStampPinSelection:
 2945              	.LFB159:
2381:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2946              		.loc 1 2381 0
 2947              		.cfi_startproc
 2948              		@ args = 0, pretend = 0, frame = 0
 2949              		@ frame_needed = 0, uses_anonymous_args = 0
 2950              		@ link register save eliminated.
 2951              	.LVL235:
2385:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 2952              		.loc 1 2385 0
 2953 0000 044B     		ldr	r3, .L269
 2954 0002 1A6C     		ldr	r2, [r3, #64]
 2955 0004 22F40032 		bic	r2, r2, #131072
 2956 0008 1A64     		str	r2, [r3, #64]
2386:FWLIB/src/stm32f4xx_rtc.c **** }
 2957              		.loc 1 2386 0
 2958 000a 1A6C     		ldr	r2, [r3, #64]
 2959 000c 1043     		orrs	r0, r0, r2
 2960              	.LVL236:
 2961 000e 1864     		str	r0, [r3, #64]
 2962 0010 7047     		bx	lr
 2963              	.L270:
 2964 0012 00BF     		.align	2
 2965              	.L269:
 2966 0014 00280040 		.word	1073752064
 2967              		.cfi_endproc
 2968              	.LFE159:
 2970              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 2971              		.align	1
 2972              		.global	RTC_OutputTypeConfig
 2973              		.syntax unified
 2974              		.thumb
 2975              		.thumb_func
 2976              		.fpu softvfp
 2978              	RTC_OutputTypeConfig:
 2979              	.LFB160:
2400:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2980              		.loc 1 2400 0
 2981              		.cfi_startproc
 2982              		@ args = 0, pretend = 0, frame = 0
 2983              		@ frame_needed = 0, uses_anonymous_args = 0
 2984              		@ link register save eliminated.
 2985              	.LVL237:
2404:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 2986              		.loc 1 2404 0
 2987 0000 044B     		ldr	r3, .L272
 2988 0002 1A6C     		ldr	r2, [r3, #64]
 2989 0004 22F48022 		bic	r2, r2, #262144
 2990 0008 1A64     		str	r2, [r3, #64]
2405:FWLIB/src/stm32f4xx_rtc.c **** }
 2991              		.loc 1 2405 0
 2992 000a 1A6C     		ldr	r2, [r3, #64]
 2993 000c 1043     		orrs	r0, r0, r2
 2994              	.LVL238:
 2995 000e 1864     		str	r0, [r3, #64]
 2996 0010 7047     		bx	lr
ARM GAS  /tmp/ccROQL82.s 			page 108


 2997              	.L273:
 2998 0012 00BF     		.align	2
 2999              	.L272:
 3000 0014 00280040 		.word	1073752064
 3001              		.cfi_endproc
 3002              	.LFE160:
 3004              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 3005              		.align	1
 3006              		.global	RTC_SynchroShiftConfig
 3007              		.syntax unified
 3008              		.thumb
 3009              		.thumb_func
 3010              		.fpu softvfp
 3012              	RTC_SynchroShiftConfig:
 3013              	.LFB161:
2438:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3014              		.loc 1 2438 0
 3015              		.cfi_startproc
 3016              		@ args = 0, pretend = 0, frame = 0
 3017              		@ frame_needed = 0, uses_anonymous_args = 0
 3018              	.LVL239:
 3019 0000 08B5     		push	{r3, lr}
 3020              	.LCFI36:
 3021              		.cfi_def_cfa_offset 8
 3022              		.cfi_offset 3, -8
 3023              		.cfi_offset 14, -4
 3024              	.LVL240:
2447:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3025              		.loc 1 2447 0
 3026 0002 184B     		ldr	r3, .L285
 3027 0004 CA22     		movs	r2, #202
 3028 0006 5A62     		str	r2, [r3, #36]
2448:FWLIB/src/stm32f4xx_rtc.c ****   
 3029              		.loc 1 2448 0
 3030 0008 5322     		movs	r2, #83
 3031 000a 5A62     		str	r2, [r3, #36]
2451:FWLIB/src/stm32f4xx_rtc.c ****   {
 3032              		.loc 1 2451 0
 3033 000c DB68     		ldr	r3, [r3, #12]
 3034 000e 13F0080F 		tst	r3, #8
 3035 0012 15D1     		bne	.L279
 3036              	.LVL241:
 3037              	.L276:
2461:FWLIB/src/stm32f4xx_rtc.c ****   {
 3038              		.loc 1 2461 0
 3039 0014 134B     		ldr	r3, .L285
 3040 0016 DB68     		ldr	r3, [r3, #12]
 3041 0018 13F0080F 		tst	r3, #8
 3042 001c 1BD1     		bne	.L280
2464:FWLIB/src/stm32f4xx_rtc.c ****     {
 3043              		.loc 1 2464 0
 3044 001e 114B     		ldr	r3, .L285
 3045 0020 9B68     		ldr	r3, [r3, #8]
 3046 0022 13F0100F 		tst	r3, #16
 3047 0026 0DD0     		beq	.L284
2480:FWLIB/src/stm32f4xx_rtc.c ****     }
 3048              		.loc 1 2480 0
ARM GAS  /tmp/ccROQL82.s 			page 109


 3049 0028 0023     		movs	r3, #0
 3050 002a 15E0     		b	.L278
 3051              	.LVL242:
 3052              	.L277:
2456:FWLIB/src/stm32f4xx_rtc.c ****     }
 3053              		.loc 1 2456 0
 3054 002c 0133     		adds	r3, r3, #1
 3055              	.LVL243:
 3056              	.L275:
2454:FWLIB/src/stm32f4xx_rtc.c ****     {
 3057              		.loc 1 2454 0
 3058 002e 0D4A     		ldr	r2, .L285
 3059 0030 D268     		ldr	r2, [r2, #12]
 3060 0032 12F0080F 		tst	r2, #8
 3061 0036 EDD0     		beq	.L276
2454:FWLIB/src/stm32f4xx_rtc.c ****     {
 3062              		.loc 1 2454 0 is_stmt 0 discriminator 1
 3063 0038 B3F5805F 		cmp	r3, #4096
 3064 003c F6D1     		bne	.L277
 3065 003e E9E7     		b	.L276
 3066              	.LVL244:
 3067              	.L279:
 3068 0040 0023     		movs	r3, #0
 3069 0042 F4E7     		b	.L275
 3070              	.LVL245:
 3071              	.L284:
2467:FWLIB/src/stm32f4xx_rtc.c ****     
 3072              		.loc 1 2467 0 is_stmt 1
 3073 0044 0143     		orrs	r1, r1, r0
 3074              	.LVL246:
 3075 0046 074B     		ldr	r3, .L285
 3076 0048 D962     		str	r1, [r3, #44]
2469:FWLIB/src/stm32f4xx_rtc.c ****       {
 3077              		.loc 1 2469 0
 3078 004a FFF7FEFF 		bl	RTC_WaitForSynchro
 3079              	.LVL247:
 3080 004e 0346     		mov	r3, r0
 3081 0050 10B1     		cbz	r0, .L278
2475:FWLIB/src/stm32f4xx_rtc.c ****       }
 3082              		.loc 1 2475 0
 3083 0052 0123     		movs	r3, #1
 3084 0054 00E0     		b	.L278
 3085              	.LVL248:
 3086              	.L280:
2485:FWLIB/src/stm32f4xx_rtc.c ****   }
 3087              		.loc 1 2485 0
 3088 0056 0023     		movs	r3, #0
 3089              	.LVL249:
 3090              	.L278:
2489:FWLIB/src/stm32f4xx_rtc.c ****   
 3091              		.loc 1 2489 0
 3092 0058 FF21     		movs	r1, #255
 3093 005a 024A     		ldr	r2, .L285
 3094 005c 5162     		str	r1, [r2, #36]
2492:FWLIB/src/stm32f4xx_rtc.c **** 
 3095              		.loc 1 2492 0
 3096 005e 1846     		mov	r0, r3
ARM GAS  /tmp/ccROQL82.s 			page 110


 3097 0060 08BD     		pop	{r3, pc}
 3098              	.LVL250:
 3099              	.L286:
 3100 0062 00BF     		.align	2
 3101              	.L285:
 3102 0064 00280040 		.word	1073752064
 3103              		.cfi_endproc
 3104              	.LFE161:
 3106              		.section	.text.RTC_ITConfig,"ax",%progbits
 3107              		.align	1
 3108              		.global	RTC_ITConfig
 3109              		.syntax unified
 3110              		.thumb
 3111              		.thumb_func
 3112              		.fpu softvfp
 3114              	RTC_ITConfig:
 3115              	.LFB162:
2558:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3116              		.loc 1 2558 0
 3117              		.cfi_startproc
 3118              		@ args = 0, pretend = 0, frame = 0
 3119              		@ frame_needed = 0, uses_anonymous_args = 0
 3120              		@ link register save eliminated.
 3121              	.LVL251:
2564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3122              		.loc 1 2564 0
 3123 0000 104B     		ldr	r3, .L291
 3124 0002 CA22     		movs	r2, #202
 3125 0004 5A62     		str	r2, [r3, #36]
2565:FWLIB/src/stm32f4xx_rtc.c **** 
 3126              		.loc 1 2565 0
 3127 0006 5322     		movs	r2, #83
 3128 0008 5A62     		str	r2, [r3, #36]
2567:FWLIB/src/stm32f4xx_rtc.c ****   {
 3129              		.loc 1 2567 0
 3130 000a 81B9     		cbnz	r1, .L290
2577:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3131              		.loc 1 2577 0
 3132 000c 0D4B     		ldr	r3, .L291
 3133 000e 9A68     		ldr	r2, [r3, #8]
 3134 0010 20F00401 		bic	r1, r0, #4
 3135              	.LVL252:
 3136 0014 22EA0102 		bic	r2, r2, r1
 3137 0018 9A60     		str	r2, [r3, #8]
2579:FWLIB/src/stm32f4xx_rtc.c ****   }
 3138              		.loc 1 2579 0
 3139 001a 1A6C     		ldr	r2, [r3, #64]
 3140 001c 00F00400 		and	r0, r0, #4
 3141              	.LVL253:
 3142 0020 22EA0000 		bic	r0, r2, r0
 3143 0024 1864     		str	r0, [r3, #64]
 3144              	.L289:
2582:FWLIB/src/stm32f4xx_rtc.c **** }
 3145              		.loc 1 2582 0
 3146 0026 FF22     		movs	r2, #255
 3147 0028 064B     		ldr	r3, .L291
 3148 002a 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccROQL82.s 			page 111


 3149 002c 7047     		bx	lr
 3150              	.LVL254:
 3151              	.L290:
2570:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3152              		.loc 1 2570 0
 3153 002e 9A68     		ldr	r2, [r3, #8]
 3154 0030 20F00401 		bic	r1, r0, #4
 3155              	.LVL255:
 3156 0034 0A43     		orrs	r2, r2, r1
 3157 0036 9A60     		str	r2, [r3, #8]
2572:FWLIB/src/stm32f4xx_rtc.c ****   }
 3158              		.loc 1 2572 0
 3159 0038 1A6C     		ldr	r2, [r3, #64]
 3160 003a 00F00400 		and	r0, r0, #4
 3161              	.LVL256:
 3162 003e 1043     		orrs	r0, r0, r2
 3163 0040 1864     		str	r0, [r3, #64]
 3164 0042 F0E7     		b	.L289
 3165              	.L292:
 3166              		.align	2
 3167              	.L291:
 3168 0044 00280040 		.word	1073752064
 3169              		.cfi_endproc
 3170              	.LFE162:
 3172              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 3173              		.align	1
 3174              		.global	RTC_GetFlagStatus
 3175              		.syntax unified
 3176              		.thumb
 3177              		.thumb_func
 3178              		.fpu softvfp
 3180              	RTC_GetFlagStatus:
 3181              	.LFB163:
2606:FWLIB/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 3182              		.loc 1 2606 0
 3183              		.cfi_startproc
 3184              		@ args = 0, pretend = 0, frame = 0
 3185              		@ frame_needed = 0, uses_anonymous_args = 0
 3186              		@ link register save eliminated.
 3187              	.LVL257:
2614:FWLIB/src/stm32f4xx_rtc.c ****   
 3188              		.loc 1 2614 0
 3189 0000 074B     		ldr	r3, .L297
 3190 0002 DB68     		ldr	r3, [r3, #12]
 3191 0004 23F07F43 		bic	r3, r3, #-16777216
 3192 0008 23F47E03 		bic	r3, r3, #16646144
 3193 000c 23F44043 		bic	r3, r3, #49152
 3194 0010 23F08003 		bic	r3, r3, #128
 3195              	.LVL258:
2617:FWLIB/src/stm32f4xx_rtc.c ****   {
 3196              		.loc 1 2617 0
 3197 0014 0342     		tst	r3, r0
 3198 0016 01D1     		bne	.L296
2623:FWLIB/src/stm32f4xx_rtc.c ****   }
 3199              		.loc 1 2623 0
 3200 0018 0020     		movs	r0, #0
 3201              	.LVL259:
ARM GAS  /tmp/ccROQL82.s 			page 112


2626:FWLIB/src/stm32f4xx_rtc.c **** 
 3202              		.loc 1 2626 0
 3203 001a 7047     		bx	lr
 3204              	.LVL260:
 3205              	.L296:
2619:FWLIB/src/stm32f4xx_rtc.c ****   }
 3206              		.loc 1 2619 0
 3207 001c 0120     		movs	r0, #1
 3208              	.LVL261:
 3209 001e 7047     		bx	lr
 3210              	.L298:
 3211              		.align	2
 3212              	.L297:
 3213 0020 00280040 		.word	1073752064
 3214              		.cfi_endproc
 3215              	.LFE163:
 3217              		.section	.text.RTC_ClearFlag,"ax",%progbits
 3218              		.align	1
 3219              		.global	RTC_ClearFlag
 3220              		.syntax unified
 3221              		.thumb
 3222              		.thumb_func
 3223              		.fpu softvfp
 3225              	RTC_ClearFlag:
 3226              	.LFB164:
2642:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3227              		.loc 1 2642 0
 3228              		.cfi_startproc
 3229              		@ args = 0, pretend = 0, frame = 0
 3230              		@ frame_needed = 0, uses_anonymous_args = 0
 3231              		@ link register save eliminated.
 3232              	.LVL262:
2647:FWLIB/src/stm32f4xx_rtc.c **** }
 3233              		.loc 1 2647 0
 3234 0000 80B2     		uxth	r0, r0
 3235              	.LVL263:
 3236 0002 40F08003 		orr	r3, r0, #128
 3237 0006 044A     		ldr	r2, .L300
 3238 0008 D068     		ldr	r0, [r2, #12]
 3239 000a 00F08000 		and	r0, r0, #128
 3240 000e 60EA0300 		orn	r0, r0, r3
 3241 0012 D060     		str	r0, [r2, #12]
 3242 0014 7047     		bx	lr
 3243              	.L301:
 3244 0016 00BF     		.align	2
 3245              	.L300:
 3246 0018 00280040 		.word	1073752064
 3247              		.cfi_endproc
 3248              	.LFE164:
 3250              		.section	.text.RTC_GetITStatus,"ax",%progbits
 3251              		.align	1
 3252              		.global	RTC_GetITStatus
 3253              		.syntax unified
 3254              		.thumb
 3255              		.thumb_func
 3256              		.fpu softvfp
 3258              	RTC_GetITStatus:
ARM GAS  /tmp/ccROQL82.s 			page 113


 3259              	.LFB165:
2662:FWLIB/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 3260              		.loc 1 2662 0
 3261              		.cfi_startproc
 3262              		@ args = 0, pretend = 0, frame = 0
 3263              		@ frame_needed = 0, uses_anonymous_args = 0
 3264              		@ link register save eliminated.
 3265              	.LVL264:
2670:FWLIB/src/stm32f4xx_rtc.c ****  
 3266              		.loc 1 2670 0
 3267 0000 0A4A     		ldr	r2, .L306
 3268 0002 136C     		ldr	r3, [r2, #64]
 3269 0004 03F00403 		and	r3, r3, #4
 3270              	.LVL265:
2673:FWLIB/src/stm32f4xx_rtc.c ****   
 3271              		.loc 1 2673 0
 3272 0008 9168     		ldr	r1, [r2, #8]
 3273 000a 0140     		ands	r1, r1, r0
 3274 000c 03EAD033 		and	r3, r3, r0, lsr #15
 3275              	.LVL266:
2676:FWLIB/src/stm32f4xx_rtc.c ****   
 3276              		.loc 1 2676 0
 3277 0010 D268     		ldr	r2, [r2, #12]
 3278 0012 02EA1012 		and	r2, r2, r0, lsr #4
 3279              	.LVL267:
2679:FWLIB/src/stm32f4xx_rtc.c ****   {
 3280              		.loc 1 2679 0
 3281 0016 0B43     		orrs	r3, r1, r3
 3282              	.LVL268:
 3283 0018 03D0     		beq	.L304
2679:FWLIB/src/stm32f4xx_rtc.c ****   {
 3284              		.loc 1 2679 0 is_stmt 0 discriminator 1
 3285 001a 92B2     		uxth	r2, r2
 3286              	.LVL269:
 3287 001c 1AB9     		cbnz	r2, .L305
2685:FWLIB/src/stm32f4xx_rtc.c ****   }
 3288              		.loc 1 2685 0 is_stmt 1
 3289 001e 0020     		movs	r0, #0
 3290              	.LVL270:
 3291 0020 7047     		bx	lr
 3292              	.LVL271:
 3293              	.L304:
 3294 0022 0020     		movs	r0, #0
 3295              	.LVL272:
 3296 0024 7047     		bx	lr
 3297              	.LVL273:
 3298              	.L305:
2681:FWLIB/src/stm32f4xx_rtc.c ****   }
 3299              		.loc 1 2681 0
 3300 0026 0120     		movs	r0, #1
 3301              	.LVL274:
2688:FWLIB/src/stm32f4xx_rtc.c **** 
 3302              		.loc 1 2688 0
 3303 0028 7047     		bx	lr
 3304              	.L307:
 3305 002a 00BF     		.align	2
 3306              	.L306:
ARM GAS  /tmp/ccROQL82.s 			page 114


 3307 002c 00280040 		.word	1073752064
 3308              		.cfi_endproc
 3309              	.LFE165:
 3311              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 3312              		.align	1
 3313              		.global	RTC_ClearITPendingBit
 3314              		.syntax unified
 3315              		.thumb
 3316              		.thumb_func
 3317              		.fpu softvfp
 3319              	RTC_ClearITPendingBit:
 3320              	.LFB166:
2702:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3321              		.loc 1 2702 0
 3322              		.cfi_startproc
 3323              		@ args = 0, pretend = 0, frame = 0
 3324              		@ frame_needed = 0, uses_anonymous_args = 0
 3325              		@ link register save eliminated.
 3326              	.LVL275:
2712:FWLIB/src/stm32f4xx_rtc.c **** }
 3327              		.loc 1 2712 0
 3328 0000 C0F30F10 		ubfx	r0, r0, #4, #16
 3329              	.LVL276:
 3330 0004 40F08003 		orr	r3, r0, #128
 3331 0008 034A     		ldr	r2, .L309
 3332 000a D068     		ldr	r0, [r2, #12]
 3333 000c 00F08000 		and	r0, r0, #128
 3334 0010 60EA0300 		orn	r0, r0, r3
 3335 0014 D060     		str	r0, [r2, #12]
 3336 0016 7047     		bx	lr
 3337              	.L310:
 3338              		.align	2
 3339              	.L309:
 3340 0018 00280040 		.word	1073752064
 3341              		.cfi_endproc
 3342              	.LFE166:
 3344              		.text
 3345              	.Letext0:
 3346              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3347              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3348              		.file 4 "CORE/core_cm4.h"
 3349              		.file 5 "USER/system_stm32f4xx.h"
 3350              		.file 6 "USER/stm32f4xx.h"
 3351              		.file 7 "FWLIB/inc/stm32f4xx_rtc.h"
ARM GAS  /tmp/ccROQL82.s 			page 115


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rtc.c
     /tmp/ccROQL82.s:16     .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccROQL82.s:22     .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccROQL82.s:63     .text.RTC_Bcd2ToByte:0000000000000000 $t
     /tmp/ccROQL82.s:69     .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccROQL82.s:94     .text.RTC_StructInit:0000000000000000 $t
     /tmp/ccROQL82.s:101    .text.RTC_StructInit:0000000000000000 RTC_StructInit
     /tmp/ccROQL82.s:123    .text.RTC_WriteProtectionCmd:0000000000000000 $t
     /tmp/ccROQL82.s:130    .text.RTC_WriteProtectionCmd:0000000000000000 RTC_WriteProtectionCmd
     /tmp/ccROQL82.s:157    .text.RTC_WriteProtectionCmd:0000000000000018 $d
     /tmp/ccROQL82.s:162    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccROQL82.s:169    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccROQL82.s:238    .text.RTC_EnterInitMode:000000000000004c $d
     /tmp/ccROQL82.s:243    .text.RTC_ExitInitMode:0000000000000000 $t
     /tmp/ccROQL82.s:250    .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
     /tmp/ccROQL82.s:266    .text.RTC_ExitInitMode:000000000000000c $d
     /tmp/ccROQL82.s:271    .text.RTC_Init:0000000000000000 $t
     /tmp/ccROQL82.s:278    .text.RTC_Init:0000000000000000 RTC_Init
     /tmp/ccROQL82.s:342    .text.RTC_Init:0000000000000048 $d
     /tmp/ccROQL82.s:347    .text.RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccROQL82.s:354    .text.RTC_WaitForSynchro:0000000000000000 RTC_WaitForSynchro
     /tmp/ccROQL82.s:429    .text.RTC_WaitForSynchro:000000000000004c $d
     /tmp/ccROQL82.s:434    .text.RTC_DeInit:0000000000000000 $t
     /tmp/ccROQL82.s:441    .text.RTC_DeInit:0000000000000000 RTC_DeInit
     /tmp/ccROQL82.s:567    .text.RTC_DeInit:0000000000000094 $d
     /tmp/ccROQL82.s:573    .text.RTC_RefClockCmd:0000000000000000 $t
     /tmp/ccROQL82.s:580    .text.RTC_RefClockCmd:0000000000000000 RTC_RefClockCmd
     /tmp/ccROQL82.s:639    .text.RTC_RefClockCmd:0000000000000040 $d
     /tmp/ccROQL82.s:644    .text.RTC_BypassShadowCmd:0000000000000000 $t
     /tmp/ccROQL82.s:651    .text.RTC_BypassShadowCmd:0000000000000000 RTC_BypassShadowCmd
     /tmp/ccROQL82.s:689    .text.RTC_BypassShadowCmd:000000000000002c $d
     /tmp/ccROQL82.s:694    .text.RTC_SetTime:0000000000000000 $t
     /tmp/ccROQL82.s:701    .text.RTC_SetTime:0000000000000000 RTC_SetTime
     /tmp/ccROQL82.s:836    .text.RTC_SetTime:00000000000000a4 $d
     /tmp/ccROQL82.s:841    .text.RTC_TimeStructInit:0000000000000000 $t
     /tmp/ccROQL82.s:848    .text.RTC_TimeStructInit:0000000000000000 RTC_TimeStructInit
     /tmp/ccROQL82.s:870    .text.RTC_GetTime:0000000000000000 $t
     /tmp/ccROQL82.s:877    .text.RTC_GetTime:0000000000000000 RTC_GetTime
     /tmp/ccROQL82.s:938    .text.RTC_GetTime:0000000000000048 $d
     /tmp/ccROQL82.s:943    .text.RTC_GetSubSecond:0000000000000000 $t
     /tmp/ccROQL82.s:950    .text.RTC_GetSubSecond:0000000000000000 RTC_GetSubSecond
     /tmp/ccROQL82.s:969    .text.RTC_GetSubSecond:0000000000000008 $d
     /tmp/ccROQL82.s:974    .text.RTC_SetDate:0000000000000000 $t
     /tmp/ccROQL82.s:981    .text.RTC_SetDate:0000000000000000 RTC_SetDate
     /tmp/ccROQL82.s:1106   .text.RTC_SetDate:0000000000000098 $d
     /tmp/ccROQL82.s:1111   .text.RTC_DateStructInit:0000000000000000 $t
     /tmp/ccROQL82.s:1118   .text.RTC_DateStructInit:0000000000000000 RTC_DateStructInit
     /tmp/ccROQL82.s:1141   .text.RTC_GetDate:0000000000000000 $t
     /tmp/ccROQL82.s:1148   .text.RTC_GetDate:0000000000000000 RTC_GetDate
     /tmp/ccROQL82.s:1207   .text.RTC_GetDate:0000000000000044 $d
     /tmp/ccROQL82.s:1212   .text.RTC_SetAlarm:0000000000000000 $t
     /tmp/ccROQL82.s:1219   .text.RTC_SetAlarm:0000000000000000 RTC_SetAlarm
     /tmp/ccROQL82.s:1358   .text.RTC_SetAlarm:00000000000000a0 $d
     /tmp/ccROQL82.s:1363   .text.RTC_AlarmStructInit:0000000000000000 $t
     /tmp/ccROQL82.s:1370   .text.RTC_AlarmStructInit:0000000000000000 RTC_AlarmStructInit
     /tmp/ccROQL82.s:1399   .text.RTC_GetAlarm:0000000000000000 $t
ARM GAS  /tmp/ccROQL82.s 			page 116


     /tmp/ccROQL82.s:1406   .text.RTC_GetAlarm:0000000000000000 RTC_GetAlarm
     /tmp/ccROQL82.s:1492   .text.RTC_GetAlarm:0000000000000068 $d
     /tmp/ccROQL82.s:1497   .text.RTC_AlarmCmd:0000000000000000 $t
     /tmp/ccROQL82.s:1504   .text.RTC_AlarmCmd:0000000000000000 RTC_AlarmCmd
     /tmp/ccROQL82.s:1597   .text.RTC_AlarmCmd:000000000000005c $d
     /tmp/ccROQL82.s:1602   .text.RTC_AlarmSubSecondConfig:0000000000000000 $t
     /tmp/ccROQL82.s:1609   .text.RTC_AlarmSubSecondConfig:0000000000000000 RTC_AlarmSubSecondConfig
     /tmp/ccROQL82.s:1661   .text.RTC_AlarmSubSecondConfig:0000000000000028 $d
     /tmp/ccROQL82.s:1666   .text.RTC_GetAlarmSubSecond:0000000000000000 $t
     /tmp/ccROQL82.s:1673   .text.RTC_GetAlarmSubSecond:0000000000000000 RTC_GetAlarmSubSecond
     /tmp/ccROQL82.s:1704   .text.RTC_GetAlarmSubSecond:000000000000001c $d
     /tmp/ccROQL82.s:1709   .text.RTC_WakeUpClockConfig:0000000000000000 $t
     /tmp/ccROQL82.s:1716   .text.RTC_WakeUpClockConfig:0000000000000000 RTC_WakeUpClockConfig
     /tmp/ccROQL82.s:1747   .text.RTC_WakeUpClockConfig:0000000000000020 $d
     /tmp/ccROQL82.s:1752   .text.RTC_SetWakeUpCounter:0000000000000000 $t
     /tmp/ccROQL82.s:1759   .text.RTC_SetWakeUpCounter:0000000000000000 RTC_SetWakeUpCounter
     /tmp/ccROQL82.s:1783   .text.RTC_SetWakeUpCounter:0000000000000014 $d
     /tmp/ccROQL82.s:1788   .text.RTC_GetWakeUpCounter:0000000000000000 $t
     /tmp/ccROQL82.s:1795   .text.RTC_GetWakeUpCounter:0000000000000000 RTC_GetWakeUpCounter
     /tmp/ccROQL82.s:1811   .text.RTC_GetWakeUpCounter:0000000000000008 $d
     /tmp/ccROQL82.s:1816   .text.RTC_WakeUpCmd:0000000000000000 $t
     /tmp/ccROQL82.s:1823   .text.RTC_WakeUpCmd:0000000000000000 RTC_WakeUpCmd
     /tmp/ccROQL82.s:1914   .text.RTC_WakeUpCmd:0000000000000060 $d
     /tmp/ccROQL82.s:1919   .text.RTC_DayLightSavingConfig:0000000000000000 $t
     /tmp/ccROQL82.s:1926   .text.RTC_DayLightSavingConfig:0000000000000000 RTC_DayLightSavingConfig
     /tmp/ccROQL82.s:1958   .text.RTC_DayLightSavingConfig:0000000000000020 $d
     /tmp/ccROQL82.s:1963   .text.RTC_GetStoreOperation:0000000000000000 $t
     /tmp/ccROQL82.s:1970   .text.RTC_GetStoreOperation:0000000000000000 RTC_GetStoreOperation
     /tmp/ccROQL82.s:1986   .text.RTC_GetStoreOperation:000000000000000c $d
     /tmp/ccROQL82.s:1991   .text.RTC_OutputConfig:0000000000000000 $t
     /tmp/ccROQL82.s:1998   .text.RTC_OutputConfig:0000000000000000 RTC_OutputConfig
     /tmp/ccROQL82.s:2030   .text.RTC_OutputConfig:0000000000000020 $d
     /tmp/ccROQL82.s:2035   .text.RTC_CoarseCalibConfig:0000000000000000 $t
     /tmp/ccROQL82.s:2042   .text.RTC_CoarseCalibConfig:0000000000000000 RTC_CoarseCalibConfig
     /tmp/ccROQL82.s:2096   .text.RTC_CoarseCalibConfig:0000000000000030 $d
     /tmp/ccROQL82.s:2101   .text.RTC_CoarseCalibCmd:0000000000000000 $t
     /tmp/ccROQL82.s:2108   .text.RTC_CoarseCalibCmd:0000000000000000 RTC_CoarseCalibCmd
     /tmp/ccROQL82.s:2167   .text.RTC_CoarseCalibCmd:0000000000000040 $d
     /tmp/ccROQL82.s:2172   .text.RTC_CalibOutputCmd:0000000000000000 $t
     /tmp/ccROQL82.s:2179   .text.RTC_CalibOutputCmd:0000000000000000 RTC_CalibOutputCmd
     /tmp/ccROQL82.s:2217   .text.RTC_CalibOutputCmd:000000000000002c $d
     /tmp/ccROQL82.s:2222   .text.RTC_CalibOutputConfig:0000000000000000 $t
     /tmp/ccROQL82.s:2229   .text.RTC_CalibOutputConfig:0000000000000000 RTC_CalibOutputConfig
     /tmp/ccROQL82.s:2260   .text.RTC_CalibOutputConfig:0000000000000020 $d
     /tmp/ccROQL82.s:2265   .text.RTC_SmoothCalibConfig:0000000000000000 $t
     /tmp/ccROQL82.s:2272   .text.RTC_SmoothCalibConfig:0000000000000000 RTC_SmoothCalibConfig
     /tmp/ccROQL82.s:2356   .text.RTC_SmoothCalibConfig:0000000000000050 $d
     /tmp/ccROQL82.s:2361   .text.RTC_TimeStampCmd:0000000000000000 $t
     /tmp/ccROQL82.s:2368   .text.RTC_TimeStampCmd:0000000000000000 RTC_TimeStampCmd
     /tmp/ccROQL82.s:2415   .text.RTC_TimeStampCmd:000000000000002c $d
     /tmp/ccROQL82.s:2420   .text.RTC_GetTimeStamp:0000000000000000 $t
     /tmp/ccROQL82.s:2427   .text.RTC_GetTimeStamp:0000000000000000 RTC_GetTimeStamp
     /tmp/ccROQL82.s:2519   .text.RTC_GetTimeStamp:0000000000000078 $d
     /tmp/ccROQL82.s:2524   .text.RTC_GetTimeStampSubSecond:0000000000000000 $t
     /tmp/ccROQL82.s:2531   .text.RTC_GetTimeStampSubSecond:0000000000000000 RTC_GetTimeStampSubSecond
     /tmp/ccROQL82.s:2546   .text.RTC_GetTimeStampSubSecond:0000000000000008 $d
     /tmp/ccROQL82.s:2551   .text.RTC_TamperTriggerConfig:0000000000000000 $t
ARM GAS  /tmp/ccROQL82.s 			page 117


     /tmp/ccROQL82.s:2558   .text.RTC_TamperTriggerConfig:0000000000000000 RTC_TamperTriggerConfig
     /tmp/ccROQL82.s:2587   .text.RTC_TamperTriggerConfig:000000000000001c $d
     /tmp/ccROQL82.s:2592   .text.RTC_TamperCmd:0000000000000000 $t
     /tmp/ccROQL82.s:2599   .text.RTC_TamperCmd:0000000000000000 RTC_TamperCmd
     /tmp/ccROQL82.s:2628   .text.RTC_TamperCmd:0000000000000018 $d
     /tmp/ccROQL82.s:2633   .text.RTC_TamperFilterConfig:0000000000000000 $t
     /tmp/ccROQL82.s:2640   .text.RTC_TamperFilterConfig:0000000000000000 RTC_TamperFilterConfig
     /tmp/ccROQL82.s:2662   .text.RTC_TamperFilterConfig:0000000000000014 $d
     /tmp/ccROQL82.s:2667   .text.RTC_TamperSamplingFreqConfig:0000000000000000 $t
     /tmp/ccROQL82.s:2674   .text.RTC_TamperSamplingFreqConfig:0000000000000000 RTC_TamperSamplingFreqConfig
     /tmp/ccROQL82.s:2696   .text.RTC_TamperSamplingFreqConfig:0000000000000014 $d
     /tmp/ccROQL82.s:2701   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 $t
     /tmp/ccROQL82.s:2708   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 RTC_TamperPinsPrechargeDuration
     /tmp/ccROQL82.s:2730   .text.RTC_TamperPinsPrechargeDuration:0000000000000014 $d
     /tmp/ccROQL82.s:2735   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 $t
     /tmp/ccROQL82.s:2742   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 RTC_TimeStampOnTamperDetectionCmd
     /tmp/ccROQL82.s:2768   .text.RTC_TimeStampOnTamperDetectionCmd:000000000000001c $d
     /tmp/ccROQL82.s:2773   .text.RTC_TamperPullUpCmd:0000000000000000 $t
     /tmp/ccROQL82.s:2780   .text.RTC_TamperPullUpCmd:0000000000000000 RTC_TamperPullUpCmd
     /tmp/ccROQL82.s:2806   .text.RTC_TamperPullUpCmd:000000000000001c $d
     /tmp/ccROQL82.s:2811   .text.RTC_WriteBackupRegister:0000000000000000 $t
     /tmp/ccROQL82.s:2818   .text.RTC_WriteBackupRegister:0000000000000000 RTC_WriteBackupRegister
     /tmp/ccROQL82.s:2852   .text.RTC_WriteBackupRegister:000000000000001c $d
     /tmp/ccROQL82.s:2857   .text.RTC_ReadBackupRegister:0000000000000000 $t
     /tmp/ccROQL82.s:2864   .text.RTC_ReadBackupRegister:0000000000000000 RTC_ReadBackupRegister
     /tmp/ccROQL82.s:2898   .text.RTC_ReadBackupRegister:000000000000001c $d
     /tmp/ccROQL82.s:2903   .text.RTC_TamperPinSelection:0000000000000000 $t
     /tmp/ccROQL82.s:2910   .text.RTC_TamperPinSelection:0000000000000000 RTC_TamperPinSelection
     /tmp/ccROQL82.s:2932   .text.RTC_TamperPinSelection:0000000000000014 $d
     /tmp/ccROQL82.s:2937   .text.RTC_TimeStampPinSelection:0000000000000000 $t
     /tmp/ccROQL82.s:2944   .text.RTC_TimeStampPinSelection:0000000000000000 RTC_TimeStampPinSelection
     /tmp/ccROQL82.s:2966   .text.RTC_TimeStampPinSelection:0000000000000014 $d
     /tmp/ccROQL82.s:2971   .text.RTC_OutputTypeConfig:0000000000000000 $t
     /tmp/ccROQL82.s:2978   .text.RTC_OutputTypeConfig:0000000000000000 RTC_OutputTypeConfig
     /tmp/ccROQL82.s:3000   .text.RTC_OutputTypeConfig:0000000000000014 $d
     /tmp/ccROQL82.s:3005   .text.RTC_SynchroShiftConfig:0000000000000000 $t
     /tmp/ccROQL82.s:3012   .text.RTC_SynchroShiftConfig:0000000000000000 RTC_SynchroShiftConfig
     /tmp/ccROQL82.s:3102   .text.RTC_SynchroShiftConfig:0000000000000064 $d
     /tmp/ccROQL82.s:3107   .text.RTC_ITConfig:0000000000000000 $t
     /tmp/ccROQL82.s:3114   .text.RTC_ITConfig:0000000000000000 RTC_ITConfig
     /tmp/ccROQL82.s:3168   .text.RTC_ITConfig:0000000000000044 $d
     /tmp/ccROQL82.s:3173   .text.RTC_GetFlagStatus:0000000000000000 $t
     /tmp/ccROQL82.s:3180   .text.RTC_GetFlagStatus:0000000000000000 RTC_GetFlagStatus
     /tmp/ccROQL82.s:3213   .text.RTC_GetFlagStatus:0000000000000020 $d
     /tmp/ccROQL82.s:3218   .text.RTC_ClearFlag:0000000000000000 $t
     /tmp/ccROQL82.s:3225   .text.RTC_ClearFlag:0000000000000000 RTC_ClearFlag
     /tmp/ccROQL82.s:3246   .text.RTC_ClearFlag:0000000000000018 $d
     /tmp/ccROQL82.s:3251   .text.RTC_GetITStatus:0000000000000000 $t
     /tmp/ccROQL82.s:3258   .text.RTC_GetITStatus:0000000000000000 RTC_GetITStatus
     /tmp/ccROQL82.s:3307   .text.RTC_GetITStatus:000000000000002c $d
     /tmp/ccROQL82.s:3312   .text.RTC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccROQL82.s:3319   .text.RTC_ClearITPendingBit:0000000000000000 RTC_ClearITPendingBit
     /tmp/ccROQL82.s:3340   .text.RTC_ClearITPendingBit:0000000000000018 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
