ARM GAS  /tmp/cc2L9YB0.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f4xx_cryp_tdes.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.CRYP_TDES_ECB,"ax",%progbits
  16              		.align	1
  17              		.global	CRYP_TDES_ECB
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	CRYP_TDES_ECB:
  24              	.LFB112:
  25              		.file 1 "FWLIB/src/stm32f4xx_cryp_tdes.c"
   1:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
   2:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @file    stm32f4xx_cryp_tdes.c
   4:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @version V1.4.0
   6:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @date    04-August-2014
   7:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          input message using TDES in ECB/CBC modes .
   9:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          peripheral.
  11:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  12:FWLIB/src/stm32f4xx_cryp_tdes.c **** @verbatim
  13:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  14:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  15:FWLIB/src/stm32f4xx_cryp_tdes.c ****                            ##### How to use this driver #####
  16:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  17:FWLIB/src/stm32f4xx_cryp_tdes.c ****  [..]
  18:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Enable The CRYP controller clock using 
  19:FWLIB/src/stm32f4xx_cryp_tdes.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  20:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  21:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in ECB Mode using CRYP_TDES_ECB() function.
  22:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  23:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in CBC Mode using CRYP_TDES_CBC() function.
  24:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  25:FWLIB/src/stm32f4xx_cryp_tdes.c **** @endverbatim
  26:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  27:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  28:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @attention
  29:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  30:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  31:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  32:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  33:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * You may not use this file except in compliance with the License.
ARM GAS  /tmp/cc2L9YB0.s 			page 2


  34:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * You may obtain a copy of the License at:
  35:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  36:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  37:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  38:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * Unless required by applicable law or agreed to in writing, software 
  39:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  40:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  41:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * See the License for the specific language governing permissions and
  42:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * limitations under the License.
  43:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  44:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  45:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */ 
  46:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  47:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Includes ------------------------------------------------------------------*/
  48:FWLIB/src/stm32f4xx_cryp_tdes.c **** #include "stm32f4xx_cryp.h"
  49:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  50:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  51:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  52:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  53:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  54:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  55:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP 
  56:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief CRYP driver modules
  57:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  58:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  59:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  60:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private typedef -----------------------------------------------------------*/
  61:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private define ------------------------------------------------------------*/
  62:FWLIB/src/stm32f4xx_cryp_tdes.c **** #define TDESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  63:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  64:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private macro -------------------------------------------------------------*/
  65:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private variables ---------------------------------------------------------*/
  66:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private function prototypes -----------------------------------------------*/
  67:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private functions ---------------------------------------------------------*/
  68:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  69:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  70:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Private_Functions
  71:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  72:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */ 
  73:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  74:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Group7 High Level TDES functions
  75:FWLIB/src/stm32f4xx_cryp_tdes.c ****  *  @brief   High Level TDES functions 
  76:FWLIB/src/stm32f4xx_cryp_tdes.c ****  *
  77:FWLIB/src/stm32f4xx_cryp_tdes.c **** @verbatim   
  78:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  79:FWLIB/src/stm32f4xx_cryp_tdes.c ****                       ##### High Level TDES functions #####
  80:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  81:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  82:FWLIB/src/stm32f4xx_cryp_tdes.c **** @endverbatim
  83:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  84:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  85:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  86:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
  87:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in ECB Mode
  88:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
  89:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
  90:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
ARM GAS  /tmp/cc2L9YB0.s 			page 3


  91:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
  92:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
  93:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  94:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
  95:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
  96:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
  97:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
  98:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
  99:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
 100:FWLIB/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
 101:FWLIB/src/stm32f4xx_cryp_tdes.c ****                           uint32_t Ilength, uint8_t *Output)
 102:FWLIB/src/stm32f4xx_cryp_tdes.c **** {
  26              		.loc 1 102 0
  27              		.cfi_startproc
  28              		@ args = 4, pretend = 0, frame = 56
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
  40 0004 8EB0     		sub	sp, sp, #56
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 80
  43 0006 0646     		mov	r6, r0
  44 0008 0D46     		mov	r5, r1
  45 000a 9846     		mov	r8, r3
 103:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 104:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 105:FWLIB/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
  46              		.loc 1 105 0
  47 000c 0023     		movs	r3, #0
  48              	.LVL1:
  49 000e 0193     		str	r3, [sp, #4]
  50              	.LVL2:
 106:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 107:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 108:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 109:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  51              		.loc 1 109 0
  52 0010 1446     		mov	r4, r2
  53              	.LVL3:
 110:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
  54              		.loc 1 110 0
  55 0012 149F     		ldr	r7, [sp, #80]
  56              	.LVL4:
 111:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 112:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 113:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 114:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
  57              		.loc 1 114 0
  58 0014 02A8     		add	r0, sp, #8
ARM GAS  /tmp/cc2L9YB0.s 			page 4


  59              	.LVL5:
  60 0016 FFF7FEFF 		bl	CRYP_KeyStructInit
  61              	.LVL6:
 115:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 116:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 117:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
  62              		.loc 1 117 0
  63 001a 012E     		cmp	r6, #1
  64 001c 28D0     		beq	.L14
 118:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 119:FWLIB/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 120:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 121:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
 122:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 123:FWLIB/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  65              		.loc 1 123 0
  66 001e 0423     		movs	r3, #4
  67 0020 0A93     		str	r3, [sp, #40]
  68              	.L3:
 124:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 125:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 126:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  69              		.loc 1 126 0
  70 0022 0023     		movs	r3, #0
  71 0024 0B93     		str	r3, [sp, #44]
 127:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  72              		.loc 1 127 0
  73 0026 8023     		movs	r3, #128
  74 0028 0C93     		str	r3, [sp, #48]
 128:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
  75              		.loc 1 128 0
  76 002a 0AA8     		add	r0, sp, #40
  77 002c FFF7FEFF 		bl	CRYP_Init
  78              	.LVL7:
 129:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 130:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 131:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  79              		.loc 1 131 0
  80 0030 2B68     		ldr	r3, [r5]
  81              	.LVL8:
  82              	.LBB30:
  83              	.LBB31:
  84              		.file 2 "CORE/core_cmInstr.h"
   1:CORE/core_cmInstr.h **** /**************************************************************************//**
   2:CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:CORE/core_cmInstr.h ****  * @version  V3.20
   5:CORE/core_cmInstr.h ****  * @date     05. March 2013
   6:CORE/core_cmInstr.h ****  *
   7:CORE/core_cmInstr.h ****  * @note
   8:CORE/core_cmInstr.h ****  *
   9:CORE/core_cmInstr.h ****  ******************************************************************************/
  10:CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:CORE/core_cmInstr.h **** 
  12:CORE/core_cmInstr.h ****    All rights reserved.
  13:CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
ARM GAS  /tmp/cc2L9YB0.s 			page 5


  15:CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:CORE/core_cmInstr.h ****      specific prior written permission.
  23:CORE/core_cmInstr.h ****    *
  24:CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:CORE/core_cmInstr.h **** 
  37:CORE/core_cmInstr.h **** 
  38:CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:CORE/core_cmInstr.h **** 
  41:CORE/core_cmInstr.h **** 
  42:CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:CORE/core_cmInstr.h ****   @{
  46:CORE/core_cmInstr.h **** */
  47:CORE/core_cmInstr.h **** 
  48:CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:CORE/core_cmInstr.h **** 
  51:CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:CORE/core_cmInstr.h **** #endif
  54:CORE/core_cmInstr.h **** 
  55:CORE/core_cmInstr.h **** 
  56:CORE/core_cmInstr.h **** /** \brief  No Operation
  57:CORE/core_cmInstr.h **** 
  58:CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:CORE/core_cmInstr.h ****  */
  60:CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:CORE/core_cmInstr.h **** 
  62:CORE/core_cmInstr.h **** 
  63:CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:CORE/core_cmInstr.h **** 
  65:CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:CORE/core_cmInstr.h ****  */
  68:CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:CORE/core_cmInstr.h **** 
  70:CORE/core_cmInstr.h **** 
  71:CORE/core_cmInstr.h **** /** \brief  Wait For Event
ARM GAS  /tmp/cc2L9YB0.s 			page 6


  72:CORE/core_cmInstr.h **** 
  73:CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:CORE/core_cmInstr.h ****  */
  76:CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:CORE/core_cmInstr.h **** 
  78:CORE/core_cmInstr.h **** 
  79:CORE/core_cmInstr.h **** /** \brief  Send Event
  80:CORE/core_cmInstr.h **** 
  81:CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:CORE/core_cmInstr.h ****  */
  83:CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:CORE/core_cmInstr.h **** 
  85:CORE/core_cmInstr.h **** 
  86:CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:CORE/core_cmInstr.h **** 
  88:CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:CORE/core_cmInstr.h ****  */
  92:CORE/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:CORE/core_cmInstr.h **** 
  94:CORE/core_cmInstr.h **** 
  95:CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:CORE/core_cmInstr.h **** 
  97:CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:CORE/core_cmInstr.h ****  */
 100:CORE/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:CORE/core_cmInstr.h **** 
 102:CORE/core_cmInstr.h **** 
 103:CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:CORE/core_cmInstr.h **** 
 105:CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:CORE/core_cmInstr.h ****  */
 108:CORE/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:CORE/core_cmInstr.h **** 
 110:CORE/core_cmInstr.h **** 
 111:CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:CORE/core_cmInstr.h **** 
 113:CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:CORE/core_cmInstr.h **** 
 115:CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:CORE/core_cmInstr.h ****     \return               Reversed value
 117:CORE/core_cmInstr.h ****  */
 118:CORE/core_cmInstr.h **** #define __REV                             __rev
 119:CORE/core_cmInstr.h **** 
 120:CORE/core_cmInstr.h **** 
 121:CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:CORE/core_cmInstr.h **** 
 123:CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:CORE/core_cmInstr.h **** 
 125:CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:CORE/core_cmInstr.h ****     \return               Reversed value
 127:CORE/core_cmInstr.h ****  */
 128:CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
ARM GAS  /tmp/cc2L9YB0.s 			page 7


 129:CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:CORE/core_cmInstr.h **** {
 131:CORE/core_cmInstr.h ****   rev16 r0, r0
 132:CORE/core_cmInstr.h ****   bx lr
 133:CORE/core_cmInstr.h **** }
 134:CORE/core_cmInstr.h **** #endif
 135:CORE/core_cmInstr.h **** 
 136:CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:CORE/core_cmInstr.h **** 
 138:CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:CORE/core_cmInstr.h **** 
 140:CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:CORE/core_cmInstr.h ****     \return               Reversed value
 142:CORE/core_cmInstr.h ****  */
 143:CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:CORE/core_cmInstr.h **** {
 146:CORE/core_cmInstr.h ****   revsh r0, r0
 147:CORE/core_cmInstr.h ****   bx lr
 148:CORE/core_cmInstr.h **** }
 149:CORE/core_cmInstr.h **** #endif
 150:CORE/core_cmInstr.h **** 
 151:CORE/core_cmInstr.h **** 
 152:CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:CORE/core_cmInstr.h **** 
 154:CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:CORE/core_cmInstr.h **** 
 156:CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:CORE/core_cmInstr.h ****     \return               Rotated value
 159:CORE/core_cmInstr.h ****  */
 160:CORE/core_cmInstr.h **** #define __ROR                             __ror
 161:CORE/core_cmInstr.h **** 
 162:CORE/core_cmInstr.h **** 
 163:CORE/core_cmInstr.h **** /** \brief  Breakpoint
 164:CORE/core_cmInstr.h **** 
 165:CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:CORE/core_cmInstr.h **** 
 168:CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:CORE/core_cmInstr.h ****  */
 171:CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:CORE/core_cmInstr.h **** 
 173:CORE/core_cmInstr.h **** 
 174:CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:CORE/core_cmInstr.h **** 
 176:CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:CORE/core_cmInstr.h **** 
 178:CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:CORE/core_cmInstr.h **** 
 180:CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:CORE/core_cmInstr.h ****     \return               Reversed value
 182:CORE/core_cmInstr.h ****  */
 183:CORE/core_cmInstr.h **** #define __RBIT                            __rbit
 184:CORE/core_cmInstr.h **** 
 185:CORE/core_cmInstr.h **** 
ARM GAS  /tmp/cc2L9YB0.s 			page 8


 186:CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:CORE/core_cmInstr.h **** 
 188:CORE/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:CORE/core_cmInstr.h **** 
 190:CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:CORE/core_cmInstr.h ****  */
 193:CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:CORE/core_cmInstr.h **** 
 195:CORE/core_cmInstr.h **** 
 196:CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:CORE/core_cmInstr.h **** 
 198:CORE/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:CORE/core_cmInstr.h **** 
 200:CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:CORE/core_cmInstr.h ****  */
 203:CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:CORE/core_cmInstr.h **** 
 205:CORE/core_cmInstr.h **** 
 206:CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:CORE/core_cmInstr.h **** 
 208:CORE/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:CORE/core_cmInstr.h **** 
 210:CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:CORE/core_cmInstr.h ****  */
 213:CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:CORE/core_cmInstr.h **** 
 215:CORE/core_cmInstr.h **** 
 216:CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:CORE/core_cmInstr.h **** 
 218:CORE/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:CORE/core_cmInstr.h **** 
 220:CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 221:CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:CORE/core_cmInstr.h ****     \return          0  Function succeeded
 223:CORE/core_cmInstr.h ****     \return          1  Function failed
 224:CORE/core_cmInstr.h ****  */
 225:CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:CORE/core_cmInstr.h **** 
 227:CORE/core_cmInstr.h **** 
 228:CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:CORE/core_cmInstr.h **** 
 230:CORE/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:CORE/core_cmInstr.h **** 
 232:CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 233:CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:CORE/core_cmInstr.h ****     \return          0  Function succeeded
 235:CORE/core_cmInstr.h ****     \return          1  Function failed
 236:CORE/core_cmInstr.h ****  */
 237:CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:CORE/core_cmInstr.h **** 
 239:CORE/core_cmInstr.h **** 
 240:CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:CORE/core_cmInstr.h **** 
 242:CORE/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
ARM GAS  /tmp/cc2L9YB0.s 			page 9


 243:CORE/core_cmInstr.h **** 
 244:CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 245:CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:CORE/core_cmInstr.h ****     \return          0  Function succeeded
 247:CORE/core_cmInstr.h ****     \return          1  Function failed
 248:CORE/core_cmInstr.h ****  */
 249:CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:CORE/core_cmInstr.h **** 
 251:CORE/core_cmInstr.h **** 
 252:CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:CORE/core_cmInstr.h **** 
 254:CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:CORE/core_cmInstr.h **** 
 256:CORE/core_cmInstr.h ****  */
 257:CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 258:CORE/core_cmInstr.h **** 
 259:CORE/core_cmInstr.h **** 
 260:CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 261:CORE/core_cmInstr.h **** 
 262:CORE/core_cmInstr.h ****     This function saturates a signed value.
 263:CORE/core_cmInstr.h **** 
 264:CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:CORE/core_cmInstr.h ****     \return             Saturated value
 267:CORE/core_cmInstr.h ****  */
 268:CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 269:CORE/core_cmInstr.h **** 
 270:CORE/core_cmInstr.h **** 
 271:CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:CORE/core_cmInstr.h **** 
 273:CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 274:CORE/core_cmInstr.h **** 
 275:CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:CORE/core_cmInstr.h ****     \return             Saturated value
 278:CORE/core_cmInstr.h ****  */
 279:CORE/core_cmInstr.h **** #define __USAT                            __usat
 280:CORE/core_cmInstr.h **** 
 281:CORE/core_cmInstr.h **** 
 282:CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 283:CORE/core_cmInstr.h **** 
 284:CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:CORE/core_cmInstr.h **** 
 286:CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 288:CORE/core_cmInstr.h ****  */
 289:CORE/core_cmInstr.h **** #define __CLZ                             __clz
 290:CORE/core_cmInstr.h **** 
 291:CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:CORE/core_cmInstr.h **** 
 293:CORE/core_cmInstr.h **** 
 294:CORE/core_cmInstr.h **** 
 295:CORE/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:CORE/core_cmInstr.h **** /* IAR iccarm specific functions */
 297:CORE/core_cmInstr.h **** 
 298:CORE/core_cmInstr.h **** #include <cmsis_iar.h>
 299:CORE/core_cmInstr.h **** 
ARM GAS  /tmp/cc2L9YB0.s 			page 10


 300:CORE/core_cmInstr.h **** 
 301:CORE/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:CORE/core_cmInstr.h **** /* TI CCS specific functions */
 303:CORE/core_cmInstr.h **** 
 304:CORE/core_cmInstr.h **** #include <cmsis_ccs.h>
 305:CORE/core_cmInstr.h **** 
 306:CORE/core_cmInstr.h **** 
 307:CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 309:CORE/core_cmInstr.h **** 
 310:CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:CORE/core_cmInstr.h **** #else
 317:CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:CORE/core_cmInstr.h **** #endif
 320:CORE/core_cmInstr.h **** 
 321:CORE/core_cmInstr.h **** /** \brief  No Operation
 322:CORE/core_cmInstr.h **** 
 323:CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:CORE/core_cmInstr.h ****  */
 325:CORE/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:CORE/core_cmInstr.h **** {
 327:CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 328:CORE/core_cmInstr.h **** }
 329:CORE/core_cmInstr.h **** 
 330:CORE/core_cmInstr.h **** 
 331:CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 332:CORE/core_cmInstr.h **** 
 333:CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 334:CORE/core_cmInstr.h ****     until one of a number of events occurs.
 335:CORE/core_cmInstr.h ****  */
 336:CORE/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 337:CORE/core_cmInstr.h **** {
 338:CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 339:CORE/core_cmInstr.h **** }
 340:CORE/core_cmInstr.h **** 
 341:CORE/core_cmInstr.h **** 
 342:CORE/core_cmInstr.h **** /** \brief  Wait For Event
 343:CORE/core_cmInstr.h **** 
 344:CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 345:CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 346:CORE/core_cmInstr.h ****  */
 347:CORE/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 348:CORE/core_cmInstr.h **** {
 349:CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 350:CORE/core_cmInstr.h **** }
 351:CORE/core_cmInstr.h **** 
 352:CORE/core_cmInstr.h **** 
 353:CORE/core_cmInstr.h **** /** \brief  Send Event
 354:CORE/core_cmInstr.h **** 
 355:CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 356:CORE/core_cmInstr.h ****  */
ARM GAS  /tmp/cc2L9YB0.s 			page 11


 357:CORE/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 358:CORE/core_cmInstr.h **** {
 359:CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 360:CORE/core_cmInstr.h **** }
 361:CORE/core_cmInstr.h **** 
 362:CORE/core_cmInstr.h **** 
 363:CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 364:CORE/core_cmInstr.h **** 
 365:CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 366:CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 367:CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 368:CORE/core_cmInstr.h ****  */
 369:CORE/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 370:CORE/core_cmInstr.h **** {
 371:CORE/core_cmInstr.h ****   __ASM volatile ("isb");
 372:CORE/core_cmInstr.h **** }
 373:CORE/core_cmInstr.h **** 
 374:CORE/core_cmInstr.h **** 
 375:CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 376:CORE/core_cmInstr.h **** 
 377:CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 378:CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 379:CORE/core_cmInstr.h ****  */
 380:CORE/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 381:CORE/core_cmInstr.h **** {
 382:CORE/core_cmInstr.h ****   __ASM volatile ("dsb");
 383:CORE/core_cmInstr.h **** }
 384:CORE/core_cmInstr.h **** 
 385:CORE/core_cmInstr.h **** 
 386:CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 387:CORE/core_cmInstr.h **** 
 388:CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 389:CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 390:CORE/core_cmInstr.h ****  */
 391:CORE/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 392:CORE/core_cmInstr.h **** {
 393:CORE/core_cmInstr.h ****   __ASM volatile ("dmb");
 394:CORE/core_cmInstr.h **** }
 395:CORE/core_cmInstr.h **** 
 396:CORE/core_cmInstr.h **** 
 397:CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 398:CORE/core_cmInstr.h **** 
 399:CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 400:CORE/core_cmInstr.h **** 
 401:CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 402:CORE/core_cmInstr.h ****     \return               Reversed value
 403:CORE/core_cmInstr.h ****  */
 404:CORE/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
 405:CORE/core_cmInstr.h **** {
 406:CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 407:CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
  85              		.loc 2 407 0
  86 0032 1BBA     		rev	r3, r3
  87              	.LVL9:
  88              	.LBE31:
  89              	.LBE30:
  90              		.loc 1 131 0
ARM GAS  /tmp/cc2L9YB0.s 			page 12


  91 0034 0493     		str	r3, [sp, #16]
  92              	.LVL10:
 132:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 133:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  93              		.loc 1 133 0
  94 0036 6B68     		ldr	r3, [r5, #4]
  95              	.LVL11:
  96              	.LBB32:
  97              	.LBB33:
  98              		.loc 2 407 0
  99 0038 1BBA     		rev	r3, r3
 100              	.LVL12:
 101              	.LBE33:
 102              	.LBE32:
 103              		.loc 1 133 0
 104 003a 0593     		str	r3, [sp, #20]
 105              	.LVL13:
 134:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 135:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 106              		.loc 1 135 0
 107 003c AB68     		ldr	r3, [r5, #8]
 108              	.LVL14:
 109              	.LBB34:
 110              	.LBB35:
 111              		.loc 2 407 0
 112 003e 1BBA     		rev	r3, r3
 113              	.LVL15:
 114              	.LBE35:
 115              	.LBE34:
 116              		.loc 1 135 0
 117 0040 0693     		str	r3, [sp, #24]
 118              	.LVL16:
 136:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 137:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 119              		.loc 1 137 0
 120 0042 EB68     		ldr	r3, [r5, #12]
 121              	.LVL17:
 122              	.LBB36:
 123              	.LBB37:
 124              		.loc 2 407 0
 125 0044 1BBA     		rev	r3, r3
 126              	.LVL18:
 127              	.LBE37:
 128              	.LBE36:
 129              		.loc 1 137 0
 130 0046 0793     		str	r3, [sp, #28]
 131              	.LVL19:
 138:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 139:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 132              		.loc 1 139 0
 133 0048 2B69     		ldr	r3, [r5, #16]
 134              	.LVL20:
 135              	.LBB38:
 136              	.LBB39:
 137              		.loc 2 407 0
 138 004a 1BBA     		rev	r3, r3
 139              	.LVL21:
ARM GAS  /tmp/cc2L9YB0.s 			page 13


 140              	.LBE39:
 141              	.LBE38:
 142              		.loc 1 139 0
 143 004c 0893     		str	r3, [sp, #32]
 144              	.LVL22:
 140:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 141:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 145              		.loc 1 141 0
 146 004e 6B69     		ldr	r3, [r5, #20]
 147              	.LVL23:
 148              	.LBB40:
 149              	.LBB41:
 150              		.loc 2 407 0
 151 0050 1BBA     		rev	r3, r3
 152              	.LVL24:
 153              	.LBE41:
 154              	.LBE40:
 155              		.loc 1 141 0
 156 0052 0993     		str	r3, [sp, #36]
 142:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 157              		.loc 1 142 0
 158 0054 02A8     		add	r0, sp, #8
 159 0056 FFF7FEFF 		bl	CRYP_KeyInit
 160              	.LVL25:
 143:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 144:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 145:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 161              		.loc 1 145 0
 162 005a FFF7FEFF 		bl	CRYP_FIFOFlush
 163              	.LVL26:
 146:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 147:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 148:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 164              		.loc 1 148 0
 165 005e 0120     		movs	r0, #1
 166 0060 FFF7FEFF 		bl	CRYP_Cmd
 167              	.LVL27:
 149:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 150:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 168              		.loc 1 150 0
 169 0064 FFF7FEFF 		bl	CRYP_GetCmdStatus
 170              	.LVL28:
 171 0068 88B3     		cbz	r0, .L11
 172 006a 0025     		movs	r5, #0
 173              	.LVL29:
 174 006c 0126     		movs	r6, #1
 175 006e 05E0     		b	.L5
 176              	.LVL30:
 177              	.L14:
 119:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 178              		.loc 1 119 0
 179 0070 0023     		movs	r3, #0
 180 0072 0A93     		str	r3, [sp, #40]
 181 0074 D5E7     		b	.L3
 182              	.LVL31:
 183              	.L6:
 151:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
ARM GAS  /tmp/cc2L9YB0.s 			page 14


 152:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
 153:FWLIB/src/stm32f4xx_cryp_tdes.c ****        the CRYP peripheral (please check the device sales type. */
 154:FWLIB/src/stm32f4xx_cryp_tdes.c ****     return(ERROR);
 155:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 156:FWLIB/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 157:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* Write the Input block in the Input FIFO */
 159:FWLIB/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 160:FWLIB/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 161:FWLIB/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 162:FWLIB/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 163:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 164:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* Wait until the complete message has been processed */
 165:FWLIB/src/stm32f4xx_cryp_tdes.c ****     counter = 0;
 166:FWLIB/src/stm32f4xx_cryp_tdes.c ****     do
 167:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 168:FWLIB/src/stm32f4xx_cryp_tdes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 169:FWLIB/src/stm32f4xx_cryp_tdes.c ****       counter++;
 170:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 171:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 172:FWLIB/src/stm32f4xx_cryp_tdes.c ****     if (busystatus != RESET)
 184              		.loc 1 172 0
 185 0076 DAB1     		cbz	r2, .L15
 173:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 174:FWLIB/src/stm32f4xx_cryp_tdes.c ****        status = ERROR;
 186              		.loc 1 174 0
 187 0078 0026     		movs	r6, #0
 188              	.LVL32:
 189              	.L8:
 156:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 190              		.loc 1 156 0 discriminator 2
 191 007a 0835     		adds	r5, r5, #8
 192              	.LVL33:
 193              	.L5:
 156:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 194              		.loc 1 156 0 is_stmt 0 discriminator 1
 195 007c 4545     		cmp	r5, r8
 196 007e 1FD2     		bcs	.L9
 156:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 197              		.loc 1 156 0 discriminator 3
 198 0080 F6B1     		cbz	r6, .L9
 159:FWLIB/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 199              		.loc 1 159 0 is_stmt 1
 200 0082 2068     		ldr	r0, [r4]
 201 0084 FFF7FEFF 		bl	CRYP_DataIn
 202              	.LVL34:
 161:FWLIB/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 203              		.loc 1 161 0
 204 0088 6068     		ldr	r0, [r4, #4]
 205 008a FFF7FEFF 		bl	CRYP_DataIn
 206              	.LVL35:
 162:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 207              		.loc 1 162 0
 208 008e 0834     		adds	r4, r4, #8
 209              	.LVL36:
 165:FWLIB/src/stm32f4xx_cryp_tdes.c ****     do
 210              		.loc 1 165 0
ARM GAS  /tmp/cc2L9YB0.s 			page 15


 211 0090 0023     		movs	r3, #0
 212 0092 0193     		str	r3, [sp, #4]
 213              	.L7:
 168:FWLIB/src/stm32f4xx_cryp_tdes.c ****       counter++;
 214              		.loc 1 168 0 discriminator 2
 215 0094 1020     		movs	r0, #16
 216 0096 FFF7FEFF 		bl	CRYP_GetFlagStatus
 217              	.LVL37:
 218 009a 0246     		mov	r2, r0
 219              	.LVL38:
 169:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 220              		.loc 1 169 0 discriminator 2
 221 009c 019B     		ldr	r3, [sp, #4]
 222 009e 0133     		adds	r3, r3, #1
 223 00a0 0193     		str	r3, [sp, #4]
 170:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 224              		.loc 1 170 0 discriminator 2
 225 00a2 019B     		ldr	r3, [sp, #4]
 226 00a4 B3F5803F 		cmp	r3, #65536
 227 00a8 E5D0     		beq	.L6
 170:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 228              		.loc 1 170 0 is_stmt 0 discriminator 1
 229 00aa 0028     		cmp	r0, #0
 230 00ac F2D1     		bne	.L7
 231 00ae E2E7     		b	.L6
 232              	.L15:
 175:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }
 176:FWLIB/src/stm32f4xx_cryp_tdes.c ****     else
 177:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 178:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 179:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Read the Output block from the Output FIFO */
 180:FWLIB/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 233              		.loc 1 180 0 is_stmt 1
 234 00b0 FFF7FEFF 		bl	CRYP_DataOut
 235              	.LVL39:
 236 00b4 3860     		str	r0, [r7]
 237              	.LVL40:
 181:FWLIB/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 182:FWLIB/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 238              		.loc 1 182 0
 239 00b6 FFF7FEFF 		bl	CRYP_DataOut
 240              	.LVL41:
 241 00ba 7860     		str	r0, [r7, #4]
 183:FWLIB/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 242              		.loc 1 183 0
 243 00bc 0837     		adds	r7, r7, #8
 244              	.LVL42:
 245 00be DCE7     		b	.L8
 246              	.L9:
 184:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }
 185:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 186:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 187:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Disable Crypto */
 188:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(DISABLE);
 247              		.loc 1 188 0
 248 00c0 0020     		movs	r0, #0
 249 00c2 FFF7FEFF 		bl	CRYP_Cmd
ARM GAS  /tmp/cc2L9YB0.s 			page 16


 250              	.LVL43:
 251              	.L4:
 189:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 190:FWLIB/src/stm32f4xx_cryp_tdes.c ****   return status; 
 191:FWLIB/src/stm32f4xx_cryp_tdes.c **** }
 252              		.loc 1 191 0
 253 00c6 3046     		mov	r0, r6
 254 00c8 0EB0     		add	sp, sp, #56
 255              	.LCFI2:
 256              		.cfi_remember_state
 257              		.cfi_def_cfa_offset 24
 258              		@ sp needed
 259 00ca BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 260              	.LVL44:
 261              	.L11:
 262              	.LCFI3:
 263              		.cfi_restore_state
 154:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 264              		.loc 1 154 0
 265 00ce 0026     		movs	r6, #0
 266 00d0 F9E7     		b	.L4
 267              		.cfi_endproc
 268              	.LFE112:
 270              		.section	.text.CRYP_TDES_CBC,"ax",%progbits
 271              		.align	1
 272              		.global	CRYP_TDES_CBC
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu softvfp
 278              	CRYP_TDES_CBC:
 279              	.LFB113:
 192:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 193:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
 194:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in CBC Mode
 195:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
 196:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
 197:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
 198:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
 199:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
 200:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  InitVectors: Initialisation Vectors used for TDES algorithm.
 201:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
 202:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 203:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
 204:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
 205:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
 206:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
 207:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
 208:FWLIB/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
 209:FWLIB/src/stm32f4xx_cryp_tdes.c ****                           uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 210:FWLIB/src/stm32f4xx_cryp_tdes.c **** {
 280              		.loc 1 210 0
 281              		.cfi_startproc
 282              		@ args = 8, pretend = 0, frame = 72
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              	.LVL45:
 285 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
ARM GAS  /tmp/cc2L9YB0.s 			page 17


 286              	.LCFI4:
 287              		.cfi_def_cfa_offset 28
 288              		.cfi_offset 4, -28
 289              		.cfi_offset 5, -24
 290              		.cfi_offset 6, -20
 291              		.cfi_offset 7, -16
 292              		.cfi_offset 8, -12
 293              		.cfi_offset 9, -8
 294              		.cfi_offset 14, -4
 295 0004 93B0     		sub	sp, sp, #76
 296              	.LCFI5:
 297              		.cfi_def_cfa_offset 104
 298 0006 8146     		mov	r9, r0
 299 0008 0D46     		mov	r5, r1
 300 000a 1646     		mov	r6, r2
 301 000c DDF86880 		ldr	r8, [sp, #104]
 211:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 212:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 213:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
 214:FWLIB/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
 302              		.loc 1 214 0
 303 0010 0022     		movs	r2, #0
 304              	.LVL46:
 305 0012 0192     		str	r2, [sp, #4]
 306              	.LVL47:
 215:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 216:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 217:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 218:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 307              		.loc 1 218 0
 308 0014 1C46     		mov	r4, r3
 309              	.LVL48:
 219:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
 310              		.loc 1 219 0
 311 0016 1B9F     		ldr	r7, [sp, #108]
 312              	.LVL49:
 220:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 221:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 222:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 223:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 224:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 313              		.loc 1 224 0
 314 0018 06A8     		add	r0, sp, #24
 315              	.LVL50:
 316 001a FFF7FEFF 		bl	CRYP_KeyStructInit
 317              	.LVL51:
 225:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 226:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 227:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
 318              		.loc 1 227 0
 319 001e B9F1010F 		cmp	r9, #1
 320 0022 31D0     		beq	.L29
 228:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 229:FWLIB/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 230:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 231:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else
 232:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
ARM GAS  /tmp/cc2L9YB0.s 			page 18


 233:FWLIB/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 321              		.loc 1 233 0
 322 0024 0423     		movs	r3, #4
 323 0026 0E93     		str	r3, [sp, #56]
 324              	.L18:
 234:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 235:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 325              		.loc 1 235 0
 326 0028 0823     		movs	r3, #8
 327 002a 0F93     		str	r3, [sp, #60]
 236:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 328              		.loc 1 236 0
 329 002c 8023     		movs	r3, #128
 330 002e 1093     		str	r3, [sp, #64]
 237:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 238:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
 331              		.loc 1 238 0
 332 0030 0EA8     		add	r0, sp, #56
 333 0032 FFF7FEFF 		bl	CRYP_Init
 334              	.LVL52:
 239:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 240:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 241:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 335              		.loc 1 241 0
 336 0036 2B68     		ldr	r3, [r5]
 337              	.LVL53:
 338              	.LBB42:
 339              	.LBB43:
 340              		.loc 2 407 0
 341 0038 1BBA     		rev	r3, r3
 342              	.LVL54:
 343              	.LBE43:
 344              	.LBE42:
 345              		.loc 1 241 0
 346 003a 0893     		str	r3, [sp, #32]
 347              	.LVL55:
 242:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 243:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 348              		.loc 1 243 0
 349 003c 6B68     		ldr	r3, [r5, #4]
 350              	.LVL56:
 351              	.LBB44:
 352              	.LBB45:
 353              		.loc 2 407 0
 354 003e 1BBA     		rev	r3, r3
 355              	.LVL57:
 356              	.LBE45:
 357              	.LBE44:
 358              		.loc 1 243 0
 359 0040 0993     		str	r3, [sp, #36]
 360              	.LVL58:
 244:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 245:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 361              		.loc 1 245 0
 362 0042 AB68     		ldr	r3, [r5, #8]
 363              	.LVL59:
 364              	.LBB46:
ARM GAS  /tmp/cc2L9YB0.s 			page 19


 365              	.LBB47:
 366              		.loc 2 407 0
 367 0044 1BBA     		rev	r3, r3
 368              	.LVL60:
 369              	.LBE47:
 370              	.LBE46:
 371              		.loc 1 245 0
 372 0046 0A93     		str	r3, [sp, #40]
 373              	.LVL61:
 246:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 247:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 374              		.loc 1 247 0
 375 0048 EB68     		ldr	r3, [r5, #12]
 376              	.LVL62:
 377              	.LBB48:
 378              	.LBB49:
 379              		.loc 2 407 0
 380 004a 1BBA     		rev	r3, r3
 381              	.LVL63:
 382              	.LBE49:
 383              	.LBE48:
 384              		.loc 1 247 0
 385 004c 0B93     		str	r3, [sp, #44]
 386              	.LVL64:
 248:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 249:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 387              		.loc 1 249 0
 388 004e 2B69     		ldr	r3, [r5, #16]
 389              	.LVL65:
 390              	.LBB50:
 391              	.LBB51:
 392              		.loc 2 407 0
 393 0050 1BBA     		rev	r3, r3
 394              	.LVL66:
 395              	.LBE51:
 396              	.LBE50:
 397              		.loc 1 249 0
 398 0052 0C93     		str	r3, [sp, #48]
 399              	.LVL67:
 250:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 251:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 400              		.loc 1 251 0
 401 0054 6B69     		ldr	r3, [r5, #20]
 402              	.LVL68:
 403              	.LBB52:
 404              	.LBB53:
 405              		.loc 2 407 0
 406 0056 1BBA     		rev	r3, r3
 407              	.LVL69:
 408              	.LBE53:
 409              	.LBE52:
 410              		.loc 1 251 0
 411 0058 0D93     		str	r3, [sp, #52]
 252:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 412              		.loc 1 252 0
 413 005a 06A8     		add	r0, sp, #24
 414 005c FFF7FEFF 		bl	CRYP_KeyInit
ARM GAS  /tmp/cc2L9YB0.s 			page 20


 415              	.LVL70:
 253:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 254:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Initialization Vectors */
 255:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 416              		.loc 1 255 0
 417 0060 3368     		ldr	r3, [r6]
 418              	.LVL71:
 419              	.LBB54:
 420              	.LBB55:
 421              		.loc 2 407 0
 422 0062 1BBA     		rev	r3, r3
 423              	.LVL72:
 424              	.LBE55:
 425              	.LBE54:
 426              		.loc 1 255 0
 427 0064 0293     		str	r3, [sp, #8]
 428              	.LVL73:
 256:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ivaddr+=4;
 257:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 429              		.loc 1 257 0
 430 0066 7368     		ldr	r3, [r6, #4]
 431              	.LVL74:
 432              	.LBB56:
 433              	.LBB57:
 434              		.loc 2 407 0
 435 0068 1BBA     		rev	r3, r3
 436              	.LVL75:
 437              	.LBE57:
 438              	.LBE56:
 439              		.loc 1 257 0
 440 006a 0393     		str	r3, [sp, #12]
 258:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 441              		.loc 1 258 0
 442 006c 02A8     		add	r0, sp, #8
 443 006e FFF7FEFF 		bl	CRYP_IVInit
 444              	.LVL76:
 259:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 260:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 261:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 445              		.loc 1 261 0
 446 0072 FFF7FEFF 		bl	CRYP_FIFOFlush
 447              	.LVL77:
 262:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 263:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 264:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 448              		.loc 1 264 0
 449 0076 0120     		movs	r0, #1
 450 0078 FFF7FEFF 		bl	CRYP_Cmd
 451              	.LVL78:
 265:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 266:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 452              		.loc 1 266 0
 453 007c FFF7FEFF 		bl	CRYP_GetCmdStatus
 454              	.LVL79:
 455 0080 88B3     		cbz	r0, .L26
 456 0082 0025     		movs	r5, #0
 457              	.LVL80:
ARM GAS  /tmp/cc2L9YB0.s 			page 21


 458 0084 0126     		movs	r6, #1
 459              	.LVL81:
 460 0086 05E0     		b	.L20
 461              	.LVL82:
 462              	.L29:
 229:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 463              		.loc 1 229 0
 464 0088 0023     		movs	r3, #0
 465 008a 0E93     		str	r3, [sp, #56]
 466 008c CCE7     		b	.L18
 467              	.LVL83:
 468              	.L21:
 267:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 268:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
 269:FWLIB/src/stm32f4xx_cryp_tdes.c ****        the CRYP peripheral (please check the device sales type. */
 270:FWLIB/src/stm32f4xx_cryp_tdes.c ****     return(ERROR);
 271:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 272:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 273:FWLIB/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 274:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 275:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* Write the Input block in the Input FIFO */
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 277:FWLIB/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 278:FWLIB/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 279:FWLIB/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 280:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 281:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* Wait until the complete message has been processed */
 282:FWLIB/src/stm32f4xx_cryp_tdes.c ****     counter = 0;
 283:FWLIB/src/stm32f4xx_cryp_tdes.c ****     do
 284:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 285:FWLIB/src/stm32f4xx_cryp_tdes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 286:FWLIB/src/stm32f4xx_cryp_tdes.c ****       counter++;
 287:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 288:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 289:FWLIB/src/stm32f4xx_cryp_tdes.c ****     if (busystatus != RESET)
 469              		.loc 1 289 0
 470 008e DAB1     		cbz	r2, .L30
 290:FWLIB/src/stm32f4xx_cryp_tdes.c ****    {
 291:FWLIB/src/stm32f4xx_cryp_tdes.c ****        status = ERROR;
 471              		.loc 1 291 0
 472 0090 0026     		movs	r6, #0
 473              	.LVL84:
 474              	.L23:
 273:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 475              		.loc 1 273 0 discriminator 2
 476 0092 0835     		adds	r5, r5, #8
 477              	.LVL85:
 478              	.L20:
 273:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 479              		.loc 1 273 0 is_stmt 0 discriminator 1
 480 0094 4545     		cmp	r5, r8
 481 0096 1FD2     		bcs	.L24
 273:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 482              		.loc 1 273 0 discriminator 3
 483 0098 F6B1     		cbz	r6, .L24
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 484              		.loc 1 276 0 is_stmt 1
ARM GAS  /tmp/cc2L9YB0.s 			page 22


 485 009a 2068     		ldr	r0, [r4]
 486 009c FFF7FEFF 		bl	CRYP_DataIn
 487              	.LVL86:
 278:FWLIB/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 488              		.loc 1 278 0
 489 00a0 6068     		ldr	r0, [r4, #4]
 490 00a2 FFF7FEFF 		bl	CRYP_DataIn
 491              	.LVL87:
 279:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 492              		.loc 1 279 0
 493 00a6 0834     		adds	r4, r4, #8
 494              	.LVL88:
 282:FWLIB/src/stm32f4xx_cryp_tdes.c ****     do
 495              		.loc 1 282 0
 496 00a8 0023     		movs	r3, #0
 497 00aa 0193     		str	r3, [sp, #4]
 498              	.L22:
 285:FWLIB/src/stm32f4xx_cryp_tdes.c ****       counter++;
 499              		.loc 1 285 0 discriminator 2
 500 00ac 1020     		movs	r0, #16
 501 00ae FFF7FEFF 		bl	CRYP_GetFlagStatus
 502              	.LVL89:
 503 00b2 0246     		mov	r2, r0
 504              	.LVL90:
 286:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 505              		.loc 1 286 0 discriminator 2
 506 00b4 019B     		ldr	r3, [sp, #4]
 507 00b6 0133     		adds	r3, r3, #1
 508 00b8 0193     		str	r3, [sp, #4]
 287:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 509              		.loc 1 287 0 discriminator 2
 510 00ba 019B     		ldr	r3, [sp, #4]
 511 00bc B3F5803F 		cmp	r3, #65536
 512 00c0 E5D0     		beq	.L21
 287:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 513              		.loc 1 287 0 is_stmt 0 discriminator 1
 514 00c2 0028     		cmp	r0, #0
 515 00c4 F2D1     		bne	.L22
 516 00c6 E2E7     		b	.L21
 517              	.L30:
 292:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }
 293:FWLIB/src/stm32f4xx_cryp_tdes.c ****     else
 294:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 295:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 296:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Read the Output block from the Output FIFO */
 297:FWLIB/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 518              		.loc 1 297 0 is_stmt 1
 519 00c8 FFF7FEFF 		bl	CRYP_DataOut
 520              	.LVL91:
 521 00cc 3860     		str	r0, [r7]
 522              	.LVL92:
 298:FWLIB/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 299:FWLIB/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 523              		.loc 1 299 0
 524 00ce FFF7FEFF 		bl	CRYP_DataOut
 525              	.LVL93:
 526 00d2 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cc2L9YB0.s 			page 23


 300:FWLIB/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 527              		.loc 1 300 0
 528 00d4 0837     		adds	r7, r7, #8
 529              	.LVL94:
 530 00d6 DCE7     		b	.L23
 531              	.L24:
 301:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }
 302:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 303:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 304:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Disable Crypto */
 305:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(DISABLE);
 532              		.loc 1 305 0
 533 00d8 0020     		movs	r0, #0
 534 00da FFF7FEFF 		bl	CRYP_Cmd
 535              	.LVL95:
 536              	.L19:
 306:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 307:FWLIB/src/stm32f4xx_cryp_tdes.c ****   return status; 
 308:FWLIB/src/stm32f4xx_cryp_tdes.c **** }
 537              		.loc 1 308 0
 538 00de 3046     		mov	r0, r6
 539 00e0 13B0     		add	sp, sp, #76
 540              	.LCFI6:
 541              		.cfi_remember_state
 542              		.cfi_def_cfa_offset 28
 543              		@ sp needed
 544 00e2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 545              	.LVL96:
 546              	.L26:
 547              	.LCFI7:
 548              		.cfi_restore_state
 270:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 549              		.loc 1 270 0
 550 00e6 0026     		movs	r6, #0
 551              	.LVL97:
 552 00e8 F9E7     		b	.L19
 553              		.cfi_endproc
 554              	.LFE113:
 556              		.text
 557              	.Letext0:
 558              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 559              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 560              		.file 5 "CORE/core_cm4.h"
 561              		.file 6 "USER/system_stm32f4xx.h"
 562              		.file 7 "USER/stm32f4xx.h"
 563              		.file 8 "FWLIB/inc/stm32f4xx_cryp.h"
ARM GAS  /tmp/cc2L9YB0.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp_tdes.c
     /tmp/cc2L9YB0.s:16     .text.CRYP_TDES_ECB:0000000000000000 $t
     /tmp/cc2L9YB0.s:23     .text.CRYP_TDES_ECB:0000000000000000 CRYP_TDES_ECB
     /tmp/cc2L9YB0.s:271    .text.CRYP_TDES_CBC:0000000000000000 $t
     /tmp/cc2L9YB0.s:278    .text.CRYP_TDES_CBC:0000000000000000 CRYP_TDES_CBC
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
