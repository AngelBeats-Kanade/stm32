ARM GAS  /tmp/cc7TDvj5.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f4xx_spi.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	SPI_I2S_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	SPI_I2S_DeInit:
  24              	.LFB112:
  25              		.file 1 "FWLIB/src/stm32f4xx_spi.c"
   1:FWLIB/src/stm32f4xx_spi.c **** /**
   2:FWLIB/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:FWLIB/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_spi.c ****   * @version V1.4.0
   6:FWLIB/src/stm32f4xx_spi.c ****   * @date    04-August-2014
   7:FWLIB/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:FWLIB/src/stm32f4xx_spi.c ****   *           + Initialization and Configuration
  10:FWLIB/src/stm32f4xx_spi.c ****   *           + Data transfers functions
  11:FWLIB/src/stm32f4xx_spi.c ****   *           + Hardware CRC Calculation
  12:FWLIB/src/stm32f4xx_spi.c ****   *           + DMA transfers management
  13:FWLIB/src/stm32f4xx_spi.c ****   *           + Interrupts and flags management 
  14:FWLIB/src/stm32f4xx_spi.c ****   *           
  15:FWLIB/src/stm32f4xx_spi.c **** @verbatim
  16:FWLIB/src/stm32f4xx_spi.c **** 
  17:FWLIB/src/stm32f4xx_spi.c ****  ===================================================================
  18:FWLIB/src/stm32f4xx_spi.c ****                   ##### How to use this driver #####
  19:FWLIB/src/stm32f4xx_spi.c ****  ===================================================================
  20:FWLIB/src/stm32f4xx_spi.c ****  [..]
  21:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable peripheral clock using the following functions 
  22:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  23:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  24:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3
  25:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI4
  26:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI5
  27:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI6.
  28:FWLIB/src/stm32f4xx_spi.c ****   
  29:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  30:FWLIB/src/stm32f4xx_spi.c ****        function. In I2S mode, if an external clock source is used then the I2S 
  31:FWLIB/src/stm32f4xx_spi.c ****        CKIN pin GPIO clock should also be enabled.
  32:FWLIB/src/stm32f4xx_spi.c ****   
  33:FWLIB/src/stm32f4xx_spi.c ****    (#) Peripherals alternate function: 
ARM GAS  /tmp/cc7TDvj5.s 			page 2


  34:FWLIB/src/stm32f4xx_spi.c ****        (++) Connect the pin to the desired peripherals' Alternate Function (AF) 
  35:FWLIB/src/stm32f4xx_spi.c ****             using GPIO_PinAFConfig() function
  36:FWLIB/src/stm32f4xx_spi.c ****        (++) Configure the desired pin in alternate function by: 
  37:FWLIB/src/stm32f4xx_spi.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:FWLIB/src/stm32f4xx_spi.c ****        (++) Select the type, pull-up/pull-down and output speed via GPIO_PuPd, 
  39:FWLIB/src/stm32f4xx_spi.c ****             GPIO_OType and GPIO_Speed members
  40:FWLIB/src/stm32f4xx_spi.c ****        (++) Call GPIO_Init() function In I2S mode, if an external clock source is 
  41:FWLIB/src/stm32f4xx_spi.c ****             used then the I2S CKIN pin should be also configured in Alternate 
  42:FWLIB/src/stm32f4xx_spi.c ****             function Push-pull pull-up mode. 
  43:FWLIB/src/stm32f4xx_spi.c ****           
  44:FWLIB/src/stm32f4xx_spi.c ****    (#) Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  45:FWLIB/src/stm32f4xx_spi.c ****        Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  46:FWLIB/src/stm32f4xx_spi.c ****        function.
  47:FWLIB/src/stm32f4xx_spi.c ****        In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  48:FWLIB/src/stm32f4xx_spi.c ****        frequency and Polarity using I2S_Init() function. For I2S mode, make sure 
  49:FWLIB/src/stm32f4xx_spi.c ****        that either:
  50:FWLIB/src/stm32f4xx_spi.c ****        (++) I2S PLL is configured using the functions 
  51:FWLIB/src/stm32f4xx_spi.c ****             RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLLI2S), RCC_PLLI2SCmd(ENABLE) and 
  52:FWLIB/src/stm32f4xx_spi.c ****             RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY); or 
  53:FWLIB/src/stm32f4xx_spi.c ****        (++) External clock source is configured using the function 
  54:FWLIB/src/stm32f4xx_spi.c ****             RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly 
  55:FWLIB/src/stm32f4xx_spi.c ****             the define constant I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  56:FWLIB/src/stm32f4xx_spi.c ****   
  57:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the NVIC and the corresponding interrupt using the function 
  58:FWLIB/src/stm32f4xx_spi.c ****        SPI_ITConfig() if you need to use interrupt mode. 
  59:FWLIB/src/stm32f4xx_spi.c ****   
  60:FWLIB/src/stm32f4xx_spi.c ****    (#) When using the DMA mode 
  61:FWLIB/src/stm32f4xx_spi.c ****        (++) Configure the DMA using DMA_Init() function
  62:FWLIB/src/stm32f4xx_spi.c ****        (++) Active the needed channel Request using SPI_I2S_DMACmd() function
  63:FWLIB/src/stm32f4xx_spi.c ****    
  64:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the SPI using the SPI_Cmd() function or enable the I2S using
  65:FWLIB/src/stm32f4xx_spi.c ****        I2S_Cmd().
  66:FWLIB/src/stm32f4xx_spi.c ****    
  67:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  68:FWLIB/src/stm32f4xx_spi.c ****   
  69:FWLIB/src/stm32f4xx_spi.c ****    (#) Optionally, you can enable/configure the following parameters without
  70:FWLIB/src/stm32f4xx_spi.c ****        re-initialization (i.e there is no need to call again SPI_Init() function):
  71:FWLIB/src/stm32f4xx_spi.c ****        (++) When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  72:FWLIB/src/stm32f4xx_spi.c ****             is programmed as Data direction parameter using the SPI_Init() function
  73:FWLIB/src/stm32f4xx_spi.c ****             it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  74:FWLIB/src/stm32f4xx_spi.c ****             using the SPI_BiDirectionalLineConfig() function.
  75:FWLIB/src/stm32f4xx_spi.c ****        (++) When SPI_NSS_Soft is selected as Slave Select Management parameter 
  76:FWLIB/src/stm32f4xx_spi.c ****             using the SPI_Init() function it can be possible to manage the 
  77:FWLIB/src/stm32f4xx_spi.c ****             NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  78:FWLIB/src/stm32f4xx_spi.c ****        (++) Reconfigure the data size using the SPI_DataSizeConfig() function  
  79:FWLIB/src/stm32f4xx_spi.c ****        (++) Enable or disable the SS output using the SPI_SSOutputCmd() function  
  80:FWLIB/src/stm32f4xx_spi.c ****             
  81:FWLIB/src/stm32f4xx_spi.c ****     (#) To use the CRC Hardware calculation feature refer to the Peripheral 
  82:FWLIB/src/stm32f4xx_spi.c ****         CRC hardware Calculation subsection.
  83:FWLIB/src/stm32f4xx_spi.c ****      
  84:FWLIB/src/stm32f4xx_spi.c ****   
  85:FWLIB/src/stm32f4xx_spi.c ****  [..] It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  86:FWLIB/src/stm32f4xx_spi.c ****       peripheral is able to manage sending and receiving data simultaneously
  87:FWLIB/src/stm32f4xx_spi.c ****       using two data lines. Each SPI peripheral has an extended block called I2Sxext
  88:FWLIB/src/stm32f4xx_spi.c ****       (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  89:FWLIB/src/stm32f4xx_spi.c ****       The extension block is not a full SPI IP, it is used only as I2S slave to
  90:FWLIB/src/stm32f4xx_spi.c ****       implement full duplex mode. The extension block uses the same clock sources
ARM GAS  /tmp/cc7TDvj5.s 			page 3


  91:FWLIB/src/stm32f4xx_spi.c ****       as its master.          
  92:FWLIB/src/stm32f4xx_spi.c ****       To configure I2S full duplex you have to:
  93:FWLIB/src/stm32f4xx_spi.c ****               
  94:FWLIB/src/stm32f4xx_spi.c ****       (#) Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  95:FWLIB/src/stm32f4xx_spi.c ****              
  96:FWLIB/src/stm32f4xx_spi.c ****       (#) Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  97:FWLIB/src/stm32f4xx_spi.c ****           I2S_Init() function.
  98:FWLIB/src/stm32f4xx_spi.c ****               
  99:FWLIB/src/stm32f4xx_spi.c ****       (#) Call I2S_Cmd() for SPIx then for its extended block.
 100:FWLIB/src/stm32f4xx_spi.c ****             
 101:FWLIB/src/stm32f4xx_spi.c ****       (#) To configure interrupts or DMA requests and to get/clear flag status, 
 102:FWLIB/src/stm32f4xx_spi.c ****           use I2Sxext instance for the extension block.
 103:FWLIB/src/stm32f4xx_spi.c ****                
 104:FWLIB/src/stm32f4xx_spi.c ****  [..] Functions that can be called with I2Sxext instances are: I2S_Cmd(), 
 105:FWLIB/src/stm32f4xx_spi.c ****       I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 106:FWLIB/src/stm32f4xx_spi.c ****       SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), 
 107:FWLIB/src/stm32f4xx_spi.c ****       SPI_I2S_ClearFlag(), SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 108:FWLIB/src/stm32f4xx_spi.c ****                    
 109:FWLIB/src/stm32f4xx_spi.c ****       Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 110:FWLIB/src/stm32f4xx_spi.c ****               
 111:FWLIB/src/stm32f4xx_spi.c ****       RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 112:FWLIB/src/stm32f4xx_spi.c ****       I2S_StructInit(&I2SInitStruct);
 113:FWLIB/src/stm32f4xx_spi.c ****       I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 114:FWLIB/src/stm32f4xx_spi.c ****       I2S_Init(SPI3, &I2SInitStruct);
 115:FWLIB/src/stm32f4xx_spi.c ****       I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 116:FWLIB/src/stm32f4xx_spi.c ****       I2S_Cmd(SPI3, ENABLE);
 117:FWLIB/src/stm32f4xx_spi.c ****       I2S_Cmd(SPI3ext, ENABLE);
 118:FWLIB/src/stm32f4xx_spi.c ****       ...
 119:FWLIB/src/stm32f4xx_spi.c ****       while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 120:FWLIB/src/stm32f4xx_spi.c ****       {}
 121:FWLIB/src/stm32f4xx_spi.c ****       SPI_I2S_SendData(SPI3, txdata[i]);
 122:FWLIB/src/stm32f4xx_spi.c ****       ...  
 123:FWLIB/src/stm32f4xx_spi.c ****       while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 124:FWLIB/src/stm32f4xx_spi.c ****       {}
 125:FWLIB/src/stm32f4xx_spi.c ****       rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 126:FWLIB/src/stm32f4xx_spi.c ****       ...          
 127:FWLIB/src/stm32f4xx_spi.c ****                 
 128:FWLIB/src/stm32f4xx_spi.c ****  [..]       
 129:FWLIB/src/stm32f4xx_spi.c ****    (@) In I2S mode: if an external clock is used as source clock for the I2S,  
 130:FWLIB/src/stm32f4xx_spi.c ****        then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 131:FWLIB/src/stm32f4xx_spi.c ****        be enabled and set to the value of the source clock frequency (in Hz).
 132:FWLIB/src/stm32f4xx_spi.c ****    
 133:FWLIB/src/stm32f4xx_spi.c ****    (@) In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 134:FWLIB/src/stm32f4xx_spi.c ****        just after calling the function SPI_Init().
 135:FWLIB/src/stm32f4xx_spi.c ****   
 136:FWLIB/src/stm32f4xx_spi.c **** @endverbatim  
 137:FWLIB/src/stm32f4xx_spi.c ****   *                                  
 138:FWLIB/src/stm32f4xx_spi.c ****   ******************************************************************************
 139:FWLIB/src/stm32f4xx_spi.c ****   * @attention
 140:FWLIB/src/stm32f4xx_spi.c ****   *
 141:FWLIB/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 142:FWLIB/src/stm32f4xx_spi.c ****   *
 143:FWLIB/src/stm32f4xx_spi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 144:FWLIB/src/stm32f4xx_spi.c ****   * You may not use this file except in compliance with the License.
 145:FWLIB/src/stm32f4xx_spi.c ****   * You may obtain a copy of the License at:
 146:FWLIB/src/stm32f4xx_spi.c ****   *
 147:FWLIB/src/stm32f4xx_spi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
ARM GAS  /tmp/cc7TDvj5.s 			page 4


 148:FWLIB/src/stm32f4xx_spi.c ****   *
 149:FWLIB/src/stm32f4xx_spi.c ****   * Unless required by applicable law or agreed to in writing, software 
 150:FWLIB/src/stm32f4xx_spi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 151:FWLIB/src/stm32f4xx_spi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 152:FWLIB/src/stm32f4xx_spi.c ****   * See the License for the specific language governing permissions and
 153:FWLIB/src/stm32f4xx_spi.c ****   * limitations under the License.
 154:FWLIB/src/stm32f4xx_spi.c ****   *
 155:FWLIB/src/stm32f4xx_spi.c ****   ******************************************************************************  
 156:FWLIB/src/stm32f4xx_spi.c ****   */ 
 157:FWLIB/src/stm32f4xx_spi.c **** 
 158:FWLIB/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 159:FWLIB/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 160:FWLIB/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 161:FWLIB/src/stm32f4xx_spi.c **** 
 162:FWLIB/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 163:FWLIB/src/stm32f4xx_spi.c ****   * @{
 164:FWLIB/src/stm32f4xx_spi.c ****   */
 165:FWLIB/src/stm32f4xx_spi.c **** 
 166:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 167:FWLIB/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 168:FWLIB/src/stm32f4xx_spi.c ****   * @{
 169:FWLIB/src/stm32f4xx_spi.c ****   */ 
 170:FWLIB/src/stm32f4xx_spi.c **** 
 171:FWLIB/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 172:FWLIB/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 173:FWLIB/src/stm32f4xx_spi.c **** 
 174:FWLIB/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 175:FWLIB/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 176:FWLIB/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 177:FWLIB/src/stm32f4xx_spi.c **** 
 178:FWLIB/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 179:FWLIB/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 180:FWLIB/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 181:FWLIB/src/stm32f4xx_spi.c **** 
 182:FWLIB/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 183:FWLIB/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 184:FWLIB/src/stm32f4xx_spi.c **** 
 185:FWLIB/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 186:FWLIB/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 187:FWLIB/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 188:FWLIB/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 189:FWLIB/src/stm32f4xx_spi.c **** 
 190:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 191:FWLIB/src/stm32f4xx_spi.c ****   * @{
 192:FWLIB/src/stm32f4xx_spi.c ****   */
 193:FWLIB/src/stm32f4xx_spi.c **** 
 194:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 195:FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 196:FWLIB/src/stm32f4xx_spi.c ****  *
 197:FWLIB/src/stm32f4xx_spi.c **** @verbatim   
 198:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
 199:FWLIB/src/stm32f4xx_spi.c ****              ##### Initialization and Configuration functions ##### 
 200:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
 201:FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to initialize the SPI 
 202:FWLIB/src/stm32f4xx_spi.c ****       Direction, SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS 
 203:FWLIB/src/stm32f4xx_spi.c ****       Management, SPI Baud Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 204:FWLIB/src/stm32f4xx_spi.c ****   
ARM GAS  /tmp/cc7TDvj5.s 			page 5


 205:FWLIB/src/stm32f4xx_spi.c ****  [..] The SPI_Init() function follows the SPI configuration procedures for Master 
 206:FWLIB/src/stm32f4xx_spi.c ****       mode and Slave mode (details for these procedures are available in reference 
 207:FWLIB/src/stm32f4xx_spi.c ****       manual (RM0090)).
 208:FWLIB/src/stm32f4xx_spi.c ****   
 209:FWLIB/src/stm32f4xx_spi.c **** @endverbatim
 210:FWLIB/src/stm32f4xx_spi.c ****   * @{
 211:FWLIB/src/stm32f4xx_spi.c ****   */
 212:FWLIB/src/stm32f4xx_spi.c **** 
 213:FWLIB/src/stm32f4xx_spi.c **** /**
 214:FWLIB/src/stm32f4xx_spi.c ****   * @brief  De-initialize the SPIx peripheral registers to their default reset values.
 215:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 216:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 217:FWLIB/src/stm32f4xx_spi.c ****   *         
 218:FWLIB/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are de-initialized
 219:FWLIB/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is de-initialized (the extended block's clock
 220:FWLIB/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 221:FWLIB/src/stm32f4xx_spi.c ****   *             
 222:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 223:FWLIB/src/stm32f4xx_spi.c ****   */
 224:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 225:FWLIB/src/stm32f4xx_spi.c **** {
  26              		.loc 1 225 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
 226:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 227:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 228:FWLIB/src/stm32f4xx_spi.c **** 
 229:FWLIB/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
  36              		.loc 1 229 0
  37 0002 2A4B     		ldr	r3, .L15
  38 0004 9842     		cmp	r0, r3
  39 0006 0FD0     		beq	.L9
 230:FWLIB/src/stm32f4xx_spi.c ****   {
 231:FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 232:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 233:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 234:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 235:FWLIB/src/stm32f4xx_spi.c ****   }
 236:FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
  40              		.loc 1 236 0
  41 0008 294B     		ldr	r3, .L15+4
  42 000a 9842     		cmp	r0, r3
  43 000c 17D0     		beq	.L10
 237:FWLIB/src/stm32f4xx_spi.c ****   {
 238:FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 239:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 240:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 241:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 242:FWLIB/src/stm32f4xx_spi.c ****   }
 243:FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI3)
ARM GAS  /tmp/cc7TDvj5.s 			page 6


  44              		.loc 1 243 0
  45 000e 294B     		ldr	r3, .L15+8
  46 0010 9842     		cmp	r0, r3
  47 0012 1FD0     		beq	.L11
 244:FWLIB/src/stm32f4xx_spi.c ****   {
 245:FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI3 reset state */
 246:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 247:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI3 from reset state */
 248:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 249:FWLIB/src/stm32f4xx_spi.c ****   }
 250:FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI4)
  48              		.loc 1 250 0
  49 0014 284B     		ldr	r3, .L15+12
  50 0016 9842     		cmp	r0, r3
  51 0018 27D0     		beq	.L12
 251:FWLIB/src/stm32f4xx_spi.c ****   {
 252:FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI4 reset state */
 253:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 254:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI4 from reset state */
 255:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 256:FWLIB/src/stm32f4xx_spi.c ****   }
 257:FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI5)
  52              		.loc 1 257 0
  53 001a 284B     		ldr	r3, .L15+16
  54 001c 9842     		cmp	r0, r3
  55 001e 2FD0     		beq	.L13
 258:FWLIB/src/stm32f4xx_spi.c ****   {
 259:FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI5 reset state */
 260:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 261:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI5 from reset state */
 262:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 263:FWLIB/src/stm32f4xx_spi.c ****   }
 264:FWLIB/src/stm32f4xx_spi.c ****   else 
 265:FWLIB/src/stm32f4xx_spi.c ****   {
 266:FWLIB/src/stm32f4xx_spi.c ****     if (SPIx == SPI6)
  56              		.loc 1 266 0
  57 0020 274B     		ldr	r3, .L15+20
  58 0022 9842     		cmp	r0, r3
  59 0024 37D0     		beq	.L14
  60              	.LVL1:
  61              	.L1:
  62 0026 08BD     		pop	{r3, pc}
  63              	.LVL2:
  64              	.L9:
 232:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
  65              		.loc 1 232 0
  66 0028 0121     		movs	r1, #1
  67 002a 4FF48050 		mov	r0, #4096
  68              	.LVL3:
  69 002e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  70              	.LVL4:
 234:FWLIB/src/stm32f4xx_spi.c ****   }
  71              		.loc 1 234 0
  72 0032 0021     		movs	r1, #0
  73 0034 4FF48050 		mov	r0, #4096
  74 0038 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  75              	.LVL5:
ARM GAS  /tmp/cc7TDvj5.s 			page 7


  76 003c 08BD     		pop	{r3, pc}
  77              	.LVL6:
  78              	.L10:
 239:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
  79              		.loc 1 239 0
  80 003e 0121     		movs	r1, #1
  81 0040 4FF48040 		mov	r0, #16384
  82              	.LVL7:
  83 0044 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  84              	.LVL8:
 241:FWLIB/src/stm32f4xx_spi.c ****   }
  85              		.loc 1 241 0
  86 0048 0021     		movs	r1, #0
  87 004a 4FF48040 		mov	r0, #16384
  88 004e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  89              	.LVL9:
  90 0052 08BD     		pop	{r3, pc}
  91              	.LVL10:
  92              	.L11:
 246:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI3 from reset state */
  93              		.loc 1 246 0
  94 0054 0121     		movs	r1, #1
  95 0056 4FF40040 		mov	r0, #32768
  96              	.LVL11:
  97 005a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  98              	.LVL12:
 248:FWLIB/src/stm32f4xx_spi.c ****   }
  99              		.loc 1 248 0
 100 005e 0021     		movs	r1, #0
 101 0060 4FF40040 		mov	r0, #32768
 102 0064 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 103              	.LVL13:
 104 0068 08BD     		pop	{r3, pc}
 105              	.LVL14:
 106              	.L12:
 253:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI4 from reset state */
 107              		.loc 1 253 0
 108 006a 0121     		movs	r1, #1
 109 006c 4FF40050 		mov	r0, #8192
 110              	.LVL15:
 111 0070 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 112              	.LVL16:
 255:FWLIB/src/stm32f4xx_spi.c ****   }
 113              		.loc 1 255 0
 114 0074 0021     		movs	r1, #0
 115 0076 4FF40050 		mov	r0, #8192
 116 007a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 117              	.LVL17:
 118 007e 08BD     		pop	{r3, pc}
 119              	.LVL18:
 120              	.L13:
 260:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI5 from reset state */
 121              		.loc 1 260 0
 122 0080 0121     		movs	r1, #1
 123 0082 4FF48010 		mov	r0, #1048576
 124              	.LVL19:
 125 0086 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
ARM GAS  /tmp/cc7TDvj5.s 			page 8


 126              	.LVL20:
 262:FWLIB/src/stm32f4xx_spi.c ****   }
 127              		.loc 1 262 0
 128 008a 0021     		movs	r1, #0
 129 008c 4FF48010 		mov	r0, #1048576
 130 0090 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 131              	.LVL21:
 132 0094 08BD     		pop	{r3, pc}
 133              	.LVL22:
 134              	.L14:
 267:FWLIB/src/stm32f4xx_spi.c ****     {
 268:FWLIB/src/stm32f4xx_spi.c ****       /* Enable SPI6 reset state */
 269:FWLIB/src/stm32f4xx_spi.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 135              		.loc 1 269 0
 136 0096 0121     		movs	r1, #1
 137 0098 4FF40010 		mov	r0, #2097152
 138              	.LVL23:
 139 009c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 140              	.LVL24:
 270:FWLIB/src/stm32f4xx_spi.c ****       /* Release SPI6 from reset state */
 271:FWLIB/src/stm32f4xx_spi.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 141              		.loc 1 271 0
 142 00a0 0021     		movs	r1, #0
 143 00a2 4FF40010 		mov	r0, #2097152
 144 00a6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 145              	.LVL25:
 272:FWLIB/src/stm32f4xx_spi.c ****     }
 273:FWLIB/src/stm32f4xx_spi.c ****   }
 274:FWLIB/src/stm32f4xx_spi.c **** }
 146              		.loc 1 274 0
 147 00aa BCE7     		b	.L1
 148              	.L16:
 149              		.align	2
 150              	.L15:
 151 00ac 00300140 		.word	1073819648
 152 00b0 00380040 		.word	1073756160
 153 00b4 003C0040 		.word	1073757184
 154 00b8 00340140 		.word	1073820672
 155 00bc 00500140 		.word	1073827840
 156 00c0 00540140 		.word	1073828864
 157              		.cfi_endproc
 158              	.LFE112:
 160              		.section	.text.SPI_Init,"ax",%progbits
 161              		.align	1
 162              		.global	SPI_Init
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu softvfp
 168              	SPI_Init:
 169              	.LFB113:
 275:FWLIB/src/stm32f4xx_spi.c **** 
 276:FWLIB/src/stm32f4xx_spi.c **** /**
 277:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 278:FWLIB/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 279:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 280:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
ARM GAS  /tmp/cc7TDvj5.s 			page 9


 281:FWLIB/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 282:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 283:FWLIB/src/stm32f4xx_spi.c ****   */
 284:FWLIB/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 285:FWLIB/src/stm32f4xx_spi.c **** {
 170              		.loc 1 285 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              	.LVL26:
 175 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 176              	.LCFI1:
 177              		.cfi_def_cfa_offset 24
 178              		.cfi_offset 4, -24
 179              		.cfi_offset 5, -20
 180              		.cfi_offset 6, -16
 181              		.cfi_offset 7, -12
 182              		.cfi_offset 8, -8
 183              		.cfi_offset 14, -4
 184              	.LVL27:
 286:FWLIB/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 287:FWLIB/src/stm32f4xx_spi.c ****   
 288:FWLIB/src/stm32f4xx_spi.c ****   /* check the parameters */
 289:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 290:FWLIB/src/stm32f4xx_spi.c ****   
 291:FWLIB/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 292:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 293:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 294:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 295:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 296:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 297:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 298:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 299:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 300:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 301:FWLIB/src/stm32f4xx_spi.c **** 
 302:FWLIB/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 303:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 304:FWLIB/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 185              		.loc 1 304 0
 186 0004 0388     		ldrh	r3, [r0]
 187              	.LVL28:
 305:FWLIB/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 306:FWLIB/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 188              		.loc 1 306 0
 189 0006 03F44153 		and	r3, r3, #12352
 190              	.LVL29:
 307:FWLIB/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 308:FWLIB/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 309:FWLIB/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 310:FWLIB/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 311:FWLIB/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 312:FWLIB/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 313:FWLIB/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 314:FWLIB/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 315:FWLIB/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 191              		.loc 1 315 0
ARM GAS  /tmp/cc7TDvj5.s 			page 10


 192 000a B1F800C0 		ldrh	ip, [r1]
 193 000e B1F80280 		ldrh	r8, [r1, #2]
 316:FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 194              		.loc 1 316 0
 195 0012 B1F804E0 		ldrh	lr, [r1, #4]
 196 0016 CF88     		ldrh	r7, [r1, #6]
 317:FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 197              		.loc 1 317 0
 198 0018 0E89     		ldrh	r6, [r1, #8]
 199 001a 4D89     		ldrh	r5, [r1, #10]
 318:FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 200              		.loc 1 318 0
 201 001c 8C89     		ldrh	r4, [r1, #12]
 202 001e CA89     		ldrh	r2, [r1, #14]
 315:FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 203              		.loc 1 315 0
 204 0020 4CEA080C 		orr	ip, ip, r8
 205 0024 4EEA0C0E 		orr	lr, lr, ip
 206 0028 47EA0E07 		orr	r7, r7, lr
 207 002c 3E43     		orrs	r6, r6, r7
 208 002e 3543     		orrs	r5, r5, r6
 209 0030 2C43     		orrs	r4, r4, r5
 210 0032 2243     		orrs	r2, r2, r4
 211 0034 1343     		orrs	r3, r3, r2
 212              	.LVL30:
 319:FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 320:FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 213              		.loc 1 320 0
 214 0036 0380     		strh	r3, [r0]	@ movhi
 321:FWLIB/src/stm32f4xx_spi.c **** 
 322:FWLIB/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 323:FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 215              		.loc 1 323 0
 216 0038 838B     		ldrh	r3, [r0, #28]
 217              	.LVL31:
 218 003a 9BB2     		uxth	r3, r3
 219 003c 23F40063 		bic	r3, r3, #2048
 220 0040 9BB2     		uxth	r3, r3
 221 0042 8383     		strh	r3, [r0, #28]	@ movhi
 222              	.LVL32:
 324:FWLIB/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 325:FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 326:FWLIB/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 223              		.loc 1 326 0
 224 0044 0B8A     		ldrh	r3, [r1, #16]
 225 0046 0382     		strh	r3, [r0, #16]	@ movhi
 226 0048 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 227              		.cfi_endproc
 228              	.LFE113:
 230              		.section	.text.I2S_Init,"ax",%progbits
 231              		.align	1
 232              		.global	I2S_Init
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu softvfp
 238              	I2S_Init:
ARM GAS  /tmp/cc7TDvj5.s 			page 11


 239              	.LFB114:
 327:FWLIB/src/stm32f4xx_spi.c **** }
 328:FWLIB/src/stm32f4xx_spi.c **** 
 329:FWLIB/src/stm32f4xx_spi.c **** /**
 330:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 331:FWLIB/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 332:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 333:FWLIB/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 334:FWLIB/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 335:FWLIB/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 336:FWLIB/src/stm32f4xx_spi.c ****   *           
 337:FWLIB/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 338:FWLIB/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 339:FWLIB/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 340:FWLIB/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 341:FWLIB/src/stm32f4xx_spi.c ****   * 
 342:FWLIB/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 343:FWLIB/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 344:FWLIB/src/stm32f4xx_spi.c ****   *         to the value of the the source clock frequency (in Hz).
 345:FWLIB/src/stm32f4xx_spi.c ****   *  
 346:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 347:FWLIB/src/stm32f4xx_spi.c ****   */
 348:FWLIB/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 349:FWLIB/src/stm32f4xx_spi.c **** {
 240              		.loc 1 349 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              	.LVL33:
 245 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 246              	.LCFI2:
 247              		.cfi_def_cfa_offset 20
 248              		.cfi_offset 4, -20
 249              		.cfi_offset 5, -16
 250              		.cfi_offset 6, -12
 251              		.cfi_offset 7, -8
 252              		.cfi_offset 14, -4
 253              	.LVL34:
 350:FWLIB/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 351:FWLIB/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 352:FWLIB/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 353:FWLIB/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 354:FWLIB/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 355:FWLIB/src/stm32f4xx_spi.c ****   
 356:FWLIB/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 357:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 358:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 359:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 360:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 361:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 362:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 363:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 364:FWLIB/src/stm32f4xx_spi.c **** 
 365:FWLIB/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 366:FWLIB/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 367:FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 254              		.loc 1 367 0
ARM GAS  /tmp/cc7TDvj5.s 			page 12


 255 0002 838B     		ldrh	r3, [r0, #28]
 256 0004 9BB2     		uxth	r3, r3
 257 0006 23F47B63 		bic	r3, r3, #4016
 258 000a 23F00F03 		bic	r3, r3, #15
 259 000e 9BB2     		uxth	r3, r3
 260 0010 8383     		strh	r3, [r0, #28]	@ movhi
 368:FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 261              		.loc 1 368 0
 262 0012 0223     		movs	r3, #2
 263 0014 0384     		strh	r3, [r0, #32]	@ movhi
 369:FWLIB/src/stm32f4xx_spi.c ****   
 370:FWLIB/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 371:FWLIB/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 264              		.loc 1 371 0
 265 0016 828B     		ldrh	r2, [r0, #28]
 266 0018 92B2     		uxth	r2, r2
 267              	.LVL35:
 372:FWLIB/src/stm32f4xx_spi.c ****   
 373:FWLIB/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 374:FWLIB/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 268              		.loc 1 374 0
 269 001a 8B68     		ldr	r3, [r1, #8]
 270 001c 022B     		cmp	r3, #2
 271 001e 6AD0     		beq	.L28
 375:FWLIB/src/stm32f4xx_spi.c ****   {
 376:FWLIB/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 377:FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 378:FWLIB/src/stm32f4xx_spi.c ****   }
 379:FWLIB/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 380:FWLIB/src/stm32f4xx_spi.c ****   else
 381:FWLIB/src/stm32f4xx_spi.c ****   {
 382:FWLIB/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 383:FWLIB/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 272              		.loc 1 383 0
 273 0020 8B88     		ldrh	r3, [r1, #4]
 274 0022 002B     		cmp	r3, #0
 275 0024 52D1     		bne	.L29
 384:FWLIB/src/stm32f4xx_spi.c ****     {
 385:FWLIB/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 386:FWLIB/src/stm32f4xx_spi.c ****       packetlength = 1;
 276              		.loc 1 386 0
 277 0026 4FF0010E 		mov	lr, #1
 278              	.L21:
 279              	.LVL36:
 387:FWLIB/src/stm32f4xx_spi.c ****     }
 388:FWLIB/src/stm32f4xx_spi.c ****     else
 389:FWLIB/src/stm32f4xx_spi.c ****     {
 390:FWLIB/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 391:FWLIB/src/stm32f4xx_spi.c ****       packetlength = 2;
 392:FWLIB/src/stm32f4xx_spi.c ****     }
 393:FWLIB/src/stm32f4xx_spi.c **** 
 394:FWLIB/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency  ****************************************/
 395:FWLIB/src/stm32f4xx_spi.c ****       
 396:FWLIB/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 397:FWLIB/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 398:FWLIB/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 399:FWLIB/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
ARM GAS  /tmp/cc7TDvj5.s 			page 13


 400:FWLIB/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 401:FWLIB/src/stm32f4xx_spi.c ****     {
 402:FWLIB/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 403:FWLIB/src/stm32f4xx_spi.c ****     }
 404:FWLIB/src/stm32f4xx_spi.c ****     
 405:FWLIB/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 406:FWLIB/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 407:FWLIB/src/stm32f4xx_spi.c **** 
 408:FWLIB/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 409:FWLIB/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 410:FWLIB/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 280              		.loc 1 410 0
 281 002a 344B     		ldr	r3, .L33
 282 002c 9B68     		ldr	r3, [r3, #8]
 283 002e 13F4000F 		tst	r3, #8388608
 284 0032 04D0     		beq	.L22
 411:FWLIB/src/stm32f4xx_spi.c ****     {
 412:FWLIB/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 285              		.loc 1 412 0
 286 0034 314C     		ldr	r4, .L33
 287 0036 A368     		ldr	r3, [r4, #8]
 288 0038 23F40003 		bic	r3, r3, #8388608
 289 003c A360     		str	r3, [r4, #8]
 290              	.L22:
 413:FWLIB/src/stm32f4xx_spi.c ****     }    
 414:FWLIB/src/stm32f4xx_spi.c ****     
 415:FWLIB/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 416:FWLIB/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 291              		.loc 1 416 0
 292 003e 2F4D     		ldr	r5, .L33
 293 0040 D5F88460 		ldr	r6, [r5, #132]
 294 0044 C6F38816 		ubfx	r6, r6, #6, #9
 295              	.LVL37:
 417:FWLIB/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 418:FWLIB/src/stm32f4xx_spi.c ****     
 419:FWLIB/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 420:FWLIB/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 296              		.loc 1 420 0
 297 0048 D5F88430 		ldr	r3, [r5, #132]
 298 004c C3F30273 		ubfx	r3, r3, #28, #3
 299              	.LVL38:
 421:FWLIB/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 422:FWLIB/src/stm32f4xx_spi.c ****     
 423:FWLIB/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 424:FWLIB/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 300              		.loc 1 424 0
 301 0050 6F68     		ldr	r7, [r5, #4]
 302 0052 07F03F07 		and	r7, r7, #63
 303              	.LVL39:
 425:FWLIB/src/stm32f4xx_spi.c **** 
 426:FWLIB/src/stm32f4xx_spi.c ****     if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)
 304              		.loc 1 426 0
 305 0056 6C68     		ldr	r4, [r5, #4]
 306 0058 14F4800F 		tst	r4, #4194304
 307 005c 39D0     		beq	.L23
 427:FWLIB/src/stm32f4xx_spi.c ****     {
 428:FWLIB/src/stm32f4xx_spi.c ****       /* Get the I2S source clock value */
ARM GAS  /tmp/cc7TDvj5.s 			page 14


 429:FWLIB/src/stm32f4xx_spi.c ****       i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 308              		.loc 1 429 0
 309 005e 284C     		ldr	r4, .L33+4
 310 0060 B4FBF7F4 		udiv	r4, r4, r7
 311 0064 04FB06F4 		mul	r4, r4, r6
 312 0068 B4FBF3F4 		udiv	r4, r4, r3
 313              	.LVL40:
 314              	.L24:
 430:FWLIB/src/stm32f4xx_spi.c ****     }
 431:FWLIB/src/stm32f4xx_spi.c ****     else
 432:FWLIB/src/stm32f4xx_spi.c ****     { /* Get the I2S source clock value */
 433:FWLIB/src/stm32f4xx_spi.c ****       i2sclk = (uint32_t)(((HSI_VALUE / pllm) * plln) / pllr);
 434:FWLIB/src/stm32f4xx_spi.c ****     }
 435:FWLIB/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 436:FWLIB/src/stm32f4xx_spi.c ****     
 437:FWLIB/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 438:FWLIB/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 315              		.loc 1 438 0
 316 006c CB88     		ldrh	r3, [r1, #6]
 317              	.LVL41:
 318 006e B3F5007F 		cmp	r3, #512
 319 0072 36D0     		beq	.L32
 439:FWLIB/src/stm32f4xx_spi.c ****     {
 440:FWLIB/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 441:FWLIB/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 442:FWLIB/src/stm32f4xx_spi.c ****     }
 443:FWLIB/src/stm32f4xx_spi.c ****     else
 444:FWLIB/src/stm32f4xx_spi.c ****     {
 445:FWLIB/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 446:FWLIB/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 320              		.loc 1 446 0
 321 0074 4FEA4E1E 		lsl	lr, lr, #5
 322              	.LVL42:
 323 0078 B4FBFEF4 		udiv	r4, r4, lr
 324              	.LVL43:
 325 007c 04EB8404 		add	r4, r4, r4, lsl #2
 326 0080 6300     		lsls	r3, r4, #1
 327 0082 8C68     		ldr	r4, [r1, #8]
 328 0084 B3FBF4F3 		udiv	r3, r3, r4
 329 0088 0533     		adds	r3, r3, #5
 330 008a 9BB2     		uxth	r3, r3
 331              	.LVL44:
 332              	.L26:
 447:FWLIB/src/stm32f4xx_spi.c ****     }
 448:FWLIB/src/stm32f4xx_spi.c ****     
 449:FWLIB/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 450:FWLIB/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 333              		.loc 1 450 0
 334 008c 1D4C     		ldr	r4, .L33+8
 335 008e A4FB0343 		umull	r4, r3, r4, r3
 336              	.LVL45:
 337 0092 DB08     		lsrs	r3, r3, #3
 338              	.LVL46:
 451:FWLIB/src/stm32f4xx_spi.c ****       
 452:FWLIB/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 453:FWLIB/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 339              		.loc 1 453 0
ARM GAS  /tmp/cc7TDvj5.s 			page 15


 340 0094 03F00104 		and	r4, r3, #1
 341              	.LVL47:
 454:FWLIB/src/stm32f4xx_spi.c ****    
 455:FWLIB/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 456:FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 342              		.loc 1 456 0
 343 0098 1B1B     		subs	r3, r3, r4
 344              	.LVL48:
 345 009a C3F34F03 		ubfx	r3, r3, #1, #16
 346              	.LVL49:
 457:FWLIB/src/stm32f4xx_spi.c ****    
 458:FWLIB/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 459:FWLIB/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 347              		.loc 1 459 0
 348 009e 2402     		lsls	r4, r4, #8
 349              	.LVL50:
 350              	.L20:
 460:FWLIB/src/stm32f4xx_spi.c ****   }
 461:FWLIB/src/stm32f4xx_spi.c **** 
 462:FWLIB/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 463:FWLIB/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 351              		.loc 1 463 0
 352 00a0 9D1E     		subs	r5, r3, #2
 353 00a2 ADB2     		uxth	r5, r5
 354 00a4 FD2D     		cmp	r5, #253
 355 00a6 01D9     		bls	.L27
 464:FWLIB/src/stm32f4xx_spi.c ****   {
 465:FWLIB/src/stm32f4xx_spi.c ****     /* Set the default values */
 466:FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 467:FWLIB/src/stm32f4xx_spi.c ****     i2sodd = 0;
 356              		.loc 1 467 0
 357 00a8 0024     		movs	r4, #0
 358              	.LVL51:
 466:FWLIB/src/stm32f4xx_spi.c ****     i2sodd = 0;
 359              		.loc 1 466 0
 360 00aa 0223     		movs	r3, #2
 361              	.LVL52:
 362              	.L27:
 468:FWLIB/src/stm32f4xx_spi.c ****   }
 469:FWLIB/src/stm32f4xx_spi.c **** 
 470:FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 471:FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 363              		.loc 1 471 0
 364 00ac CD88     		ldrh	r5, [r1, #6]
 365 00ae 2C43     		orrs	r4, r4, r5
 366              	.LVL53:
 367 00b0 2343     		orrs	r3, r3, r4
 368              	.LVL54:
 369 00b2 0384     		strh	r3, [r0, #32]	@ movhi
 472:FWLIB/src/stm32f4xx_spi.c ****  
 473:FWLIB/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 474:FWLIB/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 370              		.loc 1 474 0
 371 00b4 0B88     		ldrh	r3, [r1]
 475:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 372              		.loc 1 475 0
 373 00b6 4C88     		ldrh	r4, [r1, #2]
ARM GAS  /tmp/cc7TDvj5.s 			page 16


 374 00b8 8D88     		ldrh	r5, [r1, #4]
 476:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 375              		.loc 1 476 0
 376 00ba 8989     		ldrh	r1, [r1, #12]
 377              	.LVL55:
 475:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 378              		.loc 1 475 0
 379 00bc 2943     		orrs	r1, r1, r5
 380 00be 2143     		orrs	r1, r1, r4
 474:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 381              		.loc 1 474 0
 382 00c0 0B43     		orrs	r3, r3, r1
 383 00c2 1A43     		orrs	r2, r2, r3
 384              	.LVL56:
 385 00c4 42F40062 		orr	r2, r2, #2048
 386              	.LVL57:
 477:FWLIB/src/stm32f4xx_spi.c ****  
 478:FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 479:FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 387              		.loc 1 479 0
 388 00c8 8283     		strh	r2, [r0, #28]	@ movhi
 389 00ca F0BD     		pop	{r4, r5, r6, r7, pc}
 390              	.LVL58:
 391              	.L29:
 391:FWLIB/src/stm32f4xx_spi.c ****     }
 392              		.loc 1 391 0
 393 00cc 4FF0020E 		mov	lr, #2
 394 00d0 ABE7     		b	.L21
 395              	.LVL59:
 396              	.L23:
 433:FWLIB/src/stm32f4xx_spi.c ****     }
 397              		.loc 1 433 0
 398 00d2 0D4C     		ldr	r4, .L33+12
 399 00d4 B4FBF7F4 		udiv	r4, r4, r7
 400 00d8 04FB06F4 		mul	r4, r4, r6
 401 00dc B4FBF3F4 		udiv	r4, r4, r3
 402              	.LVL60:
 403 00e0 C4E7     		b	.L24
 404              	.LVL61:
 405              	.L32:
 441:FWLIB/src/stm32f4xx_spi.c ****     }
 406              		.loc 1 441 0
 407 00e2 240A     		lsrs	r4, r4, #8
 408              	.LVL62:
 409 00e4 04EB8404 		add	r4, r4, r4, lsl #2
 410 00e8 6300     		lsls	r3, r4, #1
 411 00ea 8C68     		ldr	r4, [r1, #8]
 412 00ec B3FBF4F3 		udiv	r3, r3, r4
 413 00f0 0533     		adds	r3, r3, #5
 414 00f2 9BB2     		uxth	r3, r3
 415              	.LVL63:
 416 00f4 CAE7     		b	.L26
 417              	.LVL64:
 418              	.L28:
 376:FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 419              		.loc 1 376 0
 420 00f6 0024     		movs	r4, #0
ARM GAS  /tmp/cc7TDvj5.s 			page 17


 377:FWLIB/src/stm32f4xx_spi.c ****   }
 421              		.loc 1 377 0
 422 00f8 0223     		movs	r3, #2
 423 00fa D1E7     		b	.L20
 424              	.L34:
 425              		.align	2
 426              	.L33:
 427 00fc 00380240 		.word	1073887232
 428 0100 00127A00 		.word	8000000
 429 0104 CDCCCCCC 		.word	-858993459
 430 0108 0024F400 		.word	16000000
 431              		.cfi_endproc
 432              	.LFE114:
 434              		.section	.text.SPI_StructInit,"ax",%progbits
 435              		.align	1
 436              		.global	SPI_StructInit
 437              		.syntax unified
 438              		.thumb
 439              		.thumb_func
 440              		.fpu softvfp
 442              	SPI_StructInit:
 443              	.LFB115:
 480:FWLIB/src/stm32f4xx_spi.c **** }
 481:FWLIB/src/stm32f4xx_spi.c **** 
 482:FWLIB/src/stm32f4xx_spi.c **** /**
 483:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 484:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 485:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 486:FWLIB/src/stm32f4xx_spi.c ****   */
 487:FWLIB/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 488:FWLIB/src/stm32f4xx_spi.c **** {
 444              		.loc 1 488 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 449              	.LVL65:
 489:FWLIB/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 490:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 491:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 450              		.loc 1 491 0
 451 0000 0023     		movs	r3, #0
 452 0002 0380     		strh	r3, [r0]	@ movhi
 492:FWLIB/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 493:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 453              		.loc 1 493 0
 454 0004 4380     		strh	r3, [r0, #2]	@ movhi
 494:FWLIB/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 495:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 455              		.loc 1 495 0
 456 0006 8380     		strh	r3, [r0, #4]	@ movhi
 496:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 497:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 457              		.loc 1 497 0
 458 0008 C380     		strh	r3, [r0, #6]	@ movhi
 498:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 499:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
ARM GAS  /tmp/cc7TDvj5.s 			page 18


 459              		.loc 1 499 0
 460 000a 0381     		strh	r3, [r0, #8]	@ movhi
 500:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 501:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 461              		.loc 1 501 0
 462 000c 4381     		strh	r3, [r0, #10]	@ movhi
 502:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 503:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 463              		.loc 1 503 0
 464 000e 8381     		strh	r3, [r0, #12]	@ movhi
 504:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 505:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 465              		.loc 1 505 0
 466 0010 C381     		strh	r3, [r0, #14]	@ movhi
 506:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 507:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 467              		.loc 1 507 0
 468 0012 0723     		movs	r3, #7
 469 0014 0382     		strh	r3, [r0, #16]	@ movhi
 470 0016 7047     		bx	lr
 471              		.cfi_endproc
 472              	.LFE115:
 474              		.section	.text.I2S_StructInit,"ax",%progbits
 475              		.align	1
 476              		.global	I2S_StructInit
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu softvfp
 482              	I2S_StructInit:
 483              	.LFB116:
 508:FWLIB/src/stm32f4xx_spi.c **** }
 509:FWLIB/src/stm32f4xx_spi.c **** 
 510:FWLIB/src/stm32f4xx_spi.c **** /**
 511:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 512:FWLIB/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 513:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 514:FWLIB/src/stm32f4xx_spi.c ****   */
 515:FWLIB/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 516:FWLIB/src/stm32f4xx_spi.c **** {
 484              		.loc 1 516 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488              		@ link register save eliminated.
 489              	.LVL66:
 517:FWLIB/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 518:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 519:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 490              		.loc 1 519 0
 491 0000 0023     		movs	r3, #0
 492 0002 0380     		strh	r3, [r0]	@ movhi
 520:FWLIB/src/stm32f4xx_spi.c ****   
 521:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 522:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 493              		.loc 1 522 0
 494 0004 4380     		strh	r3, [r0, #2]	@ movhi
ARM GAS  /tmp/cc7TDvj5.s 			page 19


 523:FWLIB/src/stm32f4xx_spi.c ****   
 524:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 525:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 495              		.loc 1 525 0
 496 0006 8380     		strh	r3, [r0, #4]	@ movhi
 526:FWLIB/src/stm32f4xx_spi.c ****   
 527:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 528:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 497              		.loc 1 528 0
 498 0008 C380     		strh	r3, [r0, #6]	@ movhi
 529:FWLIB/src/stm32f4xx_spi.c ****   
 530:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 531:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 499              		.loc 1 531 0
 500 000a 0222     		movs	r2, #2
 501 000c 8260     		str	r2, [r0, #8]
 532:FWLIB/src/stm32f4xx_spi.c ****   
 533:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 534:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 502              		.loc 1 534 0
 503 000e 8381     		strh	r3, [r0, #12]	@ movhi
 504 0010 7047     		bx	lr
 505              		.cfi_endproc
 506              	.LFE116:
 508              		.section	.text.SPI_Cmd,"ax",%progbits
 509              		.align	1
 510              		.global	SPI_Cmd
 511              		.syntax unified
 512              		.thumb
 513              		.thumb_func
 514              		.fpu softvfp
 516              	SPI_Cmd:
 517              	.LFB117:
 535:FWLIB/src/stm32f4xx_spi.c **** }
 536:FWLIB/src/stm32f4xx_spi.c **** 
 537:FWLIB/src/stm32f4xx_spi.c **** /**
 538:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 539:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 540:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 541:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 542:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 543:FWLIB/src/stm32f4xx_spi.c ****   */
 544:FWLIB/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 545:FWLIB/src/stm32f4xx_spi.c **** {
 518              		.loc 1 545 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522              		@ link register save eliminated.
 523              	.LVL67:
 546:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 547:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 548:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 549:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 524              		.loc 1 549 0
 525 0000 31B9     		cbnz	r1, .L40
 550:FWLIB/src/stm32f4xx_spi.c ****   {
ARM GAS  /tmp/cc7TDvj5.s 			page 20


 551:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 552:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 553:FWLIB/src/stm32f4xx_spi.c ****   }
 554:FWLIB/src/stm32f4xx_spi.c ****   else
 555:FWLIB/src/stm32f4xx_spi.c ****   {
 556:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 557:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 526              		.loc 1 557 0
 527 0002 0388     		ldrh	r3, [r0]
 528 0004 9BB2     		uxth	r3, r3
 529 0006 23F04003 		bic	r3, r3, #64
 530 000a 9BB2     		uxth	r3, r3
 531 000c 0380     		strh	r3, [r0]	@ movhi
 532 000e 7047     		bx	lr
 533              	.L40:
 552:FWLIB/src/stm32f4xx_spi.c ****   }
 534              		.loc 1 552 0
 535 0010 0388     		ldrh	r3, [r0]
 536 0012 9BB2     		uxth	r3, r3
 537 0014 43F04003 		orr	r3, r3, #64
 538 0018 0380     		strh	r3, [r0]	@ movhi
 539 001a 7047     		bx	lr
 540              		.cfi_endproc
 541              	.LFE117:
 543              		.section	.text.I2S_Cmd,"ax",%progbits
 544              		.align	1
 545              		.global	I2S_Cmd
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 549              		.fpu softvfp
 551              	I2S_Cmd:
 552              	.LFB118:
 558:FWLIB/src/stm32f4xx_spi.c ****   }
 559:FWLIB/src/stm32f4xx_spi.c **** }
 560:FWLIB/src/stm32f4xx_spi.c **** 
 561:FWLIB/src/stm32f4xx_spi.c **** /**
 562:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 563:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 564:FWLIB/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 565:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 566:FWLIB/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 567:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 568:FWLIB/src/stm32f4xx_spi.c ****   */
 569:FWLIB/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 570:FWLIB/src/stm32f4xx_spi.c **** {
 553              		.loc 1 570 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557              		@ link register save eliminated.
 558              	.LVL68:
 571:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 572:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 573:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 574:FWLIB/src/stm32f4xx_spi.c ****   
 575:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
ARM GAS  /tmp/cc7TDvj5.s 			page 21


 559              		.loc 1 575 0
 560 0000 31B9     		cbnz	r1, .L44
 576:FWLIB/src/stm32f4xx_spi.c ****   {
 577:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 578:FWLIB/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 579:FWLIB/src/stm32f4xx_spi.c ****   }
 580:FWLIB/src/stm32f4xx_spi.c ****   else
 581:FWLIB/src/stm32f4xx_spi.c ****   {
 582:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 583:FWLIB/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 561              		.loc 1 583 0
 562 0002 838B     		ldrh	r3, [r0, #28]
 563 0004 9BB2     		uxth	r3, r3
 564 0006 23F48063 		bic	r3, r3, #1024
 565 000a 9BB2     		uxth	r3, r3
 566 000c 8383     		strh	r3, [r0, #28]	@ movhi
 567 000e 7047     		bx	lr
 568              	.L44:
 578:FWLIB/src/stm32f4xx_spi.c ****   }
 569              		.loc 1 578 0
 570 0010 838B     		ldrh	r3, [r0, #28]
 571 0012 9BB2     		uxth	r3, r3
 572 0014 43F48063 		orr	r3, r3, #1024
 573 0018 8383     		strh	r3, [r0, #28]	@ movhi
 574 001a 7047     		bx	lr
 575              		.cfi_endproc
 576              	.LFE118:
 578              		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 579              		.align	1
 580              		.global	SPI_DataSizeConfig
 581              		.syntax unified
 582              		.thumb
 583              		.thumb_func
 584              		.fpu softvfp
 586              	SPI_DataSizeConfig:
 587              	.LFB119:
 584:FWLIB/src/stm32f4xx_spi.c ****   }
 585:FWLIB/src/stm32f4xx_spi.c **** }
 586:FWLIB/src/stm32f4xx_spi.c **** 
 587:FWLIB/src/stm32f4xx_spi.c **** /**
 588:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 589:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 590:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 591:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 592:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 593:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 594:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 595:FWLIB/src/stm32f4xx_spi.c ****   */
 596:FWLIB/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 597:FWLIB/src/stm32f4xx_spi.c **** {
 588              		.loc 1 597 0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 592              		@ link register save eliminated.
 593              	.LVL69:
 598:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
ARM GAS  /tmp/cc7TDvj5.s 			page 22


 599:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 600:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 601:FWLIB/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 602:FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 594              		.loc 1 602 0
 595 0000 0388     		ldrh	r3, [r0]
 596 0002 9BB2     		uxth	r3, r3
 597 0004 23F40063 		bic	r3, r3, #2048
 598 0008 9BB2     		uxth	r3, r3
 599 000a 0380     		strh	r3, [r0]	@ movhi
 603:FWLIB/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 604:FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 600              		.loc 1 604 0
 601 000c 0388     		ldrh	r3, [r0]
 602 000e 9BB2     		uxth	r3, r3
 603 0010 1943     		orrs	r1, r1, r3
 604              	.LVL70:
 605 0012 0180     		strh	r1, [r0]	@ movhi
 606 0014 7047     		bx	lr
 607              		.cfi_endproc
 608              	.LFE119:
 610              		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 611              		.align	1
 612              		.global	SPI_BiDirectionalLineConfig
 613              		.syntax unified
 614              		.thumb
 615              		.thumb_func
 616              		.fpu softvfp
 618              	SPI_BiDirectionalLineConfig:
 619              	.LFB120:
 605:FWLIB/src/stm32f4xx_spi.c **** }
 606:FWLIB/src/stm32f4xx_spi.c **** 
 607:FWLIB/src/stm32f4xx_spi.c **** /**
 608:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 609:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 610:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 611:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 612:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 613:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 614:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 615:FWLIB/src/stm32f4xx_spi.c ****   */
 616:FWLIB/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 617:FWLIB/src/stm32f4xx_spi.c **** {
 620              		.loc 1 617 0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              		@ link register save eliminated.
 625              	.LVL71:
 618:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 619:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 620:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 621:FWLIB/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 626              		.loc 1 621 0
 627 0000 B1F5804F 		cmp	r1, #16384
 628 0004 06D0     		beq	.L49
 622:FWLIB/src/stm32f4xx_spi.c ****   {
ARM GAS  /tmp/cc7TDvj5.s 			page 23


 623:FWLIB/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 624:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 625:FWLIB/src/stm32f4xx_spi.c ****   }
 626:FWLIB/src/stm32f4xx_spi.c ****   else
 627:FWLIB/src/stm32f4xx_spi.c ****   {
 628:FWLIB/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 629:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 629              		.loc 1 629 0
 630 0006 0388     		ldrh	r3, [r0]
 631 0008 9BB2     		uxth	r3, r3
 632 000a 23F48043 		bic	r3, r3, #16384
 633 000e 9BB2     		uxth	r3, r3
 634 0010 0380     		strh	r3, [r0]	@ movhi
 635 0012 7047     		bx	lr
 636              	.L49:
 624:FWLIB/src/stm32f4xx_spi.c ****   }
 637              		.loc 1 624 0
 638 0014 0388     		ldrh	r3, [r0]
 639 0016 9BB2     		uxth	r3, r3
 640 0018 43F48043 		orr	r3, r3, #16384
 641 001c 0380     		strh	r3, [r0]	@ movhi
 642 001e 7047     		bx	lr
 643              		.cfi_endproc
 644              	.LFE120:
 646              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 647              		.align	1
 648              		.global	SPI_NSSInternalSoftwareConfig
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 652              		.fpu softvfp
 654              	SPI_NSSInternalSoftwareConfig:
 655              	.LFB121:
 630:FWLIB/src/stm32f4xx_spi.c ****   }
 631:FWLIB/src/stm32f4xx_spi.c **** }
 632:FWLIB/src/stm32f4xx_spi.c **** 
 633:FWLIB/src/stm32f4xx_spi.c **** /**
 634:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 635:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 636:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 637:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 638:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 639:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 640:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 641:FWLIB/src/stm32f4xx_spi.c ****   */
 642:FWLIB/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 643:FWLIB/src/stm32f4xx_spi.c **** {
 656              		.loc 1 643 0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
 660              		@ link register save eliminated.
 661              	.LVL72:
 644:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 645:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 646:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 647:FWLIB/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
ARM GAS  /tmp/cc7TDvj5.s 			page 24


 662              		.loc 1 647 0
 663 0000 4FF6FF63 		movw	r3, #65279
 664 0004 9942     		cmp	r1, r3
 665 0006 05D0     		beq	.L51
 648:FWLIB/src/stm32f4xx_spi.c ****   {
 649:FWLIB/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 650:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 666              		.loc 1 650 0
 667 0008 0388     		ldrh	r3, [r0]
 668 000a 9BB2     		uxth	r3, r3
 669 000c 43F48073 		orr	r3, r3, #256
 670 0010 0380     		strh	r3, [r0]	@ movhi
 671 0012 7047     		bx	lr
 672              	.L51:
 651:FWLIB/src/stm32f4xx_spi.c ****   }
 652:FWLIB/src/stm32f4xx_spi.c ****   else
 653:FWLIB/src/stm32f4xx_spi.c ****   {
 654:FWLIB/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 655:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 673              		.loc 1 655 0
 674 0014 0388     		ldrh	r3, [r0]
 675 0016 9BB2     		uxth	r3, r3
 676 0018 23F48073 		bic	r3, r3, #256
 677 001c 9BB2     		uxth	r3, r3
 678 001e 0380     		strh	r3, [r0]	@ movhi
 679 0020 7047     		bx	lr
 680              		.cfi_endproc
 681              	.LFE121:
 683              		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 684              		.align	1
 685              		.global	SPI_SSOutputCmd
 686              		.syntax unified
 687              		.thumb
 688              		.thumb_func
 689              		.fpu softvfp
 691              	SPI_SSOutputCmd:
 692              	.LFB122:
 656:FWLIB/src/stm32f4xx_spi.c ****   }
 657:FWLIB/src/stm32f4xx_spi.c **** }
 658:FWLIB/src/stm32f4xx_spi.c **** 
 659:FWLIB/src/stm32f4xx_spi.c **** /**
 660:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 661:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 662:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 663:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 664:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 665:FWLIB/src/stm32f4xx_spi.c ****   */
 666:FWLIB/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 667:FWLIB/src/stm32f4xx_spi.c **** {
 693              		.loc 1 667 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              		@ link register save eliminated.
 698              	.LVL73:
 668:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 669:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
ARM GAS  /tmp/cc7TDvj5.s 			page 25


 670:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 671:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 699              		.loc 1 671 0
 700 0000 31B9     		cbnz	r1, .L56
 672:FWLIB/src/stm32f4xx_spi.c ****   {
 673:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 674:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 675:FWLIB/src/stm32f4xx_spi.c ****   }
 676:FWLIB/src/stm32f4xx_spi.c ****   else
 677:FWLIB/src/stm32f4xx_spi.c ****   {
 678:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 679:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 701              		.loc 1 679 0
 702 0002 8388     		ldrh	r3, [r0, #4]
 703 0004 9BB2     		uxth	r3, r3
 704 0006 23F00403 		bic	r3, r3, #4
 705 000a 9BB2     		uxth	r3, r3
 706 000c 8380     		strh	r3, [r0, #4]	@ movhi
 707 000e 7047     		bx	lr
 708              	.L56:
 674:FWLIB/src/stm32f4xx_spi.c ****   }
 709              		.loc 1 674 0
 710 0010 8388     		ldrh	r3, [r0, #4]
 711 0012 9BB2     		uxth	r3, r3
 712 0014 43F00403 		orr	r3, r3, #4
 713 0018 8380     		strh	r3, [r0, #4]	@ movhi
 714 001a 7047     		bx	lr
 715              		.cfi_endproc
 716              	.LFE122:
 718              		.section	.text.SPI_TIModeCmd,"ax",%progbits
 719              		.align	1
 720              		.global	SPI_TIModeCmd
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu softvfp
 726              	SPI_TIModeCmd:
 727              	.LFB123:
 680:FWLIB/src/stm32f4xx_spi.c ****   }
 681:FWLIB/src/stm32f4xx_spi.c **** }
 682:FWLIB/src/stm32f4xx_spi.c **** 
 683:FWLIB/src/stm32f4xx_spi.c **** /**
 684:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 685:FWLIB/src/stm32f4xx_spi.c ****   *   
 686:FWLIB/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 687:FWLIB/src/stm32f4xx_spi.c ****   *         been called. 
 688:FWLIB/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 689:FWLIB/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 690:FWLIB/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 691:FWLIB/src/stm32f4xx_spi.c ****   * 
 692:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 
 693:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 694:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 695:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 696:FWLIB/src/stm32f4xx_spi.c ****   */
 697:FWLIB/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 698:FWLIB/src/stm32f4xx_spi.c **** {
ARM GAS  /tmp/cc7TDvj5.s 			page 26


 728              		.loc 1 698 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		@ link register save eliminated.
 733              	.LVL74:
 699:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 700:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 701:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:FWLIB/src/stm32f4xx_spi.c **** 
 703:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 734              		.loc 1 703 0
 735 0000 31B9     		cbnz	r1, .L60
 704:FWLIB/src/stm32f4xx_spi.c ****   {
 705:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 706:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 707:FWLIB/src/stm32f4xx_spi.c ****   }
 708:FWLIB/src/stm32f4xx_spi.c ****   else
 709:FWLIB/src/stm32f4xx_spi.c ****   {
 710:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 711:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 736              		.loc 1 711 0
 737 0002 8388     		ldrh	r3, [r0, #4]
 738 0004 9BB2     		uxth	r3, r3
 739 0006 23F01003 		bic	r3, r3, #16
 740 000a 9BB2     		uxth	r3, r3
 741 000c 8380     		strh	r3, [r0, #4]	@ movhi
 742 000e 7047     		bx	lr
 743              	.L60:
 706:FWLIB/src/stm32f4xx_spi.c ****   }
 744              		.loc 1 706 0
 745 0010 8388     		ldrh	r3, [r0, #4]
 746 0012 9BB2     		uxth	r3, r3
 747 0014 43F01003 		orr	r3, r3, #16
 748 0018 8380     		strh	r3, [r0, #4]	@ movhi
 749 001a 7047     		bx	lr
 750              		.cfi_endproc
 751              	.LFE123:
 753              		.section	.text.I2S_FullDuplexConfig,"ax",%progbits
 754              		.align	1
 755              		.global	I2S_FullDuplexConfig
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu softvfp
 761              	I2S_FullDuplexConfig:
 762              	.LFB124:
 712:FWLIB/src/stm32f4xx_spi.c ****   }
 713:FWLIB/src/stm32f4xx_spi.c **** }
 714:FWLIB/src/stm32f4xx_spi.c **** 
 715:FWLIB/src/stm32f4xx_spi.c **** /**
 716:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 717:FWLIB/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 718:FWLIB/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 719:FWLIB/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 720:FWLIB/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 721:FWLIB/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
ARM GAS  /tmp/cc7TDvj5.s 			page 27


 722:FWLIB/src/stm32f4xx_spi.c ****   *         extension.
 723:FWLIB/src/stm32f4xx_spi.c ****   * 
 724:FWLIB/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 725:FWLIB/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 726:FWLIB/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 727:FWLIB/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 728:FWLIB/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 729:FWLIB/src/stm32f4xx_spi.c ****   *         
 730:FWLIB/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 731:FWLIB/src/stm32f4xx_spi.c ****   *  
 732:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 733:FWLIB/src/stm32f4xx_spi.c ****   */
 734:FWLIB/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 735:FWLIB/src/stm32f4xx_spi.c **** {
 763              		.loc 1 735 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 768              	.LVL75:
 769 0000 30B4     		push	{r4, r5}
 770              	.LCFI3:
 771              		.cfi_def_cfa_offset 8
 772              		.cfi_offset 4, -8
 773              		.cfi_offset 5, -4
 774              	.LVL76:
 736:FWLIB/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 737:FWLIB/src/stm32f4xx_spi.c ****   
 738:FWLIB/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 739:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 740:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 741:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 742:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 743:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 744:FWLIB/src/stm32f4xx_spi.c **** 
 745:FWLIB/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 746:FWLIB/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 747:FWLIB/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 775              		.loc 1 747 0
 776 0002 838B     		ldrh	r3, [r0, #28]
 777 0004 9BB2     		uxth	r3, r3
 778 0006 23F47B63 		bic	r3, r3, #4016
 779 000a 23F00F03 		bic	r3, r3, #15
 780 000e 9BB2     		uxth	r3, r3
 781 0010 8383     		strh	r3, [r0, #28]	@ movhi
 748:FWLIB/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 782              		.loc 1 748 0
 783 0012 0223     		movs	r3, #2
 784 0014 0384     		strh	r3, [r0, #32]	@ movhi
 749:FWLIB/src/stm32f4xx_spi.c ****   
 750:FWLIB/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 751:FWLIB/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 785              		.loc 1 751 0
 786 0016 838B     		ldrh	r3, [r0, #28]
 787 0018 9BB2     		uxth	r3, r3
 788              	.LVL77:
 752:FWLIB/src/stm32f4xx_spi.c ****   
ARM GAS  /tmp/cc7TDvj5.s 			page 28


 753:FWLIB/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 754:FWLIB/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 789              		.loc 1 754 0
 790 001a 0A88     		ldrh	r2, [r1]
 791 001c B2F5007F 		cmp	r2, #512
 792 0020 10D0     		beq	.L63
 793              		.loc 1 754 0 is_stmt 0 discriminator 1
 794 0022 62B1     		cbz	r2, .L66
 755:FWLIB/src/stm32f4xx_spi.c ****   {
 756:FWLIB/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 757:FWLIB/src/stm32f4xx_spi.c ****   }
 758:FWLIB/src/stm32f4xx_spi.c ****   else
 759:FWLIB/src/stm32f4xx_spi.c ****   {
 760:FWLIB/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 761:FWLIB/src/stm32f4xx_spi.c ****     {
 762:FWLIB/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 795              		.loc 1 762 0 is_stmt 1
 796 0024 0025     		movs	r5, #0
 797              	.L62:
 798              	.LVL78:
 763:FWLIB/src/stm32f4xx_spi.c ****     }
 764:FWLIB/src/stm32f4xx_spi.c ****   }
 765:FWLIB/src/stm32f4xx_spi.c **** 
 766:FWLIB/src/stm32f4xx_spi.c ****  
 767:FWLIB/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 768:FWLIB/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 769:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 799              		.loc 1 769 0
 800 0026 4A88     		ldrh	r2, [r1, #2]
 801 0028 8C88     		ldrh	r4, [r1, #4]
 770:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 802              		.loc 1 770 0
 803 002a 8989     		ldrh	r1, [r1, #12]
 804              	.LVL79:
 769:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 805              		.loc 1 769 0
 806 002c 2143     		orrs	r1, r1, r4
 807 002e 0A43     		orrs	r2, r2, r1
 768:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 808              		.loc 1 768 0
 809 0030 2A43     		orrs	r2, r2, r5
 810 0032 1343     		orrs	r3, r3, r2
 811              	.LVL80:
 812 0034 43F40063 		orr	r3, r3, #2048
 813              	.LVL81:
 771:FWLIB/src/stm32f4xx_spi.c ****  
 772:FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 773:FWLIB/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 814              		.loc 1 773 0
 815 0038 8383     		strh	r3, [r0, #28]	@ movhi
 774:FWLIB/src/stm32f4xx_spi.c **** }
 816              		.loc 1 774 0
 817 003a 30BC     		pop	{r4, r5}
 818              	.LCFI4:
 819              		.cfi_remember_state
 820              		.cfi_restore 5
 821              		.cfi_restore 4
ARM GAS  /tmp/cc7TDvj5.s 			page 29


 822              		.cfi_def_cfa_offset 0
 823              	.LVL82:
 824 003c 7047     		bx	lr
 825              	.LVL83:
 826              	.L66:
 827              	.LCFI5:
 828              		.cfi_restore_state
 756:FWLIB/src/stm32f4xx_spi.c ****   }
 829              		.loc 1 756 0
 830 003e 4FF48075 		mov	r5, #256
 831 0042 F0E7     		b	.L62
 832              	.L63:
 833 0044 4FF48075 		mov	r5, #256
 834 0048 EDE7     		b	.L62
 835              		.cfi_endproc
 836              	.LFE124:
 838              		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 839              		.align	1
 840              		.global	SPI_I2S_ReceiveData
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 844              		.fpu softvfp
 846              	SPI_I2S_ReceiveData:
 847              	.LFB125:
 775:FWLIB/src/stm32f4xx_spi.c **** 
 776:FWLIB/src/stm32f4xx_spi.c **** /**
 777:FWLIB/src/stm32f4xx_spi.c ****   * @}
 778:FWLIB/src/stm32f4xx_spi.c ****   */
 779:FWLIB/src/stm32f4xx_spi.c **** 
 780:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 781:FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 782:FWLIB/src/stm32f4xx_spi.c ****  *
 783:FWLIB/src/stm32f4xx_spi.c **** @verbatim   
 784:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
 785:FWLIB/src/stm32f4xx_spi.c ****                       ##### Data transfers functions #####
 786:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
 787:FWLIB/src/stm32f4xx_spi.c **** 
 788:FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to manage the SPI data 
 789:FWLIB/src/stm32f4xx_spi.c ****       transfers. In reception, data are received and then stored into an internal 
 790:FWLIB/src/stm32f4xx_spi.c ****       Rx buffer while. In transmission, data are first stored into an internal Tx 
 791:FWLIB/src/stm32f4xx_spi.c ****       buffer before being transmitted.
 792:FWLIB/src/stm32f4xx_spi.c **** 
 793:FWLIB/src/stm32f4xx_spi.c ****  [..] The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 794:FWLIB/src/stm32f4xx_spi.c ****       function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 795:FWLIB/src/stm32f4xx_spi.c ****       can be done using SPI_I2S_SendData() function and stores the written data into 
 796:FWLIB/src/stm32f4xx_spi.c ****       Tx buffer.
 797:FWLIB/src/stm32f4xx_spi.c **** 
 798:FWLIB/src/stm32f4xx_spi.c **** @endverbatim
 799:FWLIB/src/stm32f4xx_spi.c ****   * @{
 800:FWLIB/src/stm32f4xx_spi.c ****   */
 801:FWLIB/src/stm32f4xx_spi.c **** 
 802:FWLIB/src/stm32f4xx_spi.c **** /**
 803:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 804:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 805:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 806:FWLIB/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
ARM GAS  /tmp/cc7TDvj5.s 			page 30


 807:FWLIB/src/stm32f4xx_spi.c ****   */
 808:FWLIB/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 809:FWLIB/src/stm32f4xx_spi.c **** {
 848              		.loc 1 809 0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852              		@ link register save eliminated.
 853              	.LVL84:
 810:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 811:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 812:FWLIB/src/stm32f4xx_spi.c ****   
 813:FWLIB/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 814:FWLIB/src/stm32f4xx_spi.c ****   return SPIx->DR;
 854              		.loc 1 814 0
 855 0000 8089     		ldrh	r0, [r0, #12]
 856              	.LVL85:
 815:FWLIB/src/stm32f4xx_spi.c **** }
 857              		.loc 1 815 0
 858 0002 80B2     		uxth	r0, r0
 859 0004 7047     		bx	lr
 860              		.cfi_endproc
 861              	.LFE125:
 863              		.section	.text.SPI_I2S_SendData,"ax",%progbits
 864              		.align	1
 865              		.global	SPI_I2S_SendData
 866              		.syntax unified
 867              		.thumb
 868              		.thumb_func
 869              		.fpu softvfp
 871              	SPI_I2S_SendData:
 872              	.LFB126:
 816:FWLIB/src/stm32f4xx_spi.c **** 
 817:FWLIB/src/stm32f4xx_spi.c **** /**
 818:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 819:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 820:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 821:FWLIB/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 822:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 823:FWLIB/src/stm32f4xx_spi.c ****   */
 824:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 825:FWLIB/src/stm32f4xx_spi.c **** {
 873              		.loc 1 825 0
 874              		.cfi_startproc
 875              		@ args = 0, pretend = 0, frame = 0
 876              		@ frame_needed = 0, uses_anonymous_args = 0
 877              		@ link register save eliminated.
 878              	.LVL86:
 826:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 827:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 828:FWLIB/src/stm32f4xx_spi.c ****   
 829:FWLIB/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 830:FWLIB/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 879              		.loc 1 830 0
 880 0000 8181     		strh	r1, [r0, #12]	@ movhi
 881 0002 7047     		bx	lr
 882              		.cfi_endproc
ARM GAS  /tmp/cc7TDvj5.s 			page 31


 883              	.LFE126:
 885              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 886              		.align	1
 887              		.global	SPI_CalculateCRC
 888              		.syntax unified
 889              		.thumb
 890              		.thumb_func
 891              		.fpu softvfp
 893              	SPI_CalculateCRC:
 894              	.LFB127:
 831:FWLIB/src/stm32f4xx_spi.c **** }
 832:FWLIB/src/stm32f4xx_spi.c **** 
 833:FWLIB/src/stm32f4xx_spi.c **** /**
 834:FWLIB/src/stm32f4xx_spi.c ****   * @}
 835:FWLIB/src/stm32f4xx_spi.c ****   */
 836:FWLIB/src/stm32f4xx_spi.c **** 
 837:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 838:FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 839:FWLIB/src/stm32f4xx_spi.c ****  *
 840:FWLIB/src/stm32f4xx_spi.c **** @verbatim   
 841:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
 842:FWLIB/src/stm32f4xx_spi.c ****                  ##### Hardware CRC Calculation functions #####
 843:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
 844:FWLIB/src/stm32f4xx_spi.c **** 
 845:FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to manage the SPI CRC hardware 
 846:FWLIB/src/stm32f4xx_spi.c ****       calculation
 847:FWLIB/src/stm32f4xx_spi.c **** 
 848:FWLIB/src/stm32f4xx_spi.c ****  [..] SPI communication using CRC is possible through the following procedure:
 849:FWLIB/src/stm32f4xx_spi.c ****    (#) Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 850:FWLIB/src/stm32f4xx_spi.c ****        Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 851:FWLIB/src/stm32f4xx_spi.c ****        function.
 852:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the CRC calculation using the SPI_CalculateCRC() function.
 853:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the SPI using the SPI_Cmd() function
 854:FWLIB/src/stm32f4xx_spi.c ****    (#) Before writing the last data to the TX buffer, set the CRCNext bit using the 
 855:FWLIB/src/stm32f4xx_spi.c ****        SPI_TransmitCRC() function to indicate that after transmission of the last 
 856:FWLIB/src/stm32f4xx_spi.c ****        data, the CRC should be transmitted.
 857:FWLIB/src/stm32f4xx_spi.c ****    (#) After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 858:FWLIB/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 859:FWLIB/src/stm32f4xx_spi.c ****         value. 
 860:FWLIB/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 861:FWLIB/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 862:FWLIB/src/stm32f4xx_spi.c **** 
 863:FWLIB/src/stm32f4xx_spi.c ****  [..]
 864:FWLIB/src/stm32f4xx_spi.c ****    (@) It is advised not to read the calculated CRC values during the communication.
 865:FWLIB/src/stm32f4xx_spi.c **** 
 866:FWLIB/src/stm32f4xx_spi.c ****    (@) When the SPI is in slave mode, be careful to enable CRC calculation only 
 867:FWLIB/src/stm32f4xx_spi.c ****        when the clock is stable, that is, when the clock is in the steady state. 
 868:FWLIB/src/stm32f4xx_spi.c ****        If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 869:FWLIB/src/stm32f4xx_spi.c ****        to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 870:FWLIB/src/stm32f4xx_spi.c ****        the value of the SPE bit.
 871:FWLIB/src/stm32f4xx_spi.c **** 
 872:FWLIB/src/stm32f4xx_spi.c ****    (@) With high bitrate frequencies, be careful when transmitting the CRC.
 873:FWLIB/src/stm32f4xx_spi.c ****        As the number of used CPU cycles has to be as low as possible in the CRC 
 874:FWLIB/src/stm32f4xx_spi.c ****        transfer phase, it is forbidden to call software functions in the CRC 
 875:FWLIB/src/stm32f4xx_spi.c ****        transmission sequence to avoid errors in the last data and CRC reception. 
 876:FWLIB/src/stm32f4xx_spi.c ****        In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 877:FWLIB/src/stm32f4xx_spi.c ****        of the last data.
ARM GAS  /tmp/cc7TDvj5.s 			page 32


 878:FWLIB/src/stm32f4xx_spi.c **** 
 879:FWLIB/src/stm32f4xx_spi.c ****    (@) For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 880:FWLIB/src/stm32f4xx_spi.c ****        degradation of the SPI speed performance due to CPU accesses impacting the 
 881:FWLIB/src/stm32f4xx_spi.c ****        SPI bandwidth.
 882:FWLIB/src/stm32f4xx_spi.c **** 
 883:FWLIB/src/stm32f4xx_spi.c ****    (@) When the STM32F4xx is configured as slave and the NSS hardware mode is 
 884:FWLIB/src/stm32f4xx_spi.c ****        used, the NSS pin needs to be kept low between the data phase and the CRC 
 885:FWLIB/src/stm32f4xx_spi.c ****        phase.
 886:FWLIB/src/stm32f4xx_spi.c **** 
 887:FWLIB/src/stm32f4xx_spi.c ****    (@) When the SPI is configured in slave mode with the CRC feature enabled, CRC
 888:FWLIB/src/stm32f4xx_spi.c ****        calculation takes place even if a high level is applied on the NSS pin. 
 889:FWLIB/src/stm32f4xx_spi.c ****        This may happen for example in case of a multi-slave environment where the 
 890:FWLIB/src/stm32f4xx_spi.c ****        communication master addresses slaves alternately.
 891:FWLIB/src/stm32f4xx_spi.c **** 
 892:FWLIB/src/stm32f4xx_spi.c ****    (@) Between a slave de-selection (high level on NSS) and a new slave selection 
 893:FWLIB/src/stm32f4xx_spi.c ****        (low level on NSS), the CRC value should be cleared on both master and slave
 894:FWLIB/src/stm32f4xx_spi.c ****        sides in order to resynchronize the master and slave for their respective 
 895:FWLIB/src/stm32f4xx_spi.c ****        CRC calculation.
 896:FWLIB/src/stm32f4xx_spi.c **** 
 897:FWLIB/src/stm32f4xx_spi.c ****    (@) To clear the CRC, follow the procedure below:
 898:FWLIB/src/stm32f4xx_spi.c ****        (#@) Disable SPI using the SPI_Cmd() function
 899:FWLIB/src/stm32f4xx_spi.c ****        (#@) Disable the CRC calculation using the SPI_CalculateCRC() function.
 900:FWLIB/src/stm32f4xx_spi.c ****        (#@) Enable the CRC calculation using the SPI_CalculateCRC() function.
 901:FWLIB/src/stm32f4xx_spi.c ****        (#@) Enable SPI using the SPI_Cmd() function.
 902:FWLIB/src/stm32f4xx_spi.c **** 
 903:FWLIB/src/stm32f4xx_spi.c **** @endverbatim
 904:FWLIB/src/stm32f4xx_spi.c ****   * @{
 905:FWLIB/src/stm32f4xx_spi.c ****   */
 906:FWLIB/src/stm32f4xx_spi.c **** 
 907:FWLIB/src/stm32f4xx_spi.c **** /**
 908:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 909:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 910:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 911:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 912:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 913:FWLIB/src/stm32f4xx_spi.c ****   */
 914:FWLIB/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 915:FWLIB/src/stm32f4xx_spi.c **** {
 895              		.loc 1 915 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 899              		@ link register save eliminated.
 900              	.LVL87:
 916:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 917:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 918:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 919:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 901              		.loc 1 919 0
 902 0000 31B9     		cbnz	r1, .L72
 920:FWLIB/src/stm32f4xx_spi.c ****   {
 921:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 922:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 923:FWLIB/src/stm32f4xx_spi.c ****   }
 924:FWLIB/src/stm32f4xx_spi.c ****   else
 925:FWLIB/src/stm32f4xx_spi.c ****   {
 926:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
ARM GAS  /tmp/cc7TDvj5.s 			page 33


 927:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 903              		.loc 1 927 0
 904 0002 0388     		ldrh	r3, [r0]
 905 0004 9BB2     		uxth	r3, r3
 906 0006 23F40053 		bic	r3, r3, #8192
 907 000a 9BB2     		uxth	r3, r3
 908 000c 0380     		strh	r3, [r0]	@ movhi
 909 000e 7047     		bx	lr
 910              	.L72:
 922:FWLIB/src/stm32f4xx_spi.c ****   }
 911              		.loc 1 922 0
 912 0010 0388     		ldrh	r3, [r0]
 913 0012 9BB2     		uxth	r3, r3
 914 0014 43F40053 		orr	r3, r3, #8192
 915 0018 0380     		strh	r3, [r0]	@ movhi
 916 001a 7047     		bx	lr
 917              		.cfi_endproc
 918              	.LFE127:
 920              		.section	.text.SPI_TransmitCRC,"ax",%progbits
 921              		.align	1
 922              		.global	SPI_TransmitCRC
 923              		.syntax unified
 924              		.thumb
 925              		.thumb_func
 926              		.fpu softvfp
 928              	SPI_TransmitCRC:
 929              	.LFB128:
 928:FWLIB/src/stm32f4xx_spi.c ****   }
 929:FWLIB/src/stm32f4xx_spi.c **** }
 930:FWLIB/src/stm32f4xx_spi.c **** 
 931:FWLIB/src/stm32f4xx_spi.c **** /**
 932:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 933:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 934:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 935:FWLIB/src/stm32f4xx_spi.c ****   */
 936:FWLIB/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 937:FWLIB/src/stm32f4xx_spi.c **** {
 930              		.loc 1 937 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              		@ link register save eliminated.
 935              	.LVL88:
 938:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 939:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 940:FWLIB/src/stm32f4xx_spi.c ****   
 941:FWLIB/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 942:FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 936              		.loc 1 942 0
 937 0000 0388     		ldrh	r3, [r0]
 938 0002 9BB2     		uxth	r3, r3
 939 0004 43F48053 		orr	r3, r3, #4096
 940 0008 0380     		strh	r3, [r0]	@ movhi
 941 000a 7047     		bx	lr
 942              		.cfi_endproc
 943              	.LFE128:
 945              		.section	.text.SPI_GetCRC,"ax",%progbits
ARM GAS  /tmp/cc7TDvj5.s 			page 34


 946              		.align	1
 947              		.global	SPI_GetCRC
 948              		.syntax unified
 949              		.thumb
 950              		.thumb_func
 951              		.fpu softvfp
 953              	SPI_GetCRC:
 954              	.LFB129:
 943:FWLIB/src/stm32f4xx_spi.c **** }
 944:FWLIB/src/stm32f4xx_spi.c **** 
 945:FWLIB/src/stm32f4xx_spi.c **** /**
 946:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 947:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 948:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 949:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 950:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 951:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 952:FWLIB/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 953:FWLIB/src/stm32f4xx_spi.c ****   */
 954:FWLIB/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 955:FWLIB/src/stm32f4xx_spi.c **** {
 955              		.loc 1 955 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 959              		@ link register save eliminated.
 960              	.LVL89:
 956:FWLIB/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 957:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 958:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 959:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 960:FWLIB/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 961              		.loc 1 960 0
 962 0000 0129     		cmp	r1, #1
 963 0002 02D0     		beq	.L75
 961:FWLIB/src/stm32f4xx_spi.c ****   {
 962:FWLIB/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 963:FWLIB/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 964              		.loc 1 963 0
 965 0004 008B     		ldrh	r0, [r0, #24]
 966              	.LVL90:
 967 0006 80B2     		uxth	r0, r0
 968              	.LVL91:
 969 0008 7047     		bx	lr
 970              	.LVL92:
 971              	.L75:
 964:FWLIB/src/stm32f4xx_spi.c ****   }
 965:FWLIB/src/stm32f4xx_spi.c ****   else
 966:FWLIB/src/stm32f4xx_spi.c ****   {
 967:FWLIB/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 968:FWLIB/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 972              		.loc 1 968 0
 973 000a 808A     		ldrh	r0, [r0, #20]
 974              	.LVL93:
 975 000c 80B2     		uxth	r0, r0
 976              	.LVL94:
 969:FWLIB/src/stm32f4xx_spi.c ****   }
ARM GAS  /tmp/cc7TDvj5.s 			page 35


 970:FWLIB/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 971:FWLIB/src/stm32f4xx_spi.c ****   return crcreg;
 972:FWLIB/src/stm32f4xx_spi.c **** }
 977              		.loc 1 972 0
 978 000e 7047     		bx	lr
 979              		.cfi_endproc
 980              	.LFE129:
 982              		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 983              		.align	1
 984              		.global	SPI_GetCRCPolynomial
 985              		.syntax unified
 986              		.thumb
 987              		.thumb_func
 988              		.fpu softvfp
 990              	SPI_GetCRCPolynomial:
 991              	.LFB130:
 973:FWLIB/src/stm32f4xx_spi.c **** 
 974:FWLIB/src/stm32f4xx_spi.c **** /**
 975:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 976:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 977:FWLIB/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 978:FWLIB/src/stm32f4xx_spi.c ****   */
 979:FWLIB/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 980:FWLIB/src/stm32f4xx_spi.c **** {
 992              		.loc 1 980 0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 0
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 996              		@ link register save eliminated.
 997              	.LVL95:
 981:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 982:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 983:FWLIB/src/stm32f4xx_spi.c ****   
 984:FWLIB/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 985:FWLIB/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 998              		.loc 1 985 0
 999 0000 008A     		ldrh	r0, [r0, #16]
 1000              	.LVL96:
 986:FWLIB/src/stm32f4xx_spi.c **** }
 1001              		.loc 1 986 0
 1002 0002 80B2     		uxth	r0, r0
 1003 0004 7047     		bx	lr
 1004              		.cfi_endproc
 1005              	.LFE130:
 1007              		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 1008              		.align	1
 1009              		.global	SPI_I2S_DMACmd
 1010              		.syntax unified
 1011              		.thumb
 1012              		.thumb_func
 1013              		.fpu softvfp
 1015              	SPI_I2S_DMACmd:
 1016              	.LFB131:
 987:FWLIB/src/stm32f4xx_spi.c **** 
 988:FWLIB/src/stm32f4xx_spi.c **** /**
 989:FWLIB/src/stm32f4xx_spi.c ****   * @}
 990:FWLIB/src/stm32f4xx_spi.c ****   */
ARM GAS  /tmp/cc7TDvj5.s 			page 36


 991:FWLIB/src/stm32f4xx_spi.c **** 
 992:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 993:FWLIB/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
 994:FWLIB/src/stm32f4xx_spi.c ****   *
 995:FWLIB/src/stm32f4xx_spi.c **** @verbatim   
 996:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
 997:FWLIB/src/stm32f4xx_spi.c ****                    ##### DMA transfers management functions #####
 998:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
 999:FWLIB/src/stm32f4xx_spi.c **** 
1000:FWLIB/src/stm32f4xx_spi.c **** @endverbatim
1001:FWLIB/src/stm32f4xx_spi.c ****   * @{
1002:FWLIB/src/stm32f4xx_spi.c ****   */
1003:FWLIB/src/stm32f4xx_spi.c **** 
1004:FWLIB/src/stm32f4xx_spi.c **** /**
1005:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
1006:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1007:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1008:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
1009:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
1010:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
1011:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
1012:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
1013:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1014:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1015:FWLIB/src/stm32f4xx_spi.c ****   */
1016:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
1017:FWLIB/src/stm32f4xx_spi.c **** {
 1017              		.loc 1 1017 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 1022              	.LVL97:
1018:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1019:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1020:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1021:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
1022:FWLIB/src/stm32f4xx_spi.c **** 
1023:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1023              		.loc 1 1023 0
 1024 0000 2AB9     		cbnz	r2, .L81
1024:FWLIB/src/stm32f4xx_spi.c ****   {
1025:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
1026:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
1027:FWLIB/src/stm32f4xx_spi.c ****   }
1028:FWLIB/src/stm32f4xx_spi.c ****   else
1029:FWLIB/src/stm32f4xx_spi.c ****   {
1030:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1031:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1025              		.loc 1 1031 0
 1026 0002 8388     		ldrh	r3, [r0, #4]
 1027 0004 C943     		mvns	r1, r1
 1028              	.LVL98:
 1029 0006 89B2     		uxth	r1, r1
 1030 0008 1940     		ands	r1, r1, r3
 1031 000a 8180     		strh	r1, [r0, #4]	@ movhi
 1032 000c 7047     		bx	lr
ARM GAS  /tmp/cc7TDvj5.s 			page 37


 1033              	.LVL99:
 1034              	.L81:
1026:FWLIB/src/stm32f4xx_spi.c ****   }
 1035              		.loc 1 1026 0
 1036 000e 8388     		ldrh	r3, [r0, #4]
 1037 0010 9BB2     		uxth	r3, r3
 1038 0012 1943     		orrs	r1, r1, r3
 1039              	.LVL100:
 1040 0014 8180     		strh	r1, [r0, #4]	@ movhi
 1041 0016 7047     		bx	lr
 1042              		.cfi_endproc
 1043              	.LFE131:
 1045              		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 1046              		.align	1
 1047              		.global	SPI_I2S_ITConfig
 1048              		.syntax unified
 1049              		.thumb
 1050              		.thumb_func
 1051              		.fpu softvfp
 1053              	SPI_I2S_ITConfig:
 1054              	.LFB132:
1032:FWLIB/src/stm32f4xx_spi.c ****   }
1033:FWLIB/src/stm32f4xx_spi.c **** }
1034:FWLIB/src/stm32f4xx_spi.c **** 
1035:FWLIB/src/stm32f4xx_spi.c **** /**
1036:FWLIB/src/stm32f4xx_spi.c ****   * @}
1037:FWLIB/src/stm32f4xx_spi.c ****   */
1038:FWLIB/src/stm32f4xx_spi.c **** 
1039:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1040:FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1041:FWLIB/src/stm32f4xx_spi.c ****   *
1042:FWLIB/src/stm32f4xx_spi.c **** @verbatim   
1043:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
1044:FWLIB/src/stm32f4xx_spi.c ****             ##### Interrupts and flags management functions #####
1045:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
1046:FWLIB/src/stm32f4xx_spi.c ****  
1047:FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to configure the SPI Interrupts 
1048:FWLIB/src/stm32f4xx_spi.c ****       sources and check or clear the flags or pending bits status.
1049:FWLIB/src/stm32f4xx_spi.c ****       The user should identify which mode will be used in his application to manage 
1050:FWLIB/src/stm32f4xx_spi.c ****       the communication: Polling mode, Interrupt mode or DMA mode. 
1051:FWLIB/src/stm32f4xx_spi.c ****     
1052:FWLIB/src/stm32f4xx_spi.c ****  *** Polling Mode ***
1053:FWLIB/src/stm32f4xx_spi.c ****  ====================
1054:FWLIB/src/stm32f4xx_spi.c **** [..] In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1055:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1056:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1057:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1058:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1059:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1060:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1061:FWLIB/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1062:FWLIB/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_UDR: to indicate an Underrun error occurs.
1063:FWLIB/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_CHSIDE: to indicate Channel Side.
1064:FWLIB/src/stm32f4xx_spi.c **** 
1065:FWLIB/src/stm32f4xx_spi.c ****   (@) Do not use the BSY flag to handle each data transmission or reception. It is
1066:FWLIB/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1067:FWLIB/src/stm32f4xx_spi.c **** 
ARM GAS  /tmp/cc7TDvj5.s 			page 38


1068:FWLIB/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following functions:
1069:FWLIB/src/stm32f4xx_spi.c ****    (+) FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1070:FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1071:FWLIB/src/stm32f4xx_spi.c **** 
1072:FWLIB/src/stm32f4xx_spi.c ****  *** Interrupt Mode ***
1073:FWLIB/src/stm32f4xx_spi.c ****  ======================
1074:FWLIB/src/stm32f4xx_spi.c ****  [..] In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1075:FWLIB/src/stm32f4xx_spi.c ****       and 7 pending bits: 
1076:FWLIB/src/stm32f4xx_spi.c ****    (+) Pending Bits:
1077:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1078:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1079:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode onl
1080:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1081:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1082:FWLIB/src/stm32f4xx_spi.c ****        (##) I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1083:FWLIB/src/stm32f4xx_spi.c ****        (##) I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1084:FWLIB/src/stm32f4xx_spi.c **** 
1085:FWLIB/src/stm32f4xx_spi.c ****    (+) Interrupt Source:
1086:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1087:FWLIB/src/stm32f4xx_spi.c ****             interrupt.  
1088:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1089:FWLIB/src/stm32f4xx_spi.c ****             empty interrupt.
1090:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1091:FWLIB/src/stm32f4xx_spi.c **** 
1092:FWLIB/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following functions:
1093:FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1094:FWLIB/src/stm32f4xx_spi.c ****    (+) ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1095:FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1096:FWLIB/src/stm32f4xx_spi.c **** 
1097:FWLIB/src/stm32f4xx_spi.c ****  *** DMA Mode ***
1098:FWLIB/src/stm32f4xx_spi.c ****  ================
1099:FWLIB/src/stm32f4xx_spi.c ****  [..] In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1100:FWLIB/src/stm32f4xx_spi.c ****    (#) SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1101:FWLIB/src/stm32f4xx_spi.c ****    (#) SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1102:FWLIB/src/stm32f4xx_spi.c **** 
1103:FWLIB/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following function:
1104:FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState 
1105:FWLIB/src/stm32f4xx_spi.c ****        NewState);
1106:FWLIB/src/stm32f4xx_spi.c **** 
1107:FWLIB/src/stm32f4xx_spi.c **** @endverbatim
1108:FWLIB/src/stm32f4xx_spi.c ****   * @{
1109:FWLIB/src/stm32f4xx_spi.c ****   */
1110:FWLIB/src/stm32f4xx_spi.c **** 
1111:FWLIB/src/stm32f4xx_spi.c **** /**
1112:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1113:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1114:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1115:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1116:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1117:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1118:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1119:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1120:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1121:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1122:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1123:FWLIB/src/stm32f4xx_spi.c ****   */
1124:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
ARM GAS  /tmp/cc7TDvj5.s 			page 39


1125:FWLIB/src/stm32f4xx_spi.c **** {
 1055              		.loc 1 1125 0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 0
 1058              		@ frame_needed = 0, uses_anonymous_args = 0
 1059              		@ link register save eliminated.
 1060              	.LVL101:
1126:FWLIB/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
1127:FWLIB/src/stm32f4xx_spi.c ****   
1128:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1129:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1130:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1131:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1132:FWLIB/src/stm32f4xx_spi.c **** 
1133:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1134:FWLIB/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1061              		.loc 1 1134 0
 1062 0000 0B09     		lsrs	r3, r1, #4
 1063              	.LVL102:
1135:FWLIB/src/stm32f4xx_spi.c **** 
1136:FWLIB/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1137:FWLIB/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1064              		.loc 1 1137 0
 1065 0002 0121     		movs	r1, #1
 1066              	.LVL103:
 1067 0004 9940     		lsls	r1, r1, r3
 1068 0006 89B2     		uxth	r1, r1
 1069              	.LVL104:
1138:FWLIB/src/stm32f4xx_spi.c **** 
1139:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1070              		.loc 1 1139 0
 1071 0008 2AB9     		cbnz	r2, .L85
1140:FWLIB/src/stm32f4xx_spi.c ****   {
1141:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1142:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
1143:FWLIB/src/stm32f4xx_spi.c ****   }
1144:FWLIB/src/stm32f4xx_spi.c ****   else
1145:FWLIB/src/stm32f4xx_spi.c ****   {
1146:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1147:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1072              		.loc 1 1147 0
 1073 000a 8388     		ldrh	r3, [r0, #4]
 1074              	.LVL105:
 1075 000c C943     		mvns	r1, r1
 1076              	.LVL106:
 1077 000e 89B2     		uxth	r1, r1
 1078              	.LVL107:
 1079 0010 1940     		ands	r1, r1, r3
 1080 0012 8180     		strh	r1, [r0, #4]	@ movhi
 1081 0014 7047     		bx	lr
 1082              	.LVL108:
 1083              	.L85:
1142:FWLIB/src/stm32f4xx_spi.c ****   }
 1084              		.loc 1 1142 0
 1085 0016 8388     		ldrh	r3, [r0, #4]
 1086              	.LVL109:
 1087 0018 9BB2     		uxth	r3, r3
ARM GAS  /tmp/cc7TDvj5.s 			page 40


 1088 001a 1943     		orrs	r1, r1, r3
 1089              	.LVL110:
 1090 001c 8180     		strh	r1, [r0, #4]	@ movhi
 1091 001e 7047     		bx	lr
 1092              		.cfi_endproc
 1093              	.LFE132:
 1095              		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1096              		.align	1
 1097              		.global	SPI_I2S_GetFlagStatus
 1098              		.syntax unified
 1099              		.thumb
 1100              		.thumb_func
 1101              		.fpu softvfp
 1103              	SPI_I2S_GetFlagStatus:
 1104              	.LFB133:
1148:FWLIB/src/stm32f4xx_spi.c ****   }
1149:FWLIB/src/stm32f4xx_spi.c **** }
1150:FWLIB/src/stm32f4xx_spi.c **** 
1151:FWLIB/src/stm32f4xx_spi.c **** /**
1152:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1153:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1154:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1155:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1156:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1157:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1158:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1159:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1160:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1161:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1162:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1163:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1164:FWLIB/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1165:FWLIB/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1166:FWLIB/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1167:FWLIB/src/stm32f4xx_spi.c ****   */
1168:FWLIB/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1169:FWLIB/src/stm32f4xx_spi.c **** {
 1105              		.loc 1 1169 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 1110              	.LVL111:
1170:FWLIB/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
1171:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1172:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1173:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1174:FWLIB/src/stm32f4xx_spi.c ****   
1175:FWLIB/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1176:FWLIB/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1111              		.loc 1 1176 0
 1112 0000 0389     		ldrh	r3, [r0, #8]
 1113 0002 1942     		tst	r1, r3
 1114 0004 01D1     		bne	.L89
1177:FWLIB/src/stm32f4xx_spi.c ****   {
1178:FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1179:FWLIB/src/stm32f4xx_spi.c ****     bitstatus = SET;
ARM GAS  /tmp/cc7TDvj5.s 			page 41


1180:FWLIB/src/stm32f4xx_spi.c ****   }
1181:FWLIB/src/stm32f4xx_spi.c ****   else
1182:FWLIB/src/stm32f4xx_spi.c ****   {
1183:FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1184:FWLIB/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1115              		.loc 1 1184 0
 1116 0006 0020     		movs	r0, #0
 1117              	.LVL112:
1185:FWLIB/src/stm32f4xx_spi.c ****   }
1186:FWLIB/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1187:FWLIB/src/stm32f4xx_spi.c ****   return  bitstatus;
1188:FWLIB/src/stm32f4xx_spi.c **** }
 1118              		.loc 1 1188 0
 1119 0008 7047     		bx	lr
 1120              	.LVL113:
 1121              	.L89:
1179:FWLIB/src/stm32f4xx_spi.c ****   }
 1122              		.loc 1 1179 0
 1123 000a 0120     		movs	r0, #1
 1124              	.LVL114:
 1125 000c 7047     		bx	lr
 1126              		.cfi_endproc
 1127              	.LFE133:
 1129              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1130              		.align	1
 1131              		.global	SPI_I2S_ClearFlag
 1132              		.syntax unified
 1133              		.thumb
 1134              		.thumb_func
 1135              		.fpu softvfp
 1137              	SPI_I2S_ClearFlag:
 1138              	.LFB134:
1189:FWLIB/src/stm32f4xx_spi.c **** 
1190:FWLIB/src/stm32f4xx_spi.c **** /**
1191:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1192:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1193:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1194:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1195:FWLIB/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1196:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1197:FWLIB/src/stm32f4xx_spi.c ****   *  
1198:FWLIB/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1199:FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1200:FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1201:FWLIB/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1202:FWLIB/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1203:FWLIB/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1204:FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1205:FWLIB/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1206:FWLIB/src/stm32f4xx_spi.c ****   *  
1207:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1208:FWLIB/src/stm32f4xx_spi.c ****   */
1209:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1210:FWLIB/src/stm32f4xx_spi.c **** {
 1139              		.loc 1 1210 0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc7TDvj5.s 			page 42


 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 1143              		@ link register save eliminated.
 1144              	.LVL115:
1211:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1212:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1213:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1214:FWLIB/src/stm32f4xx_spi.c ****     
1215:FWLIB/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1216:FWLIB/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1145              		.loc 1 1216 0
 1146 0000 C943     		mvns	r1, r1
 1147              	.LVL116:
 1148 0002 89B2     		uxth	r1, r1
 1149 0004 0181     		strh	r1, [r0, #8]	@ movhi
 1150 0006 7047     		bx	lr
 1151              		.cfi_endproc
 1152              	.LFE134:
 1154              		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1155              		.align	1
 1156              		.global	SPI_I2S_GetITStatus
 1157              		.syntax unified
 1158              		.thumb
 1159              		.thumb_func
 1160              		.fpu softvfp
 1162              	SPI_I2S_GetITStatus:
 1163              	.LFB135:
1217:FWLIB/src/stm32f4xx_spi.c **** }
1218:FWLIB/src/stm32f4xx_spi.c **** 
1219:FWLIB/src/stm32f4xx_spi.c **** /**
1220:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1221:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1222:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1223:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1224:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1225:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1226:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1227:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1228:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1229:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1230:FWLIB/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1231:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1232:FWLIB/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1233:FWLIB/src/stm32f4xx_spi.c ****   */
1234:FWLIB/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1235:FWLIB/src/stm32f4xx_spi.c **** {
 1164              		.loc 1 1235 0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 0
 1167              		@ frame_needed = 0, uses_anonymous_args = 0
 1168              		@ link register save eliminated.
 1169              	.LVL117:
 1170 0000 10B4     		push	{r4}
 1171              	.LCFI6:
 1172              		.cfi_def_cfa_offset 4
 1173              		.cfi_offset 4, -4
 1174              	.LVL118:
1236:FWLIB/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
ARM GAS  /tmp/cc7TDvj5.s 			page 43


1237:FWLIB/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
1238:FWLIB/src/stm32f4xx_spi.c **** 
1239:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1240:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1241:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1242:FWLIB/src/stm32f4xx_spi.c **** 
1243:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1244:FWLIB/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1175              		.loc 1 1244 0
 1176 0002 01F00F04 		and	r4, r1, #15
 1177 0006 0123     		movs	r3, #1
 1178 0008 03FA04F4 		lsl	r4, r3, r4
 1179              	.LVL119:
1245:FWLIB/src/stm32f4xx_spi.c **** 
1246:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1247:FWLIB/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1180              		.loc 1 1247 0
 1181 000c 0909     		lsrs	r1, r1, #4
 1182              	.LVL120:
1248:FWLIB/src/stm32f4xx_spi.c **** 
1249:FWLIB/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1250:FWLIB/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 1183              		.loc 1 1250 0
 1184 000e 8B40     		lsls	r3, r3, r1
 1185              	.LVL121:
1251:FWLIB/src/stm32f4xx_spi.c **** 
1252:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1253:FWLIB/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1186              		.loc 1 1253 0
 1187 0010 8188     		ldrh	r1, [r0, #4]
 1188 0012 89B2     		uxth	r1, r1
 1189 0014 0B40     		ands	r3, r3, r1
 1190              	.LVL122:
1254:FWLIB/src/stm32f4xx_spi.c **** 
1255:FWLIB/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1256:FWLIB/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1191              		.loc 1 1256 0
 1192 0016 0289     		ldrh	r2, [r0, #8]
 1193 0018 92B2     		uxth	r2, r2
 1194 001a 1442     		tst	r4, r2
 1195 001c 02D0     		beq	.L93
 1196              		.loc 1 1256 0 is_stmt 0 discriminator 1
 1197 001e 23B9     		cbnz	r3, .L94
1257:FWLIB/src/stm32f4xx_spi.c ****   {
1258:FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1259:FWLIB/src/stm32f4xx_spi.c ****     bitstatus = SET;
1260:FWLIB/src/stm32f4xx_spi.c ****   }
1261:FWLIB/src/stm32f4xx_spi.c ****   else
1262:FWLIB/src/stm32f4xx_spi.c ****   {
1263:FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1264:FWLIB/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1198              		.loc 1 1264 0 is_stmt 1
 1199 0020 0020     		movs	r0, #0
 1200              	.LVL123:
 1201 0022 00E0     		b	.L92
 1202              	.LVL124:
 1203              	.L93:
ARM GAS  /tmp/cc7TDvj5.s 			page 44


 1204 0024 0020     		movs	r0, #0
 1205              	.LVL125:
 1206              	.L92:
1265:FWLIB/src/stm32f4xx_spi.c ****   }
1266:FWLIB/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1267:FWLIB/src/stm32f4xx_spi.c ****   return bitstatus;
1268:FWLIB/src/stm32f4xx_spi.c **** }
 1207              		.loc 1 1268 0
 1208 0026 10BC     		pop	{r4}
 1209              	.LCFI7:
 1210              		.cfi_remember_state
 1211              		.cfi_restore 4
 1212              		.cfi_def_cfa_offset 0
 1213              	.LVL126:
 1214 0028 7047     		bx	lr
 1215              	.LVL127:
 1216              	.L94:
 1217              	.LCFI8:
 1218              		.cfi_restore_state
1259:FWLIB/src/stm32f4xx_spi.c ****   }
 1219              		.loc 1 1259 0
 1220 002a 0120     		movs	r0, #1
 1221              	.LVL128:
 1222 002c FBE7     		b	.L92
 1223              		.cfi_endproc
 1224              	.LFE135:
 1226              		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 1227              		.align	1
 1228              		.global	SPI_I2S_ClearITPendingBit
 1229              		.syntax unified
 1230              		.thumb
 1231              		.thumb_func
 1232              		.fpu softvfp
 1234              	SPI_I2S_ClearITPendingBit:
 1235              	.LFB136:
1269:FWLIB/src/stm32f4xx_spi.c **** 
1270:FWLIB/src/stm32f4xx_spi.c **** /**
1271:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1272:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1273:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1274:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1275:FWLIB/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1276:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1277:FWLIB/src/stm32f4xx_spi.c ****   *   
1278:FWLIB/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1279:FWLIB/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1280:FWLIB/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1281:FWLIB/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1282:FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1283:FWLIB/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1284:FWLIB/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1285:FWLIB/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1286:FWLIB/src/stm32f4xx_spi.c ****   *          the SPI).
1287:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1288:FWLIB/src/stm32f4xx_spi.c ****   */
1289:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1290:FWLIB/src/stm32f4xx_spi.c **** {
ARM GAS  /tmp/cc7TDvj5.s 			page 45


 1236              		.loc 1 1290 0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 1240              		@ link register save eliminated.
 1241              	.LVL129:
1291:FWLIB/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
1292:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1293:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1294:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1295:FWLIB/src/stm32f4xx_spi.c **** 
1296:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1297:FWLIB/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1242              		.loc 1 1297 0
 1243 0000 01F00F01 		and	r1, r1, #15
 1244              	.LVL130:
 1245 0004 0123     		movs	r3, #1
 1246 0006 8B40     		lsls	r3, r3, r1
 1247 0008 9BB2     		uxth	r3, r3
 1248              	.LVL131:
1298:FWLIB/src/stm32f4xx_spi.c **** 
1299:FWLIB/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1300:FWLIB/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1249              		.loc 1 1300 0
 1250 000a DB43     		mvns	r3, r3
 1251              	.LVL132:
 1252 000c 9BB2     		uxth	r3, r3
 1253              	.LVL133:
 1254 000e 0381     		strh	r3, [r0, #8]	@ movhi
 1255 0010 7047     		bx	lr
 1256              		.cfi_endproc
 1257              	.LFE136:
 1259              		.text
 1260              	.Letext0:
 1261              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1262              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1263              		.file 4 "CORE/core_cm4.h"
 1264              		.file 5 "USER/system_stm32f4xx.h"
 1265              		.file 6 "USER/stm32f4xx.h"
 1266              		.file 7 "FWLIB/inc/stm32f4xx_spi.h"
 1267              		.file 8 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/cc7TDvj5.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_spi.c
     /tmp/cc7TDvj5.s:16     .text.SPI_I2S_DeInit:0000000000000000 $t
     /tmp/cc7TDvj5.s:23     .text.SPI_I2S_DeInit:0000000000000000 SPI_I2S_DeInit
     /tmp/cc7TDvj5.s:151    .text.SPI_I2S_DeInit:00000000000000ac $d
     /tmp/cc7TDvj5.s:161    .text.SPI_Init:0000000000000000 $t
     /tmp/cc7TDvj5.s:168    .text.SPI_Init:0000000000000000 SPI_Init
     /tmp/cc7TDvj5.s:231    .text.I2S_Init:0000000000000000 $t
     /tmp/cc7TDvj5.s:238    .text.I2S_Init:0000000000000000 I2S_Init
     /tmp/cc7TDvj5.s:427    .text.I2S_Init:00000000000000fc $d
     /tmp/cc7TDvj5.s:435    .text.SPI_StructInit:0000000000000000 $t
     /tmp/cc7TDvj5.s:442    .text.SPI_StructInit:0000000000000000 SPI_StructInit
     /tmp/cc7TDvj5.s:475    .text.I2S_StructInit:0000000000000000 $t
     /tmp/cc7TDvj5.s:482    .text.I2S_StructInit:0000000000000000 I2S_StructInit
     /tmp/cc7TDvj5.s:509    .text.SPI_Cmd:0000000000000000 $t
     /tmp/cc7TDvj5.s:516    .text.SPI_Cmd:0000000000000000 SPI_Cmd
     /tmp/cc7TDvj5.s:544    .text.I2S_Cmd:0000000000000000 $t
     /tmp/cc7TDvj5.s:551    .text.I2S_Cmd:0000000000000000 I2S_Cmd
     /tmp/cc7TDvj5.s:579    .text.SPI_DataSizeConfig:0000000000000000 $t
     /tmp/cc7TDvj5.s:586    .text.SPI_DataSizeConfig:0000000000000000 SPI_DataSizeConfig
     /tmp/cc7TDvj5.s:611    .text.SPI_BiDirectionalLineConfig:0000000000000000 $t
     /tmp/cc7TDvj5.s:618    .text.SPI_BiDirectionalLineConfig:0000000000000000 SPI_BiDirectionalLineConfig
     /tmp/cc7TDvj5.s:647    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 $t
     /tmp/cc7TDvj5.s:654    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 SPI_NSSInternalSoftwareConfig
     /tmp/cc7TDvj5.s:684    .text.SPI_SSOutputCmd:0000000000000000 $t
     /tmp/cc7TDvj5.s:691    .text.SPI_SSOutputCmd:0000000000000000 SPI_SSOutputCmd
     /tmp/cc7TDvj5.s:719    .text.SPI_TIModeCmd:0000000000000000 $t
     /tmp/cc7TDvj5.s:726    .text.SPI_TIModeCmd:0000000000000000 SPI_TIModeCmd
     /tmp/cc7TDvj5.s:754    .text.I2S_FullDuplexConfig:0000000000000000 $t
     /tmp/cc7TDvj5.s:761    .text.I2S_FullDuplexConfig:0000000000000000 I2S_FullDuplexConfig
     /tmp/cc7TDvj5.s:839    .text.SPI_I2S_ReceiveData:0000000000000000 $t
     /tmp/cc7TDvj5.s:846    .text.SPI_I2S_ReceiveData:0000000000000000 SPI_I2S_ReceiveData
     /tmp/cc7TDvj5.s:864    .text.SPI_I2S_SendData:0000000000000000 $t
     /tmp/cc7TDvj5.s:871    .text.SPI_I2S_SendData:0000000000000000 SPI_I2S_SendData
     /tmp/cc7TDvj5.s:886    .text.SPI_CalculateCRC:0000000000000000 $t
     /tmp/cc7TDvj5.s:893    .text.SPI_CalculateCRC:0000000000000000 SPI_CalculateCRC
     /tmp/cc7TDvj5.s:921    .text.SPI_TransmitCRC:0000000000000000 $t
     /tmp/cc7TDvj5.s:928    .text.SPI_TransmitCRC:0000000000000000 SPI_TransmitCRC
     /tmp/cc7TDvj5.s:946    .text.SPI_GetCRC:0000000000000000 $t
     /tmp/cc7TDvj5.s:953    .text.SPI_GetCRC:0000000000000000 SPI_GetCRC
     /tmp/cc7TDvj5.s:983    .text.SPI_GetCRCPolynomial:0000000000000000 $t
     /tmp/cc7TDvj5.s:990    .text.SPI_GetCRCPolynomial:0000000000000000 SPI_GetCRCPolynomial
     /tmp/cc7TDvj5.s:1008   .text.SPI_I2S_DMACmd:0000000000000000 $t
     /tmp/cc7TDvj5.s:1015   .text.SPI_I2S_DMACmd:0000000000000000 SPI_I2S_DMACmd
     /tmp/cc7TDvj5.s:1046   .text.SPI_I2S_ITConfig:0000000000000000 $t
     /tmp/cc7TDvj5.s:1053   .text.SPI_I2S_ITConfig:0000000000000000 SPI_I2S_ITConfig
     /tmp/cc7TDvj5.s:1096   .text.SPI_I2S_GetFlagStatus:0000000000000000 $t
     /tmp/cc7TDvj5.s:1103   .text.SPI_I2S_GetFlagStatus:0000000000000000 SPI_I2S_GetFlagStatus
     /tmp/cc7TDvj5.s:1130   .text.SPI_I2S_ClearFlag:0000000000000000 $t
     /tmp/cc7TDvj5.s:1137   .text.SPI_I2S_ClearFlag:0000000000000000 SPI_I2S_ClearFlag
     /tmp/cc7TDvj5.s:1155   .text.SPI_I2S_GetITStatus:0000000000000000 $t
     /tmp/cc7TDvj5.s:1162   .text.SPI_I2S_GetITStatus:0000000000000000 SPI_I2S_GetITStatus
     /tmp/cc7TDvj5.s:1227   .text.SPI_I2S_ClearITPendingBit:0000000000000000 $t
     /tmp/cc7TDvj5.s:1234   .text.SPI_I2S_ClearITPendingBit:0000000000000000 SPI_I2S_ClearITPendingBit
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/cc7TDvj5.s 			page 47


RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
