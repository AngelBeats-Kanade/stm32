ARM GAS  /tmp/cczwX7yU.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f4xx_flash.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.FLASH_SetLatency,"ax",%progbits
  16              		.align	1
  17              		.global	FLASH_SetLatency
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	FLASH_SetLatency:
  24              	.LFB112:
  25              		.file 1 "FWLIB/src/stm32f4xx_flash.c"
   1:FWLIB/src/stm32f4xx_flash.c **** /**
   2:FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_flash.c ****   * @file    stm32f4xx_flash.c
   4:FWLIB/src/stm32f4xx_flash.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_flash.c ****   * @version V1.4.0
   6:FWLIB/src/stm32f4xx_flash.c ****   * @date    04-August-2014
   7:FWLIB/src/stm32f4xx_flash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_flash.c ****   *          functionalities of the FLASH peripheral:
   9:FWLIB/src/stm32f4xx_flash.c ****   *            + FLASH Interface configuration
  10:FWLIB/src/stm32f4xx_flash.c ****   *            + FLASH Memory Programming
  11:FWLIB/src/stm32f4xx_flash.c ****   *            + Option Bytes Programming
  12:FWLIB/src/stm32f4xx_flash.c ****   *            + Interrupts and flags management
  13:FWLIB/src/stm32f4xx_flash.c ****   *  
  14:FWLIB/src/stm32f4xx_flash.c ****  @verbatim    
  15:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
  16:FWLIB/src/stm32f4xx_flash.c ****                         ##### How to use this driver #####
  17:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
  18:FWLIB/src/stm32f4xx_flash.c ****     [..]                             
  19:FWLIB/src/stm32f4xx_flash.c ****       This driver provides functions to configure and program the FLASH memory 
  20:FWLIB/src/stm32f4xx_flash.c ****       of all STM32F4xx devices. These functions are split in 4 groups:
  21:FWLIB/src/stm32f4xx_flash.c ****    
  22:FWLIB/src/stm32f4xx_flash.c ****       (#) FLASH Interface configuration functions: this group includes the
  23:FWLIB/src/stm32f4xx_flash.c ****           management of the following features:
  24:FWLIB/src/stm32f4xx_flash.c ****         (++) Set the latency
  25:FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the prefetch buffer
  26:FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the Instruction cache and the Data cache
  27:FWLIB/src/stm32f4xx_flash.c ****         (++) Reset the Instruction cache and the Data cache
  28:FWLIB/src/stm32f4xx_flash.c ****     
  29:FWLIB/src/stm32f4xx_flash.c ****       (#) FLASH Memory Programming functions: this group includes all needed
  30:FWLIB/src/stm32f4xx_flash.c ****           functions to erase and program the main memory:
  31:FWLIB/src/stm32f4xx_flash.c ****         (++) Lock and Unlock the FLASH interface
  32:FWLIB/src/stm32f4xx_flash.c ****         (++) Erase function: Erase sector, erase all sectors
  33:FWLIB/src/stm32f4xx_flash.c ****         (++) Program functions: byte, half word, word and double word
ARM GAS  /tmp/cczwX7yU.s 			page 2


  34:FWLIB/src/stm32f4xx_flash.c ****     
  35:FWLIB/src/stm32f4xx_flash.c ****       (#) Option Bytes Programming functions: this group includes all needed
  36:FWLIB/src/stm32f4xx_flash.c ****           functions to manage the Option Bytes:
  37:FWLIB/src/stm32f4xx_flash.c ****         (++) Set/Reset the write protection
  38:FWLIB/src/stm32f4xx_flash.c ****         (++) Set the Read protection Level
  39:FWLIB/src/stm32f4xx_flash.c ****         (++) Set the BOR level
  40:FWLIB/src/stm32f4xx_flash.c ****         (++) Program the user Option Bytes
  41:FWLIB/src/stm32f4xx_flash.c ****         (++) Launch the Option Bytes loader
  42:FWLIB/src/stm32f4xx_flash.c ****     
  43:FWLIB/src/stm32f4xx_flash.c ****       (#) Interrupts and flags management functions: this group 
  44:FWLIB/src/stm32f4xx_flash.c ****           includes all needed functions to:
  45:FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the FLASH interrupt sources
  46:FWLIB/src/stm32f4xx_flash.c ****         (++) Get flags status
  47:FWLIB/src/stm32f4xx_flash.c ****         (++) Clear flags
  48:FWLIB/src/stm32f4xx_flash.c ****         (++) Get FLASH operation status
  49:FWLIB/src/stm32f4xx_flash.c ****         (++) Wait for last FLASH operation   
  50:FWLIB/src/stm32f4xx_flash.c ****  @endverbatim
  51:FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
  52:FWLIB/src/stm32f4xx_flash.c ****   * @attention
  53:FWLIB/src/stm32f4xx_flash.c ****   *
  54:FWLIB/src/stm32f4xx_flash.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  55:FWLIB/src/stm32f4xx_flash.c ****   *
  56:FWLIB/src/stm32f4xx_flash.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  57:FWLIB/src/stm32f4xx_flash.c ****   * You may not use this file except in compliance with the License.
  58:FWLIB/src/stm32f4xx_flash.c ****   * You may obtain a copy of the License at:
  59:FWLIB/src/stm32f4xx_flash.c ****   *
  60:FWLIB/src/stm32f4xx_flash.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  61:FWLIB/src/stm32f4xx_flash.c ****   *
  62:FWLIB/src/stm32f4xx_flash.c ****   * Unless required by applicable law or agreed to in writing, software 
  63:FWLIB/src/stm32f4xx_flash.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  64:FWLIB/src/stm32f4xx_flash.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  65:FWLIB/src/stm32f4xx_flash.c ****   * See the License for the specific language governing permissions and
  66:FWLIB/src/stm32f4xx_flash.c ****   * limitations under the License.
  67:FWLIB/src/stm32f4xx_flash.c ****   *
  68:FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
  69:FWLIB/src/stm32f4xx_flash.c ****   */
  70:FWLIB/src/stm32f4xx_flash.c **** 
  71:FWLIB/src/stm32f4xx_flash.c **** /* Includes ------------------------------------------------------------------*/
  72:FWLIB/src/stm32f4xx_flash.c **** #include "stm32f4xx_flash.h"
  73:FWLIB/src/stm32f4xx_flash.c **** 
  74:FWLIB/src/stm32f4xx_flash.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  75:FWLIB/src/stm32f4xx_flash.c ****   * @{
  76:FWLIB/src/stm32f4xx_flash.c ****   */
  77:FWLIB/src/stm32f4xx_flash.c **** 
  78:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH 
  79:FWLIB/src/stm32f4xx_flash.c ****   * @brief FLASH driver modules
  80:FWLIB/src/stm32f4xx_flash.c ****   * @{
  81:FWLIB/src/stm32f4xx_flash.c ****   */ 
  82:FWLIB/src/stm32f4xx_flash.c **** 
  83:FWLIB/src/stm32f4xx_flash.c **** /* Private typedef -----------------------------------------------------------*/
  84:FWLIB/src/stm32f4xx_flash.c **** /* Private define ------------------------------------------------------------*/ 
  85:FWLIB/src/stm32f4xx_flash.c **** #define SECTOR_MASK               ((uint32_t)0xFFFFFF07)
  86:FWLIB/src/stm32f4xx_flash.c **** 
  87:FWLIB/src/stm32f4xx_flash.c **** /* Private macro -------------------------------------------------------------*/
  88:FWLIB/src/stm32f4xx_flash.c **** /* Private variables ---------------------------------------------------------*/
  89:FWLIB/src/stm32f4xx_flash.c **** /* Private function prototypes -----------------------------------------------*/
  90:FWLIB/src/stm32f4xx_flash.c **** /* Private functions ---------------------------------------------------------*/
ARM GAS  /tmp/cczwX7yU.s 			page 3


  91:FWLIB/src/stm32f4xx_flash.c **** 
  92:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Private_Functions
  93:FWLIB/src/stm32f4xx_flash.c ****   * @{
  94:FWLIB/src/stm32f4xx_flash.c ****   */ 
  95:FWLIB/src/stm32f4xx_flash.c **** 
  96:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group1 FLASH Interface configuration functions
  97:FWLIB/src/stm32f4xx_flash.c ****   *  @brief   FLASH Interface configuration functions 
  98:FWLIB/src/stm32f4xx_flash.c ****  *
  99:FWLIB/src/stm32f4xx_flash.c **** 
 100:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 101:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 102:FWLIB/src/stm32f4xx_flash.c ****               ##### FLASH Interface configuration functions #####
 103:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 104:FWLIB/src/stm32f4xx_flash.c ****     [..]
 105:FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
 106:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_SetLatency(uint32_t FLASH_Latency)
 107:FWLIB/src/stm32f4xx_flash.c ****           To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 108:FWLIB/src/stm32f4xx_flash.c ****           must be correctly programmed according to the frequency of the CPU clock 
 109:FWLIB/src/stm32f4xx_flash.c ****           (HCLK) and the supply voltage of the device.
 110:FWLIB/src/stm32f4xx_flash.c ****     [..]      
 111:FWLIB/src/stm32f4xx_flash.c ****       For STM32F405xx/07xx and STM32F415xx/17xx devices
 112:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 113:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 114:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 115:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 116:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 117:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 118:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 119:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 120:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 121:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 122:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 123:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 124:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 125:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 126:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 127:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 128:FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 129:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 130:FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 131:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 132:FWLIB/src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 133:FWLIB/src/stm32f4xx_flash.c ****  +---------------|----------------|----------------|-----------------|-----------------+
 134:FWLIB/src/stm32f4xx_flash.c **** 
 135:FWLIB/src/stm32f4xx_flash.c ****     [..]      
 136:FWLIB/src/stm32f4xx_flash.c ****       For STM32F42xxx/43xxx devices
 137:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 138:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 139:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 140:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 141:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 142:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 143:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 144:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 145:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 146:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 147:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
ARM GAS  /tmp/cczwX7yU.s 			page 4


 148:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 149:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 150:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 151:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 152:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 153:FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 154:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 155:FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 156:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 157:FWLIB/src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 158:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 159:FWLIB/src/stm32f4xx_flash.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 160:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 161:FWLIB/src/stm32f4xx_flash.c ****    
 162:FWLIB/src/stm32f4xx_flash.c ****     [..]
 163:FWLIB/src/stm32f4xx_flash.c ****     For STM32F401x devices
 164:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 165:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 166:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 167:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 168:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 169:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 170:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 171:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 172:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 173:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 174:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 175:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 176:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
 177:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 178:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
 179:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 180:FWLIB/src/stm32f4xx_flash.c **** 
 181:FWLIB/src/stm32f4xx_flash.c ****     [..]
 182:FWLIB/src/stm32f4xx_flash.c ****     For STM32F411xE devices
 183:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 184:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 185:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 186:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 187:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 188:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 189:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 190:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 191:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
 192:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 193:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 194:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 195:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 196:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 197:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
 198:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 199:FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
 200:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 201:FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
 202:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 203:FWLIB/src/stm32f4xx_flash.c ****  
 204:FWLIB/src/stm32f4xx_flash.c ****  [..]
ARM GAS  /tmp/cczwX7yU.s 			page 5


 205:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 206:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   | voltage ra
 207:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   | with Exter
 208:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 209:FWLIB/src/stm32f4xx_flash.c ****  |Max Parallelism|      x32       |               x16                |       x8        |          x
 210:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 211:FWLIB/src/stm32f4xx_flash.c ****  |PSIZE[1:0]     |      10        |               01                 |       00        |           
 212:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 213:FWLIB/src/stm32f4xx_flash.c **** 
 214:FWLIB/src/stm32f4xx_flash.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
 215:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS = '0' Scale 2 mode, the maximum value of fHCLK = 144MHz. 
 216:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS = '1' Scale 1 mode, the maximum value of fHCLK = 168MHz. 
 217:FWLIB/src/stm32f4xx_flash.c ****           [..] 
 218:FWLIB/src/stm32f4xx_flash.c ****           On STM32F42xxx/43xxx devices:
 219:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 120MHz.
 220:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 144MHz if OverDr
 221:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 168MHz if OverDr
 222:FWLIB/src/stm32f4xx_flash.c ****           [..]
 223:FWLIB/src/stm32f4xx_flash.c ****           On STM32F401x devices:
 224:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 60MHz.
 225:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 226:FWLIB/src/stm32f4xx_flash.c ****           [..]  
 227:FWLIB/src/stm32f4xx_flash.c ****           On STM32F411xE devices:
 228:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 64MHz.
 229:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 230:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 100MHz.
 231:FWLIB/src/stm32f4xx_flash.c **** 
 232:FWLIB/src/stm32f4xx_flash.c ****         For more details please refer product DataSheet 
 233:FWLIB/src/stm32f4xx_flash.c ****            You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
 234:FWLIB/src/stm32f4xx_flash.c **** 
 235:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 236:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheCmd(FunctionalState NewState)
 237:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheCmd(FunctionalState NewState)
 238:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheReset(void)
 239:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheReset(void)
 240:FWLIB/src/stm32f4xx_flash.c ****       
 241:FWLIB/src/stm32f4xx_flash.c ****     [..]   
 242:FWLIB/src/stm32f4xx_flash.c ****       The unlock sequence is not needed for these functions.
 243:FWLIB/src/stm32f4xx_flash.c ****  
 244:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
 245:FWLIB/src/stm32f4xx_flash.c ****   * @{
 246:FWLIB/src/stm32f4xx_flash.c ****   */
 247:FWLIB/src/stm32f4xx_flash.c ****  
 248:FWLIB/src/stm32f4xx_flash.c **** /**
 249:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the code latency value.  
 250:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 251:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 252:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_0: FLASH Zero Latency cycle
 253:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_1: FLASH One Latency cycle
 254:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_2: FLASH Two Latency cycles
 255:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_3: FLASH Three Latency cycles
 256:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_4: FLASH Four Latency cycles 
 257:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_5: FLASH Five Latency cycles 
 258:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_6: FLASH Six Latency cycles
 259:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_7: FLASH Seven Latency cycles 
 260:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_8: FLASH Eight Latency cycles
 261:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_9: FLASH Nine Latency cycles
ARM GAS  /tmp/cczwX7yU.s 			page 6


 262:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_10: FLASH Teen Latency cycles 
 263:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_11: FLASH Eleven Latency cycles 
 264:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_12: FLASH Twelve Latency cycles
 265:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_13: FLASH Thirteen Latency cycles
 266:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_14: FLASH Fourteen Latency cycles
 267:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_15: FLASH Fifteen Latency cycles 
 268:FWLIB/src/stm32f4xx_flash.c ****   *              
 269:FWLIB/src/stm32f4xx_flash.c ****   * @note For STM32F405xx/407xx, STM32F415xx/417xx and STM32F401xx/411xE devices this parameter
 270:FWLIB/src/stm32f4xx_flash.c ****   *       can be a value between FLASH_Latency_0 and FLASH_Latency_7.
 271:FWLIB/src/stm32f4xx_flash.c ****   *
 272:FWLIB/src/stm32f4xx_flash.c ****   * @note For STM32F42xxx/43xxx devices this parameter can be a value between 
 273:FWLIB/src/stm32f4xx_flash.c ****   *       FLASH_Latency_0 and FLASH_Latency_15. 
 274:FWLIB/src/stm32f4xx_flash.c ****   *         
 275:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 276:FWLIB/src/stm32f4xx_flash.c ****   */
 277:FWLIB/src/stm32f4xx_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 278:FWLIB/src/stm32f4xx_flash.c **** {
  26              		.loc 1 278 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 279:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 280:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
 281:FWLIB/src/stm32f4xx_flash.c ****   
 282:FWLIB/src/stm32f4xx_flash.c ****   /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
 283:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
  32              		.loc 1 283 0
  33 0000 C0B2     		uxtb	r0, r0
  34              	.LVL1:
  35 0002 014B     		ldr	r3, .L2
  36 0004 1870     		strb	r0, [r3]
  37 0006 7047     		bx	lr
  38              	.L3:
  39              		.align	2
  40              	.L2:
  41 0008 003C0240 		.word	1073888256
  42              		.cfi_endproc
  43              	.LFE112:
  45              		.section	.text.FLASH_PrefetchBufferCmd,"ax",%progbits
  46              		.align	1
  47              		.global	FLASH_PrefetchBufferCmd
  48              		.syntax unified
  49              		.thumb
  50              		.thumb_func
  51              		.fpu softvfp
  53              	FLASH_PrefetchBufferCmd:
  54              	.LFB113:
 284:FWLIB/src/stm32f4xx_flash.c **** }
 285:FWLIB/src/stm32f4xx_flash.c **** 
 286:FWLIB/src/stm32f4xx_flash.c **** /**
 287:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 288:FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Prefetch Buffer.
 289:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 290:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 291:FWLIB/src/stm32f4xx_flash.c ****   */
ARM GAS  /tmp/cczwX7yU.s 			page 7


 292:FWLIB/src/stm32f4xx_flash.c **** void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 293:FWLIB/src/stm32f4xx_flash.c **** {
  55              		.loc 1 293 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              	.LVL2:
 294:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 295:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 296:FWLIB/src/stm32f4xx_flash.c ****   
 297:FWLIB/src/stm32f4xx_flash.c ****   /* Enable or disable the Prefetch Buffer */
 298:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
  61              		.loc 1 298 0
  62 0000 28B9     		cbnz	r0, .L7
 299:FWLIB/src/stm32f4xx_flash.c ****   {
 300:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_PRFTEN;
 301:FWLIB/src/stm32f4xx_flash.c ****   }
 302:FWLIB/src/stm32f4xx_flash.c ****   else
 303:FWLIB/src/stm32f4xx_flash.c ****   {
 304:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  63              		.loc 1 304 0
  64 0002 064A     		ldr	r2, .L8
  65 0004 1368     		ldr	r3, [r2]
  66 0006 23F48073 		bic	r3, r3, #256
  67 000a 1360     		str	r3, [r2]
  68 000c 7047     		bx	lr
  69              	.L7:
 300:FWLIB/src/stm32f4xx_flash.c ****   }
  70              		.loc 1 300 0
  71 000e 034A     		ldr	r2, .L8
  72 0010 1368     		ldr	r3, [r2]
  73 0012 43F48073 		orr	r3, r3, #256
  74 0016 1360     		str	r3, [r2]
  75 0018 7047     		bx	lr
  76              	.L9:
  77 001a 00BF     		.align	2
  78              	.L8:
  79 001c 003C0240 		.word	1073888256
  80              		.cfi_endproc
  81              	.LFE113:
  83              		.section	.text.FLASH_InstructionCacheCmd,"ax",%progbits
  84              		.align	1
  85              		.global	FLASH_InstructionCacheCmd
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu softvfp
  91              	FLASH_InstructionCacheCmd:
  92              	.LFB114:
 305:FWLIB/src/stm32f4xx_flash.c ****   }
 306:FWLIB/src/stm32f4xx_flash.c **** }
 307:FWLIB/src/stm32f4xx_flash.c **** 
 308:FWLIB/src/stm32f4xx_flash.c **** /**
 309:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Instruction Cache feature.
 310:FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Instruction Cache.
 311:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
ARM GAS  /tmp/cczwX7yU.s 			page 8


 312:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 313:FWLIB/src/stm32f4xx_flash.c ****   */
 314:FWLIB/src/stm32f4xx_flash.c **** void FLASH_InstructionCacheCmd(FunctionalState NewState)
 315:FWLIB/src/stm32f4xx_flash.c **** {
  93              		.loc 1 315 0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  98              	.LVL3:
 316:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 317:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 318:FWLIB/src/stm32f4xx_flash.c ****   
 319:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
  99              		.loc 1 319 0
 100 0000 28B9     		cbnz	r0, .L13
 320:FWLIB/src/stm32f4xx_flash.c ****   {
 321:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_ICEN;
 322:FWLIB/src/stm32f4xx_flash.c ****   }
 323:FWLIB/src/stm32f4xx_flash.c ****   else
 324:FWLIB/src/stm32f4xx_flash.c ****   {
 325:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_ICEN);
 101              		.loc 1 325 0
 102 0002 064A     		ldr	r2, .L14
 103 0004 1368     		ldr	r3, [r2]
 104 0006 23F40073 		bic	r3, r3, #512
 105 000a 1360     		str	r3, [r2]
 106 000c 7047     		bx	lr
 107              	.L13:
 321:FWLIB/src/stm32f4xx_flash.c ****   }
 108              		.loc 1 321 0
 109 000e 034A     		ldr	r2, .L14
 110 0010 1368     		ldr	r3, [r2]
 111 0012 43F40073 		orr	r3, r3, #512
 112 0016 1360     		str	r3, [r2]
 113 0018 7047     		bx	lr
 114              	.L15:
 115 001a 00BF     		.align	2
 116              	.L14:
 117 001c 003C0240 		.word	1073888256
 118              		.cfi_endproc
 119              	.LFE114:
 121              		.section	.text.FLASH_DataCacheCmd,"ax",%progbits
 122              		.align	1
 123              		.global	FLASH_DataCacheCmd
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 127              		.fpu softvfp
 129              	FLASH_DataCacheCmd:
 130              	.LFB115:
 326:FWLIB/src/stm32f4xx_flash.c ****   }
 327:FWLIB/src/stm32f4xx_flash.c **** }
 328:FWLIB/src/stm32f4xx_flash.c **** 
 329:FWLIB/src/stm32f4xx_flash.c **** /**
 330:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Data Cache feature.
 331:FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Data Cache.
ARM GAS  /tmp/cczwX7yU.s 			page 9


 332:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 333:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 334:FWLIB/src/stm32f4xx_flash.c ****   */
 335:FWLIB/src/stm32f4xx_flash.c **** void FLASH_DataCacheCmd(FunctionalState NewState)
 336:FWLIB/src/stm32f4xx_flash.c **** {
 131              		.loc 1 336 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 136              	.LVL4:
 337:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 338:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 339:FWLIB/src/stm32f4xx_flash.c ****   
 340:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 137              		.loc 1 340 0
 138 0000 28B9     		cbnz	r0, .L19
 341:FWLIB/src/stm32f4xx_flash.c ****   {
 342:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_DCEN;
 343:FWLIB/src/stm32f4xx_flash.c ****   }
 344:FWLIB/src/stm32f4xx_flash.c ****   else
 345:FWLIB/src/stm32f4xx_flash.c ****   {
 346:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_DCEN);
 139              		.loc 1 346 0
 140 0002 064A     		ldr	r2, .L20
 141 0004 1368     		ldr	r3, [r2]
 142 0006 23F48063 		bic	r3, r3, #1024
 143 000a 1360     		str	r3, [r2]
 144 000c 7047     		bx	lr
 145              	.L19:
 342:FWLIB/src/stm32f4xx_flash.c ****   }
 146              		.loc 1 342 0
 147 000e 034A     		ldr	r2, .L20
 148 0010 1368     		ldr	r3, [r2]
 149 0012 43F48063 		orr	r3, r3, #1024
 150 0016 1360     		str	r3, [r2]
 151 0018 7047     		bx	lr
 152              	.L21:
 153 001a 00BF     		.align	2
 154              	.L20:
 155 001c 003C0240 		.word	1073888256
 156              		.cfi_endproc
 157              	.LFE115:
 159              		.section	.text.FLASH_InstructionCacheReset,"ax",%progbits
 160              		.align	1
 161              		.global	FLASH_InstructionCacheReset
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 165              		.fpu softvfp
 167              	FLASH_InstructionCacheReset:
 168              	.LFB116:
 347:FWLIB/src/stm32f4xx_flash.c ****   }
 348:FWLIB/src/stm32f4xx_flash.c **** }
 349:FWLIB/src/stm32f4xx_flash.c **** 
 350:FWLIB/src/stm32f4xx_flash.c **** /**
 351:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Resets the Instruction Cache.
ARM GAS  /tmp/cczwX7yU.s 			page 10


 352:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Instruction Cache is disabled.  
 353:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 354:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 355:FWLIB/src/stm32f4xx_flash.c ****   */
 356:FWLIB/src/stm32f4xx_flash.c **** void FLASH_InstructionCacheReset(void)
 357:FWLIB/src/stm32f4xx_flash.c **** {
 169              		.loc 1 357 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 358:FWLIB/src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_ICRST;
 174              		.loc 1 358 0
 175 0000 024A     		ldr	r2, .L23
 176 0002 1368     		ldr	r3, [r2]
 177 0004 43F40063 		orr	r3, r3, #2048
 178 0008 1360     		str	r3, [r2]
 179 000a 7047     		bx	lr
 180              	.L24:
 181              		.align	2
 182              	.L23:
 183 000c 003C0240 		.word	1073888256
 184              		.cfi_endproc
 185              	.LFE116:
 187              		.section	.text.FLASH_DataCacheReset,"ax",%progbits
 188              		.align	1
 189              		.global	FLASH_DataCacheReset
 190              		.syntax unified
 191              		.thumb
 192              		.thumb_func
 193              		.fpu softvfp
 195              	FLASH_DataCacheReset:
 196              	.LFB117:
 359:FWLIB/src/stm32f4xx_flash.c **** }
 360:FWLIB/src/stm32f4xx_flash.c **** 
 361:FWLIB/src/stm32f4xx_flash.c **** /**
 362:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Resets the Data Cache.
 363:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Data Cache is disabled.  
 364:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 365:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 366:FWLIB/src/stm32f4xx_flash.c ****   */
 367:FWLIB/src/stm32f4xx_flash.c **** void FLASH_DataCacheReset(void)
 368:FWLIB/src/stm32f4xx_flash.c **** {
 197              		.loc 1 368 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 369:FWLIB/src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_DCRST;
 202              		.loc 1 369 0
 203 0000 024A     		ldr	r2, .L26
 204 0002 1368     		ldr	r3, [r2]
 205 0004 43F48053 		orr	r3, r3, #4096
 206 0008 1360     		str	r3, [r2]
 207 000a 7047     		bx	lr
 208              	.L27:
 209              		.align	2
ARM GAS  /tmp/cczwX7yU.s 			page 11


 210              	.L26:
 211 000c 003C0240 		.word	1073888256
 212              		.cfi_endproc
 213              	.LFE117:
 215              		.section	.text.FLASH_Unlock,"ax",%progbits
 216              		.align	1
 217              		.global	FLASH_Unlock
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 221              		.fpu softvfp
 223              	FLASH_Unlock:
 224              	.LFB118:
 370:FWLIB/src/stm32f4xx_flash.c **** }
 371:FWLIB/src/stm32f4xx_flash.c **** 
 372:FWLIB/src/stm32f4xx_flash.c **** /**
 373:FWLIB/src/stm32f4xx_flash.c ****   * @}
 374:FWLIB/src/stm32f4xx_flash.c ****   */
 375:FWLIB/src/stm32f4xx_flash.c **** 
 376:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group2 FLASH Memory Programming functions
 377:FWLIB/src/stm32f4xx_flash.c ****  *  @brief   FLASH Memory Programming functions
 378:FWLIB/src/stm32f4xx_flash.c ****  *
 379:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 380:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 381:FWLIB/src/stm32f4xx_flash.c ****                 ##### FLASH Memory Programming functions #####
 382:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================   
 383:FWLIB/src/stm32f4xx_flash.c ****     [..]
 384:FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
 385:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_Unlock(void)
 386:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_Lock(void)
 387:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 388:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)       
 389:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 390:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 391:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 392:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 393:FWLIB/src/stm32f4xx_flash.c ****           The following functions can be used only for STM32F42xxx/43xxx devices. 
 394:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 395:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)    
 396:FWLIB/src/stm32f4xx_flash.c ****     [..]   
 397:FWLIB/src/stm32f4xx_flash.c ****       Any operation of erase or program should follow these steps:
 398:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_Unlock() function to enable the FLASH control register access
 399:FWLIB/src/stm32f4xx_flash.c **** 
 400:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the desired function to erase sector(s) or program data
 401:FWLIB/src/stm32f4xx_flash.c **** 
 402:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_Lock() function to disable the FLASH control register access
 403:FWLIB/src/stm32f4xx_flash.c ****           (recommended to protect the FLASH memory against possible unwanted operation)
 404:FWLIB/src/stm32f4xx_flash.c ****     
 405:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
 406:FWLIB/src/stm32f4xx_flash.c ****   * @{
 407:FWLIB/src/stm32f4xx_flash.c ****   */
 408:FWLIB/src/stm32f4xx_flash.c **** 
 409:FWLIB/src/stm32f4xx_flash.c **** /**
 410:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH control register access
 411:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 412:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 413:FWLIB/src/stm32f4xx_flash.c ****   */
ARM GAS  /tmp/cczwX7yU.s 			page 12


 414:FWLIB/src/stm32f4xx_flash.c **** void FLASH_Unlock(void)
 415:FWLIB/src/stm32f4xx_flash.c **** {
 225              		.loc 1 415 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 416:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 230              		.loc 1 416 0
 231 0000 054B     		ldr	r3, .L31
 232 0002 1B69     		ldr	r3, [r3, #16]
 233 0004 002B     		cmp	r3, #0
 234 0006 00DB     		blt	.L30
 235              	.L28:
 236 0008 7047     		bx	lr
 237              	.L30:
 417:FWLIB/src/stm32f4xx_flash.c ****   {
 418:FWLIB/src/stm32f4xx_flash.c ****     /* Authorize the FLASH Registers access */
 419:FWLIB/src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY1;
 238              		.loc 1 419 0
 239 000a 034B     		ldr	r3, .L31
 240 000c 034A     		ldr	r2, .L31+4
 241 000e 5A60     		str	r2, [r3, #4]
 420:FWLIB/src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 242              		.loc 1 420 0
 243 0010 02F18832 		add	r2, r2, #-2004318072
 244 0014 5A60     		str	r2, [r3, #4]
 421:FWLIB/src/stm32f4xx_flash.c ****   }  
 422:FWLIB/src/stm32f4xx_flash.c **** }
 245              		.loc 1 422 0
 246 0016 F7E7     		b	.L28
 247              	.L32:
 248              		.align	2
 249              	.L31:
 250 0018 003C0240 		.word	1073888256
 251 001c 23016745 		.word	1164378403
 252              		.cfi_endproc
 253              	.LFE118:
 255              		.section	.text.FLASH_Lock,"ax",%progbits
 256              		.align	1
 257              		.global	FLASH_Lock
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu softvfp
 263              	FLASH_Lock:
 264              	.LFB119:
 423:FWLIB/src/stm32f4xx_flash.c **** 
 424:FWLIB/src/stm32f4xx_flash.c **** /**
 425:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH control register access
 426:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 427:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 428:FWLIB/src/stm32f4xx_flash.c ****   */
 429:FWLIB/src/stm32f4xx_flash.c **** void FLASH_Lock(void)
 430:FWLIB/src/stm32f4xx_flash.c **** {
 265              		.loc 1 430 0
 266              		.cfi_startproc
ARM GAS  /tmp/cczwX7yU.s 			page 13


 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269              		@ link register save eliminated.
 431:FWLIB/src/stm32f4xx_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 432:FWLIB/src/stm32f4xx_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 270              		.loc 1 432 0
 271 0000 024A     		ldr	r2, .L34
 272 0002 1369     		ldr	r3, [r2, #16]
 273 0004 43F00043 		orr	r3, r3, #-2147483648
 274 0008 1361     		str	r3, [r2, #16]
 275 000a 7047     		bx	lr
 276              	.L35:
 277              		.align	2
 278              	.L34:
 279 000c 003C0240 		.word	1073888256
 280              		.cfi_endproc
 281              	.LFE119:
 283              		.section	.text.FLASH_OB_Unlock,"ax",%progbits
 284              		.align	1
 285              		.global	FLASH_OB_Unlock
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 289              		.fpu softvfp
 291              	FLASH_OB_Unlock:
 292              	.LFB128:
 433:FWLIB/src/stm32f4xx_flash.c **** }
 434:FWLIB/src/stm32f4xx_flash.c **** 
 435:FWLIB/src/stm32f4xx_flash.c **** /**
 436:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases a specified FLASH Sector.
 437:FWLIB/src/stm32f4xx_flash.c ****   *
 438:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
 439:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 440:FWLIB/src/stm32f4xx_flash.c ****   *
 441:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_Sector: The Sector number to be erased.
 442:FWLIB/src/stm32f4xx_flash.c ****   *
 443:FWLIB/src/stm32f4xx_flash.c ****   *  @note  For STM32F405xx/407xx and STM32F415xx/417xx devices this parameter can 
 444:FWLIB/src/stm32f4xx_flash.c ****   *         be a value between FLASH_Sector_0 and FLASH_Sector_11.
 445:FWLIB/src/stm32f4xx_flash.c ****   *
 446:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F42xxx/43xxx devices this parameter can be a value between 
 447:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_23.
 448:FWLIB/src/stm32f4xx_flash.c ****   *
 449:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F401xx devices this parameter can be a value between 
 450:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_5.
 451:FWLIB/src/stm32f4xx_flash.c ****   *
 452:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F411xE devices this parameter can be a value between 
 453:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_7.
 454:FWLIB/src/stm32f4xx_flash.c ****   *
 455:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 456:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 457:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 458:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 459:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 460:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 461:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 462:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 463:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
ARM GAS  /tmp/cczwX7yU.s 			page 14


 464:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 465:FWLIB/src/stm32f4xx_flash.c ****   *       
 466:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 467:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 468:FWLIB/src/stm32f4xx_flash.c ****   */
 469:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 470:FWLIB/src/stm32f4xx_flash.c **** {
 471:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 472:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 473:FWLIB/src/stm32f4xx_flash.c **** 
 474:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 475:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_SECTOR(FLASH_Sector));
 476:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 477:FWLIB/src/stm32f4xx_flash.c ****   
 478:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 479:FWLIB/src/stm32f4xx_flash.c ****   {
 480:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 481:FWLIB/src/stm32f4xx_flash.c ****   }
 482:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 483:FWLIB/src/stm32f4xx_flash.c ****   {
 484:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 485:FWLIB/src/stm32f4xx_flash.c ****   }
 486:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 487:FWLIB/src/stm32f4xx_flash.c ****   {
 488:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 489:FWLIB/src/stm32f4xx_flash.c ****   }
 490:FWLIB/src/stm32f4xx_flash.c ****   else
 491:FWLIB/src/stm32f4xx_flash.c ****   {
 492:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 493:FWLIB/src/stm32f4xx_flash.c ****   }
 494:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 495:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 496:FWLIB/src/stm32f4xx_flash.c ****   
 497:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 498:FWLIB/src/stm32f4xx_flash.c ****   { 
 499:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase the sector */
 500:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 501:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 502:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 503:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 504:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 505:FWLIB/src/stm32f4xx_flash.c ****     
 506:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 507:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 508:FWLIB/src/stm32f4xx_flash.c ****     
 509:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the SER Bit */
 510:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_SER);
 511:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 512:FWLIB/src/stm32f4xx_flash.c ****   }
 513:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 514:FWLIB/src/stm32f4xx_flash.c ****   return status;
 515:FWLIB/src/stm32f4xx_flash.c **** }
 516:FWLIB/src/stm32f4xx_flash.c **** 
 517:FWLIB/src/stm32f4xx_flash.c **** /**
 518:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors.
 519:FWLIB/src/stm32f4xx_flash.c ****   *
 520:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
ARM GAS  /tmp/cczwX7yU.s 			page 15


 521:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 522:FWLIB/src/stm32f4xx_flash.c ****   *  
 523:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 524:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 525:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 526:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 527:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 528:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 529:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 530:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 531:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 532:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 533:FWLIB/src/stm32f4xx_flash.c ****   *       
 534:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 535:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 536:FWLIB/src/stm32f4xx_flash.c ****   */
 537:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
 538:FWLIB/src/stm32f4xx_flash.c **** {
 539:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 540:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 541:FWLIB/src/stm32f4xx_flash.c ****   
 542:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 543:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 544:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 545:FWLIB/src/stm32f4xx_flash.c ****   
 546:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 547:FWLIB/src/stm32f4xx_flash.c ****   {
 548:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 549:FWLIB/src/stm32f4xx_flash.c ****   }
 550:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 551:FWLIB/src/stm32f4xx_flash.c ****   {
 552:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 553:FWLIB/src/stm32f4xx_flash.c ****   }
 554:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 555:FWLIB/src/stm32f4xx_flash.c ****   {
 556:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 557:FWLIB/src/stm32f4xx_flash.c ****   }
 558:FWLIB/src/stm32f4xx_flash.c ****   else
 559:FWLIB/src/stm32f4xx_flash.c ****   {
 560:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 561:FWLIB/src/stm32f4xx_flash.c ****   }  
 562:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 563:FWLIB/src/stm32f4xx_flash.c ****   {
 564:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 565:FWLIB/src/stm32f4xx_flash.c **** #if defined (STM32F427_437xx) || defined (STM32F429_439xx)    
 566:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 567:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 568:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 569:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 570:FWLIB/src/stm32f4xx_flash.c ****     
 571:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 572:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 573:FWLIB/src/stm32f4xx_flash.c **** 
 574:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 575:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 576:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx */
 577:FWLIB/src/stm32f4xx_flash.c **** 
ARM GAS  /tmp/cczwX7yU.s 			page 16


 578:FWLIB/src/stm32f4xx_flash.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx) || defined (STM32F411xE) 
 579:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 580:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 581:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 582:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 583:FWLIB/src/stm32f4xx_flash.c ****     
 584:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 585:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 586:FWLIB/src/stm32f4xx_flash.c **** 
 587:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 588:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER);
 589:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F411xE */
 590:FWLIB/src/stm32f4xx_flash.c **** 
 591:FWLIB/src/stm32f4xx_flash.c ****   }   
 592:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 593:FWLIB/src/stm32f4xx_flash.c ****   return status;
 594:FWLIB/src/stm32f4xx_flash.c **** }
 595:FWLIB/src/stm32f4xx_flash.c **** 
 596:FWLIB/src/stm32f4xx_flash.c **** /**
 597:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 1.
 598:FWLIB/src/stm32f4xx_flash.c ****   *
 599:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 600:FWLIB/src/stm32f4xx_flash.c ****   *      
 601:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 602:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one. 
 603:FWLIB/src/stm32f4xx_flash.c ****   *  
 604:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 605:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 606:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 607:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 608:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 609:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 610:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 611:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 612:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 613:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 614:FWLIB/src/stm32f4xx_flash.c ****   *       
 615:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 616:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 617:FWLIB/src/stm32f4xx_flash.c ****   */
 618:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 619:FWLIB/src/stm32f4xx_flash.c **** {
 620:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 621:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 622:FWLIB/src/stm32f4xx_flash.c ****   
 623:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 624:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 625:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 626:FWLIB/src/stm32f4xx_flash.c ****   
 627:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 628:FWLIB/src/stm32f4xx_flash.c ****   {
 629:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 630:FWLIB/src/stm32f4xx_flash.c ****   }
 631:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 632:FWLIB/src/stm32f4xx_flash.c ****   {
 633:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 634:FWLIB/src/stm32f4xx_flash.c ****   }
ARM GAS  /tmp/cczwX7yU.s 			page 17


 635:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 636:FWLIB/src/stm32f4xx_flash.c ****   {
 637:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 638:FWLIB/src/stm32f4xx_flash.c ****   }
 639:FWLIB/src/stm32f4xx_flash.c ****   else
 640:FWLIB/src/stm32f4xx_flash.c ****   {
 641:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 642:FWLIB/src/stm32f4xx_flash.c ****   }  
 643:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 644:FWLIB/src/stm32f4xx_flash.c ****   {
 645:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 646:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 647:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 648:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 649:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 650:FWLIB/src/stm32f4xx_flash.c ****     
 651:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 652:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 653:FWLIB/src/stm32f4xx_flash.c **** 
 654:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 655:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER1);
 656:FWLIB/src/stm32f4xx_flash.c **** 
 657:FWLIB/src/stm32f4xx_flash.c ****   }   
 658:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 659:FWLIB/src/stm32f4xx_flash.c ****   return status;
 660:FWLIB/src/stm32f4xx_flash.c **** }
 661:FWLIB/src/stm32f4xx_flash.c **** 
 662:FWLIB/src/stm32f4xx_flash.c **** 
 663:FWLIB/src/stm32f4xx_flash.c **** /**
 664:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 2.
 665:FWLIB/src/stm32f4xx_flash.c ****   *
 666:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 667:FWLIB/src/stm32f4xx_flash.c ****   *     
 668:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 669:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 670:FWLIB/src/stm32f4xx_flash.c ****   *     
 671:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 672:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 673:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 674:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 675:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 676:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 677:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 678:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 679:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 680:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 681:FWLIB/src/stm32f4xx_flash.c ****   *       
 682:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 683:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 684:FWLIB/src/stm32f4xx_flash.c ****   */
 685:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
 686:FWLIB/src/stm32f4xx_flash.c **** {
 687:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 688:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 689:FWLIB/src/stm32f4xx_flash.c ****   
 690:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 691:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
ARM GAS  /tmp/cczwX7yU.s 			page 18


 692:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 693:FWLIB/src/stm32f4xx_flash.c ****   
 694:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 695:FWLIB/src/stm32f4xx_flash.c ****   {
 696:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 697:FWLIB/src/stm32f4xx_flash.c ****   }
 698:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 699:FWLIB/src/stm32f4xx_flash.c ****   {
 700:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 701:FWLIB/src/stm32f4xx_flash.c ****   }
 702:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 703:FWLIB/src/stm32f4xx_flash.c ****   {
 704:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 705:FWLIB/src/stm32f4xx_flash.c ****   }
 706:FWLIB/src/stm32f4xx_flash.c ****   else
 707:FWLIB/src/stm32f4xx_flash.c ****   {
 708:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 709:FWLIB/src/stm32f4xx_flash.c ****   }  
 710:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 711:FWLIB/src/stm32f4xx_flash.c ****   {
 712:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 713:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 714:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 715:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 716:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 717:FWLIB/src/stm32f4xx_flash.c ****     
 718:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 719:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 720:FWLIB/src/stm32f4xx_flash.c **** 
 721:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 722:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER2);
 723:FWLIB/src/stm32f4xx_flash.c **** 
 724:FWLIB/src/stm32f4xx_flash.c ****   }   
 725:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 726:FWLIB/src/stm32f4xx_flash.c ****   return status;
 727:FWLIB/src/stm32f4xx_flash.c **** }
 728:FWLIB/src/stm32f4xx_flash.c **** 
 729:FWLIB/src/stm32f4xx_flash.c **** /**
 730:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a double word (64-bit) at a specified address.
 731:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from
 732:FWLIB/src/stm32f4xx_flash.c ****   *         2.7V to 3.6V and an External Vpp is present.
 733:FWLIB/src/stm32f4xx_flash.c ****   *
 734:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
 735:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 736:FWLIB/src/stm32f4xx_flash.c ****   *  
 737:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 738:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 739:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 740:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 741:FWLIB/src/stm32f4xx_flash.c ****   */
 742:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 743:FWLIB/src/stm32f4xx_flash.c **** {
 744:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 745:FWLIB/src/stm32f4xx_flash.c **** 
 746:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 747:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 748:FWLIB/src/stm32f4xx_flash.c **** 
ARM GAS  /tmp/cczwX7yU.s 			page 19


 749:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 750:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 751:FWLIB/src/stm32f4xx_flash.c ****   
 752:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 753:FWLIB/src/stm32f4xx_flash.c ****   {
 754:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 755:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 756:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 757:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 758:FWLIB/src/stm32f4xx_flash.c ****   
 759:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint64_t*)Address = Data;
 760:FWLIB/src/stm32f4xx_flash.c ****         
 761:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 762:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 763:FWLIB/src/stm32f4xx_flash.c **** 
 764:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 765:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 766:FWLIB/src/stm32f4xx_flash.c ****   } 
 767:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 768:FWLIB/src/stm32f4xx_flash.c ****   return status;
 769:FWLIB/src/stm32f4xx_flash.c **** }
 770:FWLIB/src/stm32f4xx_flash.c **** 
 771:FWLIB/src/stm32f4xx_flash.c **** /**
 772:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a word (32-bit) at a specified address.
 773:FWLIB/src/stm32f4xx_flash.c ****   *
 774:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.7V to 3.6V. 
 775:FWLIB/src/stm32f4xx_flash.c ****   *
 776:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
 777:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 778:FWLIB/src/stm32f4xx_flash.c ****   *  
 779:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 780:FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 781:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 782:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 783:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 784:FWLIB/src/stm32f4xx_flash.c ****   */
 785:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 786:FWLIB/src/stm32f4xx_flash.c **** {
 787:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 788:FWLIB/src/stm32f4xx_flash.c **** 
 789:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 790:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 791:FWLIB/src/stm32f4xx_flash.c **** 
 792:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 793:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 794:FWLIB/src/stm32f4xx_flash.c ****   
 795:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 796:FWLIB/src/stm32f4xx_flash.c ****   {
 797:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 798:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 799:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 800:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 801:FWLIB/src/stm32f4xx_flash.c ****   
 802:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint32_t*)Address = Data;
 803:FWLIB/src/stm32f4xx_flash.c ****         
 804:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 805:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
ARM GAS  /tmp/cczwX7yU.s 			page 20


 806:FWLIB/src/stm32f4xx_flash.c **** 
 807:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 808:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 809:FWLIB/src/stm32f4xx_flash.c ****   } 
 810:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 811:FWLIB/src/stm32f4xx_flash.c ****   return status;
 812:FWLIB/src/stm32f4xx_flash.c **** }
 813:FWLIB/src/stm32f4xx_flash.c **** 
 814:FWLIB/src/stm32f4xx_flash.c **** /**
 815:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a half word (16-bit) at a specified address. 
 816:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.1V to 3.6V. 
 817:FWLIB/src/stm32f4xx_flash.c ****   *
 818:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
 819:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 820:FWLIB/src/stm32f4xx_flash.c ****   * 
 821:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 822:FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 823:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 824:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 825:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 826:FWLIB/src/stm32f4xx_flash.c ****   */
 827:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 828:FWLIB/src/stm32f4xx_flash.c **** {
 829:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 830:FWLIB/src/stm32f4xx_flash.c **** 
 831:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 832:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 833:FWLIB/src/stm32f4xx_flash.c **** 
 834:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 835:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 836:FWLIB/src/stm32f4xx_flash.c ****   
 837:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 838:FWLIB/src/stm32f4xx_flash.c ****   {
 839:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 840:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 841:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 842:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 843:FWLIB/src/stm32f4xx_flash.c ****   
 844:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint16_t*)Address = Data;
 845:FWLIB/src/stm32f4xx_flash.c ****         
 846:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 847:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 848:FWLIB/src/stm32f4xx_flash.c **** 
 849:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 850:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 851:FWLIB/src/stm32f4xx_flash.c ****   } 
 852:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 853:FWLIB/src/stm32f4xx_flash.c ****   return status;
 854:FWLIB/src/stm32f4xx_flash.c **** }
 855:FWLIB/src/stm32f4xx_flash.c **** 
 856:FWLIB/src/stm32f4xx_flash.c **** /**
 857:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a byte (8-bit) at a specified address.
 858:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used within all the device supply voltage ranges.  
 859:FWLIB/src/stm32f4xx_flash.c ****   *
 860:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
 861:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 862:FWLIB/src/stm32f4xx_flash.c ****   * 
ARM GAS  /tmp/cczwX7yU.s 			page 21


 863:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 864:FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 865:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 866:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 867:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 868:FWLIB/src/stm32f4xx_flash.c ****   */
 869:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 870:FWLIB/src/stm32f4xx_flash.c **** {
 871:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 872:FWLIB/src/stm32f4xx_flash.c **** 
 873:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 874:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 875:FWLIB/src/stm32f4xx_flash.c **** 
 876:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 877:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 878:FWLIB/src/stm32f4xx_flash.c ****   
 879:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 880:FWLIB/src/stm32f4xx_flash.c ****   {
 881:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 882:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 883:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 884:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 885:FWLIB/src/stm32f4xx_flash.c ****   
 886:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t*)Address = Data;
 887:FWLIB/src/stm32f4xx_flash.c ****         
 888:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 889:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 890:FWLIB/src/stm32f4xx_flash.c **** 
 891:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 892:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 893:FWLIB/src/stm32f4xx_flash.c ****   } 
 894:FWLIB/src/stm32f4xx_flash.c **** 
 895:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 896:FWLIB/src/stm32f4xx_flash.c ****   return status;
 897:FWLIB/src/stm32f4xx_flash.c **** }
 898:FWLIB/src/stm32f4xx_flash.c **** 
 899:FWLIB/src/stm32f4xx_flash.c **** /**
 900:FWLIB/src/stm32f4xx_flash.c ****   * @}
 901:FWLIB/src/stm32f4xx_flash.c ****   */
 902:FWLIB/src/stm32f4xx_flash.c **** 
 903:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group3 Option Bytes Programming functions
 904:FWLIB/src/stm32f4xx_flash.c ****  *  @brief   Option Bytes Programming functions 
 905:FWLIB/src/stm32f4xx_flash.c ****  *
 906:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 907:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 908:FWLIB/src/stm32f4xx_flash.c ****                 ##### Option Bytes Programming functions #####
 909:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================  
 910:FWLIB/src/stm32f4xx_flash.c ****     [..]
 911:FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
 912:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Unlock(void)
 913:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Lock(void)
 914:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
 915:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)  
 916:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PCROPSelect)
 917:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
 918:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState) 
 919:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_RDPConfig(uint8_t OB_RDP)
ARM GAS  /tmp/cczwX7yU.s 			page 22


 920:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
 921:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BORConfig(uint8_t OB_BOR)
 922:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramOTP(uint32_t Address, uint32_t Data)
 923:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_OB_Launch(void)
 924:FWLIB/src/stm32f4xx_flash.c ****       (+) uint32_t FLASH_OB_GetUser(void)
 925:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP(void)
 926:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP1(void)
 927:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP(void)
 928:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP1(void)
 929:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetRDP(void)
 930:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetBOR(void)
 931:FWLIB/src/stm32f4xx_flash.c ****     [..]  
 932:FWLIB/src/stm32f4xx_flash.c ****       The following function can be used only for STM32F42xxx/43xxx devices. 
 933:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BootConfig(uint8_t OB_BOOT)
 934:FWLIB/src/stm32f4xx_flash.c ****     [..]   
 935:FWLIB/src/stm32f4xx_flash.c ****      Any operation of erase or program should follow these steps:
 936:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Unlock() function to enable the FLASH option control 
 937:FWLIB/src/stm32f4xx_flash.c ****           register access
 938:FWLIB/src/stm32f4xx_flash.c **** 
 939:FWLIB/src/stm32f4xx_flash.c ****       (#) Call one or several functions to program the desired Option Bytes:
 940:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState) 
 941:FWLIB/src/stm32f4xx_flash.c ****              => to Enable/Disable the desired sector write protection
 942:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_RDPConfig(uint8_t OB_RDP) => to set the desired read 
 943:FWLIB/src/stm32f4xx_flash.c ****              Protection Level
 944:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY) 
 945:FWLIB/src/stm32f4xx_flash.c ****              => to configure the user Option Bytes.
 946:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_BORConfig(uint8_t OB_BOR) => to set the BOR Level 			 
 947:FWLIB/src/stm32f4xx_flash.c **** 
 948:FWLIB/src/stm32f4xx_flash.c ****       (#) Once all needed Option Bytes to be programmed are correctly written, 
 949:FWLIB/src/stm32f4xx_flash.c ****           call the FLASH_OB_Launch() function to launch the Option Bytes 
 950:FWLIB/src/stm32f4xx_flash.c ****           programming process.
 951:FWLIB/src/stm32f4xx_flash.c ****      
 952:FWLIB/src/stm32f4xx_flash.c ****       -@- When changing the IWDG mode from HW to SW or from SW to HW, a system 
 953:FWLIB/src/stm32f4xx_flash.c ****           reset is needed to make the change effective.  
 954:FWLIB/src/stm32f4xx_flash.c **** 
 955:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Lock() function to disable the FLASH option control 
 956:FWLIB/src/stm32f4xx_flash.c ****           register access (recommended to protect the Option Bytes against 
 957:FWLIB/src/stm32f4xx_flash.c ****           possible unwanted operations)
 958:FWLIB/src/stm32f4xx_flash.c ****     
 959:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
 960:FWLIB/src/stm32f4xx_flash.c ****   * @{
 961:FWLIB/src/stm32f4xx_flash.c ****   */
 962:FWLIB/src/stm32f4xx_flash.c **** 
 963:FWLIB/src/stm32f4xx_flash.c **** /**
 964:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH Option Control Registers access.
 965:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 966:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 967:FWLIB/src/stm32f4xx_flash.c ****   */
 968:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_Unlock(void)
 969:FWLIB/src/stm32f4xx_flash.c **** {
 293              		.loc 1 969 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 970:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 298              		.loc 1 970 0
ARM GAS  /tmp/cczwX7yU.s 			page 23


 299 0000 054B     		ldr	r3, .L38
 300 0002 5B69     		ldr	r3, [r3, #20]
 301 0004 13F0010F 		tst	r3, #1
 302 0008 05D0     		beq	.L36
 971:FWLIB/src/stm32f4xx_flash.c ****   {
 972:FWLIB/src/stm32f4xx_flash.c ****     /* Authorizes the Option Byte register programming */
 973:FWLIB/src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY1;
 303              		.loc 1 973 0
 304 000a 034B     		ldr	r3, .L38
 305 000c 034A     		ldr	r2, .L38+4
 306 000e 9A60     		str	r2, [r3, #8]
 974:FWLIB/src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 307              		.loc 1 974 0
 308 0010 02F14432 		add	r2, r2, #1145324612
 309 0014 9A60     		str	r2, [r3, #8]
 310              	.L36:
 311 0016 7047     		bx	lr
 312              	.L39:
 313              		.align	2
 314              	.L38:
 315 0018 003C0240 		.word	1073888256
 316 001c 3B2A1908 		.word	135866939
 317              		.cfi_endproc
 318              	.LFE128:
 320              		.section	.text.FLASH_OB_Lock,"ax",%progbits
 321              		.align	1
 322              		.global	FLASH_OB_Lock
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 326              		.fpu softvfp
 328              	FLASH_OB_Lock:
 329              	.LFB129:
 975:FWLIB/src/stm32f4xx_flash.c ****   }  
 976:FWLIB/src/stm32f4xx_flash.c **** }
 977:FWLIB/src/stm32f4xx_flash.c **** 
 978:FWLIB/src/stm32f4xx_flash.c **** /**
 979:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH Option Control Registers access.
 980:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 981:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 982:FWLIB/src/stm32f4xx_flash.c ****   */
 983:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_Lock(void)
 984:FWLIB/src/stm32f4xx_flash.c **** {
 330              		.loc 1 984 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              		@ link register save eliminated.
 985:FWLIB/src/stm32f4xx_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 986:FWLIB/src/stm32f4xx_flash.c ****   FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 335              		.loc 1 986 0
 336 0000 024A     		ldr	r2, .L41
 337 0002 5369     		ldr	r3, [r2, #20]
 338 0004 43F00103 		orr	r3, r3, #1
 339 0008 5361     		str	r3, [r2, #20]
 340 000a 7047     		bx	lr
 341              	.L42:
ARM GAS  /tmp/cczwX7yU.s 			page 24


 342              		.align	2
 343              	.L41:
 344 000c 003C0240 		.word	1073888256
 345              		.cfi_endproc
 346              	.LFE129:
 348              		.section	.text.FLASH_OB_PCROPSelectionConfig,"ax",%progbits
 349              		.align	1
 350              		.global	FLASH_OB_PCROPSelectionConfig
 351              		.syntax unified
 352              		.thumb
 353              		.thumb_func
 354              		.fpu softvfp
 356              	FLASH_OB_PCROPSelectionConfig:
 357              	.LFB132:
 987:FWLIB/src/stm32f4xx_flash.c **** }
 988:FWLIB/src/stm32f4xx_flash.c **** 
 989:FWLIB/src/stm32f4xx_flash.c **** /**
 990:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the first
 991:FWLIB/src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
 992:FWLIB/src/stm32f4xx_flash.c ****   *
 993:FWLIB/src/stm32f4xx_flash.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 994:FWLIB/src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
 995:FWLIB/src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
 996:FWLIB/src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
 997:FWLIB/src/stm32f4xx_flash.c ****   * 
 998:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
 999:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1000:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector0 and OB_WRP_Sector11                     
1001:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All
1002:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1003:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1004:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1005:FWLIB/src/stm32f4xx_flash.c ****   */
1006:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
1007:FWLIB/src/stm32f4xx_flash.c **** { 
1008:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1009:FWLIB/src/stm32f4xx_flash.c ****   
1010:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1011:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1012:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1013:FWLIB/src/stm32f4xx_flash.c ****     
1014:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1015:FWLIB/src/stm32f4xx_flash.c **** 
1016:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1017:FWLIB/src/stm32f4xx_flash.c ****   { 
1018:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1019:FWLIB/src/stm32f4xx_flash.c ****     {
1020:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
1021:FWLIB/src/stm32f4xx_flash.c ****     }
1022:FWLIB/src/stm32f4xx_flash.c ****     else
1023:FWLIB/src/stm32f4xx_flash.c ****     {
1024:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1025:FWLIB/src/stm32f4xx_flash.c ****     }
1026:FWLIB/src/stm32f4xx_flash.c ****   }
1027:FWLIB/src/stm32f4xx_flash.c **** }
1028:FWLIB/src/stm32f4xx_flash.c **** 
1029:FWLIB/src/stm32f4xx_flash.c **** /**
ARM GAS  /tmp/cczwX7yU.s 			page 25


1030:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the second
1031:FWLIB/src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
1032:FWLIB/src/stm32f4xx_flash.c ****   *           
1033:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1034:FWLIB/src/stm32f4xx_flash.c ****   *   
1035:FWLIB/src/stm32f4xx_flash.c ****   * @note   When the memory read out protection is selected (RDP level = 1), 
1036:FWLIB/src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1037:FWLIB/src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1038:FWLIB/src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).      
1039:FWLIB/src/stm32f4xx_flash.c ****   * 
1040:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
1041:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1042:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector12 and OB_WRP_Sector23
1043:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All                        
1044:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1045:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1047:FWLIB/src/stm32f4xx_flash.c ****   */
1048:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
1049:FWLIB/src/stm32f4xx_flash.c **** { 
1050:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1051:FWLIB/src/stm32f4xx_flash.c ****   
1052:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1053:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1054:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1055:FWLIB/src/stm32f4xx_flash.c ****     
1056:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1057:FWLIB/src/stm32f4xx_flash.c **** 
1058:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1059:FWLIB/src/stm32f4xx_flash.c ****   { 
1060:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1061:FWLIB/src/stm32f4xx_flash.c ****     {
1062:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
1063:FWLIB/src/stm32f4xx_flash.c ****     }
1064:FWLIB/src/stm32f4xx_flash.c ****     else
1065:FWLIB/src/stm32f4xx_flash.c ****     {
1066:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1067:FWLIB/src/stm32f4xx_flash.c ****     }
1068:FWLIB/src/stm32f4xx_flash.c ****   }
1069:FWLIB/src/stm32f4xx_flash.c **** }
1070:FWLIB/src/stm32f4xx_flash.c **** 
1071:FWLIB/src/stm32f4xx_flash.c **** /**
1072:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Select the Protection Mode (SPRMOD). 
1073:FWLIB/src/stm32f4xx_flash.c ****   * 
1074:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices.    
1075:FWLIB/src/stm32f4xx_flash.c ****   * 
1076:FWLIB/src/stm32f4xx_flash.c ****   * @note   After PCROP activation, Option Byte modification is not possible. 
1077:FWLIB/src/stm32f4xx_flash.c ****   *         Exception made for the global Read Out Protection modification level (level1 to level0)
1078:FWLIB/src/stm32f4xx_flash.c ****   * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
1079:FWLIB/src/stm32f4xx_flash.c ****   *   
1080:FWLIB/src/stm32f4xx_flash.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
1081:FWLIB/src/stm32f4xx_flash.c ****   *   
1082:FWLIB/src/stm32f4xx_flash.c ****   * @note   Some Precautions should be taken when activating the PCROP feature :
1083:FWLIB/src/stm32f4xx_flash.c ****   *         The active value of nWRPi bits is inverted when PCROP mode is active, this means if SPR
1084:FWLIB/src/stm32f4xx_flash.c ****   *         and WRPi = 1 (default value), then the user sector i is read/write protected.
1085:FWLIB/src/stm32f4xx_flash.c ****   *         In order to avoid activation of PCROP Mode for undesired sectors, please follow the
1086:FWLIB/src/stm32f4xx_flash.c ****   *         below safety sequence :       
ARM GAS  /tmp/cczwX7yU.s 			page 26


1087:FWLIB/src/stm32f4xx_flash.c ****   *         - Disable PCROP for all Sectors using FLASH_OB_PCROPConfig(OB_PCROP_Sector_All, DISABLE
1088:FWLIB/src/stm32f4xx_flash.c ****   *           for Bank1 or FLASH_OB_PCROP1Config(OB_PCROP_Sector_All, DISABLE) function for Bank2  
1089:FWLIB/src/stm32f4xx_flash.c ****   *         - Enable PCROP for the desired Sector i using FLASH_OB_PCROPConfig(Sector i, ENABLE) fu
1090:FWLIB/src/stm32f4xx_flash.c ****   *         - Activate the PCROP Mode FLASH_OB_PCROPSelectionConfig() function. 
1091:FWLIB/src/stm32f4xx_flash.c ****   * 
1092:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP:  Select the Protection Mode of nWPRi bits 
1093:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1094:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors
1095:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective
1096:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1097:FWLIB/src/stm32f4xx_flash.c ****   */
1098:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
1099:FWLIB/src/stm32f4xx_flash.c **** {  
 358              		.loc 1 1099 0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362              		@ link register save eliminated.
 363              	.LVL5:
1100:FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
1101:FWLIB/src/stm32f4xx_flash.c ****       
1102:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1103:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
1104:FWLIB/src/stm32f4xx_flash.c ****   
1105:FWLIB/src/stm32f4xx_flash.c ****   /* Mask SPRMOD bit */
1106:FWLIB/src/stm32f4xx_flash.c ****   optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 364              		.loc 1 1106 0
 365 0000 034A     		ldr	r2, .L44
 366 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 367 0004 03F07F03 		and	r3, r3, #127
 368              	.LVL6:
1107:FWLIB/src/stm32f4xx_flash.c ****   /* Update Option Byte */
1108:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 369              		.loc 1 1108 0
 370 0008 1843     		orrs	r0, r0, r3
 371              	.LVL7:
 372 000a 1070     		strb	r0, [r2]
 373 000c 7047     		bx	lr
 374              	.L45:
 375 000e 00BF     		.align	2
 376              	.L44:
 377 0010 173C0240 		.word	1073888279
 378              		.cfi_endproc
 379              	.LFE132:
 381              		.section	.text.FLASH_OB_BootConfig,"ax",%progbits
 382              		.align	1
 383              		.global	FLASH_OB_BootConfig
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu softvfp
 389              	FLASH_OB_BootConfig:
 390              	.LFB137:
1109:FWLIB/src/stm32f4xx_flash.c ****     
1110:FWLIB/src/stm32f4xx_flash.c **** }
1111:FWLIB/src/stm32f4xx_flash.c **** 
1112:FWLIB/src/stm32f4xx_flash.c **** /**
ARM GAS  /tmp/cczwX7yU.s 			page 27


1113:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the read/write protection (PCROP) of the desired 
1114:FWLIB/src/stm32f4xx_flash.c ****   *         sectors, for the first 1 MB of the Flash.
1115:FWLIB/src/stm32f4xx_flash.c ****   *           
1116:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
1117:FWLIB/src/stm32f4xx_flash.c ****   *   
1118:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1119:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1120:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector11 for 
1121:FWLIB/src/stm32f4xx_flash.c ****   *                           STM32F42xxx/43xxx devices and between OB_PCROP_Sector0 and 
1122:FWLIB/src/stm32f4xx_flash.c ****   *                           OB_PCROP_Sector5 for STM32F401xx/411xE devices.
1123:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1124:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1125:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1126:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1127:FWLIB/src/stm32f4xx_flash.c ****   */
1128:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
1129:FWLIB/src/stm32f4xx_flash.c **** { 
1130:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1131:FWLIB/src/stm32f4xx_flash.c ****   
1132:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1133:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1134:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1135:FWLIB/src/stm32f4xx_flash.c ****     
1136:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1137:FWLIB/src/stm32f4xx_flash.c **** 
1138:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1139:FWLIB/src/stm32f4xx_flash.c ****   { 
1140:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1141:FWLIB/src/stm32f4xx_flash.c ****     {
1142:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
1143:FWLIB/src/stm32f4xx_flash.c ****     }
1144:FWLIB/src/stm32f4xx_flash.c ****     else
1145:FWLIB/src/stm32f4xx_flash.c ****     {
1146:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
1147:FWLIB/src/stm32f4xx_flash.c ****     }
1148:FWLIB/src/stm32f4xx_flash.c ****   }
1149:FWLIB/src/stm32f4xx_flash.c **** }
1150:FWLIB/src/stm32f4xx_flash.c **** 
1151:FWLIB/src/stm32f4xx_flash.c **** /**
1152:FWLIB/src/stm32f4xx_flash.c ****    * @brief Enables or disables the read/write protection (PCROP) of the desired 
1153:FWLIB/src/stm32f4xx_flash.c ****   *         sectors
1154:FWLIB/src/stm32f4xx_flash.c ****   *           
1155:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1156:FWLIB/src/stm32f4xx_flash.c ****   *   
1157:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1158:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1159:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector12 and OB_PCROP_Sector23 
1160:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1161:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1162:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1163:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1164:FWLIB/src/stm32f4xx_flash.c ****   */
1165:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
1166:FWLIB/src/stm32f4xx_flash.c **** { 
1167:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1168:FWLIB/src/stm32f4xx_flash.c ****   
1169:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
ARM GAS  /tmp/cczwX7yU.s 			page 28


1170:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1171:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1172:FWLIB/src/stm32f4xx_flash.c ****     
1173:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1174:FWLIB/src/stm32f4xx_flash.c **** 
1175:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1176:FWLIB/src/stm32f4xx_flash.c ****   { 
1177:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1178:FWLIB/src/stm32f4xx_flash.c ****     {
1179:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
1180:FWLIB/src/stm32f4xx_flash.c ****     }
1181:FWLIB/src/stm32f4xx_flash.c ****     else
1182:FWLIB/src/stm32f4xx_flash.c ****     {
1183:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
1184:FWLIB/src/stm32f4xx_flash.c ****     }
1185:FWLIB/src/stm32f4xx_flash.c ****   }
1186:FWLIB/src/stm32f4xx_flash.c **** }
1187:FWLIB/src/stm32f4xx_flash.c **** 
1188:FWLIB/src/stm32f4xx_flash.c **** 
1189:FWLIB/src/stm32f4xx_flash.c **** /**
1190:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the read protection level.
1191:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_RDP: specifies the read protection level.
1192:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1193:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_0: No protection
1194:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_1: Read protection of the memory
1195:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_2: Full chip protection
1196:FWLIB/src/stm32f4xx_flash.c ****   *   
1197:FWLIB/src/stm32f4xx_flash.c ****   * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
1198:FWLIB/src/stm32f4xx_flash.c ****   *    
1199:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1200:FWLIB/src/stm32f4xx_flash.c ****   */
1201:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_RDPConfig(uint8_t OB_RDP)
1202:FWLIB/src/stm32f4xx_flash.c **** {
1203:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1204:FWLIB/src/stm32f4xx_flash.c **** 
1205:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1206:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_RDP(OB_RDP));
1207:FWLIB/src/stm32f4xx_flash.c **** 
1208:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1209:FWLIB/src/stm32f4xx_flash.c **** 
1210:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1211:FWLIB/src/stm32f4xx_flash.c ****   {
1212:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
1213:FWLIB/src/stm32f4xx_flash.c **** 
1214:FWLIB/src/stm32f4xx_flash.c ****   }
1215:FWLIB/src/stm32f4xx_flash.c **** }
1216:FWLIB/src/stm32f4xx_flash.c **** 
1217:FWLIB/src/stm32f4xx_flash.c **** /**
1218:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
1219:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_IWDG: Selects the IWDG mode
1220:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1221:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
1222:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
1223:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
1224:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1225:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STOP_NoRST: No reset generated when entering in STOP
1226:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
ARM GAS  /tmp/cczwX7yU.s 			page 29


1227:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
1228:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1229:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
1230:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
1231:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1232:FWLIB/src/stm32f4xx_flash.c ****   */
1233:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
1234:FWLIB/src/stm32f4xx_flash.c **** {
1235:FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
1236:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
1237:FWLIB/src/stm32f4xx_flash.c **** 
1238:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1239:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
1240:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
1241:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
1242:FWLIB/src/stm32f4xx_flash.c **** 
1243:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1244:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1245:FWLIB/src/stm32f4xx_flash.c ****   
1246:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1247:FWLIB/src/stm32f4xx_flash.c ****   { 
1248:FWLIB/src/stm32f4xx_flash.c **** #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
1249:FWLIB/src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
1250:FWLIB/src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
1251:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx */
1252:FWLIB/src/stm32f4xx_flash.c **** 
1253:FWLIB/src/stm32f4xx_flash.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx) || defined (STM32F411xE)
1254:FWLIB/src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
1255:FWLIB/src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
1256:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F411xE */ 
1257:FWLIB/src/stm32f4xx_flash.c **** 
1258:FWLIB/src/stm32f4xx_flash.c ****     /* Update User Option Byte */
1259:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uin
1260:FWLIB/src/stm32f4xx_flash.c ****   }  
1261:FWLIB/src/stm32f4xx_flash.c **** }
1262:FWLIB/src/stm32f4xx_flash.c **** 
1263:FWLIB/src/stm32f4xx_flash.c **** /**
1264:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Configure the Dual Bank Boot.
1265:FWLIB/src/stm32f4xx_flash.c ****   *   
1266:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1267:FWLIB/src/stm32f4xx_flash.c ****   *      
1268:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_BOOT: specifies the Dual Bank Boot Option byte.
1269:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1270:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
1271:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
1272:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1273:FWLIB/src/stm32f4xx_flash.c ****   */
1274:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_BootConfig(uint8_t OB_BOOT)
1275:FWLIB/src/stm32f4xx_flash.c **** {
 391              		.loc 1 1275 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396              	.LVL8:
1276:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1277:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOOT(OB_BOOT));
ARM GAS  /tmp/cczwX7yU.s 			page 30


1278:FWLIB/src/stm32f4xx_flash.c **** 
1279:FWLIB/src/stm32f4xx_flash.c ****   /* Set Dual Bank Boot */
1280:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 397              		.loc 1 1280 0
 398 0000 044B     		ldr	r3, .L47
 399 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 400 0004 02F0EF02 		and	r2, r2, #239
 401 0008 1A70     		strb	r2, [r3]
1281:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 402              		.loc 1 1281 0
 403 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 404 000c 1043     		orrs	r0, r0, r2
 405              	.LVL9:
 406 000e 1870     		strb	r0, [r3]
 407 0010 7047     		bx	lr
 408              	.L48:
 409 0012 00BF     		.align	2
 410              	.L47:
 411 0014 143C0240 		.word	1073888276
 412              		.cfi_endproc
 413              	.LFE137:
 415              		.section	.text.FLASH_OB_BORConfig,"ax",%progbits
 416              		.align	1
 417              		.global	FLASH_OB_BORConfig
 418              		.syntax unified
 419              		.thumb
 420              		.thumb_func
 421              		.fpu softvfp
 423              	FLASH_OB_BORConfig:
 424              	.LFB138:
1282:FWLIB/src/stm32f4xx_flash.c **** 
1283:FWLIB/src/stm32f4xx_flash.c **** }
1284:FWLIB/src/stm32f4xx_flash.c **** 
1285:FWLIB/src/stm32f4xx_flash.c **** /**
1286:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the BOR Level. 
1287:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_BOR: specifies the Option Bytes BOR Reset Level.
1288:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1289:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1290:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1291:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1292:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
1293:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1294:FWLIB/src/stm32f4xx_flash.c ****   */
1295:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_BORConfig(uint8_t OB_BOR)
1296:FWLIB/src/stm32f4xx_flash.c **** {
 425              		.loc 1 1296 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              		@ link register save eliminated.
 430              	.LVL10:
1297:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1298:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOR(OB_BOR));
1299:FWLIB/src/stm32f4xx_flash.c **** 
1300:FWLIB/src/stm32f4xx_flash.c ****   /* Set the BOR Level */
1301:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 431              		.loc 1 1301 0
ARM GAS  /tmp/cczwX7yU.s 			page 31


 432 0000 044B     		ldr	r3, .L50
 433 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 434 0004 02F0F302 		and	r2, r2, #243
 435 0008 1A70     		strb	r2, [r3]
1302:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 436              		.loc 1 1302 0
 437 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 438 000c 1043     		orrs	r0, r0, r2
 439              	.LVL11:
 440 000e 1870     		strb	r0, [r3]
 441 0010 7047     		bx	lr
 442              	.L51:
 443 0012 00BF     		.align	2
 444              	.L50:
 445 0014 143C0240 		.word	1073888276
 446              		.cfi_endproc
 447              	.LFE138:
 449              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 450              		.align	1
 451              		.global	FLASH_OB_GetUser
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 455              		.fpu softvfp
 457              	FLASH_OB_GetUser:
 458              	.LFB140:
1303:FWLIB/src/stm32f4xx_flash.c **** 
1304:FWLIB/src/stm32f4xx_flash.c **** }
1305:FWLIB/src/stm32f4xx_flash.c **** 
1306:FWLIB/src/stm32f4xx_flash.c **** /**
1307:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Launch the option byte loading.
1308:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1309:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1310:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1311:FWLIB/src/stm32f4xx_flash.c ****   */
1312:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_OB_Launch(void)
1313:FWLIB/src/stm32f4xx_flash.c **** {
1314:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1315:FWLIB/src/stm32f4xx_flash.c **** 
1316:FWLIB/src/stm32f4xx_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
1317:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
1318:FWLIB/src/stm32f4xx_flash.c **** 
1319:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1320:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1321:FWLIB/src/stm32f4xx_flash.c **** 
1322:FWLIB/src/stm32f4xx_flash.c ****   return status;
1323:FWLIB/src/stm32f4xx_flash.c **** }
1324:FWLIB/src/stm32f4xx_flash.c **** 
1325:FWLIB/src/stm32f4xx_flash.c **** /**
1326:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
1327:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1328:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
1329:FWLIB/src/stm32f4xx_flash.c ****   *         and RST_STDBY(Bit2).
1330:FWLIB/src/stm32f4xx_flash.c ****   */
1331:FWLIB/src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetUser(void)
1332:FWLIB/src/stm32f4xx_flash.c **** {
 459              		.loc 1 1332 0
ARM GAS  /tmp/cczwX7yU.s 			page 32


 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463              		@ link register save eliminated.
1333:FWLIB/src/stm32f4xx_flash.c ****   /* Return the User Option Byte */
1334:FWLIB/src/stm32f4xx_flash.c ****   return (uint8_t)(FLASH->OPTCR >> 5);
 464              		.loc 1 1334 0
 465 0000 024B     		ldr	r3, .L53
 466 0002 5869     		ldr	r0, [r3, #20]
1335:FWLIB/src/stm32f4xx_flash.c **** }
 467              		.loc 1 1335 0
 468 0004 C0F34710 		ubfx	r0, r0, #5, #8
 469 0008 7047     		bx	lr
 470              	.L54:
 471 000a 00BF     		.align	2
 472              	.L53:
 473 000c 003C0240 		.word	1073888256
 474              		.cfi_endproc
 475              	.LFE140:
 477              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 478              		.align	1
 479              		.global	FLASH_OB_GetWRP
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu softvfp
 485              	FLASH_OB_GetWRP:
 486              	.LFB141:
1336:FWLIB/src/stm32f4xx_flash.c **** 
1337:FWLIB/src/stm32f4xx_flash.c **** /**
1338:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1339:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1340:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1341:FWLIB/src/stm32f4xx_flash.c ****   */
1342:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP(void)
1343:FWLIB/src/stm32f4xx_flash.c **** {
 487              		.loc 1 1343 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              		@ link register save eliminated.
1344:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1345:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 492              		.loc 1 1345 0
 493 0000 014B     		ldr	r3, .L56
 494 0002 1888     		ldrh	r0, [r3]
1346:FWLIB/src/stm32f4xx_flash.c **** }
 495              		.loc 1 1346 0
 496 0004 80B2     		uxth	r0, r0
 497 0006 7047     		bx	lr
 498              	.L57:
 499              		.align	2
 500              	.L56:
 501 0008 163C0240 		.word	1073888278
 502              		.cfi_endproc
 503              	.LFE141:
 505              		.section	.text.FLASH_OB_GetWRP1,"ax",%progbits
ARM GAS  /tmp/cczwX7yU.s 			page 33


 506              		.align	1
 507              		.global	FLASH_OB_GetWRP1
 508              		.syntax unified
 509              		.thumb
 510              		.thumb_func
 511              		.fpu softvfp
 513              	FLASH_OB_GetWRP1:
 514              	.LFB142:
1347:FWLIB/src/stm32f4xx_flash.c **** 
1348:FWLIB/src/stm32f4xx_flash.c **** /**
1349:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1350:FWLIB/src/stm32f4xx_flash.c ****   *   
1351:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1352:FWLIB/src/stm32f4xx_flash.c ****   *   
1353:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1354:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1355:FWLIB/src/stm32f4xx_flash.c ****   */
1356:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP1(void)
1357:FWLIB/src/stm32f4xx_flash.c **** {
 515              		.loc 1 1357 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519              		@ link register save eliminated.
1358:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1359:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 520              		.loc 1 1359 0
 521 0000 014B     		ldr	r3, .L59
 522 0002 1888     		ldrh	r0, [r3]
1360:FWLIB/src/stm32f4xx_flash.c **** }
 523              		.loc 1 1360 0
 524 0004 80B2     		uxth	r0, r0
 525 0006 7047     		bx	lr
 526              	.L60:
 527              		.align	2
 528              	.L59:
 529 0008 1A3C0240 		.word	1073888282
 530              		.cfi_endproc
 531              	.LFE142:
 533              		.section	.text.FLASH_OB_GetPCROP,"ax",%progbits
 534              		.align	1
 535              		.global	FLASH_OB_GetPCROP
 536              		.syntax unified
 537              		.thumb
 538              		.thumb_func
 539              		.fpu softvfp
 541              	FLASH_OB_GetPCROP:
 542              	.LFB143:
1361:FWLIB/src/stm32f4xx_flash.c **** 
1362:FWLIB/src/stm32f4xx_flash.c **** /**
1363:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1364:FWLIB/src/stm32f4xx_flash.c ****   *   
1365:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices and STM32F401xx/411xE devi
1366:FWLIB/src/stm32f4xx_flash.c ****   *   
1367:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1368:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1369:FWLIB/src/stm32f4xx_flash.c ****   */
ARM GAS  /tmp/cczwX7yU.s 			page 34


1370:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP(void)
1371:FWLIB/src/stm32f4xx_flash.c **** {
 543              		.loc 1 1371 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
1372:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH PC Read/write protection Register value */
1373:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 548              		.loc 1 1373 0
 549 0000 014B     		ldr	r3, .L62
 550 0002 1888     		ldrh	r0, [r3]
1374:FWLIB/src/stm32f4xx_flash.c **** }
 551              		.loc 1 1374 0
 552 0004 80B2     		uxth	r0, r0
 553 0006 7047     		bx	lr
 554              	.L63:
 555              		.align	2
 556              	.L62:
 557 0008 163C0240 		.word	1073888278
 558              		.cfi_endproc
 559              	.LFE143:
 561              		.section	.text.FLASH_OB_GetPCROP1,"ax",%progbits
 562              		.align	1
 563              		.global	FLASH_OB_GetPCROP1
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 567              		.fpu softvfp
 569              	FLASH_OB_GetPCROP1:
 570              	.LFB144:
1375:FWLIB/src/stm32f4xx_flash.c **** 
1376:FWLIB/src/stm32f4xx_flash.c **** /**
1377:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1378:FWLIB/src/stm32f4xx_flash.c ****   *   
1379:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices. 
1380:FWLIB/src/stm32f4xx_flash.c ****   *     
1381:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1382:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1383:FWLIB/src/stm32f4xx_flash.c ****   */
1384:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP1(void)
1385:FWLIB/src/stm32f4xx_flash.c **** {
 571              		.loc 1 1385 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              		@ link register save eliminated.
1386:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1387:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 576              		.loc 1 1387 0
 577 0000 014B     		ldr	r3, .L65
 578 0002 1888     		ldrh	r0, [r3]
1388:FWLIB/src/stm32f4xx_flash.c **** }
 579              		.loc 1 1388 0
 580 0004 80B2     		uxth	r0, r0
 581 0006 7047     		bx	lr
 582              	.L66:
ARM GAS  /tmp/cczwX7yU.s 			page 35


 583              		.align	2
 584              	.L65:
 585 0008 1A3C0240 		.word	1073888282
 586              		.cfi_endproc
 587              	.LFE144:
 589              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 590              		.align	1
 591              		.global	FLASH_OB_GetRDP
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 595              		.fpu softvfp
 597              	FLASH_OB_GetRDP:
 598              	.LFB145:
1389:FWLIB/src/stm32f4xx_flash.c **** 
1390:FWLIB/src/stm32f4xx_flash.c **** /**
1391:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Read Protection level.
1392:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1393:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH ReadOut Protection Status:
1394:FWLIB/src/stm32f4xx_flash.c ****   *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
1395:FWLIB/src/stm32f4xx_flash.c ****   *           - RESET, when OB_RDP_Level_0 is set
1396:FWLIB/src/stm32f4xx_flash.c ****   */
1397:FWLIB/src/stm32f4xx_flash.c **** FlagStatus FLASH_OB_GetRDP(void)
1398:FWLIB/src/stm32f4xx_flash.c **** {
 599              		.loc 1 1398 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              		@ link register save eliminated.
 604              	.LVL12:
1399:FWLIB/src/stm32f4xx_flash.c ****   FlagStatus readstatus = RESET;
1400:FWLIB/src/stm32f4xx_flash.c **** 
1401:FWLIB/src/stm32f4xx_flash.c ****   if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 605              		.loc 1 1401 0
 606 0000 044B     		ldr	r3, .L70
 607 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 608 0004 DBB2     		uxtb	r3, r3
 609 0006 AA2B     		cmp	r3, #170
 610 0008 01D0     		beq	.L69
1402:FWLIB/src/stm32f4xx_flash.c ****   {
1403:FWLIB/src/stm32f4xx_flash.c ****     readstatus = SET;
 611              		.loc 1 1403 0
 612 000a 0120     		movs	r0, #1
 613 000c 7047     		bx	lr
 614              	.L69:
1404:FWLIB/src/stm32f4xx_flash.c ****   }
1405:FWLIB/src/stm32f4xx_flash.c ****   else
1406:FWLIB/src/stm32f4xx_flash.c ****   {
1407:FWLIB/src/stm32f4xx_flash.c ****     readstatus = RESET;
 615              		.loc 1 1407 0
 616 000e 0020     		movs	r0, #0
 617              	.LVL13:
1408:FWLIB/src/stm32f4xx_flash.c ****   }
1409:FWLIB/src/stm32f4xx_flash.c ****   return readstatus;
1410:FWLIB/src/stm32f4xx_flash.c **** }
 618              		.loc 1 1410 0
 619 0010 7047     		bx	lr
ARM GAS  /tmp/cczwX7yU.s 			page 36


 620              	.L71:
 621 0012 00BF     		.align	2
 622              	.L70:
 623 0014 153C0240 		.word	1073888277
 624              		.cfi_endproc
 625              	.LFE145:
 627              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
 628              		.align	1
 629              		.global	FLASH_OB_GetBOR
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 633              		.fpu softvfp
 635              	FLASH_OB_GetBOR:
 636              	.LFB146:
1411:FWLIB/src/stm32f4xx_flash.c **** 
1412:FWLIB/src/stm32f4xx_flash.c **** /**
1413:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH BOR level.
1414:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1415:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH BOR level:
1416:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1417:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1418:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1419:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
1420:FWLIB/src/stm32f4xx_flash.c ****   */
1421:FWLIB/src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetBOR(void)
1422:FWLIB/src/stm32f4xx_flash.c **** {
 637              		.loc 1 1422 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
1423:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH BOR level */
1424:FWLIB/src/stm32f4xx_flash.c ****   return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 642              		.loc 1 1424 0
 643 0000 024B     		ldr	r3, .L73
 644 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
1425:FWLIB/src/stm32f4xx_flash.c **** }
 645              		.loc 1 1425 0
 646 0004 00F00C00 		and	r0, r0, #12
 647 0008 7047     		bx	lr
 648              	.L74:
 649 000a 00BF     		.align	2
 650              	.L73:
 651 000c 143C0240 		.word	1073888276
 652              		.cfi_endproc
 653              	.LFE146:
 655              		.section	.text.FLASH_ITConfig,"ax",%progbits
 656              		.align	1
 657              		.global	FLASH_ITConfig
 658              		.syntax unified
 659              		.thumb
 660              		.thumb_func
 661              		.fpu softvfp
 663              	FLASH_ITConfig:
 664              	.LFB147:
1426:FWLIB/src/stm32f4xx_flash.c **** 
ARM GAS  /tmp/cczwX7yU.s 			page 37


1427:FWLIB/src/stm32f4xx_flash.c **** /**
1428:FWLIB/src/stm32f4xx_flash.c ****   * @}
1429:FWLIB/src/stm32f4xx_flash.c ****   */
1430:FWLIB/src/stm32f4xx_flash.c **** 
1431:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group4 Interrupts and flags management functions
1432:FWLIB/src/stm32f4xx_flash.c ****  *  @brief   Interrupts and flags management functions
1433:FWLIB/src/stm32f4xx_flash.c ****  *
1434:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
1435:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
1436:FWLIB/src/stm32f4xx_flash.c ****               ##### Interrupts and flags management functions #####
1437:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================  
1438:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
1439:FWLIB/src/stm32f4xx_flash.c ****   * @{
1440:FWLIB/src/stm32f4xx_flash.c ****   */
1441:FWLIB/src/stm32f4xx_flash.c **** 
1442:FWLIB/src/stm32f4xx_flash.c **** /**
1443:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
1444:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or disabled.
1445:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1446:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_ERR: FLASH Error Interrupt
1447:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
1448:FWLIB/src/stm32f4xx_flash.c ****   * @retval None 
1449:FWLIB/src/stm32f4xx_flash.c ****   */
1450:FWLIB/src/stm32f4xx_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1451:FWLIB/src/stm32f4xx_flash.c **** {
 665              		.loc 1 1451 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670              	.LVL14:
1452:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1453:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1454:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1455:FWLIB/src/stm32f4xx_flash.c **** 
1456:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 671              		.loc 1 1456 0
 672 0000 29B9     		cbnz	r1, .L78
1457:FWLIB/src/stm32f4xx_flash.c ****   {
1458:FWLIB/src/stm32f4xx_flash.c ****     /* Enable the interrupt sources */
1459:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_IT;
1460:FWLIB/src/stm32f4xx_flash.c ****   }
1461:FWLIB/src/stm32f4xx_flash.c ****   else
1462:FWLIB/src/stm32f4xx_flash.c ****   {
1463:FWLIB/src/stm32f4xx_flash.c ****     /* Disable the interrupt sources */
1464:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
 673              		.loc 1 1464 0
 674 0002 054A     		ldr	r2, .L79
 675 0004 1369     		ldr	r3, [r2, #16]
 676 0006 23EA0000 		bic	r0, r3, r0
 677              	.LVL15:
 678 000a 1061     		str	r0, [r2, #16]
 679 000c 7047     		bx	lr
 680              	.LVL16:
 681              	.L78:
1459:FWLIB/src/stm32f4xx_flash.c ****   }
 682              		.loc 1 1459 0
ARM GAS  /tmp/cczwX7yU.s 			page 38


 683 000e 024A     		ldr	r2, .L79
 684 0010 1369     		ldr	r3, [r2, #16]
 685 0012 1843     		orrs	r0, r0, r3
 686              	.LVL17:
 687 0014 1061     		str	r0, [r2, #16]
 688 0016 7047     		bx	lr
 689              	.L80:
 690              		.align	2
 691              	.L79:
 692 0018 003C0240 		.word	1073888256
 693              		.cfi_endproc
 694              	.LFE147:
 696              		.section	.text.FLASH_GetFlagStatus,"ax",%progbits
 697              		.align	1
 698              		.global	FLASH_GetFlagStatus
 699              		.syntax unified
 700              		.thumb
 701              		.thumb_func
 702              		.fpu softvfp
 704              	FLASH_GetFlagStatus:
 705              	.LFB148:
1465:FWLIB/src/stm32f4xx_flash.c ****   }
1466:FWLIB/src/stm32f4xx_flash.c **** }
1467:FWLIB/src/stm32f4xx_flash.c **** 
1468:FWLIB/src/stm32f4xx_flash.c **** /**
1469:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1470:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1471:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1472:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1473:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1474:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1475:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag
1476:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1477:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1478:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42xx/43xxx an
1479:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_BSY: FLASH Busy flag
1480:FWLIB/src/stm32f4xx_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1481:FWLIB/src/stm32f4xx_flash.c ****   */
1482:FWLIB/src/stm32f4xx_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1483:FWLIB/src/stm32f4xx_flash.c **** {
 706              		.loc 1 1483 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 0, uses_anonymous_args = 0
 710              		@ link register save eliminated.
 711              	.LVL18:
1484:FWLIB/src/stm32f4xx_flash.c ****   FlagStatus bitstatus = RESET;
1485:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1486:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
1487:FWLIB/src/stm32f4xx_flash.c **** 
1488:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 712              		.loc 1 1488 0
 713 0000 034B     		ldr	r3, .L85
 714 0002 DB68     		ldr	r3, [r3, #12]
 715 0004 0342     		tst	r3, r0
 716 0006 01D1     		bne	.L84
1489:FWLIB/src/stm32f4xx_flash.c ****   {
ARM GAS  /tmp/cczwX7yU.s 			page 39


1490:FWLIB/src/stm32f4xx_flash.c ****     bitstatus = SET;
1491:FWLIB/src/stm32f4xx_flash.c ****   }
1492:FWLIB/src/stm32f4xx_flash.c ****   else
1493:FWLIB/src/stm32f4xx_flash.c ****   {
1494:FWLIB/src/stm32f4xx_flash.c ****     bitstatus = RESET;
 717              		.loc 1 1494 0
 718 0008 0020     		movs	r0, #0
 719              	.LVL19:
1495:FWLIB/src/stm32f4xx_flash.c ****   }
1496:FWLIB/src/stm32f4xx_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1497:FWLIB/src/stm32f4xx_flash.c ****   return bitstatus; 
1498:FWLIB/src/stm32f4xx_flash.c **** }
 720              		.loc 1 1498 0
 721 000a 7047     		bx	lr
 722              	.LVL20:
 723              	.L84:
1490:FWLIB/src/stm32f4xx_flash.c ****   }
 724              		.loc 1 1490 0
 725 000c 0120     		movs	r0, #1
 726              	.LVL21:
 727 000e 7047     		bx	lr
 728              	.L86:
 729              		.align	2
 730              	.L85:
 731 0010 003C0240 		.word	1073888256
 732              		.cfi_endproc
 733              	.LFE148:
 735              		.section	.text.FLASH_ClearFlag,"ax",%progbits
 736              		.align	1
 737              		.global	FLASH_ClearFlag
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu softvfp
 743              	FLASH_ClearFlag:
 744              	.LFB149:
1499:FWLIB/src/stm32f4xx_flash.c **** 
1500:FWLIB/src/stm32f4xx_flash.c **** /**
1501:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Clears the FLASH's pending flags.
1502:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1503:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1504:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1505:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1506:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1507:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag 
1508:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1509:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1510:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F
1511:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1512:FWLIB/src/stm32f4xx_flash.c ****   */
1513:FWLIB/src/stm32f4xx_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1514:FWLIB/src/stm32f4xx_flash.c **** {
 745              		.loc 1 1514 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              		@ link register save eliminated.
ARM GAS  /tmp/cczwX7yU.s 			page 40


 750              	.LVL22:
1515:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1516:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
1517:FWLIB/src/stm32f4xx_flash.c ****   
1518:FWLIB/src/stm32f4xx_flash.c ****   /* Clear the flags */
1519:FWLIB/src/stm32f4xx_flash.c ****   FLASH->SR = FLASH_FLAG;
 751              		.loc 1 1519 0
 752 0000 014B     		ldr	r3, .L88
 753 0002 D860     		str	r0, [r3, #12]
 754 0004 7047     		bx	lr
 755              	.L89:
 756 0006 00BF     		.align	2
 757              	.L88:
 758 0008 003C0240 		.word	1073888256
 759              		.cfi_endproc
 760              	.LFE149:
 762              		.section	.text.FLASH_GetStatus,"ax",%progbits
 763              		.align	1
 764              		.global	FLASH_GetStatus
 765              		.syntax unified
 766              		.thumb
 767              		.thumb_func
 768              		.fpu softvfp
 770              	FLASH_GetStatus:
 771              	.LFB150:
1520:FWLIB/src/stm32f4xx_flash.c **** }
1521:FWLIB/src/stm32f4xx_flash.c **** 
1522:FWLIB/src/stm32f4xx_flash.c **** /**
1523:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Status.
1524:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1525:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1526:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1527:FWLIB/src/stm32f4xx_flash.c ****   */
1528:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_GetStatus(void)
1529:FWLIB/src/stm32f4xx_flash.c **** {
 772              		.loc 1 1529 0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              		@ link register save eliminated.
 777              	.LVL23:
1530:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE;
1531:FWLIB/src/stm32f4xx_flash.c ****   
1532:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 778              		.loc 1 1532 0
 779 0000 124B     		ldr	r3, .L100
 780 0002 DB68     		ldr	r3, [r3, #12]
 781 0004 13F4803F 		tst	r3, #65536
 782 0008 1BD1     		bne	.L92
1533:FWLIB/src/stm32f4xx_flash.c ****   {
1534:FWLIB/src/stm32f4xx_flash.c ****     flashstatus = FLASH_BUSY;
1535:FWLIB/src/stm32f4xx_flash.c ****   }
1536:FWLIB/src/stm32f4xx_flash.c ****   else 
1537:FWLIB/src/stm32f4xx_flash.c ****   {  
1538:FWLIB/src/stm32f4xx_flash.c ****     if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 783              		.loc 1 1538 0
 784 000a 104B     		ldr	r3, .L100
ARM GAS  /tmp/cczwX7yU.s 			page 41


 785 000c DB68     		ldr	r3, [r3, #12]
 786 000e 13F0100F 		tst	r3, #16
 787 0012 01D0     		beq	.L97
1539:FWLIB/src/stm32f4xx_flash.c ****     { 
1540:FWLIB/src/stm32f4xx_flash.c ****       flashstatus = FLASH_ERROR_WRP;
 788              		.loc 1 1540 0
 789 0014 0620     		movs	r0, #6
 790 0016 7047     		bx	lr
 791              	.L97:
1541:FWLIB/src/stm32f4xx_flash.c ****     }
1542:FWLIB/src/stm32f4xx_flash.c ****     else
1543:FWLIB/src/stm32f4xx_flash.c ****     {
1544:FWLIB/src/stm32f4xx_flash.c ****       if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 792              		.loc 1 1544 0
 793 0018 0C4B     		ldr	r3, .L100
 794 001a DB68     		ldr	r3, [r3, #12]
 795 001c 13F4807F 		tst	r3, #256
 796 0020 01D0     		beq	.L98
1545:FWLIB/src/stm32f4xx_flash.c ****       { 
1546:FWLIB/src/stm32f4xx_flash.c ****         flashstatus = FLASH_ERROR_RD;
 797              		.loc 1 1546 0
 798 0022 0220     		movs	r0, #2
 799 0024 7047     		bx	lr
 800              	.L98:
1547:FWLIB/src/stm32f4xx_flash.c ****       } 
1548:FWLIB/src/stm32f4xx_flash.c ****       else 
1549:FWLIB/src/stm32f4xx_flash.c ****       {
1550:FWLIB/src/stm32f4xx_flash.c ****         if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 801              		.loc 1 1550 0
 802 0026 094B     		ldr	r3, .L100
 803 0028 DB68     		ldr	r3, [r3, #12]
 804 002a 13F0EF0F 		tst	r3, #239
 805 002e 01D0     		beq	.L99
1551:FWLIB/src/stm32f4xx_flash.c ****         {
1552:FWLIB/src/stm32f4xx_flash.c ****           flashstatus = FLASH_ERROR_PROGRAM; 
 806              		.loc 1 1552 0
 807 0030 0720     		movs	r0, #7
 808 0032 7047     		bx	lr
 809              	.L99:
1553:FWLIB/src/stm32f4xx_flash.c ****         }
1554:FWLIB/src/stm32f4xx_flash.c ****         else
1555:FWLIB/src/stm32f4xx_flash.c ****         {
1556:FWLIB/src/stm32f4xx_flash.c ****           if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 810              		.loc 1 1556 0
 811 0034 054B     		ldr	r3, .L100
 812 0036 DB68     		ldr	r3, [r3, #12]
 813 0038 13F0020F 		tst	r3, #2
 814 003c 03D0     		beq	.L96
1557:FWLIB/src/stm32f4xx_flash.c ****           {
1558:FWLIB/src/stm32f4xx_flash.c ****             flashstatus = FLASH_ERROR_OPERATION;
 815              		.loc 1 1558 0
 816 003e 0820     		movs	r0, #8
 817 0040 7047     		bx	lr
 818              	.L92:
1534:FWLIB/src/stm32f4xx_flash.c ****   }
 819              		.loc 1 1534 0
 820 0042 0120     		movs	r0, #1
ARM GAS  /tmp/cczwX7yU.s 			page 42


 821 0044 7047     		bx	lr
 822              	.L96:
1559:FWLIB/src/stm32f4xx_flash.c ****           }
1560:FWLIB/src/stm32f4xx_flash.c ****           else
1561:FWLIB/src/stm32f4xx_flash.c ****           {
1562:FWLIB/src/stm32f4xx_flash.c ****             flashstatus = FLASH_COMPLETE;
 823              		.loc 1 1562 0
 824 0046 0920     		movs	r0, #9
 825              	.LVL24:
1563:FWLIB/src/stm32f4xx_flash.c ****           }
1564:FWLIB/src/stm32f4xx_flash.c ****         }
1565:FWLIB/src/stm32f4xx_flash.c ****       }
1566:FWLIB/src/stm32f4xx_flash.c ****     }
1567:FWLIB/src/stm32f4xx_flash.c ****   }
1568:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH Status */
1569:FWLIB/src/stm32f4xx_flash.c ****   return flashstatus;
1570:FWLIB/src/stm32f4xx_flash.c **** }
 826              		.loc 1 1570 0
 827 0048 7047     		bx	lr
 828              	.L101:
 829 004a 00BF     		.align	2
 830              	.L100:
 831 004c 003C0240 		.word	1073888256
 832              		.cfi_endproc
 833              	.LFE150:
 835              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 836              		.align	1
 837              		.global	FLASH_WaitForLastOperation
 838              		.syntax unified
 839              		.thumb
 840              		.thumb_func
 841              		.fpu softvfp
 843              	FLASH_WaitForLastOperation:
 844              	.LFB151:
1571:FWLIB/src/stm32f4xx_flash.c **** 
1572:FWLIB/src/stm32f4xx_flash.c **** /**
1573:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Waits for a FLASH operation to complete.
1574:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1575:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1576:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1577:FWLIB/src/stm32f4xx_flash.c ****   */
1578:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_WaitForLastOperation(void)
1579:FWLIB/src/stm32f4xx_flash.c **** { 
 845              		.loc 1 1579 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 8
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849 0000 00B5     		push	{lr}
 850              	.LCFI0:
 851              		.cfi_def_cfa_offset 4
 852              		.cfi_offset 14, -4
 853 0002 83B0     		sub	sp, sp, #12
 854              	.LCFI1:
 855              		.cfi_def_cfa_offset 16
1580:FWLIB/src/stm32f4xx_flash.c ****   __IO FLASH_Status status = FLASH_COMPLETE;
 856              		.loc 1 1580 0
 857 0004 0923     		movs	r3, #9
ARM GAS  /tmp/cczwX7yU.s 			page 43


 858 0006 8DF80730 		strb	r3, [sp, #7]
1581:FWLIB/src/stm32f4xx_flash.c ****    
1582:FWLIB/src/stm32f4xx_flash.c ****   /* Check for the FLASH Status */
1583:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_GetStatus();
 859              		.loc 1 1583 0
 860 000a FFF7FEFF 		bl	FLASH_GetStatus
 861              	.LVL25:
 862 000e 8DF80700 		strb	r0, [sp, #7]
1584:FWLIB/src/stm32f4xx_flash.c **** 
1585:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
1586:FWLIB/src/stm32f4xx_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
1587:FWLIB/src/stm32f4xx_flash.c ****      flag will be set */
1588:FWLIB/src/stm32f4xx_flash.c ****   while(status == FLASH_BUSY)
 863              		.loc 1 1588 0
 864 0012 03E0     		b	.L103
 865              	.L104:
1589:FWLIB/src/stm32f4xx_flash.c ****   {
1590:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_GetStatus();
 866              		.loc 1 1590 0
 867 0014 FFF7FEFF 		bl	FLASH_GetStatus
 868              	.LVL26:
 869 0018 8DF80700 		strb	r0, [sp, #7]
 870              	.L103:
1588:FWLIB/src/stm32f4xx_flash.c ****   {
 871              		.loc 1 1588 0
 872 001c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 873 0020 DBB2     		uxtb	r3, r3
 874 0022 012B     		cmp	r3, #1
 875 0024 F6D0     		beq	.L104
1591:FWLIB/src/stm32f4xx_flash.c ****   }
1592:FWLIB/src/stm32f4xx_flash.c ****   /* Return the operation status */
1593:FWLIB/src/stm32f4xx_flash.c ****   return status;
 876              		.loc 1 1593 0
 877 0026 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
1594:FWLIB/src/stm32f4xx_flash.c **** }
 878              		.loc 1 1594 0
 879 002a 03B0     		add	sp, sp, #12
 880              	.LCFI2:
 881              		.cfi_def_cfa_offset 4
 882              		@ sp needed
 883 002c 5DF804FB 		ldr	pc, [sp], #4
 884              		.cfi_endproc
 885              	.LFE151:
 887              		.section	.text.FLASH_EraseSector,"ax",%progbits
 888              		.align	1
 889              		.global	FLASH_EraseSector
 890              		.syntax unified
 891              		.thumb
 892              		.thumb_func
 893              		.fpu softvfp
 895              	FLASH_EraseSector:
 896              	.LFB120:
 470:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 897              		.loc 1 470 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cczwX7yU.s 			page 44


 901              	.LVL27:
 902 0000 70B5     		push	{r4, r5, r6, lr}
 903              	.LCFI3:
 904              		.cfi_def_cfa_offset 16
 905              		.cfi_offset 4, -16
 906              		.cfi_offset 5, -12
 907              		.cfi_offset 6, -8
 908              		.cfi_offset 14, -4
 909 0002 0646     		mov	r6, r0
 910              	.LVL28:
 478:FWLIB/src/stm32f4xx_flash.c ****   {
 911              		.loc 1 478 0
 912 0004 49B1     		cbz	r1, .L109
 482:FWLIB/src/stm32f4xx_flash.c ****   {
 913              		.loc 1 482 0
 914 0006 0129     		cmp	r1, #1
 915 0008 0DD0     		beq	.L110
 486:FWLIB/src/stm32f4xx_flash.c ****   {
 916              		.loc 1 486 0
 917 000a 0229     		cmp	r1, #2
 918 000c 02D0     		beq	.L113
 492:FWLIB/src/stm32f4xx_flash.c ****   }
 919              		.loc 1 492 0
 920 000e 4FF44075 		mov	r5, #768
 921 0012 03E0     		b	.L107
 922              	.L113:
 488:FWLIB/src/stm32f4xx_flash.c ****   }
 923              		.loc 1 488 0
 924 0014 4FF40075 		mov	r5, #512
 925 0018 00E0     		b	.L107
 926              	.L109:
 480:FWLIB/src/stm32f4xx_flash.c ****   }
 927              		.loc 1 480 0
 928 001a 0025     		movs	r5, #0
 929              	.L107:
 930              	.LVL29:
 495:FWLIB/src/stm32f4xx_flash.c ****   
 931              		.loc 1 495 0
 932 001c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 933              	.LVL30:
 497:FWLIB/src/stm32f4xx_flash.c ****   { 
 934              		.loc 1 497 0
 935 0020 0928     		cmp	r0, #9
 936 0022 03D0     		beq	.L114
 937              	.LVL31:
 938              	.L108:
 515:FWLIB/src/stm32f4xx_flash.c **** 
 939              		.loc 1 515 0
 940 0024 70BD     		pop	{r4, r5, r6, pc}
 941              	.LVL32:
 942              	.L110:
 484:FWLIB/src/stm32f4xx_flash.c ****   }
 943              		.loc 1 484 0
 944 0026 4FF48075 		mov	r5, #256
 945 002a F7E7     		b	.L107
 946              	.LVL33:
 947              	.L114:
ARM GAS  /tmp/cczwX7yU.s 			page 45


 500:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 948              		.loc 1 500 0
 949 002c 0F4C     		ldr	r4, .L115
 950 002e 2369     		ldr	r3, [r4, #16]
 951 0030 23F44073 		bic	r3, r3, #768
 952 0034 2361     		str	r3, [r4, #16]
 501:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 953              		.loc 1 501 0
 954 0036 2369     		ldr	r3, [r4, #16]
 955 0038 1D43     		orrs	r5, r5, r3
 956              	.LVL34:
 957 003a 2561     		str	r5, [r4, #16]
 502:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 958              		.loc 1 502 0
 959 003c 2369     		ldr	r3, [r4, #16]
 960 003e 23F0F803 		bic	r3, r3, #248
 961 0042 2361     		str	r3, [r4, #16]
 503:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 962              		.loc 1 503 0
 963 0044 2369     		ldr	r3, [r4, #16]
 964 0046 1E43     		orrs	r6, r6, r3
 965              	.LVL35:
 966 0048 46F00206 		orr	r6, r6, #2
 967 004c 2661     		str	r6, [r4, #16]
 504:FWLIB/src/stm32f4xx_flash.c ****     
 968              		.loc 1 504 0
 969 004e 2369     		ldr	r3, [r4, #16]
 970 0050 43F48033 		orr	r3, r3, #65536
 971 0054 2361     		str	r3, [r4, #16]
 507:FWLIB/src/stm32f4xx_flash.c ****     
 972              		.loc 1 507 0
 973 0056 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 974              	.LVL36:
 510:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 975              		.loc 1 510 0
 976 005a 2369     		ldr	r3, [r4, #16]
 977 005c 23F00203 		bic	r3, r3, #2
 978 0060 2361     		str	r3, [r4, #16]
 511:FWLIB/src/stm32f4xx_flash.c ****   }
 979              		.loc 1 511 0
 980 0062 2369     		ldr	r3, [r4, #16]
 981 0064 23F0F803 		bic	r3, r3, #248
 982 0068 2361     		str	r3, [r4, #16]
 983 006a DBE7     		b	.L108
 984              	.L116:
 985              		.align	2
 986              	.L115:
 987 006c 003C0240 		.word	1073888256
 988              		.cfi_endproc
 989              	.LFE120:
 991              		.section	.text.FLASH_EraseAllSectors,"ax",%progbits
 992              		.align	1
 993              		.global	FLASH_EraseAllSectors
 994              		.syntax unified
 995              		.thumb
 996              		.thumb_func
 997              		.fpu softvfp
ARM GAS  /tmp/cczwX7yU.s 			page 46


 999              	FLASH_EraseAllSectors:
 1000              	.LFB121:
 538:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1001              		.loc 1 538 0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 0
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005              	.LVL37:
 1006 0000 10B5     		push	{r4, lr}
 1007              	.LCFI4:
 1008              		.cfi_def_cfa_offset 8
 1009              		.cfi_offset 4, -8
 1010              		.cfi_offset 14, -4
 1011 0002 0446     		mov	r4, r0
 1012              	.LVL38:
 543:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1013              		.loc 1 543 0
 1014 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1015              	.LVL39:
 546:FWLIB/src/stm32f4xx_flash.c ****   {
 1016              		.loc 1 546 0
 1017 0008 4CB1     		cbz	r4, .L120
 550:FWLIB/src/stm32f4xx_flash.c ****   {
 1018              		.loc 1 550 0
 1019 000a 012C     		cmp	r4, #1
 1020 000c 0BD0     		beq	.L121
 554:FWLIB/src/stm32f4xx_flash.c ****   {
 1021              		.loc 1 554 0
 1022 000e 022C     		cmp	r4, #2
 1023 0010 02D0     		beq	.L124
 560:FWLIB/src/stm32f4xx_flash.c ****   }  
 1024              		.loc 1 560 0
 1025 0012 4FF44073 		mov	r3, #768
 1026 0016 03E0     		b	.L118
 1027              	.L124:
 556:FWLIB/src/stm32f4xx_flash.c ****   }
 1028              		.loc 1 556 0
 1029 0018 4FF40073 		mov	r3, #512
 1030 001c 00E0     		b	.L118
 1031              	.L120:
 548:FWLIB/src/stm32f4xx_flash.c ****   }
 1032              		.loc 1 548 0
 1033 001e 0023     		movs	r3, #0
 1034              	.L118:
 1035              	.LVL40:
 562:FWLIB/src/stm32f4xx_flash.c ****   {
 1036              		.loc 1 562 0
 1037 0020 0928     		cmp	r0, #9
 1038 0022 03D0     		beq	.L125
 1039              	.LVL41:
 1040              	.L119:
 594:FWLIB/src/stm32f4xx_flash.c **** 
 1041              		.loc 1 594 0
 1042 0024 10BD     		pop	{r4, pc}
 1043              	.LVL42:
 1044              	.L121:
 552:FWLIB/src/stm32f4xx_flash.c ****   }
ARM GAS  /tmp/cczwX7yU.s 			page 47


 1045              		.loc 1 552 0
 1046 0026 4FF48073 		mov	r3, #256
 1047 002a F9E7     		b	.L118
 1048              	.LVL43:
 1049              	.L125:
 579:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 1050              		.loc 1 579 0
 1051 002c 0B4C     		ldr	r4, .L126
 1052 002e 2269     		ldr	r2, [r4, #16]
 1053 0030 22F44072 		bic	r2, r2, #768
 1054 0034 2261     		str	r2, [r4, #16]
 580:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 1055              		.loc 1 580 0
 1056 0036 2269     		ldr	r2, [r4, #16]
 1057 0038 1343     		orrs	r3, r3, r2
 1058              	.LVL44:
 1059 003a 2361     		str	r3, [r4, #16]
 581:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 1060              		.loc 1 581 0
 1061 003c 2369     		ldr	r3, [r4, #16]
 1062 003e 43F00403 		orr	r3, r3, #4
 1063 0042 2361     		str	r3, [r4, #16]
 582:FWLIB/src/stm32f4xx_flash.c ****     
 1064              		.loc 1 582 0
 1065 0044 2369     		ldr	r3, [r4, #16]
 1066 0046 43F48033 		orr	r3, r3, #65536
 1067 004a 2361     		str	r3, [r4, #16]
 585:FWLIB/src/stm32f4xx_flash.c **** 
 1068              		.loc 1 585 0
 1069 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1070              	.LVL45:
 588:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F411xE */
 1071              		.loc 1 588 0
 1072 0050 2369     		ldr	r3, [r4, #16]
 1073 0052 23F00403 		bic	r3, r3, #4
 1074 0056 2361     		str	r3, [r4, #16]
 1075 0058 E4E7     		b	.L119
 1076              	.L127:
 1077 005a 00BF     		.align	2
 1078              	.L126:
 1079 005c 003C0240 		.word	1073888256
 1080              		.cfi_endproc
 1081              	.LFE121:
 1083              		.section	.text.FLASH_EraseAllBank1Sectors,"ax",%progbits
 1084              		.align	1
 1085              		.global	FLASH_EraseAllBank1Sectors
 1086              		.syntax unified
 1087              		.thumb
 1088              		.thumb_func
 1089              		.fpu softvfp
 1091              	FLASH_EraseAllBank1Sectors:
 1092              	.LFB122:
 619:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1093              		.loc 1 619 0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 0
 1096              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cczwX7yU.s 			page 48


 1097              	.LVL46:
 1098 0000 10B5     		push	{r4, lr}
 1099              	.LCFI5:
 1100              		.cfi_def_cfa_offset 8
 1101              		.cfi_offset 4, -8
 1102              		.cfi_offset 14, -4
 1103 0002 0446     		mov	r4, r0
 1104              	.LVL47:
 624:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1105              		.loc 1 624 0
 1106 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1107              	.LVL48:
 627:FWLIB/src/stm32f4xx_flash.c ****   {
 1108              		.loc 1 627 0
 1109 0008 4CB1     		cbz	r4, .L131
 631:FWLIB/src/stm32f4xx_flash.c ****   {
 1110              		.loc 1 631 0
 1111 000a 012C     		cmp	r4, #1
 1112 000c 0BD0     		beq	.L132
 635:FWLIB/src/stm32f4xx_flash.c ****   {
 1113              		.loc 1 635 0
 1114 000e 022C     		cmp	r4, #2
 1115 0010 02D0     		beq	.L135
 641:FWLIB/src/stm32f4xx_flash.c ****   }  
 1116              		.loc 1 641 0
 1117 0012 4FF44073 		mov	r3, #768
 1118 0016 03E0     		b	.L129
 1119              	.L135:
 637:FWLIB/src/stm32f4xx_flash.c ****   }
 1120              		.loc 1 637 0
 1121 0018 4FF40073 		mov	r3, #512
 1122 001c 00E0     		b	.L129
 1123              	.L131:
 629:FWLIB/src/stm32f4xx_flash.c ****   }
 1124              		.loc 1 629 0
 1125 001e 0023     		movs	r3, #0
 1126              	.L129:
 1127              	.LVL49:
 643:FWLIB/src/stm32f4xx_flash.c ****   {
 1128              		.loc 1 643 0
 1129 0020 0928     		cmp	r0, #9
 1130 0022 03D0     		beq	.L136
 1131              	.LVL50:
 1132              	.L130:
 660:FWLIB/src/stm32f4xx_flash.c **** 
 1133              		.loc 1 660 0
 1134 0024 10BD     		pop	{r4, pc}
 1135              	.LVL51:
 1136              	.L132:
 633:FWLIB/src/stm32f4xx_flash.c ****   }
 1137              		.loc 1 633 0
 1138 0026 4FF48073 		mov	r3, #256
 1139 002a F9E7     		b	.L129
 1140              	.LVL52:
 1141              	.L136:
 646:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1142              		.loc 1 646 0
ARM GAS  /tmp/cczwX7yU.s 			page 49


 1143 002c 0B4C     		ldr	r4, .L137
 1144 002e 2269     		ldr	r2, [r4, #16]
 1145 0030 22F44072 		bic	r2, r2, #768
 1146 0034 2261     		str	r2, [r4, #16]
 647:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 1147              		.loc 1 647 0
 1148 0036 2269     		ldr	r2, [r4, #16]
 1149 0038 1343     		orrs	r3, r3, r2
 1150              	.LVL53:
 1151 003a 2361     		str	r3, [r4, #16]
 648:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1152              		.loc 1 648 0
 1153 003c 2369     		ldr	r3, [r4, #16]
 1154 003e 43F00403 		orr	r3, r3, #4
 1155 0042 2361     		str	r3, [r4, #16]
 649:FWLIB/src/stm32f4xx_flash.c ****     
 1156              		.loc 1 649 0
 1157 0044 2369     		ldr	r3, [r4, #16]
 1158 0046 43F48033 		orr	r3, r3, #65536
 1159 004a 2361     		str	r3, [r4, #16]
 652:FWLIB/src/stm32f4xx_flash.c **** 
 1160              		.loc 1 652 0
 1161 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1162              	.LVL54:
 655:FWLIB/src/stm32f4xx_flash.c **** 
 1163              		.loc 1 655 0
 1164 0050 2369     		ldr	r3, [r4, #16]
 1165 0052 23F00403 		bic	r3, r3, #4
 1166 0056 2361     		str	r3, [r4, #16]
 1167 0058 E4E7     		b	.L130
 1168              	.L138:
 1169 005a 00BF     		.align	2
 1170              	.L137:
 1171 005c 003C0240 		.word	1073888256
 1172              		.cfi_endproc
 1173              	.LFE122:
 1175              		.section	.text.FLASH_EraseAllBank2Sectors,"ax",%progbits
 1176              		.align	1
 1177              		.global	FLASH_EraseAllBank2Sectors
 1178              		.syntax unified
 1179              		.thumb
 1180              		.thumb_func
 1181              		.fpu softvfp
 1183              	FLASH_EraseAllBank2Sectors:
 1184              	.LFB123:
 686:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1185              		.loc 1 686 0
 1186              		.cfi_startproc
 1187              		@ args = 0, pretend = 0, frame = 0
 1188              		@ frame_needed = 0, uses_anonymous_args = 0
 1189              	.LVL55:
 1190 0000 10B5     		push	{r4, lr}
 1191              	.LCFI6:
 1192              		.cfi_def_cfa_offset 8
 1193              		.cfi_offset 4, -8
 1194              		.cfi_offset 14, -4
 1195 0002 0446     		mov	r4, r0
ARM GAS  /tmp/cczwX7yU.s 			page 50


 1196              	.LVL56:
 691:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1197              		.loc 1 691 0
 1198 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1199              	.LVL57:
 694:FWLIB/src/stm32f4xx_flash.c ****   {
 1200              		.loc 1 694 0
 1201 0008 4CB1     		cbz	r4, .L142
 698:FWLIB/src/stm32f4xx_flash.c ****   {
 1202              		.loc 1 698 0
 1203 000a 012C     		cmp	r4, #1
 1204 000c 0BD0     		beq	.L143
 702:FWLIB/src/stm32f4xx_flash.c ****   {
 1205              		.loc 1 702 0
 1206 000e 022C     		cmp	r4, #2
 1207 0010 02D0     		beq	.L146
 708:FWLIB/src/stm32f4xx_flash.c ****   }  
 1208              		.loc 1 708 0
 1209 0012 4FF44073 		mov	r3, #768
 1210 0016 03E0     		b	.L140
 1211              	.L146:
 704:FWLIB/src/stm32f4xx_flash.c ****   }
 1212              		.loc 1 704 0
 1213 0018 4FF40073 		mov	r3, #512
 1214 001c 00E0     		b	.L140
 1215              	.L142:
 696:FWLIB/src/stm32f4xx_flash.c ****   }
 1216              		.loc 1 696 0
 1217 001e 0023     		movs	r3, #0
 1218              	.L140:
 1219              	.LVL58:
 710:FWLIB/src/stm32f4xx_flash.c ****   {
 1220              		.loc 1 710 0
 1221 0020 0928     		cmp	r0, #9
 1222 0022 03D0     		beq	.L147
 1223              	.LVL59:
 1224              	.L141:
 727:FWLIB/src/stm32f4xx_flash.c **** 
 1225              		.loc 1 727 0
 1226 0024 10BD     		pop	{r4, pc}
 1227              	.LVL60:
 1228              	.L143:
 700:FWLIB/src/stm32f4xx_flash.c ****   }
 1229              		.loc 1 700 0
 1230 0026 4FF48073 		mov	r3, #256
 1231 002a F9E7     		b	.L140
 1232              	.LVL61:
 1233              	.L147:
 713:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1234              		.loc 1 713 0
 1235 002c 0B4C     		ldr	r4, .L148
 1236 002e 2269     		ldr	r2, [r4, #16]
 1237 0030 22F44072 		bic	r2, r2, #768
 1238 0034 2261     		str	r2, [r4, #16]
 714:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 1239              		.loc 1 714 0
 1240 0036 2269     		ldr	r2, [r4, #16]
ARM GAS  /tmp/cczwX7yU.s 			page 51


 1241 0038 1343     		orrs	r3, r3, r2
 1242              	.LVL62:
 1243 003a 2361     		str	r3, [r4, #16]
 715:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1244              		.loc 1 715 0
 1245 003c 2369     		ldr	r3, [r4, #16]
 1246 003e 43F40043 		orr	r3, r3, #32768
 1247 0042 2361     		str	r3, [r4, #16]
 716:FWLIB/src/stm32f4xx_flash.c ****     
 1248              		.loc 1 716 0
 1249 0044 2369     		ldr	r3, [r4, #16]
 1250 0046 43F48033 		orr	r3, r3, #65536
 1251 004a 2361     		str	r3, [r4, #16]
 719:FWLIB/src/stm32f4xx_flash.c **** 
 1252              		.loc 1 719 0
 1253 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1254              	.LVL63:
 722:FWLIB/src/stm32f4xx_flash.c **** 
 1255              		.loc 1 722 0
 1256 0050 2369     		ldr	r3, [r4, #16]
 1257 0052 23F40043 		bic	r3, r3, #32768
 1258 0056 2361     		str	r3, [r4, #16]
 1259 0058 E4E7     		b	.L141
 1260              	.L149:
 1261 005a 00BF     		.align	2
 1262              	.L148:
 1263 005c 003C0240 		.word	1073888256
 1264              		.cfi_endproc
 1265              	.LFE123:
 1267              		.section	.text.FLASH_ProgramDoubleWord,"ax",%progbits
 1268              		.align	1
 1269              		.global	FLASH_ProgramDoubleWord
 1270              		.syntax unified
 1271              		.thumb
 1272              		.thumb_func
 1273              		.fpu softvfp
 1275              	FLASH_ProgramDoubleWord:
 1276              	.LFB124:
 743:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1277              		.loc 1 743 0
 1278              		.cfi_startproc
 1279              		@ args = 0, pretend = 0, frame = 0
 1280              		@ frame_needed = 0, uses_anonymous_args = 0
 1281              	.LVL64:
 1282 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1283              	.LCFI7:
 1284              		.cfi_def_cfa_offset 24
 1285              		.cfi_offset 3, -24
 1286              		.cfi_offset 4, -20
 1287              		.cfi_offset 5, -16
 1288              		.cfi_offset 6, -12
 1289              		.cfi_offset 7, -8
 1290              		.cfi_offset 14, -4
 1291 0002 0546     		mov	r5, r0
 1292 0004 1646     		mov	r6, r2
 1293 0006 1F46     		mov	r7, r3
 1294              	.LVL65:
ARM GAS  /tmp/cczwX7yU.s 			page 52


 750:FWLIB/src/stm32f4xx_flash.c ****   
 1295              		.loc 1 750 0
 1296 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1297              	.LVL66:
 752:FWLIB/src/stm32f4xx_flash.c ****   {
 1298              		.loc 1 752 0
 1299 000c 0928     		cmp	r0, #9
 1300 000e 00D0     		beq	.L153
 1301              	.L151:
 769:FWLIB/src/stm32f4xx_flash.c **** 
 1302              		.loc 1 769 0
 1303 0010 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1304              	.LVL67:
 1305              	.L153:
 755:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 1306              		.loc 1 755 0
 1307 0012 0B4C     		ldr	r4, .L154
 1308 0014 2369     		ldr	r3, [r4, #16]
 1309 0016 23F44073 		bic	r3, r3, #768
 1310 001a 2361     		str	r3, [r4, #16]
 756:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1311              		.loc 1 756 0
 1312 001c 2369     		ldr	r3, [r4, #16]
 1313 001e 43F44073 		orr	r3, r3, #768
 1314 0022 2361     		str	r3, [r4, #16]
 757:FWLIB/src/stm32f4xx_flash.c ****   
 1315              		.loc 1 757 0
 1316 0024 2369     		ldr	r3, [r4, #16]
 1317 0026 43F00103 		orr	r3, r3, #1
 1318 002a 2361     		str	r3, [r4, #16]
 759:FWLIB/src/stm32f4xx_flash.c ****         
 1319              		.loc 1 759 0
 1320 002c C5E90067 		strd	r6, [r5]
 762:FWLIB/src/stm32f4xx_flash.c **** 
 1321              		.loc 1 762 0
 1322 0030 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1323              	.LVL68:
 765:FWLIB/src/stm32f4xx_flash.c ****   } 
 1324              		.loc 1 765 0
 1325 0034 2369     		ldr	r3, [r4, #16]
 1326 0036 23F00103 		bic	r3, r3, #1
 1327 003a 2361     		str	r3, [r4, #16]
 1328 003c E8E7     		b	.L151
 1329              	.L155:
 1330 003e 00BF     		.align	2
 1331              	.L154:
 1332 0040 003C0240 		.word	1073888256
 1333              		.cfi_endproc
 1334              	.LFE124:
 1336              		.section	.text.FLASH_ProgramWord,"ax",%progbits
 1337              		.align	1
 1338              		.global	FLASH_ProgramWord
 1339              		.syntax unified
 1340              		.thumb
 1341              		.thumb_func
 1342              		.fpu softvfp
 1344              	FLASH_ProgramWord:
ARM GAS  /tmp/cczwX7yU.s 			page 53


 1345              	.LFB125:
 786:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1346              		.loc 1 786 0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 0
 1349              		@ frame_needed = 0, uses_anonymous_args = 0
 1350              	.LVL69:
 1351 0000 70B5     		push	{r4, r5, r6, lr}
 1352              	.LCFI8:
 1353              		.cfi_def_cfa_offset 16
 1354              		.cfi_offset 4, -16
 1355              		.cfi_offset 5, -12
 1356              		.cfi_offset 6, -8
 1357              		.cfi_offset 14, -4
 1358 0002 0546     		mov	r5, r0
 1359 0004 0E46     		mov	r6, r1
 1360              	.LVL70:
 793:FWLIB/src/stm32f4xx_flash.c ****   
 1361              		.loc 1 793 0
 1362 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1363              	.LVL71:
 795:FWLIB/src/stm32f4xx_flash.c ****   {
 1364              		.loc 1 795 0
 1365 000a 0928     		cmp	r0, #9
 1366 000c 00D0     		beq	.L159
 1367              	.L157:
 812:FWLIB/src/stm32f4xx_flash.c **** 
 1368              		.loc 1 812 0
 1369 000e 70BD     		pop	{r4, r5, r6, pc}
 1370              	.LVL72:
 1371              	.L159:
 798:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 1372              		.loc 1 798 0
 1373 0010 0A4C     		ldr	r4, .L160
 1374 0012 2369     		ldr	r3, [r4, #16]
 1375 0014 23F44073 		bic	r3, r3, #768
 1376 0018 2361     		str	r3, [r4, #16]
 799:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1377              		.loc 1 799 0
 1378 001a 2369     		ldr	r3, [r4, #16]
 1379 001c 43F40073 		orr	r3, r3, #512
 1380 0020 2361     		str	r3, [r4, #16]
 800:FWLIB/src/stm32f4xx_flash.c ****   
 1381              		.loc 1 800 0
 1382 0022 2369     		ldr	r3, [r4, #16]
 1383 0024 43F00103 		orr	r3, r3, #1
 1384 0028 2361     		str	r3, [r4, #16]
 802:FWLIB/src/stm32f4xx_flash.c ****         
 1385              		.loc 1 802 0
 1386 002a 2E60     		str	r6, [r5]
 805:FWLIB/src/stm32f4xx_flash.c **** 
 1387              		.loc 1 805 0
 1388 002c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1389              	.LVL73:
 808:FWLIB/src/stm32f4xx_flash.c ****   } 
 1390              		.loc 1 808 0
 1391 0030 2369     		ldr	r3, [r4, #16]
ARM GAS  /tmp/cczwX7yU.s 			page 54


 1392 0032 23F00103 		bic	r3, r3, #1
 1393 0036 2361     		str	r3, [r4, #16]
 1394 0038 E9E7     		b	.L157
 1395              	.L161:
 1396 003a 00BF     		.align	2
 1397              	.L160:
 1398 003c 003C0240 		.word	1073888256
 1399              		.cfi_endproc
 1400              	.LFE125:
 1402              		.section	.text.FLASH_ProgramHalfWord,"ax",%progbits
 1403              		.align	1
 1404              		.global	FLASH_ProgramHalfWord
 1405              		.syntax unified
 1406              		.thumb
 1407              		.thumb_func
 1408              		.fpu softvfp
 1410              	FLASH_ProgramHalfWord:
 1411              	.LFB126:
 828:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1412              		.loc 1 828 0
 1413              		.cfi_startproc
 1414              		@ args = 0, pretend = 0, frame = 0
 1415              		@ frame_needed = 0, uses_anonymous_args = 0
 1416              	.LVL74:
 1417 0000 70B5     		push	{r4, r5, r6, lr}
 1418              	.LCFI9:
 1419              		.cfi_def_cfa_offset 16
 1420              		.cfi_offset 4, -16
 1421              		.cfi_offset 5, -12
 1422              		.cfi_offset 6, -8
 1423              		.cfi_offset 14, -4
 1424 0002 0546     		mov	r5, r0
 1425 0004 0E46     		mov	r6, r1
 1426              	.LVL75:
 835:FWLIB/src/stm32f4xx_flash.c ****   
 1427              		.loc 1 835 0
 1428 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1429              	.LVL76:
 837:FWLIB/src/stm32f4xx_flash.c ****   {
 1430              		.loc 1 837 0
 1431 000a 0928     		cmp	r0, #9
 1432 000c 00D0     		beq	.L165
 1433              	.L163:
 854:FWLIB/src/stm32f4xx_flash.c **** 
 1434              		.loc 1 854 0
 1435 000e 70BD     		pop	{r4, r5, r6, pc}
 1436              	.LVL77:
 1437              	.L165:
 840:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 1438              		.loc 1 840 0
 1439 0010 0A4C     		ldr	r4, .L166
 1440 0012 2369     		ldr	r3, [r4, #16]
 1441 0014 23F44073 		bic	r3, r3, #768
 1442 0018 2361     		str	r3, [r4, #16]
 841:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1443              		.loc 1 841 0
 1444 001a 2369     		ldr	r3, [r4, #16]
ARM GAS  /tmp/cczwX7yU.s 			page 55


 1445 001c 43F48073 		orr	r3, r3, #256
 1446 0020 2361     		str	r3, [r4, #16]
 842:FWLIB/src/stm32f4xx_flash.c ****   
 1447              		.loc 1 842 0
 1448 0022 2369     		ldr	r3, [r4, #16]
 1449 0024 43F00103 		orr	r3, r3, #1
 1450 0028 2361     		str	r3, [r4, #16]
 844:FWLIB/src/stm32f4xx_flash.c ****         
 1451              		.loc 1 844 0
 1452 002a 2E80     		strh	r6, [r5]	@ movhi
 847:FWLIB/src/stm32f4xx_flash.c **** 
 1453              		.loc 1 847 0
 1454 002c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1455              	.LVL78:
 850:FWLIB/src/stm32f4xx_flash.c ****   } 
 1456              		.loc 1 850 0
 1457 0030 2369     		ldr	r3, [r4, #16]
 1458 0032 23F00103 		bic	r3, r3, #1
 1459 0036 2361     		str	r3, [r4, #16]
 1460 0038 E9E7     		b	.L163
 1461              	.L167:
 1462 003a 00BF     		.align	2
 1463              	.L166:
 1464 003c 003C0240 		.word	1073888256
 1465              		.cfi_endproc
 1466              	.LFE126:
 1468              		.section	.text.FLASH_ProgramByte,"ax",%progbits
 1469              		.align	1
 1470              		.global	FLASH_ProgramByte
 1471              		.syntax unified
 1472              		.thumb
 1473              		.thumb_func
 1474              		.fpu softvfp
 1476              	FLASH_ProgramByte:
 1477              	.LFB127:
 870:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1478              		.loc 1 870 0
 1479              		.cfi_startproc
 1480              		@ args = 0, pretend = 0, frame = 0
 1481              		@ frame_needed = 0, uses_anonymous_args = 0
 1482              	.LVL79:
 1483 0000 70B5     		push	{r4, r5, r6, lr}
 1484              	.LCFI10:
 1485              		.cfi_def_cfa_offset 16
 1486              		.cfi_offset 4, -16
 1487              		.cfi_offset 5, -12
 1488              		.cfi_offset 6, -8
 1489              		.cfi_offset 14, -4
 1490 0002 0546     		mov	r5, r0
 1491 0004 0E46     		mov	r6, r1
 1492              	.LVL80:
 877:FWLIB/src/stm32f4xx_flash.c ****   
 1493              		.loc 1 877 0
 1494 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1495              	.LVL81:
 879:FWLIB/src/stm32f4xx_flash.c ****   {
 1496              		.loc 1 879 0
ARM GAS  /tmp/cczwX7yU.s 			page 56


 1497 000a 0928     		cmp	r0, #9
 1498 000c 00D0     		beq	.L171
 1499              	.L169:
 897:FWLIB/src/stm32f4xx_flash.c **** 
 1500              		.loc 1 897 0
 1501 000e 70BD     		pop	{r4, r5, r6, pc}
 1502              	.LVL82:
 1503              	.L171:
 882:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 1504              		.loc 1 882 0
 1505 0010 094C     		ldr	r4, .L172
 1506 0012 2369     		ldr	r3, [r4, #16]
 1507 0014 23F44073 		bic	r3, r3, #768
 1508 0018 2361     		str	r3, [r4, #16]
 883:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1509              		.loc 1 883 0
 1510 001a 2369     		ldr	r3, [r4, #16]
 1511 001c 2361     		str	r3, [r4, #16]
 884:FWLIB/src/stm32f4xx_flash.c ****   
 1512              		.loc 1 884 0
 1513 001e 2369     		ldr	r3, [r4, #16]
 1514 0020 43F00103 		orr	r3, r3, #1
 1515 0024 2361     		str	r3, [r4, #16]
 886:FWLIB/src/stm32f4xx_flash.c ****         
 1516              		.loc 1 886 0
 1517 0026 2E70     		strb	r6, [r5]
 889:FWLIB/src/stm32f4xx_flash.c **** 
 1518              		.loc 1 889 0
 1519 0028 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1520              	.LVL83:
 892:FWLIB/src/stm32f4xx_flash.c ****   } 
 1521              		.loc 1 892 0
 1522 002c 2369     		ldr	r3, [r4, #16]
 1523 002e 23F00103 		bic	r3, r3, #1
 1524 0032 2361     		str	r3, [r4, #16]
 1525 0034 EBE7     		b	.L169
 1526              	.L173:
 1527 0036 00BF     		.align	2
 1528              	.L172:
 1529 0038 003C0240 		.word	1073888256
 1530              		.cfi_endproc
 1531              	.LFE127:
 1533              		.section	.text.FLASH_OB_WRPConfig,"ax",%progbits
 1534              		.align	1
 1535              		.global	FLASH_OB_WRPConfig
 1536              		.syntax unified
 1537              		.thumb
 1538              		.thumb_func
 1539              		.fpu softvfp
 1541              	FLASH_OB_WRPConfig:
 1542              	.LFB130:
1007:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1543              		.loc 1 1007 0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 0
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 1547              	.LVL84:
ARM GAS  /tmp/cczwX7yU.s 			page 57


 1548 0000 38B5     		push	{r3, r4, r5, lr}
 1549              	.LCFI11:
 1550              		.cfi_def_cfa_offset 16
 1551              		.cfi_offset 3, -16
 1552              		.cfi_offset 4, -12
 1553              		.cfi_offset 5, -8
 1554              		.cfi_offset 14, -4
 1555 0002 0446     		mov	r4, r0
 1556 0004 0D46     		mov	r5, r1
 1557              	.LVL85:
1014:FWLIB/src/stm32f4xx_flash.c **** 
 1558              		.loc 1 1014 0
 1559 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1560              	.LVL86:
1016:FWLIB/src/stm32f4xx_flash.c ****   { 
 1561              		.loc 1 1016 0
 1562 000a 0928     		cmp	r0, #9
 1563 000c 00D0     		beq	.L178
 1564              	.LVL87:
 1565              	.L174:
 1566 000e 38BD     		pop	{r3, r4, r5, pc}
 1567              	.LVL88:
 1568              	.L178:
1018:FWLIB/src/stm32f4xx_flash.c ****     {
 1569              		.loc 1 1018 0
 1570 0010 35B9     		cbnz	r5, .L179
1024:FWLIB/src/stm32f4xx_flash.c ****     }
 1571              		.loc 1 1024 0
 1572 0012 074A     		ldr	r2, .L180
 1573 0014 1388     		ldrh	r3, [r2]
 1574 0016 9BB2     		uxth	r3, r3
 1575 0018 A4B2     		uxth	r4, r4
 1576              	.LVL89:
 1577 001a 1C43     		orrs	r4, r4, r3
 1578 001c 1480     		strh	r4, [r2]	@ movhi
1027:FWLIB/src/stm32f4xx_flash.c **** 
 1579              		.loc 1 1027 0
 1580 001e F6E7     		b	.L174
 1581              	.LVL90:
 1582              	.L179:
1020:FWLIB/src/stm32f4xx_flash.c ****     }
 1583              		.loc 1 1020 0
 1584 0020 034A     		ldr	r2, .L180
 1585 0022 1388     		ldrh	r3, [r2]
 1586 0024 9BB2     		uxth	r3, r3
 1587 0026 23EA0404 		bic	r4, r3, r4
 1588              	.LVL91:
 1589 002a 1480     		strh	r4, [r2]	@ movhi
 1590 002c 38BD     		pop	{r3, r4, r5, pc}
 1591              	.L181:
 1592 002e 00BF     		.align	2
 1593              	.L180:
 1594 0030 163C0240 		.word	1073888278
 1595              		.cfi_endproc
 1596              	.LFE130:
 1598              		.section	.text.FLASH_OB_WRP1Config,"ax",%progbits
 1599              		.align	1
ARM GAS  /tmp/cczwX7yU.s 			page 58


 1600              		.global	FLASH_OB_WRP1Config
 1601              		.syntax unified
 1602              		.thumb
 1603              		.thumb_func
 1604              		.fpu softvfp
 1606              	FLASH_OB_WRP1Config:
 1607              	.LFB131:
1049:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1608              		.loc 1 1049 0
 1609              		.cfi_startproc
 1610              		@ args = 0, pretend = 0, frame = 0
 1611              		@ frame_needed = 0, uses_anonymous_args = 0
 1612              	.LVL92:
 1613 0000 38B5     		push	{r3, r4, r5, lr}
 1614              	.LCFI12:
 1615              		.cfi_def_cfa_offset 16
 1616              		.cfi_offset 3, -16
 1617              		.cfi_offset 4, -12
 1618              		.cfi_offset 5, -8
 1619              		.cfi_offset 14, -4
 1620 0002 0446     		mov	r4, r0
 1621 0004 0D46     		mov	r5, r1
 1622              	.LVL93:
1056:FWLIB/src/stm32f4xx_flash.c **** 
 1623              		.loc 1 1056 0
 1624 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1625              	.LVL94:
1058:FWLIB/src/stm32f4xx_flash.c ****   { 
 1626              		.loc 1 1058 0
 1627 000a 0928     		cmp	r0, #9
 1628 000c 00D0     		beq	.L186
 1629              	.LVL95:
 1630              	.L182:
 1631 000e 38BD     		pop	{r3, r4, r5, pc}
 1632              	.LVL96:
 1633              	.L186:
1060:FWLIB/src/stm32f4xx_flash.c ****     {
 1634              		.loc 1 1060 0
 1635 0010 35B9     		cbnz	r5, .L187
1066:FWLIB/src/stm32f4xx_flash.c ****     }
 1636              		.loc 1 1066 0
 1637 0012 074A     		ldr	r2, .L188
 1638 0014 1388     		ldrh	r3, [r2]
 1639 0016 9BB2     		uxth	r3, r3
 1640 0018 A4B2     		uxth	r4, r4
 1641              	.LVL97:
 1642 001a 1C43     		orrs	r4, r4, r3
 1643 001c 1480     		strh	r4, [r2]	@ movhi
1069:FWLIB/src/stm32f4xx_flash.c **** 
 1644              		.loc 1 1069 0
 1645 001e F6E7     		b	.L182
 1646              	.LVL98:
 1647              	.L187:
1062:FWLIB/src/stm32f4xx_flash.c ****     }
 1648              		.loc 1 1062 0
 1649 0020 034A     		ldr	r2, .L188
 1650 0022 1388     		ldrh	r3, [r2]
ARM GAS  /tmp/cczwX7yU.s 			page 59


 1651 0024 9BB2     		uxth	r3, r3
 1652 0026 23EA0404 		bic	r4, r3, r4
 1653              	.LVL99:
 1654 002a 1480     		strh	r4, [r2]	@ movhi
 1655 002c 38BD     		pop	{r3, r4, r5, pc}
 1656              	.L189:
 1657 002e 00BF     		.align	2
 1658              	.L188:
 1659 0030 1A3C0240 		.word	1073888282
 1660              		.cfi_endproc
 1661              	.LFE131:
 1663              		.section	.text.FLASH_OB_PCROPConfig,"ax",%progbits
 1664              		.align	1
 1665              		.global	FLASH_OB_PCROPConfig
 1666              		.syntax unified
 1667              		.thumb
 1668              		.thumb_func
 1669              		.fpu softvfp
 1671              	FLASH_OB_PCROPConfig:
 1672              	.LFB133:
1129:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1673              		.loc 1 1129 0
 1674              		.cfi_startproc
 1675              		@ args = 0, pretend = 0, frame = 0
 1676              		@ frame_needed = 0, uses_anonymous_args = 0
 1677              	.LVL100:
 1678 0000 38B5     		push	{r3, r4, r5, lr}
 1679              	.LCFI13:
 1680              		.cfi_def_cfa_offset 16
 1681              		.cfi_offset 3, -16
 1682              		.cfi_offset 4, -12
 1683              		.cfi_offset 5, -8
 1684              		.cfi_offset 14, -4
 1685 0002 0446     		mov	r4, r0
 1686 0004 0D46     		mov	r5, r1
 1687              	.LVL101:
1136:FWLIB/src/stm32f4xx_flash.c **** 
 1688              		.loc 1 1136 0
 1689 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1690              	.LVL102:
1138:FWLIB/src/stm32f4xx_flash.c ****   { 
 1691              		.loc 1 1138 0
 1692 000a 0928     		cmp	r0, #9
 1693 000c 00D0     		beq	.L194
 1694              	.LVL103:
 1695              	.L190:
 1696 000e 38BD     		pop	{r3, r4, r5, pc}
 1697              	.LVL104:
 1698              	.L194:
1140:FWLIB/src/stm32f4xx_flash.c ****     {
 1699              		.loc 1 1140 0
 1700 0010 35B9     		cbnz	r5, .L195
1146:FWLIB/src/stm32f4xx_flash.c ****     }
 1701              		.loc 1 1146 0
 1702 0012 074A     		ldr	r2, .L196
 1703 0014 1388     		ldrh	r3, [r2]
 1704 0016 9BB2     		uxth	r3, r3
ARM GAS  /tmp/cczwX7yU.s 			page 60


 1705 0018 23EA0404 		bic	r4, r3, r4
 1706              	.LVL105:
 1707 001c 1480     		strh	r4, [r2]	@ movhi
1149:FWLIB/src/stm32f4xx_flash.c **** 
 1708              		.loc 1 1149 0
 1709 001e F6E7     		b	.L190
 1710              	.LVL106:
 1711              	.L195:
1142:FWLIB/src/stm32f4xx_flash.c ****     }
 1712              		.loc 1 1142 0
 1713 0020 034A     		ldr	r2, .L196
 1714 0022 1388     		ldrh	r3, [r2]
 1715 0024 9BB2     		uxth	r3, r3
 1716 0026 A4B2     		uxth	r4, r4
 1717              	.LVL107:
 1718 0028 1C43     		orrs	r4, r4, r3
 1719 002a 1480     		strh	r4, [r2]	@ movhi
 1720 002c 38BD     		pop	{r3, r4, r5, pc}
 1721              	.L197:
 1722 002e 00BF     		.align	2
 1723              	.L196:
 1724 0030 163C0240 		.word	1073888278
 1725              		.cfi_endproc
 1726              	.LFE133:
 1728              		.section	.text.FLASH_OB_PCROP1Config,"ax",%progbits
 1729              		.align	1
 1730              		.global	FLASH_OB_PCROP1Config
 1731              		.syntax unified
 1732              		.thumb
 1733              		.thumb_func
 1734              		.fpu softvfp
 1736              	FLASH_OB_PCROP1Config:
 1737              	.LFB134:
1166:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1738              		.loc 1 1166 0
 1739              		.cfi_startproc
 1740              		@ args = 0, pretend = 0, frame = 0
 1741              		@ frame_needed = 0, uses_anonymous_args = 0
 1742              	.LVL108:
 1743 0000 38B5     		push	{r3, r4, r5, lr}
 1744              	.LCFI14:
 1745              		.cfi_def_cfa_offset 16
 1746              		.cfi_offset 3, -16
 1747              		.cfi_offset 4, -12
 1748              		.cfi_offset 5, -8
 1749              		.cfi_offset 14, -4
 1750 0002 0446     		mov	r4, r0
 1751 0004 0D46     		mov	r5, r1
 1752              	.LVL109:
1173:FWLIB/src/stm32f4xx_flash.c **** 
 1753              		.loc 1 1173 0
 1754 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1755              	.LVL110:
1175:FWLIB/src/stm32f4xx_flash.c ****   { 
 1756              		.loc 1 1175 0
 1757 000a 0928     		cmp	r0, #9
 1758 000c 00D0     		beq	.L202
ARM GAS  /tmp/cczwX7yU.s 			page 61


 1759              	.LVL111:
 1760              	.L198:
 1761 000e 38BD     		pop	{r3, r4, r5, pc}
 1762              	.LVL112:
 1763              	.L202:
1177:FWLIB/src/stm32f4xx_flash.c ****     {
 1764              		.loc 1 1177 0
 1765 0010 35B9     		cbnz	r5, .L203
1183:FWLIB/src/stm32f4xx_flash.c ****     }
 1766              		.loc 1 1183 0
 1767 0012 074A     		ldr	r2, .L204
 1768 0014 1388     		ldrh	r3, [r2]
 1769 0016 9BB2     		uxth	r3, r3
 1770 0018 23EA0404 		bic	r4, r3, r4
 1771              	.LVL113:
 1772 001c 1480     		strh	r4, [r2]	@ movhi
1186:FWLIB/src/stm32f4xx_flash.c **** 
 1773              		.loc 1 1186 0
 1774 001e F6E7     		b	.L198
 1775              	.LVL114:
 1776              	.L203:
1179:FWLIB/src/stm32f4xx_flash.c ****     }
 1777              		.loc 1 1179 0
 1778 0020 034A     		ldr	r2, .L204
 1779 0022 1388     		ldrh	r3, [r2]
 1780 0024 9BB2     		uxth	r3, r3
 1781 0026 A4B2     		uxth	r4, r4
 1782              	.LVL115:
 1783 0028 1C43     		orrs	r4, r4, r3
 1784 002a 1480     		strh	r4, [r2]	@ movhi
 1785 002c 38BD     		pop	{r3, r4, r5, pc}
 1786              	.L205:
 1787 002e 00BF     		.align	2
 1788              	.L204:
 1789 0030 1A3C0240 		.word	1073888282
 1790              		.cfi_endproc
 1791              	.LFE134:
 1793              		.section	.text.FLASH_OB_RDPConfig,"ax",%progbits
 1794              		.align	1
 1795              		.global	FLASH_OB_RDPConfig
 1796              		.syntax unified
 1797              		.thumb
 1798              		.thumb_func
 1799              		.fpu softvfp
 1801              	FLASH_OB_RDPConfig:
 1802              	.LFB135:
1202:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1803              		.loc 1 1202 0
 1804              		.cfi_startproc
 1805              		@ args = 0, pretend = 0, frame = 0
 1806              		@ frame_needed = 0, uses_anonymous_args = 0
 1807              	.LVL116:
 1808 0000 10B5     		push	{r4, lr}
 1809              	.LCFI15:
 1810              		.cfi_def_cfa_offset 8
 1811              		.cfi_offset 4, -8
 1812              		.cfi_offset 14, -4
ARM GAS  /tmp/cczwX7yU.s 			page 62


 1813 0002 0446     		mov	r4, r0
 1814              	.LVL117:
1208:FWLIB/src/stm32f4xx_flash.c **** 
 1815              		.loc 1 1208 0
 1816 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1817              	.LVL118:
1210:FWLIB/src/stm32f4xx_flash.c ****   {
 1818              		.loc 1 1210 0
 1819 0008 0928     		cmp	r0, #9
 1820 000a 00D0     		beq	.L209
 1821              	.L206:
 1822 000c 10BD     		pop	{r4, pc}
 1823              	.L209:
1212:FWLIB/src/stm32f4xx_flash.c **** 
 1824              		.loc 1 1212 0
 1825 000e 014B     		ldr	r3, .L210
 1826 0010 1C70     		strb	r4, [r3]
1215:FWLIB/src/stm32f4xx_flash.c **** 
 1827              		.loc 1 1215 0
 1828 0012 FBE7     		b	.L206
 1829              	.L211:
 1830              		.align	2
 1831              	.L210:
 1832 0014 153C0240 		.word	1073888277
 1833              		.cfi_endproc
 1834              	.LFE135:
 1836              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 1837              		.align	1
 1838              		.global	FLASH_OB_UserConfig
 1839              		.syntax unified
 1840              		.thumb
 1841              		.thumb_func
 1842              		.fpu softvfp
 1844              	FLASH_OB_UserConfig:
 1845              	.LFB136:
1234:FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
 1846              		.loc 1 1234 0
 1847              		.cfi_startproc
 1848              		@ args = 0, pretend = 0, frame = 0
 1849              		@ frame_needed = 0, uses_anonymous_args = 0
 1850              	.LVL119:
 1851 0000 70B5     		push	{r4, r5, r6, lr}
 1852              	.LCFI16:
 1853              		.cfi_def_cfa_offset 16
 1854              		.cfi_offset 4, -16
 1855              		.cfi_offset 5, -12
 1856              		.cfi_offset 6, -8
 1857              		.cfi_offset 14, -4
 1858 0002 0446     		mov	r4, r0
 1859 0004 0E46     		mov	r6, r1
 1860 0006 1546     		mov	r5, r2
 1861              	.LVL120:
1244:FWLIB/src/stm32f4xx_flash.c ****   
 1862              		.loc 1 1244 0
 1863 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1864              	.LVL121:
1246:FWLIB/src/stm32f4xx_flash.c ****   { 
ARM GAS  /tmp/cczwX7yU.s 			page 63


 1865              		.loc 1 1246 0
 1866 000c 0928     		cmp	r0, #9
 1867 000e 00D0     		beq	.L215
 1868              	.LVL122:
 1869              	.L212:
 1870 0010 70BD     		pop	{r4, r5, r6, pc}
 1871              	.LVL123:
 1872              	.L215:
1255:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F411xE */ 
 1873              		.loc 1 1255 0
 1874 0012 044B     		ldr	r3, .L216
 1875 0014 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1876              	.LVL124:
 1877 0016 00F00F00 		and	r0, r0, #15
 1878              	.LVL125:
1259:FWLIB/src/stm32f4xx_flash.c ****   }  
 1879              		.loc 1 1259 0
 1880 001a 3043     		orrs	r0, r0, r6
 1881              	.LVL126:
 1882 001c 2843     		orrs	r0, r0, r5
 1883 001e 2043     		orrs	r0, r0, r4
 1884 0020 1870     		strb	r0, [r3]
1261:FWLIB/src/stm32f4xx_flash.c **** 
 1885              		.loc 1 1261 0
 1886 0022 F5E7     		b	.L212
 1887              	.L217:
 1888              		.align	2
 1889              	.L216:
 1890 0024 143C0240 		.word	1073888276
 1891              		.cfi_endproc
 1892              	.LFE136:
 1894              		.section	.text.FLASH_OB_Launch,"ax",%progbits
 1895              		.align	1
 1896              		.global	FLASH_OB_Launch
 1897              		.syntax unified
 1898              		.thumb
 1899              		.thumb_func
 1900              		.fpu softvfp
 1902              	FLASH_OB_Launch:
 1903              	.LFB139:
1313:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1904              		.loc 1 1313 0
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 0
 1907              		@ frame_needed = 0, uses_anonymous_args = 0
 1908 0000 08B5     		push	{r3, lr}
 1909              	.LCFI17:
 1910              		.cfi_def_cfa_offset 8
 1911              		.cfi_offset 3, -8
 1912              		.cfi_offset 14, -4
 1913              	.LVL127:
1317:FWLIB/src/stm32f4xx_flash.c **** 
 1914              		.loc 1 1317 0
 1915 0002 044A     		ldr	r2, .L220
 1916 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1917 0006 43F00203 		orr	r3, r3, #2
 1918 000a 1370     		strb	r3, [r2]
ARM GAS  /tmp/cczwX7yU.s 			page 64


1320:FWLIB/src/stm32f4xx_flash.c **** 
 1919              		.loc 1 1320 0
 1920 000c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1921              	.LVL128:
1323:FWLIB/src/stm32f4xx_flash.c **** 
 1922              		.loc 1 1323 0
 1923 0010 08BD     		pop	{r3, pc}
 1924              	.L221:
 1925 0012 00BF     		.align	2
 1926              	.L220:
 1927 0014 143C0240 		.word	1073888276
 1928              		.cfi_endproc
 1929              	.LFE139:
 1931              		.text
 1932              	.Letext0:
 1933              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1934              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1935              		.file 4 "CORE/core_cm4.h"
 1936              		.file 5 "USER/system_stm32f4xx.h"
 1937              		.file 6 "USER/stm32f4xx.h"
 1938              		.file 7 "FWLIB/inc/stm32f4xx_flash.h"
ARM GAS  /tmp/cczwX7yU.s 			page 65


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_flash.c
     /tmp/cczwX7yU.s:16     .text.FLASH_SetLatency:0000000000000000 $t
     /tmp/cczwX7yU.s:23     .text.FLASH_SetLatency:0000000000000000 FLASH_SetLatency
     /tmp/cczwX7yU.s:41     .text.FLASH_SetLatency:0000000000000008 $d
     /tmp/cczwX7yU.s:46     .text.FLASH_PrefetchBufferCmd:0000000000000000 $t
     /tmp/cczwX7yU.s:53     .text.FLASH_PrefetchBufferCmd:0000000000000000 FLASH_PrefetchBufferCmd
     /tmp/cczwX7yU.s:79     .text.FLASH_PrefetchBufferCmd:000000000000001c $d
     /tmp/cczwX7yU.s:84     .text.FLASH_InstructionCacheCmd:0000000000000000 $t
     /tmp/cczwX7yU.s:91     .text.FLASH_InstructionCacheCmd:0000000000000000 FLASH_InstructionCacheCmd
     /tmp/cczwX7yU.s:117    .text.FLASH_InstructionCacheCmd:000000000000001c $d
     /tmp/cczwX7yU.s:122    .text.FLASH_DataCacheCmd:0000000000000000 $t
     /tmp/cczwX7yU.s:129    .text.FLASH_DataCacheCmd:0000000000000000 FLASH_DataCacheCmd
     /tmp/cczwX7yU.s:155    .text.FLASH_DataCacheCmd:000000000000001c $d
     /tmp/cczwX7yU.s:160    .text.FLASH_InstructionCacheReset:0000000000000000 $t
     /tmp/cczwX7yU.s:167    .text.FLASH_InstructionCacheReset:0000000000000000 FLASH_InstructionCacheReset
     /tmp/cczwX7yU.s:183    .text.FLASH_InstructionCacheReset:000000000000000c $d
     /tmp/cczwX7yU.s:188    .text.FLASH_DataCacheReset:0000000000000000 $t
     /tmp/cczwX7yU.s:195    .text.FLASH_DataCacheReset:0000000000000000 FLASH_DataCacheReset
     /tmp/cczwX7yU.s:211    .text.FLASH_DataCacheReset:000000000000000c $d
     /tmp/cczwX7yU.s:216    .text.FLASH_Unlock:0000000000000000 $t
     /tmp/cczwX7yU.s:223    .text.FLASH_Unlock:0000000000000000 FLASH_Unlock
     /tmp/cczwX7yU.s:250    .text.FLASH_Unlock:0000000000000018 $d
     /tmp/cczwX7yU.s:256    .text.FLASH_Lock:0000000000000000 $t
     /tmp/cczwX7yU.s:263    .text.FLASH_Lock:0000000000000000 FLASH_Lock
     /tmp/cczwX7yU.s:279    .text.FLASH_Lock:000000000000000c $d
     /tmp/cczwX7yU.s:284    .text.FLASH_OB_Unlock:0000000000000000 $t
     /tmp/cczwX7yU.s:291    .text.FLASH_OB_Unlock:0000000000000000 FLASH_OB_Unlock
     /tmp/cczwX7yU.s:315    .text.FLASH_OB_Unlock:0000000000000018 $d
     /tmp/cczwX7yU.s:321    .text.FLASH_OB_Lock:0000000000000000 $t
     /tmp/cczwX7yU.s:328    .text.FLASH_OB_Lock:0000000000000000 FLASH_OB_Lock
     /tmp/cczwX7yU.s:344    .text.FLASH_OB_Lock:000000000000000c $d
     /tmp/cczwX7yU.s:349    .text.FLASH_OB_PCROPSelectionConfig:0000000000000000 $t
     /tmp/cczwX7yU.s:356    .text.FLASH_OB_PCROPSelectionConfig:0000000000000000 FLASH_OB_PCROPSelectionConfig
     /tmp/cczwX7yU.s:377    .text.FLASH_OB_PCROPSelectionConfig:0000000000000010 $d
     /tmp/cczwX7yU.s:382    .text.FLASH_OB_BootConfig:0000000000000000 $t
     /tmp/cczwX7yU.s:389    .text.FLASH_OB_BootConfig:0000000000000000 FLASH_OB_BootConfig
     /tmp/cczwX7yU.s:411    .text.FLASH_OB_BootConfig:0000000000000014 $d
     /tmp/cczwX7yU.s:416    .text.FLASH_OB_BORConfig:0000000000000000 $t
     /tmp/cczwX7yU.s:423    .text.FLASH_OB_BORConfig:0000000000000000 FLASH_OB_BORConfig
     /tmp/cczwX7yU.s:445    .text.FLASH_OB_BORConfig:0000000000000014 $d
     /tmp/cczwX7yU.s:450    .text.FLASH_OB_GetUser:0000000000000000 $t
     /tmp/cczwX7yU.s:457    .text.FLASH_OB_GetUser:0000000000000000 FLASH_OB_GetUser
     /tmp/cczwX7yU.s:473    .text.FLASH_OB_GetUser:000000000000000c $d
     /tmp/cczwX7yU.s:478    .text.FLASH_OB_GetWRP:0000000000000000 $t
     /tmp/cczwX7yU.s:485    .text.FLASH_OB_GetWRP:0000000000000000 FLASH_OB_GetWRP
     /tmp/cczwX7yU.s:501    .text.FLASH_OB_GetWRP:0000000000000008 $d
     /tmp/cczwX7yU.s:506    .text.FLASH_OB_GetWRP1:0000000000000000 $t
     /tmp/cczwX7yU.s:513    .text.FLASH_OB_GetWRP1:0000000000000000 FLASH_OB_GetWRP1
     /tmp/cczwX7yU.s:529    .text.FLASH_OB_GetWRP1:0000000000000008 $d
     /tmp/cczwX7yU.s:534    .text.FLASH_OB_GetPCROP:0000000000000000 $t
     /tmp/cczwX7yU.s:541    .text.FLASH_OB_GetPCROP:0000000000000000 FLASH_OB_GetPCROP
     /tmp/cczwX7yU.s:557    .text.FLASH_OB_GetPCROP:0000000000000008 $d
     /tmp/cczwX7yU.s:562    .text.FLASH_OB_GetPCROP1:0000000000000000 $t
     /tmp/cczwX7yU.s:569    .text.FLASH_OB_GetPCROP1:0000000000000000 FLASH_OB_GetPCROP1
     /tmp/cczwX7yU.s:585    .text.FLASH_OB_GetPCROP1:0000000000000008 $d
     /tmp/cczwX7yU.s:590    .text.FLASH_OB_GetRDP:0000000000000000 $t
ARM GAS  /tmp/cczwX7yU.s 			page 66


     /tmp/cczwX7yU.s:597    .text.FLASH_OB_GetRDP:0000000000000000 FLASH_OB_GetRDP
     /tmp/cczwX7yU.s:623    .text.FLASH_OB_GetRDP:0000000000000014 $d
     /tmp/cczwX7yU.s:628    .text.FLASH_OB_GetBOR:0000000000000000 $t
     /tmp/cczwX7yU.s:635    .text.FLASH_OB_GetBOR:0000000000000000 FLASH_OB_GetBOR
     /tmp/cczwX7yU.s:651    .text.FLASH_OB_GetBOR:000000000000000c $d
     /tmp/cczwX7yU.s:656    .text.FLASH_ITConfig:0000000000000000 $t
     /tmp/cczwX7yU.s:663    .text.FLASH_ITConfig:0000000000000000 FLASH_ITConfig
     /tmp/cczwX7yU.s:692    .text.FLASH_ITConfig:0000000000000018 $d
     /tmp/cczwX7yU.s:697    .text.FLASH_GetFlagStatus:0000000000000000 $t
     /tmp/cczwX7yU.s:704    .text.FLASH_GetFlagStatus:0000000000000000 FLASH_GetFlagStatus
     /tmp/cczwX7yU.s:731    .text.FLASH_GetFlagStatus:0000000000000010 $d
     /tmp/cczwX7yU.s:736    .text.FLASH_ClearFlag:0000000000000000 $t
     /tmp/cczwX7yU.s:743    .text.FLASH_ClearFlag:0000000000000000 FLASH_ClearFlag
     /tmp/cczwX7yU.s:758    .text.FLASH_ClearFlag:0000000000000008 $d
     /tmp/cczwX7yU.s:763    .text.FLASH_GetStatus:0000000000000000 $t
     /tmp/cczwX7yU.s:770    .text.FLASH_GetStatus:0000000000000000 FLASH_GetStatus
     /tmp/cczwX7yU.s:831    .text.FLASH_GetStatus:000000000000004c $d
     /tmp/cczwX7yU.s:836    .text.FLASH_WaitForLastOperation:0000000000000000 $t
     /tmp/cczwX7yU.s:843    .text.FLASH_WaitForLastOperation:0000000000000000 FLASH_WaitForLastOperation
     /tmp/cczwX7yU.s:888    .text.FLASH_EraseSector:0000000000000000 $t
     /tmp/cczwX7yU.s:895    .text.FLASH_EraseSector:0000000000000000 FLASH_EraseSector
     /tmp/cczwX7yU.s:987    .text.FLASH_EraseSector:000000000000006c $d
     /tmp/cczwX7yU.s:992    .text.FLASH_EraseAllSectors:0000000000000000 $t
     /tmp/cczwX7yU.s:999    .text.FLASH_EraseAllSectors:0000000000000000 FLASH_EraseAllSectors
     /tmp/cczwX7yU.s:1079   .text.FLASH_EraseAllSectors:000000000000005c $d
     /tmp/cczwX7yU.s:1084   .text.FLASH_EraseAllBank1Sectors:0000000000000000 $t
     /tmp/cczwX7yU.s:1091   .text.FLASH_EraseAllBank1Sectors:0000000000000000 FLASH_EraseAllBank1Sectors
     /tmp/cczwX7yU.s:1171   .text.FLASH_EraseAllBank1Sectors:000000000000005c $d
     /tmp/cczwX7yU.s:1176   .text.FLASH_EraseAllBank2Sectors:0000000000000000 $t
     /tmp/cczwX7yU.s:1183   .text.FLASH_EraseAllBank2Sectors:0000000000000000 FLASH_EraseAllBank2Sectors
     /tmp/cczwX7yU.s:1263   .text.FLASH_EraseAllBank2Sectors:000000000000005c $d
     /tmp/cczwX7yU.s:1268   .text.FLASH_ProgramDoubleWord:0000000000000000 $t
     /tmp/cczwX7yU.s:1275   .text.FLASH_ProgramDoubleWord:0000000000000000 FLASH_ProgramDoubleWord
     /tmp/cczwX7yU.s:1332   .text.FLASH_ProgramDoubleWord:0000000000000040 $d
     /tmp/cczwX7yU.s:1337   .text.FLASH_ProgramWord:0000000000000000 $t
     /tmp/cczwX7yU.s:1344   .text.FLASH_ProgramWord:0000000000000000 FLASH_ProgramWord
     /tmp/cczwX7yU.s:1398   .text.FLASH_ProgramWord:000000000000003c $d
     /tmp/cczwX7yU.s:1403   .text.FLASH_ProgramHalfWord:0000000000000000 $t
     /tmp/cczwX7yU.s:1410   .text.FLASH_ProgramHalfWord:0000000000000000 FLASH_ProgramHalfWord
     /tmp/cczwX7yU.s:1464   .text.FLASH_ProgramHalfWord:000000000000003c $d
     /tmp/cczwX7yU.s:1469   .text.FLASH_ProgramByte:0000000000000000 $t
     /tmp/cczwX7yU.s:1476   .text.FLASH_ProgramByte:0000000000000000 FLASH_ProgramByte
     /tmp/cczwX7yU.s:1529   .text.FLASH_ProgramByte:0000000000000038 $d
     /tmp/cczwX7yU.s:1534   .text.FLASH_OB_WRPConfig:0000000000000000 $t
     /tmp/cczwX7yU.s:1541   .text.FLASH_OB_WRPConfig:0000000000000000 FLASH_OB_WRPConfig
     /tmp/cczwX7yU.s:1594   .text.FLASH_OB_WRPConfig:0000000000000030 $d
     /tmp/cczwX7yU.s:1599   .text.FLASH_OB_WRP1Config:0000000000000000 $t
     /tmp/cczwX7yU.s:1606   .text.FLASH_OB_WRP1Config:0000000000000000 FLASH_OB_WRP1Config
     /tmp/cczwX7yU.s:1659   .text.FLASH_OB_WRP1Config:0000000000000030 $d
     /tmp/cczwX7yU.s:1664   .text.FLASH_OB_PCROPConfig:0000000000000000 $t
     /tmp/cczwX7yU.s:1671   .text.FLASH_OB_PCROPConfig:0000000000000000 FLASH_OB_PCROPConfig
     /tmp/cczwX7yU.s:1724   .text.FLASH_OB_PCROPConfig:0000000000000030 $d
     /tmp/cczwX7yU.s:1729   .text.FLASH_OB_PCROP1Config:0000000000000000 $t
     /tmp/cczwX7yU.s:1736   .text.FLASH_OB_PCROP1Config:0000000000000000 FLASH_OB_PCROP1Config
     /tmp/cczwX7yU.s:1789   .text.FLASH_OB_PCROP1Config:0000000000000030 $d
     /tmp/cczwX7yU.s:1794   .text.FLASH_OB_RDPConfig:0000000000000000 $t
     /tmp/cczwX7yU.s:1801   .text.FLASH_OB_RDPConfig:0000000000000000 FLASH_OB_RDPConfig
ARM GAS  /tmp/cczwX7yU.s 			page 67


     /tmp/cczwX7yU.s:1832   .text.FLASH_OB_RDPConfig:0000000000000014 $d
     /tmp/cczwX7yU.s:1837   .text.FLASH_OB_UserConfig:0000000000000000 $t
     /tmp/cczwX7yU.s:1844   .text.FLASH_OB_UserConfig:0000000000000000 FLASH_OB_UserConfig
     /tmp/cczwX7yU.s:1890   .text.FLASH_OB_UserConfig:0000000000000024 $d
     /tmp/cczwX7yU.s:1895   .text.FLASH_OB_Launch:0000000000000000 $t
     /tmp/cczwX7yU.s:1902   .text.FLASH_OB_Launch:0000000000000000 FLASH_OB_Launch
     /tmp/cczwX7yU.s:1927   .text.FLASH_OB_Launch:0000000000000014 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
