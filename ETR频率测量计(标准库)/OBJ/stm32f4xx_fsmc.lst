ARM GAS  /tmp/ccBbxfVV.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f4xx_fsmc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.FSMC_NORSRAMDeInit,"ax",%progbits
  16              		.align	1
  17              		.global	FSMC_NORSRAMDeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	FSMC_NORSRAMDeInit:
  24              	.LFB112:
  25              		.file 1 "FWLIB/src/stm32f4xx_fsmc.c"
   1:FWLIB/src/stm32f4xx_fsmc.c **** /**
   2:FWLIB/src/stm32f4xx_fsmc.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_fsmc.c ****   * @file    stm32f4xx_fsmc.c
   4:FWLIB/src/stm32f4xx_fsmc.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_fsmc.c ****   * @version V1.4.0
   6:FWLIB/src/stm32f4xx_fsmc.c ****   * @date    04-August-2014
   7:FWLIB/src/stm32f4xx_fsmc.c ****  * @brief    This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_fsmc.c ****   *          functionalities of the FSMC peripheral:           
   9:FWLIB/src/stm32f4xx_fsmc.c ****   *           + Interface with SRAM, PSRAM, NOR and OneNAND memories
  10:FWLIB/src/stm32f4xx_fsmc.c ****   *           + Interface with NAND memories
  11:FWLIB/src/stm32f4xx_fsmc.c ****   *           + Interface with 16-bit PC Card compatible memories  
  12:FWLIB/src/stm32f4xx_fsmc.c ****   *           + Interrupts and flags management   
  13:FWLIB/src/stm32f4xx_fsmc.c ****   *           
  14:FWLIB/src/stm32f4xx_fsmc.c ****   ******************************************************************************
  15:FWLIB/src/stm32f4xx_fsmc.c ****   * @attention
  16:FWLIB/src/stm32f4xx_fsmc.c ****   *
  17:FWLIB/src/stm32f4xx_fsmc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  18:FWLIB/src/stm32f4xx_fsmc.c ****   *
  19:FWLIB/src/stm32f4xx_fsmc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  20:FWLIB/src/stm32f4xx_fsmc.c ****   * You may not use this file except in compliance with the License.
  21:FWLIB/src/stm32f4xx_fsmc.c ****   * You may obtain a copy of the License at:
  22:FWLIB/src/stm32f4xx_fsmc.c ****   *
  23:FWLIB/src/stm32f4xx_fsmc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  24:FWLIB/src/stm32f4xx_fsmc.c ****   *
  25:FWLIB/src/stm32f4xx_fsmc.c ****   * Unless required by applicable law or agreed to in writing, software 
  26:FWLIB/src/stm32f4xx_fsmc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  27:FWLIB/src/stm32f4xx_fsmc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  28:FWLIB/src/stm32f4xx_fsmc.c ****   * See the License for the specific language governing permissions and
  29:FWLIB/src/stm32f4xx_fsmc.c ****   * limitations under the License.
  30:FWLIB/src/stm32f4xx_fsmc.c ****   *
  31:FWLIB/src/stm32f4xx_fsmc.c ****   ******************************************************************************
  32:FWLIB/src/stm32f4xx_fsmc.c ****   */
  33:FWLIB/src/stm32f4xx_fsmc.c **** 
ARM GAS  /tmp/ccBbxfVV.s 			page 2


  34:FWLIB/src/stm32f4xx_fsmc.c **** /* Includes ------------------------------------------------------------------*/
  35:FWLIB/src/stm32f4xx_fsmc.c **** #include "stm32f4xx_fsmc.h"
  36:FWLIB/src/stm32f4xx_fsmc.c **** #include "stm32f4xx_rcc.h"
  37:FWLIB/src/stm32f4xx_fsmc.c **** 
  38:FWLIB/src/stm32f4xx_fsmc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  39:FWLIB/src/stm32f4xx_fsmc.c ****   * @{
  40:FWLIB/src/stm32f4xx_fsmc.c ****   */
  41:FWLIB/src/stm32f4xx_fsmc.c **** 
  42:FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC 
  43:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief FSMC driver modules
  44:FWLIB/src/stm32f4xx_fsmc.c ****   * @{
  45:FWLIB/src/stm32f4xx_fsmc.c ****   */ 
  46:FWLIB/src/stm32f4xx_fsmc.c **** 
  47:FWLIB/src/stm32f4xx_fsmc.c **** /* Private typedef -----------------------------------------------------------*/
  48:FWLIB/src/stm32f4xx_fsmc.c **** const FSMC_NORSRAMTimingInitTypeDef FSMC_DefaultTimingStruct = {0x0F, /* FSMC_AddressSetupTime */
  49:FWLIB/src/stm32f4xx_fsmc.c ****                                                                 0x0F, /* FSMC_AddressHoldTime */
  50:FWLIB/src/stm32f4xx_fsmc.c ****                                                                 0xFF, /* FSMC_DataSetupTime */
  51:FWLIB/src/stm32f4xx_fsmc.c ****                                                                 0x0F, /* FSMC_BusTurnAroundDuration
  52:FWLIB/src/stm32f4xx_fsmc.c ****                                                                 0x0F, /* FSMC_CLKDivision */
  53:FWLIB/src/stm32f4xx_fsmc.c ****                                                                 0x0F, /* FSMC_DataLatency */
  54:FWLIB/src/stm32f4xx_fsmc.c ****                                                                 FSMC_AccessMode_A /* FSMC_AccessMod
  55:FWLIB/src/stm32f4xx_fsmc.c ****                                                                };
  56:FWLIB/src/stm32f4xx_fsmc.c **** /* Private define ------------------------------------------------------------*/
  57:FWLIB/src/stm32f4xx_fsmc.c **** 
  58:FWLIB/src/stm32f4xx_fsmc.c **** /* --------------------- FSMC registers bit mask ---------------------------- */
  59:FWLIB/src/stm32f4xx_fsmc.c **** /* FSMC BCRx Mask */
  60:FWLIB/src/stm32f4xx_fsmc.c **** #define BCR_MBKEN_SET          ((uint32_t)0x00000001)
  61:FWLIB/src/stm32f4xx_fsmc.c **** #define BCR_MBKEN_RESET        ((uint32_t)0x000FFFFE)
  62:FWLIB/src/stm32f4xx_fsmc.c **** #define BCR_FACCEN_SET         ((uint32_t)0x00000040)
  63:FWLIB/src/stm32f4xx_fsmc.c **** 
  64:FWLIB/src/stm32f4xx_fsmc.c **** /* FSMC PCRx Mask */
  65:FWLIB/src/stm32f4xx_fsmc.c **** #define PCR_PBKEN_SET          ((uint32_t)0x00000004)
  66:FWLIB/src/stm32f4xx_fsmc.c **** #define PCR_PBKEN_RESET        ((uint32_t)0x000FFFFB)
  67:FWLIB/src/stm32f4xx_fsmc.c **** #define PCR_ECCEN_SET          ((uint32_t)0x00000040)
  68:FWLIB/src/stm32f4xx_fsmc.c **** #define PCR_ECCEN_RESET        ((uint32_t)0x000FFFBF)
  69:FWLIB/src/stm32f4xx_fsmc.c **** #define PCR_MEMORYTYPE_NAND    ((uint32_t)0x00000008)
  70:FWLIB/src/stm32f4xx_fsmc.c **** 
  71:FWLIB/src/stm32f4xx_fsmc.c **** /* Private macro -------------------------------------------------------------*/
  72:FWLIB/src/stm32f4xx_fsmc.c **** /* Private variables ---------------------------------------------------------*/
  73:FWLIB/src/stm32f4xx_fsmc.c **** /* Private function prototypes -----------------------------------------------*/
  74:FWLIB/src/stm32f4xx_fsmc.c **** /* Private functions ---------------------------------------------------------*/
  75:FWLIB/src/stm32f4xx_fsmc.c **** 
  76:FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC_Private_Functions
  77:FWLIB/src/stm32f4xx_fsmc.c ****   * @{
  78:FWLIB/src/stm32f4xx_fsmc.c ****   */
  79:FWLIB/src/stm32f4xx_fsmc.c **** 
  80:FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC_Group1 NOR/SRAM Controller functions
  81:FWLIB/src/stm32f4xx_fsmc.c ****  *  @brief   NOR/SRAM Controller functions 
  82:FWLIB/src/stm32f4xx_fsmc.c ****  *
  83:FWLIB/src/stm32f4xx_fsmc.c **** @verbatim   
  84:FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================
  85:FWLIB/src/stm32f4xx_fsmc.c ****                     ##### NOR and SRAM Controller functions #####
  86:FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================  
  87:FWLIB/src/stm32f4xx_fsmc.c **** 
  88:FWLIB/src/stm32f4xx_fsmc.c ****  [..] The following sequence should be followed to configure the FSMC to interface
  89:FWLIB/src/stm32f4xx_fsmc.c ****       with SRAM, PSRAM, NOR or OneNAND memory connected to the NOR/SRAM Bank:
  90:FWLIB/src/stm32f4xx_fsmc.c ****  
ARM GAS  /tmp/ccBbxfVV.s 			page 3


  91:FWLIB/src/stm32f4xx_fsmc.c ****    (#) Enable the clock for the FSMC and associated GPIOs using the following functions:
  92:FWLIB/src/stm32f4xx_fsmc.c ****           RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
  93:FWLIB/src/stm32f4xx_fsmc.c ****           RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
  94:FWLIB/src/stm32f4xx_fsmc.c **** 
  95:FWLIB/src/stm32f4xx_fsmc.c ****    (#) FSMC pins configuration 
  96:FWLIB/src/stm32f4xx_fsmc.c ****        (++) Connect the involved FSMC pins to AF12 using the following function 
  97:FWLIB/src/stm32f4xx_fsmc.c ****             GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_FSMC); 
  98:FWLIB/src/stm32f4xx_fsmc.c ****        (++) Configure these FSMC pins in alternate function mode by calling the function
  99:FWLIB/src/stm32f4xx_fsmc.c ****             GPIO_Init();    
 100:FWLIB/src/stm32f4xx_fsmc.c ****        
 101:FWLIB/src/stm32f4xx_fsmc.c ****    (#) Declare a FSMC_NORSRAMInitTypeDef structure, for example:
 102:FWLIB/src/stm32f4xx_fsmc.c ****           FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
 103:FWLIB/src/stm32f4xx_fsmc.c ****       and fill the FSMC_NORSRAMInitStructure variable with the allowed values of
 104:FWLIB/src/stm32f4xx_fsmc.c ****       the structure member.
 105:FWLIB/src/stm32f4xx_fsmc.c ****       
 106:FWLIB/src/stm32f4xx_fsmc.c ****    (#) Initialize the NOR/SRAM Controller by calling the function
 107:FWLIB/src/stm32f4xx_fsmc.c ****           FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 
 108:FWLIB/src/stm32f4xx_fsmc.c **** 
 109:FWLIB/src/stm32f4xx_fsmc.c ****    (#) Then enable the NOR/SRAM Bank, for example:
 110:FWLIB/src/stm32f4xx_fsmc.c ****           FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM2, ENABLE);  
 111:FWLIB/src/stm32f4xx_fsmc.c **** 
 112:FWLIB/src/stm32f4xx_fsmc.c ****    (#) At this stage you can read/write from/to the memory connected to the NOR/SRAM Bank. 
 113:FWLIB/src/stm32f4xx_fsmc.c ****    
 114:FWLIB/src/stm32f4xx_fsmc.c **** @endverbatim
 115:FWLIB/src/stm32f4xx_fsmc.c ****   * @{
 116:FWLIB/src/stm32f4xx_fsmc.c ****   */
 117:FWLIB/src/stm32f4xx_fsmc.c **** 
 118:FWLIB/src/stm32f4xx_fsmc.c **** /**
 119:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  De-initializes the FSMC NOR/SRAM Banks registers to their default 
 120:FWLIB/src/stm32f4xx_fsmc.c ****   *   reset values.
 121:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 122:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 123:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM1: FSMC Bank1 NOR/SRAM1  
 124:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM2: FSMC Bank1 NOR/SRAM2 
 125:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
 126:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
 127:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 128:FWLIB/src/stm32f4xx_fsmc.c ****   */
 129:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
 130:FWLIB/src/stm32f4xx_fsmc.c **** {
  26              		.loc 1 130 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 131:FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameter */
 132:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
 133:FWLIB/src/stm32f4xx_fsmc.c ****   
 134:FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank1_NORSRAM1 */
 135:FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
  32              		.loc 1 135 0
  33 0000 0346     		mov	r3, r0
  34 0002 88B1     		cbz	r0, .L4
 136:FWLIB/src/stm32f4xx_fsmc.c ****   {
 137:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 138:FWLIB/src/stm32f4xx_fsmc.c ****   }
ARM GAS  /tmp/ccBbxfVV.s 			page 4


 139:FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
 140:FWLIB/src/stm32f4xx_fsmc.c ****   else
 141:FWLIB/src/stm32f4xx_fsmc.c ****   {   
 142:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
  35              		.loc 1 142 0
  36 0004 43F2D201 		movw	r1, #12498
  37 0008 4FF02042 		mov	r2, #-1610612736
  38 000c 42F82010 		str	r1, [r2, r0, lsl #2]
  39              	.L3:
 143:FWLIB/src/stm32f4xx_fsmc.c ****   }
 144:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
  40              		.loc 1 144 0
  41 0010 581C     		adds	r0, r3, #1
  42              	.LVL1:
  43 0012 6FF07042 		mvn	r2, #-268435456
  44 0016 4FF02041 		mov	r1, #-1610612736
  45 001a 41F82020 		str	r2, [r1, r0, lsl #2]
 145:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
  46              		.loc 1 145 0
  47 001e 01F58271 		add	r1, r1, #260
  48 0022 41F82320 		str	r2, [r1, r3, lsl #2]
  49 0026 7047     		bx	lr
  50              	.LVL2:
  51              	.L4:
 137:FWLIB/src/stm32f4xx_fsmc.c ****   }
  52              		.loc 1 137 0
  53 0028 43F2DB01 		movw	r1, #12507
  54 002c 4FF02042 		mov	r2, #-1610612736
  55 0030 42F82010 		str	r1, [r2, r0, lsl #2]
  56 0034 ECE7     		b	.L3
  57              		.cfi_endproc
  58              	.LFE112:
  60              		.section	.text.FSMC_NORSRAMInit,"ax",%progbits
  61              		.align	1
  62              		.global	FSMC_NORSRAMInit
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu softvfp
  68              	FSMC_NORSRAMInit:
  69              	.LFB113:
 146:FWLIB/src/stm32f4xx_fsmc.c **** }
 147:FWLIB/src/stm32f4xx_fsmc.c **** 
 148:FWLIB/src/stm32f4xx_fsmc.c **** /**
 149:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Initializes the FSMC NOR/SRAM Banks according to the specified
 150:FWLIB/src/stm32f4xx_fsmc.c ****   *         parameters in the FSMC_NORSRAMInitStruct.
 151:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_NORSRAMInitStruct : pointer to a FSMC_NORSRAMInitTypeDef structure
 152:FWLIB/src/stm32f4xx_fsmc.c ****   *         that contains the configuration information for the FSMC NOR/SRAM 
 153:FWLIB/src/stm32f4xx_fsmc.c ****   *         specified Banks.                       
 154:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 155:FWLIB/src/stm32f4xx_fsmc.c ****   */
 156:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
 157:FWLIB/src/stm32f4xx_fsmc.c **** { 
  70              		.loc 1 157 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBbxfVV.s 			page 5


  74              		@ link register save eliminated.
  75              	.LVL3:
  76 0000 10B4     		push	{r4}
  77              	.LCFI0:
  78              		.cfi_def_cfa_offset 4
  79              		.cfi_offset 4, -4
 158:FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 159:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
 160:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
 161:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
 162:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
 163:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
 164:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_ASYNWAIT(FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait));
 165:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
 166:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
 167:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
 168:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
 169:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
 170:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
 171:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
 172:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_
 173:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_A
 174:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_Data
 175:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_Bus
 176:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision
 177:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLa
 178:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessM
 179:FWLIB/src/stm32f4xx_fsmc.c ****   
 180:FWLIB/src/stm32f4xx_fsmc.c ****   /* Bank1 NOR/SRAM control register configuration */ 
 181:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
  80              		.loc 1 181 0
  81 0002 0268     		ldr	r2, [r0]
 182:FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
  82              		.loc 1 182 0
  83 0004 4368     		ldr	r3, [r0, #4]
 183:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_MemoryType |
  84              		.loc 1 183 0
  85 0006 8168     		ldr	r1, [r0, #8]
 182:FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
  86              		.loc 1 182 0
  87 0008 0B43     		orrs	r3, r3, r1
 184:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
  88              		.loc 1 184 0
  89 000a C168     		ldr	r1, [r0, #12]
 183:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_MemoryType |
  90              		.loc 1 183 0
  91 000c 0B43     		orrs	r3, r3, r1
 185:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
  92              		.loc 1 185 0
  93 000e 0169     		ldr	r1, [r0, #16]
 184:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
  94              		.loc 1 184 0
  95 0010 0B43     		orrs	r3, r3, r1
 186:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
  96              		.loc 1 186 0
  97 0012 4169     		ldr	r1, [r0, #20]
 185:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
ARM GAS  /tmp/ccBbxfVV.s 			page 6


  98              		.loc 1 185 0
  99 0014 0B43     		orrs	r3, r3, r1
 187:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 100              		.loc 1 187 0
 101 0016 8169     		ldr	r1, [r0, #24]
 186:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 102              		.loc 1 186 0
 103 0018 0B43     		orrs	r3, r3, r1
 188:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 104              		.loc 1 188 0
 105 001a C169     		ldr	r1, [r0, #28]
 187:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 106              		.loc 1 187 0
 107 001c 0B43     		orrs	r3, r3, r1
 189:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 108              		.loc 1 189 0
 109 001e 016A     		ldr	r1, [r0, #32]
 188:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 110              		.loc 1 188 0
 111 0020 0B43     		orrs	r3, r3, r1
 190:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 112              		.loc 1 190 0
 113 0022 416A     		ldr	r1, [r0, #36]
 189:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 114              		.loc 1 189 0
 115 0024 0B43     		orrs	r3, r3, r1
 191:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 116              		.loc 1 191 0
 117 0026 816A     		ldr	r1, [r0, #40]
 190:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 118              		.loc 1 190 0
 119 0028 0B43     		orrs	r3, r3, r1
 192:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 120              		.loc 1 192 0
 121 002a C16A     		ldr	r1, [r0, #44]
 191:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 122              		.loc 1 191 0
 123 002c 0B43     		orrs	r3, r3, r1
 193:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 124              		.loc 1 193 0
 125 002e 016B     		ldr	r1, [r0, #48]
 192:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 126              		.loc 1 192 0
 127 0030 0B43     		orrs	r3, r3, r1
 181:FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 128              		.loc 1 181 0
 129 0032 4FF02041 		mov	r1, #-1610612736
 130 0036 41F82230 		str	r3, [r1, r2, lsl #2]
 194:FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 131              		.loc 1 194 0
 132 003a 8368     		ldr	r3, [r0, #8]
 133 003c 082B     		cmp	r3, #8
 134 003e 24D0     		beq	.L10
 135              	.L6:
 195:FWLIB/src/stm32f4xx_fsmc.c ****   {
 196:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 197:FWLIB/src/stm32f4xx_fsmc.c ****   }
ARM GAS  /tmp/ccBbxfVV.s 			page 7


 198:FWLIB/src/stm32f4xx_fsmc.c ****   /* Bank1 NOR/SRAM timing register configuration */
 199:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 136              		.loc 1 199 0
 137 0040 0168     		ldr	r1, [r0]
 138 0042 0131     		adds	r1, r1, #1
 200:FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 139              		.loc 1 200 0
 140 0044 426B     		ldr	r2, [r0, #52]
 141 0046 1368     		ldr	r3, [r2]
 201:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 142              		.loc 1 201 0
 143 0048 5468     		ldr	r4, [r2, #4]
 200:FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 144              		.loc 1 200 0
 145 004a 43EA0413 		orr	r3, r3, r4, lsl #4
 202:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 146              		.loc 1 202 0
 147 004e 9468     		ldr	r4, [r2, #8]
 201:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 148              		.loc 1 201 0
 149 0050 43EA0423 		orr	r3, r3, r4, lsl #8
 203:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) 
 150              		.loc 1 203 0
 151 0054 D468     		ldr	r4, [r2, #12]
 202:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 152              		.loc 1 202 0
 153 0056 43EA0443 		orr	r3, r3, r4, lsl #16
 204:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 154              		.loc 1 204 0
 155 005a 1469     		ldr	r4, [r2, #16]
 203:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) 
 156              		.loc 1 203 0
 157 005c 43EA0453 		orr	r3, r3, r4, lsl #20
 205:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 158              		.loc 1 205 0
 159 0060 5469     		ldr	r4, [r2, #20]
 204:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 160              		.loc 1 204 0
 161 0062 43EA0463 		orr	r3, r3, r4, lsl #24
 206:FWLIB/src/stm32f4xx_fsmc.c ****              FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 162              		.loc 1 206 0
 163 0066 9269     		ldr	r2, [r2, #24]
 205:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 164              		.loc 1 205 0
 165 0068 1343     		orrs	r3, r3, r2
 199:FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 166              		.loc 1 199 0
 167 006a 4FF02042 		mov	r2, #-1610612736
 168 006e 42F82130 		str	r3, [r2, r1, lsl #2]
 207:FWLIB/src/stm32f4xx_fsmc.c ****             
 208:FWLIB/src/stm32f4xx_fsmc.c ****     
 209:FWLIB/src/stm32f4xx_fsmc.c ****   /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
 210:FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 169              		.loc 1 210 0
 170 0072 C36A     		ldr	r3, [r0, #44]
 171 0074 B3F5804F 		cmp	r3, #16384
 172 0078 11D0     		beq	.L11
ARM GAS  /tmp/ccBbxfVV.s 			page 8


 211:FWLIB/src/stm32f4xx_fsmc.c ****   {
 212:FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_Ad
 213:FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_Add
 214:FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSe
 215:FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision))
 216:FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLate
 217:FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMod
 218:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 219:FWLIB/src/stm32f4xx_fsmc.c ****               (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 220:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 221:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 222:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 223:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 224:FWLIB/src/stm32f4xx_fsmc.c ****                FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 225:FWLIB/src/stm32f4xx_fsmc.c ****   }
 226:FWLIB/src/stm32f4xx_fsmc.c ****   else
 227:FWLIB/src/stm32f4xx_fsmc.c ****   {
 228:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 173              		.loc 1 228 0
 174 007a 0268     		ldr	r2, [r0]
 175 007c 6FF07041 		mvn	r1, #-268435456
 176 0080 114B     		ldr	r3, .L12
 177 0082 43F82210 		str	r1, [r3, r2, lsl #2]
 178              	.LVL4:
 179              	.L5:
 229:FWLIB/src/stm32f4xx_fsmc.c ****   }
 230:FWLIB/src/stm32f4xx_fsmc.c **** }
 180              		.loc 1 230 0
 181 0086 10BC     		pop	{r4}
 182              	.LCFI1:
 183              		.cfi_remember_state
 184              		.cfi_restore 4
 185              		.cfi_def_cfa_offset 0
 186 0088 7047     		bx	lr
 187              	.LVL5:
 188              	.L10:
 189              	.LCFI2:
 190              		.cfi_restore_state
 196:FWLIB/src/stm32f4xx_fsmc.c ****   }
 191              		.loc 1 196 0
 192 008a 0168     		ldr	r1, [r0]
 193 008c 4FF02042 		mov	r2, #-1610612736
 194 0090 52F82130 		ldr	r3, [r2, r1, lsl #2]
 195 0094 43F04003 		orr	r3, r3, #64
 196 0098 42F82130 		str	r3, [r2, r1, lsl #2]
 197 009c D0E7     		b	.L6
 198              	.L11:
 218:FWLIB/src/stm32f4xx_fsmc.c ****               (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 199              		.loc 1 218 0
 200 009e 0168     		ldr	r1, [r0]
 219:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 201              		.loc 1 219 0
 202 00a0 826B     		ldr	r2, [r0, #56]
 203 00a2 1368     		ldr	r3, [r2]
 220:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 204              		.loc 1 220 0
 205 00a4 5068     		ldr	r0, [r2, #4]
ARM GAS  /tmp/ccBbxfVV.s 			page 9


 206              	.LVL6:
 219:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 207              		.loc 1 219 0
 208 00a6 43EA0013 		orr	r3, r3, r0, lsl #4
 221:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 209              		.loc 1 221 0
 210 00aa 9068     		ldr	r0, [r2, #8]
 220:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 211              		.loc 1 220 0
 212 00ac 43EA0023 		orr	r3, r3, r0, lsl #8
 222:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 213              		.loc 1 222 0
 214 00b0 1069     		ldr	r0, [r2, #16]
 221:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 215              		.loc 1 221 0
 216 00b2 43EA0053 		orr	r3, r3, r0, lsl #20
 223:FWLIB/src/stm32f4xx_fsmc.c ****                FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 217              		.loc 1 223 0
 218 00b6 5069     		ldr	r0, [r2, #20]
 222:FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 219              		.loc 1 222 0
 220 00b8 43EA0063 		orr	r3, r3, r0, lsl #24
 224:FWLIB/src/stm32f4xx_fsmc.c ****   }
 221              		.loc 1 224 0
 222 00bc 9269     		ldr	r2, [r2, #24]
 223:FWLIB/src/stm32f4xx_fsmc.c ****                FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 223              		.loc 1 223 0
 224 00be 1343     		orrs	r3, r3, r2
 218:FWLIB/src/stm32f4xx_fsmc.c ****               (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 225              		.loc 1 218 0
 226 00c0 014A     		ldr	r2, .L12
 227 00c2 42F82130 		str	r3, [r2, r1, lsl #2]
 228 00c6 DEE7     		b	.L5
 229              	.L13:
 230              		.align	2
 231              	.L12:
 232 00c8 040100A0 		.word	-1610612476
 233              		.cfi_endproc
 234              	.LFE113:
 236              		.section	.text.FSMC_NORSRAMStructInit,"ax",%progbits
 237              		.align	1
 238              		.global	FSMC_NORSRAMStructInit
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu softvfp
 244              	FSMC_NORSRAMStructInit:
 245              	.LFB114:
 231:FWLIB/src/stm32f4xx_fsmc.c **** 
 232:FWLIB/src/stm32f4xx_fsmc.c **** /**
 233:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Fills each FSMC_NORSRAMInitStruct member with its default value.
 234:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
 235:FWLIB/src/stm32f4xx_fsmc.c ****   *         which will be initialized.
 236:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 237:FWLIB/src/stm32f4xx_fsmc.c ****   */
 238:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
 239:FWLIB/src/stm32f4xx_fsmc.c **** {  
ARM GAS  /tmp/ccBbxfVV.s 			page 10


 246              		.loc 1 239 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 251              	.LVL7:
 240:FWLIB/src/stm32f4xx_fsmc.c ****   /* Reset NOR/SRAM Init structure parameters values */
 241:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 252              		.loc 1 241 0
 253 0000 0023     		movs	r3, #0
 254 0002 0360     		str	r3, [r0]
 242:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 255              		.loc 1 242 0
 256 0004 0222     		movs	r2, #2
 257 0006 4260     		str	r2, [r0, #4]
 243:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 258              		.loc 1 243 0
 259 0008 8360     		str	r3, [r0, #8]
 244:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 260              		.loc 1 244 0
 261 000a C360     		str	r3, [r0, #12]
 245:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 262              		.loc 1 245 0
 263 000c 0361     		str	r3, [r0, #16]
 246:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 264              		.loc 1 246 0
 265 000e 4361     		str	r3, [r0, #20]
 247:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 266              		.loc 1 247 0
 267 0010 8361     		str	r3, [r0, #24]
 248:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 268              		.loc 1 248 0
 269 0012 C361     		str	r3, [r0, #28]
 249:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 270              		.loc 1 249 0
 271 0014 0362     		str	r3, [r0, #32]
 250:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 272              		.loc 1 250 0
 273 0016 4FF48052 		mov	r2, #4096
 274 001a 4262     		str	r2, [r0, #36]
 251:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 275              		.loc 1 251 0
 276 001c 4FF40052 		mov	r2, #8192
 277 0020 8262     		str	r2, [r0, #40]
 252:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 278              		.loc 1 252 0
 279 0022 C362     		str	r3, [r0, #44]
 253:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 280              		.loc 1 253 0
 281 0024 0363     		str	r3, [r0, #48]
 254:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct = (FSMC_NORSRAMTimingInitTypeDef*)&FSMC_Defaul
 282              		.loc 1 254 0
 283 0026 024B     		ldr	r3, .L15
 284 0028 4363     		str	r3, [r0, #52]
 255:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct = (FSMC_NORSRAMTimingInitTypeDef*)&FSMC_DefaultTim
 285              		.loc 1 255 0
 286 002a 8363     		str	r3, [r0, #56]
ARM GAS  /tmp/ccBbxfVV.s 			page 11


 287 002c 7047     		bx	lr
 288              	.L16:
 289 002e 00BF     		.align	2
 290              	.L15:
 291 0030 00000000 		.word	.LANCHOR0
 292              		.cfi_endproc
 293              	.LFE114:
 295              		.section	.text.FSMC_NORSRAMCmd,"ax",%progbits
 296              		.align	1
 297              		.global	FSMC_NORSRAMCmd
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 301              		.fpu softvfp
 303              	FSMC_NORSRAMCmd:
 304              	.LFB115:
 256:FWLIB/src/stm32f4xx_fsmc.c **** }
 257:FWLIB/src/stm32f4xx_fsmc.c **** 
 258:FWLIB/src/stm32f4xx_fsmc.c **** /**
 259:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Enables or disables the specified NOR/SRAM Memory Bank.
 260:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 261:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 262:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM1: FSMC Bank1 NOR/SRAM1  
 263:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM2: FSMC Bank1 NOR/SRAM2 
 264:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
 265:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
 266:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
 267:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 268:FWLIB/src/stm32f4xx_fsmc.c ****   */
 269:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
 270:FWLIB/src/stm32f4xx_fsmc.c **** {
 305              		.loc 1 270 0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              		@ link register save eliminated.
 310              	.LVL8:
 271:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
 272:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 273:FWLIB/src/stm32f4xx_fsmc.c ****   
 274:FWLIB/src/stm32f4xx_fsmc.c ****   if (NewState != DISABLE)
 311              		.loc 1 274 0
 312 0000 41B9     		cbnz	r1, .L20
 275:FWLIB/src/stm32f4xx_fsmc.c ****   {
 276:FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
 277:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 278:FWLIB/src/stm32f4xx_fsmc.c ****   }
 279:FWLIB/src/stm32f4xx_fsmc.c ****   else
 280:FWLIB/src/stm32f4xx_fsmc.c ****   {
 281:FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
 282:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 313              		.loc 1 282 0
 314 0002 4FF02042 		mov	r2, #-1610612736
 315 0006 52F82010 		ldr	r1, [r2, r0, lsl #2]
 316              	.LVL9:
 317 000a 074B     		ldr	r3, .L21
 318 000c 0B40     		ands	r3, r3, r1
ARM GAS  /tmp/ccBbxfVV.s 			page 12


 319 000e 42F82030 		str	r3, [r2, r0, lsl #2]
 320 0012 7047     		bx	lr
 321              	.LVL10:
 322              	.L20:
 277:FWLIB/src/stm32f4xx_fsmc.c ****   }
 323              		.loc 1 277 0
 324 0014 4FF02042 		mov	r2, #-1610612736
 325 0018 52F82030 		ldr	r3, [r2, r0, lsl #2]
 326 001c 43F00103 		orr	r3, r3, #1
 327 0020 42F82030 		str	r3, [r2, r0, lsl #2]
 328 0024 7047     		bx	lr
 329              	.L22:
 330 0026 00BF     		.align	2
 331              	.L21:
 332 0028 FEFF0F00 		.word	1048574
 333              		.cfi_endproc
 334              	.LFE115:
 336              		.section	.text.FSMC_NANDDeInit,"ax",%progbits
 337              		.align	1
 338              		.global	FSMC_NANDDeInit
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu softvfp
 344              	FSMC_NANDDeInit:
 345              	.LFB116:
 283:FWLIB/src/stm32f4xx_fsmc.c ****   }
 284:FWLIB/src/stm32f4xx_fsmc.c **** }
 285:FWLIB/src/stm32f4xx_fsmc.c **** /**
 286:FWLIB/src/stm32f4xx_fsmc.c ****   * @}
 287:FWLIB/src/stm32f4xx_fsmc.c ****   */
 288:FWLIB/src/stm32f4xx_fsmc.c **** 
 289:FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC_Group2 NAND Controller functions
 290:FWLIB/src/stm32f4xx_fsmc.c ****  *  @brief   NAND Controller functions 
 291:FWLIB/src/stm32f4xx_fsmc.c ****  *
 292:FWLIB/src/stm32f4xx_fsmc.c **** @verbatim   
 293:FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================
 294:FWLIB/src/stm32f4xx_fsmc.c ****                     ##### NAND Controller functions #####
 295:FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================  
 296:FWLIB/src/stm32f4xx_fsmc.c **** 
 297:FWLIB/src/stm32f4xx_fsmc.c ****  [..]  The following sequence should be followed to configure the FSMC to interface 
 298:FWLIB/src/stm32f4xx_fsmc.c ****        with 8-bit or 16-bit NAND memory connected to the NAND Bank:
 299:FWLIB/src/stm32f4xx_fsmc.c ****  
 300:FWLIB/src/stm32f4xx_fsmc.c ****   (#) Enable the clock for the FSMC and associated GPIOs using the following functions:
 301:FWLIB/src/stm32f4xx_fsmc.c ****       (++)  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
 302:FWLIB/src/stm32f4xx_fsmc.c ****       (++)  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
 303:FWLIB/src/stm32f4xx_fsmc.c **** 
 304:FWLIB/src/stm32f4xx_fsmc.c ****   (#) FSMC pins configuration 
 305:FWLIB/src/stm32f4xx_fsmc.c ****       (++) Connect the involved FSMC pins to AF12 using the following function 
 306:FWLIB/src/stm32f4xx_fsmc.c ****            GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_FSMC); 
 307:FWLIB/src/stm32f4xx_fsmc.c ****       (++) Configure these FSMC pins in alternate function mode by calling the function
 308:FWLIB/src/stm32f4xx_fsmc.c ****            GPIO_Init();    
 309:FWLIB/src/stm32f4xx_fsmc.c ****        
 310:FWLIB/src/stm32f4xx_fsmc.c ****   (#) Declare a FSMC_NANDInitTypeDef structure, for example:
 311:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_NANDInitTypeDef  FSMC_NANDInitStructure;
 312:FWLIB/src/stm32f4xx_fsmc.c ****       and fill the FSMC_NANDInitStructure variable with the allowed values of
 313:FWLIB/src/stm32f4xx_fsmc.c ****       the structure member.
ARM GAS  /tmp/ccBbxfVV.s 			page 13


 314:FWLIB/src/stm32f4xx_fsmc.c ****       
 315:FWLIB/src/stm32f4xx_fsmc.c ****   (#) Initialize the NAND Controller by calling the function
 316:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_NANDInit(&FSMC_NANDInitStructure); 
 317:FWLIB/src/stm32f4xx_fsmc.c **** 
 318:FWLIB/src/stm32f4xx_fsmc.c ****   (#) Then enable the NAND Bank, for example:
 319:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_NANDCmd(FSMC_Bank3_NAND, ENABLE);  
 320:FWLIB/src/stm32f4xx_fsmc.c **** 
 321:FWLIB/src/stm32f4xx_fsmc.c ****   (#) At this stage you can read/write from/to the memory connected to the NAND Bank. 
 322:FWLIB/src/stm32f4xx_fsmc.c ****    
 323:FWLIB/src/stm32f4xx_fsmc.c ****  [..]
 324:FWLIB/src/stm32f4xx_fsmc.c ****   (@) To enable the Error Correction Code (ECC), you have to use the function
 325:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_NANDECCCmd(FSMC_Bank3_NAND, ENABLE);  
 326:FWLIB/src/stm32f4xx_fsmc.c ****  [..]
 327:FWLIB/src/stm32f4xx_fsmc.c ****   (@) and to get the current ECC value you have to use the function
 328:FWLIB/src/stm32f4xx_fsmc.c ****       ECCval = FSMC_GetECC(FSMC_Bank3_NAND); 
 329:FWLIB/src/stm32f4xx_fsmc.c **** 
 330:FWLIB/src/stm32f4xx_fsmc.c **** @endverbatim
 331:FWLIB/src/stm32f4xx_fsmc.c ****   * @{
 332:FWLIB/src/stm32f4xx_fsmc.c ****   */
 333:FWLIB/src/stm32f4xx_fsmc.c ****   
 334:FWLIB/src/stm32f4xx_fsmc.c **** /**
 335:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  De-initializes the FSMC NAND Banks registers to their default reset values.
 336:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 337:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 338:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 339:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
 340:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 341:FWLIB/src/stm32f4xx_fsmc.c ****   */
 342:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NANDDeInit(uint32_t FSMC_Bank)
 343:FWLIB/src/stm32f4xx_fsmc.c **** {
 346              		.loc 1 343 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350              		@ link register save eliminated.
 351              	.LVL11:
 344:FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameter */
 345:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
 346:FWLIB/src/stm32f4xx_fsmc.c ****   
 347:FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
 352              		.loc 1 347 0
 353 0000 1028     		cmp	r0, #16
 354 0002 09D0     		beq	.L26
 348:FWLIB/src/stm32f4xx_fsmc.c ****   {
 349:FWLIB/src/stm32f4xx_fsmc.c ****     /* Set the FSMC_Bank2 registers to their reset values */
 350:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PCR2 = 0x00000018;
 351:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->SR2 = 0x00000040;
 352:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 353:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 354:FWLIB/src/stm32f4xx_fsmc.c ****   }
 355:FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank3_NAND */  
 356:FWLIB/src/stm32f4xx_fsmc.c ****   else
 357:FWLIB/src/stm32f4xx_fsmc.c ****   {
 358:FWLIB/src/stm32f4xx_fsmc.c ****     /* Set the FSMC_Bank3 registers to their reset values */
 359:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PCR3 = 0x00000018;
 355              		.loc 1 359 0
 356 0004 094B     		ldr	r3, .L27
ARM GAS  /tmp/ccBbxfVV.s 			page 14


 357 0006 1822     		movs	r2, #24
 358 0008 1A60     		str	r2, [r3]
 360:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->SR3 = 0x00000040;
 359              		.loc 1 360 0
 360 000a 4022     		movs	r2, #64
 361 000c 5A60     		str	r2, [r3, #4]
 361:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 362              		.loc 1 361 0
 363 000e 4FF0FC32 		mov	r2, #-50529028
 364 0012 9A60     		str	r2, [r3, #8]
 362:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 365              		.loc 1 362 0
 366 0014 DA60     		str	r2, [r3, #12]
 367 0016 7047     		bx	lr
 368              	.L26:
 350:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->SR2 = 0x00000040;
 369              		.loc 1 350 0
 370 0018 054B     		ldr	r3, .L27+4
 371 001a 1822     		movs	r2, #24
 372 001c 1A60     		str	r2, [r3]
 351:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 373              		.loc 1 351 0
 374 001e 4022     		movs	r2, #64
 375 0020 5A60     		str	r2, [r3, #4]
 352:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 376              		.loc 1 352 0
 377 0022 4FF0FC32 		mov	r2, #-50529028
 378 0026 9A60     		str	r2, [r3, #8]
 353:FWLIB/src/stm32f4xx_fsmc.c ****   }
 379              		.loc 1 353 0
 380 0028 DA60     		str	r2, [r3, #12]
 381 002a 7047     		bx	lr
 382              	.L28:
 383              		.align	2
 384              	.L27:
 385 002c 800000A0 		.word	-1610612608
 386 0030 600000A0 		.word	-1610612640
 387              		.cfi_endproc
 388              	.LFE116:
 390              		.section	.text.FSMC_NANDInit,"ax",%progbits
 391              		.align	1
 392              		.global	FSMC_NANDInit
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 396              		.fpu softvfp
 398              	FSMC_NANDInit:
 399              	.LFB117:
 363:FWLIB/src/stm32f4xx_fsmc.c ****   }  
 364:FWLIB/src/stm32f4xx_fsmc.c **** }
 365:FWLIB/src/stm32f4xx_fsmc.c **** 
 366:FWLIB/src/stm32f4xx_fsmc.c **** /**
 367:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Initializes the FSMC NAND Banks according to the specified parameters
 368:FWLIB/src/stm32f4xx_fsmc.c ****   *         in the FSMC_NANDInitStruct.
 369:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
 370:FWLIB/src/stm32f4xx_fsmc.c ****   *         contains the configuration information for the FSMC NAND specified Banks.              
 371:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
ARM GAS  /tmp/ccBbxfVV.s 			page 15


 372:FWLIB/src/stm32f4xx_fsmc.c ****   */
 373:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
 374:FWLIB/src/stm32f4xx_fsmc.c **** {
 400              		.loc 1 374 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404              		@ link register save eliminated.
 405              	.LVL12:
 406 0000 30B4     		push	{r4, r5}
 407              	.LCFI3:
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 4, -8
 410              		.cfi_offset 5, -4
 411              	.LVL13:
 375:FWLIB/src/stm32f4xx_fsmc.c ****   uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 376:FWLIB/src/stm32f4xx_fsmc.c ****     
 377:FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 378:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
 379:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
 380:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_MEMORY_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
 381:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
 382:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
 383:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
 384:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
 385:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime
 386:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupT
 387:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupT
 388:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTim
 389:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupT
 390:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSet
 391:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSet
 392:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetup
 393:FWLIB/src/stm32f4xx_fsmc.c ****   
 394:FWLIB/src/stm32f4xx_fsmc.c ****   /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
 395:FWLIB/src/stm32f4xx_fsmc.c ****   tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 412              		.loc 1 395 0
 413 0002 4368     		ldr	r3, [r0, #4]
 396:FWLIB/src/stm32f4xx_fsmc.c ****             PCR_MEMORYTYPE_NAND |
 397:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 414              		.loc 1 397 0
 415 0004 8268     		ldr	r2, [r0, #8]
 396:FWLIB/src/stm32f4xx_fsmc.c ****             PCR_MEMORYTYPE_NAND |
 416              		.loc 1 396 0
 417 0006 1343     		orrs	r3, r3, r2
 398:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_ECC |
 418              		.loc 1 398 0
 419 0008 C268     		ldr	r2, [r0, #12]
 397:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_ECC |
 420              		.loc 1 397 0
 421 000a 1343     		orrs	r3, r3, r2
 399:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_ECCPageSize |
 422              		.loc 1 399 0
 423 000c 0269     		ldr	r2, [r0, #16]
 398:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_ECC |
 424              		.loc 1 398 0
 425 000e 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccBbxfVV.s 			page 16


 400:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 426              		.loc 1 400 0
 427 0010 4269     		ldr	r2, [r0, #20]
 399:FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_ECCPageSize |
 428              		.loc 1 399 0
 429 0012 43EA4223 		orr	r3, r3, r2, lsl #9
 401:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 430              		.loc 1 401 0
 431 0016 8269     		ldr	r2, [r0, #24]
 400:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 432              		.loc 1 400 0
 433 0018 43EA4233 		orr	r3, r3, r2, lsl #13
 395:FWLIB/src/stm32f4xx_fsmc.c ****             PCR_MEMORYTYPE_NAND |
 434              		.loc 1 395 0
 435 001c 43F00803 		orr	r3, r3, #8
 436              	.LVL14:
 402:FWLIB/src/stm32f4xx_fsmc.c ****             
 403:FWLIB/src/stm32f4xx_fsmc.c ****   /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
 404:FWLIB/src/stm32f4xx_fsmc.c ****   tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 437              		.loc 1 404 0
 438 0020 C169     		ldr	r1, [r0, #28]
 439 0022 0A68     		ldr	r2, [r1]
 405:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 440              		.loc 1 405 0
 441 0024 4C68     		ldr	r4, [r1, #4]
 404:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 442              		.loc 1 404 0
 443 0026 42EA0422 		orr	r2, r2, r4, lsl #8
 406:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 444              		.loc 1 406 0
 445 002a 8C68     		ldr	r4, [r1, #8]
 405:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 446              		.loc 1 405 0
 447 002c 42EA0442 		orr	r2, r2, r4, lsl #16
 407:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 448              		.loc 1 407 0
 449 0030 C968     		ldr	r1, [r1, #12]
 404:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 450              		.loc 1 404 0
 451 0032 42EA0161 		orr	r1, r2, r1, lsl #24
 452              	.LVL15:
 408:FWLIB/src/stm32f4xx_fsmc.c ****             
 409:FWLIB/src/stm32f4xx_fsmc.c ****   /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
 410:FWLIB/src/stm32f4xx_fsmc.c ****   tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 453              		.loc 1 410 0
 454 0036 046A     		ldr	r4, [r0, #32]
 455 0038 2268     		ldr	r2, [r4]
 411:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 456              		.loc 1 411 0
 457 003a 6568     		ldr	r5, [r4, #4]
 410:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 458              		.loc 1 410 0
 459 003c 42EA0522 		orr	r2, r2, r5, lsl #8
 412:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 460              		.loc 1 412 0
 461 0040 A568     		ldr	r5, [r4, #8]
 411:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
ARM GAS  /tmp/ccBbxfVV.s 			page 17


 462              		.loc 1 411 0
 463 0042 42EA0542 		orr	r2, r2, r5, lsl #16
 413:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 464              		.loc 1 413 0
 465 0046 E468     		ldr	r4, [r4, #12]
 410:FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 466              		.loc 1 410 0
 467 0048 42EA0462 		orr	r2, r2, r4, lsl #24
 468              	.LVL16:
 414:FWLIB/src/stm32f4xx_fsmc.c ****   
 415:FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 469              		.loc 1 415 0
 470 004c 0068     		ldr	r0, [r0]
 471              	.LVL17:
 472 004e 1028     		cmp	r0, #16
 473 0050 05D0     		beq	.L33
 416:FWLIB/src/stm32f4xx_fsmc.c ****   {
 417:FWLIB/src/stm32f4xx_fsmc.c ****     /* FSMC_Bank2_NAND registers configuration */
 418:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PCR2 = tmppcr;
 419:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PMEM2 = tmppmem;
 420:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PATT2 = tmppatt;
 421:FWLIB/src/stm32f4xx_fsmc.c ****   }
 422:FWLIB/src/stm32f4xx_fsmc.c ****   else
 423:FWLIB/src/stm32f4xx_fsmc.c ****   {
 424:FWLIB/src/stm32f4xx_fsmc.c ****     /* FSMC_Bank3_NAND registers configuration */
 425:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PCR3 = tmppcr;
 474              		.loc 1 425 0
 475 0052 0548     		ldr	r0, .L34
 476 0054 0360     		str	r3, [r0]
 426:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PMEM3 = tmppmem;
 477              		.loc 1 426 0
 478 0056 8160     		str	r1, [r0, #8]
 427:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PATT3 = tmppatt;
 479              		.loc 1 427 0
 480 0058 C260     		str	r2, [r0, #12]
 481              	.L29:
 428:FWLIB/src/stm32f4xx_fsmc.c ****   }
 429:FWLIB/src/stm32f4xx_fsmc.c **** }
 482              		.loc 1 429 0
 483 005a 30BC     		pop	{r4, r5}
 484              	.LCFI4:
 485              		.cfi_remember_state
 486              		.cfi_restore 5
 487              		.cfi_restore 4
 488              		.cfi_def_cfa_offset 0
 489 005c 7047     		bx	lr
 490              	.L33:
 491              	.LCFI5:
 492              		.cfi_restore_state
 418:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PMEM2 = tmppmem;
 493              		.loc 1 418 0
 494 005e 0348     		ldr	r0, .L34+4
 495 0060 0360     		str	r3, [r0]
 419:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PATT2 = tmppatt;
 496              		.loc 1 419 0
 497 0062 8160     		str	r1, [r0, #8]
 420:FWLIB/src/stm32f4xx_fsmc.c ****   }
ARM GAS  /tmp/ccBbxfVV.s 			page 18


 498              		.loc 1 420 0
 499 0064 C260     		str	r2, [r0, #12]
 500 0066 F8E7     		b	.L29
 501              	.L35:
 502              		.align	2
 503              	.L34:
 504 0068 800000A0 		.word	-1610612608
 505 006c 600000A0 		.word	-1610612640
 506              		.cfi_endproc
 507              	.LFE117:
 509              		.section	.text.FSMC_NANDStructInit,"ax",%progbits
 510              		.align	1
 511              		.global	FSMC_NANDStructInit
 512              		.syntax unified
 513              		.thumb
 514              		.thumb_func
 515              		.fpu softvfp
 517              	FSMC_NANDStructInit:
 518              	.LFB118:
 430:FWLIB/src/stm32f4xx_fsmc.c **** 
 431:FWLIB/src/stm32f4xx_fsmc.c **** 
 432:FWLIB/src/stm32f4xx_fsmc.c **** /**
 433:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Fills each FSMC_NANDInitStruct member with its default value.
 434:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
 435:FWLIB/src/stm32f4xx_fsmc.c ****   *         will be initialized.
 436:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 437:FWLIB/src/stm32f4xx_fsmc.c ****   */
 438:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
 439:FWLIB/src/stm32f4xx_fsmc.c **** { 
 519              		.loc 1 439 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524              	.LVL18:
 440:FWLIB/src/stm32f4xx_fsmc.c ****   /* Reset NAND Init structure parameters values */
 441:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 525              		.loc 1 441 0
 526 0000 1023     		movs	r3, #16
 527 0002 0360     		str	r3, [r0]
 442:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 528              		.loc 1 442 0
 529 0004 0023     		movs	r3, #0
 530 0006 4360     		str	r3, [r0, #4]
 443:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 531              		.loc 1 443 0
 532 0008 8360     		str	r3, [r0, #8]
 444:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 533              		.loc 1 444 0
 534 000a C360     		str	r3, [r0, #12]
 445:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 535              		.loc 1 445 0
 536 000c 0361     		str	r3, [r0, #16]
 446:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 537              		.loc 1 446 0
 538 000e 4361     		str	r3, [r0, #20]
 447:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
ARM GAS  /tmp/ccBbxfVV.s 			page 19


 539              		.loc 1 447 0
 540 0010 8361     		str	r3, [r0, #24]
 448:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 541              		.loc 1 448 0
 542 0012 C269     		ldr	r2, [r0, #28]
 543 0014 FC23     		movs	r3, #252
 544 0016 1360     		str	r3, [r2]
 449:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 545              		.loc 1 449 0
 546 0018 C269     		ldr	r2, [r0, #28]
 547 001a 5360     		str	r3, [r2, #4]
 450:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 548              		.loc 1 450 0
 549 001c C269     		ldr	r2, [r0, #28]
 550 001e 9360     		str	r3, [r2, #8]
 451:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 551              		.loc 1 451 0
 552 0020 C269     		ldr	r2, [r0, #28]
 553 0022 D360     		str	r3, [r2, #12]
 452:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 554              		.loc 1 452 0
 555 0024 026A     		ldr	r2, [r0, #32]
 556 0026 1360     		str	r3, [r2]
 453:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 557              		.loc 1 453 0
 558 0028 026A     		ldr	r2, [r0, #32]
 559 002a 5360     		str	r3, [r2, #4]
 454:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 560              		.loc 1 454 0
 561 002c 026A     		ldr	r2, [r0, #32]
 562 002e 9360     		str	r3, [r2, #8]
 455:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 563              		.loc 1 455 0
 564 0030 026A     		ldr	r2, [r0, #32]
 565 0032 D360     		str	r3, [r2, #12]
 566 0034 7047     		bx	lr
 567              		.cfi_endproc
 568              	.LFE118:
 570              		.section	.text.FSMC_NANDCmd,"ax",%progbits
 571              		.align	1
 572              		.global	FSMC_NANDCmd
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 576              		.fpu softvfp
 578              	FSMC_NANDCmd:
 579              	.LFB119:
 456:FWLIB/src/stm32f4xx_fsmc.c **** }
 457:FWLIB/src/stm32f4xx_fsmc.c **** 
 458:FWLIB/src/stm32f4xx_fsmc.c **** /**
 459:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Enables or disables the specified NAND Memory Bank.
 460:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 461:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 462:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 463:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 464:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
 465:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
ARM GAS  /tmp/ccBbxfVV.s 			page 20


 466:FWLIB/src/stm32f4xx_fsmc.c ****   */
 467:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
 468:FWLIB/src/stm32f4xx_fsmc.c **** {
 580              		.loc 1 468 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 585              	.LVL19:
 469:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
 470:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 471:FWLIB/src/stm32f4xx_fsmc.c ****   
 472:FWLIB/src/stm32f4xx_fsmc.c ****   if (NewState != DISABLE)
 586              		.loc 1 472 0
 587 0000 69B1     		cbz	r1, .L38
 473:FWLIB/src/stm32f4xx_fsmc.c ****   {
 474:FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
 475:FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 588              		.loc 1 475 0
 589 0002 1028     		cmp	r0, #16
 590 0004 05D0     		beq	.L42
 476:FWLIB/src/stm32f4xx_fsmc.c ****     {
 477:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 478:FWLIB/src/stm32f4xx_fsmc.c ****     }
 479:FWLIB/src/stm32f4xx_fsmc.c ****     else
 480:FWLIB/src/stm32f4xx_fsmc.c ****     {
 481:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 591              		.loc 1 481 0
 592 0006 0D4A     		ldr	r2, .L44
 593 0008 1368     		ldr	r3, [r2]
 594 000a 43F00403 		orr	r3, r3, #4
 595 000e 1360     		str	r3, [r2]
 596 0010 7047     		bx	lr
 597              	.L42:
 477:FWLIB/src/stm32f4xx_fsmc.c ****     }
 598              		.loc 1 477 0
 599 0012 0B4A     		ldr	r2, .L44+4
 600 0014 1368     		ldr	r3, [r2]
 601 0016 43F00403 		orr	r3, r3, #4
 602 001a 1360     		str	r3, [r2]
 603 001c 7047     		bx	lr
 604              	.L38:
 482:FWLIB/src/stm32f4xx_fsmc.c ****     }
 483:FWLIB/src/stm32f4xx_fsmc.c ****   }
 484:FWLIB/src/stm32f4xx_fsmc.c ****   else
 485:FWLIB/src/stm32f4xx_fsmc.c ****   {
 486:FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
 487:FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 605              		.loc 1 487 0
 606 001e 1028     		cmp	r0, #16
 607 0020 05D0     		beq	.L43
 488:FWLIB/src/stm32f4xx_fsmc.c ****     {
 489:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 490:FWLIB/src/stm32f4xx_fsmc.c ****     }
 491:FWLIB/src/stm32f4xx_fsmc.c ****     else
 492:FWLIB/src/stm32f4xx_fsmc.c ****     {
 493:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
ARM GAS  /tmp/ccBbxfVV.s 			page 21


 608              		.loc 1 493 0
 609 0022 064A     		ldr	r2, .L44
 610 0024 1168     		ldr	r1, [r2]
 611              	.LVL20:
 612 0026 074B     		ldr	r3, .L44+8
 613 0028 0B40     		ands	r3, r3, r1
 614 002a 1360     		str	r3, [r2]
 615 002c 7047     		bx	lr
 616              	.LVL21:
 617              	.L43:
 489:FWLIB/src/stm32f4xx_fsmc.c ****     }
 618              		.loc 1 489 0
 619 002e 044A     		ldr	r2, .L44+4
 620 0030 1168     		ldr	r1, [r2]
 621              	.LVL22:
 622 0032 044B     		ldr	r3, .L44+8
 623 0034 0B40     		ands	r3, r3, r1
 624 0036 1360     		str	r3, [r2]
 625 0038 7047     		bx	lr
 626              	.L45:
 627 003a 00BF     		.align	2
 628              	.L44:
 629 003c 800000A0 		.word	-1610612608
 630 0040 600000A0 		.word	-1610612640
 631 0044 FBFF0F00 		.word	1048571
 632              		.cfi_endproc
 633              	.LFE119:
 635              		.section	.text.FSMC_NANDECCCmd,"ax",%progbits
 636              		.align	1
 637              		.global	FSMC_NANDECCCmd
 638              		.syntax unified
 639              		.thumb
 640              		.thumb_func
 641              		.fpu softvfp
 643              	FSMC_NANDECCCmd:
 644              	.LFB120:
 494:FWLIB/src/stm32f4xx_fsmc.c ****     }
 495:FWLIB/src/stm32f4xx_fsmc.c ****   }
 496:FWLIB/src/stm32f4xx_fsmc.c **** }
 497:FWLIB/src/stm32f4xx_fsmc.c **** /**
 498:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Enables or disables the FSMC NAND ECC feature.
 499:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 500:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 501:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 502:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 503:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  NewState: new state of the FSMC NAND ECC feature.  
 504:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be: ENABLE or DISABLE.
 505:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 506:FWLIB/src/stm32f4xx_fsmc.c ****   */
 507:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
 508:FWLIB/src/stm32f4xx_fsmc.c **** {
 645              		.loc 1 508 0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 0, uses_anonymous_args = 0
 649              		@ link register save eliminated.
 650              	.LVL23:
ARM GAS  /tmp/ccBbxfVV.s 			page 22


 509:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
 510:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 511:FWLIB/src/stm32f4xx_fsmc.c ****   
 512:FWLIB/src/stm32f4xx_fsmc.c ****   if (NewState != DISABLE)
 651              		.loc 1 512 0
 652 0000 69B1     		cbz	r1, .L47
 513:FWLIB/src/stm32f4xx_fsmc.c ****   {
 514:FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
 515:FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 653              		.loc 1 515 0
 654 0002 1028     		cmp	r0, #16
 655 0004 05D0     		beq	.L51
 516:FWLIB/src/stm32f4xx_fsmc.c ****     {
 517:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 518:FWLIB/src/stm32f4xx_fsmc.c ****     }
 519:FWLIB/src/stm32f4xx_fsmc.c ****     else
 520:FWLIB/src/stm32f4xx_fsmc.c ****     {
 521:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 656              		.loc 1 521 0
 657 0006 0D4A     		ldr	r2, .L53
 658 0008 1368     		ldr	r3, [r2]
 659 000a 43F04003 		orr	r3, r3, #64
 660 000e 1360     		str	r3, [r2]
 661 0010 7047     		bx	lr
 662              	.L51:
 517:FWLIB/src/stm32f4xx_fsmc.c ****     }
 663              		.loc 1 517 0
 664 0012 0B4A     		ldr	r2, .L53+4
 665 0014 1368     		ldr	r3, [r2]
 666 0016 43F04003 		orr	r3, r3, #64
 667 001a 1360     		str	r3, [r2]
 668 001c 7047     		bx	lr
 669              	.L47:
 522:FWLIB/src/stm32f4xx_fsmc.c ****     }
 523:FWLIB/src/stm32f4xx_fsmc.c ****   }
 524:FWLIB/src/stm32f4xx_fsmc.c ****   else
 525:FWLIB/src/stm32f4xx_fsmc.c ****   {
 526:FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register *
 527:FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 670              		.loc 1 527 0
 671 001e 1028     		cmp	r0, #16
 672 0020 05D0     		beq	.L52
 528:FWLIB/src/stm32f4xx_fsmc.c ****     {
 529:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 530:FWLIB/src/stm32f4xx_fsmc.c ****     }
 531:FWLIB/src/stm32f4xx_fsmc.c ****     else
 532:FWLIB/src/stm32f4xx_fsmc.c ****     {
 533:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 673              		.loc 1 533 0
 674 0022 064A     		ldr	r2, .L53
 675 0024 1168     		ldr	r1, [r2]
 676              	.LVL24:
 677 0026 074B     		ldr	r3, .L53+8
 678 0028 0B40     		ands	r3, r3, r1
 679 002a 1360     		str	r3, [r2]
 680 002c 7047     		bx	lr
 681              	.LVL25:
ARM GAS  /tmp/ccBbxfVV.s 			page 23


 682              	.L52:
 529:FWLIB/src/stm32f4xx_fsmc.c ****     }
 683              		.loc 1 529 0
 684 002e 044A     		ldr	r2, .L53+4
 685 0030 1168     		ldr	r1, [r2]
 686              	.LVL26:
 687 0032 044B     		ldr	r3, .L53+8
 688 0034 0B40     		ands	r3, r3, r1
 689 0036 1360     		str	r3, [r2]
 690 0038 7047     		bx	lr
 691              	.L54:
 692 003a 00BF     		.align	2
 693              	.L53:
 694 003c 800000A0 		.word	-1610612608
 695 0040 600000A0 		.word	-1610612640
 696 0044 BFFF0F00 		.word	1048511
 697              		.cfi_endproc
 698              	.LFE120:
 700              		.section	.text.FSMC_GetECC,"ax",%progbits
 701              		.align	1
 702              		.global	FSMC_GetECC
 703              		.syntax unified
 704              		.thumb
 705              		.thumb_func
 706              		.fpu softvfp
 708              	FSMC_GetECC:
 709              	.LFB121:
 534:FWLIB/src/stm32f4xx_fsmc.c ****     }
 535:FWLIB/src/stm32f4xx_fsmc.c ****   }
 536:FWLIB/src/stm32f4xx_fsmc.c **** }
 537:FWLIB/src/stm32f4xx_fsmc.c **** 
 538:FWLIB/src/stm32f4xx_fsmc.c **** /**
 539:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Returns the error correction code register value.
 540:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 541:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 542:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 543:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 544:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval The Error Correction Code (ECC) value.
 545:FWLIB/src/stm32f4xx_fsmc.c ****   */
 546:FWLIB/src/stm32f4xx_fsmc.c **** uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
 547:FWLIB/src/stm32f4xx_fsmc.c **** {
 710              		.loc 1 547 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              		@ link register save eliminated.
 715              	.LVL27:
 548:FWLIB/src/stm32f4xx_fsmc.c ****   uint32_t eccval = 0x00000000;
 549:FWLIB/src/stm32f4xx_fsmc.c ****   
 550:FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
 716              		.loc 1 550 0
 717 0000 1028     		cmp	r0, #16
 718 0002 02D0     		beq	.L58
 551:FWLIB/src/stm32f4xx_fsmc.c ****   {
 552:FWLIB/src/stm32f4xx_fsmc.c ****     /* Get the ECCR2 register value */
 553:FWLIB/src/stm32f4xx_fsmc.c ****     eccval = FSMC_Bank2->ECCR2;
 554:FWLIB/src/stm32f4xx_fsmc.c ****   }
ARM GAS  /tmp/ccBbxfVV.s 			page 24


 555:FWLIB/src/stm32f4xx_fsmc.c ****   else
 556:FWLIB/src/stm32f4xx_fsmc.c ****   {
 557:FWLIB/src/stm32f4xx_fsmc.c ****     /* Get the ECCR3 register value */
 558:FWLIB/src/stm32f4xx_fsmc.c ****     eccval = FSMC_Bank3->ECCR3;
 719              		.loc 1 558 0
 720 0004 024B     		ldr	r3, .L59
 721 0006 5869     		ldr	r0, [r3, #20]
 722              	.LVL28:
 559:FWLIB/src/stm32f4xx_fsmc.c ****   }
 560:FWLIB/src/stm32f4xx_fsmc.c ****   /* Return the error correction code value */
 561:FWLIB/src/stm32f4xx_fsmc.c ****   return(eccval);
 562:FWLIB/src/stm32f4xx_fsmc.c **** }
 723              		.loc 1 562 0
 724 0008 7047     		bx	lr
 725              	.LVL29:
 726              	.L58:
 553:FWLIB/src/stm32f4xx_fsmc.c ****   }
 727              		.loc 1 553 0
 728 000a 024B     		ldr	r3, .L59+4
 729 000c 5869     		ldr	r0, [r3, #20]
 730              	.LVL30:
 731 000e 7047     		bx	lr
 732              	.L60:
 733              		.align	2
 734              	.L59:
 735 0010 800000A0 		.word	-1610612608
 736 0014 600000A0 		.word	-1610612640
 737              		.cfi_endproc
 738              	.LFE121:
 740              		.section	.text.FSMC_PCCARDDeInit,"ax",%progbits
 741              		.align	1
 742              		.global	FSMC_PCCARDDeInit
 743              		.syntax unified
 744              		.thumb
 745              		.thumb_func
 746              		.fpu softvfp
 748              	FSMC_PCCARDDeInit:
 749              	.LFB122:
 563:FWLIB/src/stm32f4xx_fsmc.c **** /**
 564:FWLIB/src/stm32f4xx_fsmc.c ****   * @}
 565:FWLIB/src/stm32f4xx_fsmc.c ****   */
 566:FWLIB/src/stm32f4xx_fsmc.c **** 
 567:FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC_Group3 PCCARD Controller functions
 568:FWLIB/src/stm32f4xx_fsmc.c ****  *  @brief   PCCARD Controller functions 
 569:FWLIB/src/stm32f4xx_fsmc.c ****  *
 570:FWLIB/src/stm32f4xx_fsmc.c **** @verbatim   
 571:FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================
 572:FWLIB/src/stm32f4xx_fsmc.c ****                     ##### PCCARD Controller functions #####
 573:FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================  
 574:FWLIB/src/stm32f4xx_fsmc.c **** 
 575:FWLIB/src/stm32f4xx_fsmc.c ****  [..]  he following sequence should be followed to configure the FSMC to interface 
 576:FWLIB/src/stm32f4xx_fsmc.c ****        with 16-bit PC Card compatible memory connected to the PCCARD Bank:
 577:FWLIB/src/stm32f4xx_fsmc.c ****  
 578:FWLIB/src/stm32f4xx_fsmc.c ****   (#)  Enable the clock for the FSMC and associated GPIOs using the following functions:
 579:FWLIB/src/stm32f4xx_fsmc.c ****        (++)  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
 580:FWLIB/src/stm32f4xx_fsmc.c ****        (++)  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
 581:FWLIB/src/stm32f4xx_fsmc.c **** 
ARM GAS  /tmp/ccBbxfVV.s 			page 25


 582:FWLIB/src/stm32f4xx_fsmc.c ****   (#) FSMC pins configuration 
 583:FWLIB/src/stm32f4xx_fsmc.c ****        (++) Connect the involved FSMC pins to AF12 using the following function 
 584:FWLIB/src/stm32f4xx_fsmc.c ****             GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_FSMC); 
 585:FWLIB/src/stm32f4xx_fsmc.c ****        (++) Configure these FSMC pins in alternate function mode by calling the function
 586:FWLIB/src/stm32f4xx_fsmc.c ****             GPIO_Init();    
 587:FWLIB/src/stm32f4xx_fsmc.c ****        
 588:FWLIB/src/stm32f4xx_fsmc.c ****   (#) Declare a FSMC_PCCARDInitTypeDef structure, for example:
 589:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_PCCARDInitTypeDef  FSMC_PCCARDInitStructure;
 590:FWLIB/src/stm32f4xx_fsmc.c ****       and fill the FSMC_PCCARDInitStructure variable with the allowed values of
 591:FWLIB/src/stm32f4xx_fsmc.c ****       the structure member.
 592:FWLIB/src/stm32f4xx_fsmc.c ****       
 593:FWLIB/src/stm32f4xx_fsmc.c ****   (#) Initialize the PCCARD Controller by calling the function
 594:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_PCCARDInit(&FSMC_PCCARDInitStructure); 
 595:FWLIB/src/stm32f4xx_fsmc.c **** 
 596:FWLIB/src/stm32f4xx_fsmc.c ****   (#) Then enable the PCCARD Bank:
 597:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_PCCARDCmd(ENABLE);  
 598:FWLIB/src/stm32f4xx_fsmc.c **** 
 599:FWLIB/src/stm32f4xx_fsmc.c ****   (#) At this stage you can read/write from/to the memory connected to the PCCARD Bank. 
 600:FWLIB/src/stm32f4xx_fsmc.c ****  
 601:FWLIB/src/stm32f4xx_fsmc.c **** @endverbatim
 602:FWLIB/src/stm32f4xx_fsmc.c ****   * @{
 603:FWLIB/src/stm32f4xx_fsmc.c ****   */
 604:FWLIB/src/stm32f4xx_fsmc.c **** 
 605:FWLIB/src/stm32f4xx_fsmc.c **** /**
 606:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  De-initializes the FSMC PCCARD Bank registers to their default reset values.
 607:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  None                       
 608:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 609:FWLIB/src/stm32f4xx_fsmc.c ****   */
 610:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_PCCARDDeInit(void)
 611:FWLIB/src/stm32f4xx_fsmc.c **** {
 750              		.loc 1 611 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 612:FWLIB/src/stm32f4xx_fsmc.c ****   /* Set the FSMC_Bank4 registers to their reset values */
 613:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PCR4 = 0x00000018; 
 755              		.loc 1 613 0
 756 0000 054B     		ldr	r3, .L62
 757 0002 1822     		movs	r2, #24
 758 0004 1A60     		str	r2, [r3]
 614:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->SR4 = 0x00000000;	
 759              		.loc 1 614 0
 760 0006 0022     		movs	r2, #0
 761 0008 5A60     		str	r2, [r3, #4]
 615:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 762              		.loc 1 615 0
 763 000a 4FF0FC32 		mov	r2, #-50529028
 764 000e 9A60     		str	r2, [r3, #8]
 616:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 765              		.loc 1 616 0
 766 0010 DA60     		str	r2, [r3, #12]
 617:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 767              		.loc 1 617 0
 768 0012 1A61     		str	r2, [r3, #16]
 769 0014 7047     		bx	lr
 770              	.L63:
ARM GAS  /tmp/ccBbxfVV.s 			page 26


 771 0016 00BF     		.align	2
 772              	.L62:
 773 0018 A00000A0 		.word	-1610612576
 774              		.cfi_endproc
 775              	.LFE122:
 777              		.section	.text.FSMC_PCCARDInit,"ax",%progbits
 778              		.align	1
 779              		.global	FSMC_PCCARDInit
 780              		.syntax unified
 781              		.thumb
 782              		.thumb_func
 783              		.fpu softvfp
 785              	FSMC_PCCARDInit:
 786              	.LFB123:
 618:FWLIB/src/stm32f4xx_fsmc.c **** }
 619:FWLIB/src/stm32f4xx_fsmc.c **** 
 620:FWLIB/src/stm32f4xx_fsmc.c **** /**
 621:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Initializes the FSMC PCCARD Bank according to the specified parameters
 622:FWLIB/src/stm32f4xx_fsmc.c ****   *         in the FSMC_PCCARDInitStruct.
 623:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
 624:FWLIB/src/stm32f4xx_fsmc.c ****   *         that contains the configuration information for the FSMC PCCARD Bank.                  
 625:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 626:FWLIB/src/stm32f4xx_fsmc.c ****   */
 627:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
 628:FWLIB/src/stm32f4xx_fsmc.c **** {
 787              		.loc 1 628 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              		@ link register save eliminated.
 792              	.LVL31:
 793 0000 10B4     		push	{r4}
 794              	.LCFI6:
 795              		.cfi_def_cfa_offset 4
 796              		.cfi_offset 4, -4
 629:FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 630:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
 631:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
 632:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
 633:FWLIB/src/stm32f4xx_fsmc.c ****  
 634:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTi
 635:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetu
 636:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetu
 637:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupT
 638:FWLIB/src/stm32f4xx_fsmc.c ****   
 639:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_Setu
 640:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitS
 641:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldS
 642:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSet
 643:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime))
 644:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTim
 645:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTim
 646:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime)
 647:FWLIB/src/stm32f4xx_fsmc.c ****   
 648:FWLIB/src/stm32f4xx_fsmc.c ****   /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
 649:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 797              		.loc 1 649 0
ARM GAS  /tmp/ccBbxfVV.s 			page 27


 798 0002 0368     		ldr	r3, [r0]
 650:FWLIB/src/stm32f4xx_fsmc.c ****                      FSMC_MemoryDataWidth_16b |  
 651:FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 799              		.loc 1 651 0
 800 0004 4268     		ldr	r2, [r0, #4]
 650:FWLIB/src/stm32f4xx_fsmc.c ****                      FSMC_MemoryDataWidth_16b |  
 801              		.loc 1 650 0
 802 0006 43EA4223 		orr	r3, r3, r2, lsl #9
 652:FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 803              		.loc 1 652 0
 804 000a 8268     		ldr	r2, [r0, #8]
 651:FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 805              		.loc 1 651 0
 806 000c 43EA4233 		orr	r3, r3, r2, lsl #13
 807 0010 43F01003 		orr	r3, r3, #16
 649:FWLIB/src/stm32f4xx_fsmc.c ****                      FSMC_MemoryDataWidth_16b |  
 808              		.loc 1 649 0
 809 0014 134A     		ldr	r2, .L66
 810 0016 1360     		str	r3, [r2]
 653:FWLIB/src/stm32f4xx_fsmc.c ****             
 654:FWLIB/src/stm32f4xx_fsmc.c ****   /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
 655:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime
 811              		.loc 1 655 0
 812 0018 C168     		ldr	r1, [r0, #12]
 813 001a 0B68     		ldr	r3, [r1]
 656:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8
 814              		.loc 1 656 0
 815 001c 4C68     		ldr	r4, [r1, #4]
 655:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8
 816              		.loc 1 655 0
 817 001e 43EA0423 		orr	r3, r3, r4, lsl #8
 657:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 1
 818              		.loc 1 657 0
 819 0022 8C68     		ldr	r4, [r1, #8]
 656:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8
 820              		.loc 1 656 0
 821 0024 43EA0443 		orr	r3, r3, r4, lsl #16
 658:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24
 822              		.loc 1 658 0
 823 0028 C968     		ldr	r1, [r1, #12]
 657:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 1
 824              		.loc 1 657 0
 825 002a 43EA0163 		orr	r3, r3, r1, lsl #24
 655:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8
 826              		.loc 1 655 0
 827 002e 9360     		str	r3, [r2, #8]
 659:FWLIB/src/stm32f4xx_fsmc.c ****             
 660:FWLIB/src/stm32f4xx_fsmc.c ****   /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
 661:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupT
 828              		.loc 1 661 0
 829 0030 0169     		ldr	r1, [r0, #16]
 830 0032 0B68     		ldr	r3, [r1]
 662:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime <
 831              		.loc 1 662 0
 832 0034 4C68     		ldr	r4, [r1, #4]
 661:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime <
 833              		.loc 1 661 0
ARM GAS  /tmp/ccBbxfVV.s 			page 28


 834 0036 43EA0423 		orr	r3, r3, r4, lsl #8
 663:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime <
 835              		.loc 1 663 0
 836 003a 8C68     		ldr	r4, [r1, #8]
 662:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime <
 837              		.loc 1 662 0
 838 003c 43EA0443 		orr	r3, r3, r4, lsl #16
 664:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime <<
 839              		.loc 1 664 0
 840 0040 C968     		ldr	r1, [r1, #12]
 663:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime <
 841              		.loc 1 663 0
 842 0042 43EA0163 		orr	r3, r3, r1, lsl #24
 661:FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime <
 843              		.loc 1 661 0
 844 0046 D360     		str	r3, [r2, #12]
 665:FWLIB/src/stm32f4xx_fsmc.c ****             
 666:FWLIB/src/stm32f4xx_fsmc.c ****   /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
 667:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 845              		.loc 1 667 0
 846 0048 4169     		ldr	r1, [r0, #20]
 847 004a 0B68     		ldr	r3, [r1]
 668:FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 848              		.loc 1 668 0
 849 004c 4868     		ldr	r0, [r1, #4]
 850              	.LVL32:
 667:FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 851              		.loc 1 667 0
 852 004e 43EA0023 		orr	r3, r3, r0, lsl #8
 669:FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 853              		.loc 1 669 0
 854 0052 8868     		ldr	r0, [r1, #8]
 668:FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 855              		.loc 1 668 0
 856 0054 43EA0043 		orr	r3, r3, r0, lsl #16
 670:FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);   
 857              		.loc 1 670 0
 858 0058 C968     		ldr	r1, [r1, #12]
 669:FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 859              		.loc 1 669 0
 860 005a 43EA0163 		orr	r3, r3, r1, lsl #24
 667:FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 861              		.loc 1 667 0
 862 005e 1361     		str	r3, [r2, #16]
 671:FWLIB/src/stm32f4xx_fsmc.c **** }
 863              		.loc 1 671 0
 864 0060 10BC     		pop	{r4}
 865              	.LCFI7:
 866              		.cfi_restore 4
 867              		.cfi_def_cfa_offset 0
 868 0062 7047     		bx	lr
 869              	.L67:
 870              		.align	2
 871              	.L66:
 872 0064 A00000A0 		.word	-1610612576
 873              		.cfi_endproc
 874              	.LFE123:
ARM GAS  /tmp/ccBbxfVV.s 			page 29


 876              		.section	.text.FSMC_PCCARDStructInit,"ax",%progbits
 877              		.align	1
 878              		.global	FSMC_PCCARDStructInit
 879              		.syntax unified
 880              		.thumb
 881              		.thumb_func
 882              		.fpu softvfp
 884              	FSMC_PCCARDStructInit:
 885              	.LFB124:
 672:FWLIB/src/stm32f4xx_fsmc.c **** 
 673:FWLIB/src/stm32f4xx_fsmc.c **** /**
 674:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Fills each FSMC_PCCARDInitStruct member with its default value.
 675:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
 676:FWLIB/src/stm32f4xx_fsmc.c ****   *         which will be initialized.
 677:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 678:FWLIB/src/stm32f4xx_fsmc.c ****   */
 679:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
 680:FWLIB/src/stm32f4xx_fsmc.c **** {
 886              		.loc 1 680 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 0
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 890              		@ link register save eliminated.
 891              	.LVL33:
 681:FWLIB/src/stm32f4xx_fsmc.c ****   /* Reset PCCARD Init structure parameters values */
 682:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 892              		.loc 1 682 0
 893 0000 0023     		movs	r3, #0
 894 0002 0360     		str	r3, [r0]
 683:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 895              		.loc 1 683 0
 896 0004 4360     		str	r3, [r0, #4]
 684:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 897              		.loc 1 684 0
 898 0006 8360     		str	r3, [r0, #8]
 685:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 899              		.loc 1 685 0
 900 0008 C268     		ldr	r2, [r0, #12]
 901 000a FC23     		movs	r3, #252
 902 000c 1360     		str	r3, [r2]
 686:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 903              		.loc 1 686 0
 904 000e C268     		ldr	r2, [r0, #12]
 905 0010 5360     		str	r3, [r2, #4]
 687:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 906              		.loc 1 687 0
 907 0012 C268     		ldr	r2, [r0, #12]
 908 0014 9360     		str	r3, [r2, #8]
 688:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 909              		.loc 1 688 0
 910 0016 C268     		ldr	r2, [r0, #12]
 911 0018 D360     		str	r3, [r2, #12]
 689:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 912              		.loc 1 689 0
 913 001a 0269     		ldr	r2, [r0, #16]
 914 001c 1360     		str	r3, [r2]
 690:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
ARM GAS  /tmp/ccBbxfVV.s 			page 30


 915              		.loc 1 690 0
 916 001e 0269     		ldr	r2, [r0, #16]
 917 0020 5360     		str	r3, [r2, #4]
 691:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 918              		.loc 1 691 0
 919 0022 0269     		ldr	r2, [r0, #16]
 920 0024 9360     		str	r3, [r2, #8]
 692:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 921              		.loc 1 692 0
 922 0026 0269     		ldr	r2, [r0, #16]
 923 0028 D360     		str	r3, [r2, #12]
 693:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 924              		.loc 1 693 0
 925 002a 4269     		ldr	r2, [r0, #20]
 926 002c 1360     		str	r3, [r2]
 694:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 927              		.loc 1 694 0
 928 002e 4269     		ldr	r2, [r0, #20]
 929 0030 5360     		str	r3, [r2, #4]
 695:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 930              		.loc 1 695 0
 931 0032 4269     		ldr	r2, [r0, #20]
 932 0034 9360     		str	r3, [r2, #8]
 696:FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 933              		.loc 1 696 0
 934 0036 4269     		ldr	r2, [r0, #20]
 935 0038 D360     		str	r3, [r2, #12]
 936 003a 7047     		bx	lr
 937              		.cfi_endproc
 938              	.LFE124:
 940              		.section	.text.FSMC_PCCARDCmd,"ax",%progbits
 941              		.align	1
 942              		.global	FSMC_PCCARDCmd
 943              		.syntax unified
 944              		.thumb
 945              		.thumb_func
 946              		.fpu softvfp
 948              	FSMC_PCCARDCmd:
 949              	.LFB125:
 697:FWLIB/src/stm32f4xx_fsmc.c **** }
 698:FWLIB/src/stm32f4xx_fsmc.c **** 
 699:FWLIB/src/stm32f4xx_fsmc.c **** /**
 700:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Enables or disables the PCCARD Memory Bank.
 701:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  NewState: new state of the PCCARD Memory Bank.  
 702:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be: ENABLE or DISABLE.
 703:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 704:FWLIB/src/stm32f4xx_fsmc.c ****   */
 705:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_PCCARDCmd(FunctionalState NewState)
 706:FWLIB/src/stm32f4xx_fsmc.c **** {
 950              		.loc 1 706 0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 0
 953              		@ frame_needed = 0, uses_anonymous_args = 0
 954              		@ link register save eliminated.
 955              	.LVL34:
 707:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 708:FWLIB/src/stm32f4xx_fsmc.c ****   
ARM GAS  /tmp/ccBbxfVV.s 			page 31


 709:FWLIB/src/stm32f4xx_fsmc.c ****   if (NewState != DISABLE)
 956              		.loc 1 709 0
 957 0000 28B9     		cbnz	r0, .L72
 710:FWLIB/src/stm32f4xx_fsmc.c ****   {
 711:FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
 712:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 713:FWLIB/src/stm32f4xx_fsmc.c ****   }
 714:FWLIB/src/stm32f4xx_fsmc.c ****   else
 715:FWLIB/src/stm32f4xx_fsmc.c ****   {
 716:FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
 717:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 958              		.loc 1 717 0
 959 0002 064A     		ldr	r2, .L73
 960 0004 1168     		ldr	r1, [r2]
 961 0006 064B     		ldr	r3, .L73+4
 962 0008 0B40     		ands	r3, r3, r1
 963 000a 1360     		str	r3, [r2]
 964 000c 7047     		bx	lr
 965              	.L72:
 712:FWLIB/src/stm32f4xx_fsmc.c ****   }
 966              		.loc 1 712 0
 967 000e 034A     		ldr	r2, .L73
 968 0010 1368     		ldr	r3, [r2]
 969 0012 43F00403 		orr	r3, r3, #4
 970 0016 1360     		str	r3, [r2]
 971 0018 7047     		bx	lr
 972              	.L74:
 973 001a 00BF     		.align	2
 974              	.L73:
 975 001c A00000A0 		.word	-1610612576
 976 0020 FBFF0F00 		.word	1048571
 977              		.cfi_endproc
 978              	.LFE125:
 980              		.section	.text.FSMC_ITConfig,"ax",%progbits
 981              		.align	1
 982              		.global	FSMC_ITConfig
 983              		.syntax unified
 984              		.thumb
 985              		.thumb_func
 986              		.fpu softvfp
 988              	FSMC_ITConfig:
 989              	.LFB126:
 718:FWLIB/src/stm32f4xx_fsmc.c ****   }
 719:FWLIB/src/stm32f4xx_fsmc.c **** }
 720:FWLIB/src/stm32f4xx_fsmc.c **** /**
 721:FWLIB/src/stm32f4xx_fsmc.c ****   * @}
 722:FWLIB/src/stm32f4xx_fsmc.c ****   */
 723:FWLIB/src/stm32f4xx_fsmc.c **** 
 724:FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC_Group4  Interrupts and flags management functions
 725:FWLIB/src/stm32f4xx_fsmc.c ****  *  @brief    Interrupts and flags management functions
 726:FWLIB/src/stm32f4xx_fsmc.c ****  *
 727:FWLIB/src/stm32f4xx_fsmc.c **** @verbatim   
 728:FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================
 729:FWLIB/src/stm32f4xx_fsmc.c ****              ##### Interrupts and flags management functions #####
 730:FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================   
 731:FWLIB/src/stm32f4xx_fsmc.c **** 
 732:FWLIB/src/stm32f4xx_fsmc.c **** @endverbatim
ARM GAS  /tmp/ccBbxfVV.s 			page 32


 733:FWLIB/src/stm32f4xx_fsmc.c ****   * @{
 734:FWLIB/src/stm32f4xx_fsmc.c ****   */
 735:FWLIB/src/stm32f4xx_fsmc.c **** 
 736:FWLIB/src/stm32f4xx_fsmc.c **** /**
 737:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Enables or disables the specified FSMC interrupts.
 738:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 739:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 740:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 741:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 742:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank4_PCCARD: FSMC Bank4 PCCARD
 743:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_IT: specifies the FSMC interrupt sources to be enabled or disabled.
 744:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be any combination of the following values:
 745:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_RisingEdge: Rising edge detection interrupt. 
 746:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_Level: Level edge detection interrupt.
 747:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
 748:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  NewState: new state of the specified FSMC interrupts.
 749:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be: ENABLE or DISABLE.
 750:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 751:FWLIB/src/stm32f4xx_fsmc.c ****   */
 752:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
 753:FWLIB/src/stm32f4xx_fsmc.c **** {
 990              		.loc 1 753 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 994              		@ link register save eliminated.
 995              	.LVL35:
 754:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
 755:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_IT(FSMC_IT));	
 756:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 757:FWLIB/src/stm32f4xx_fsmc.c ****   
 758:FWLIB/src/stm32f4xx_fsmc.c ****   if (NewState != DISABLE)
 996              		.loc 1 758 0
 997 0000 9AB1     		cbz	r2, .L76
 759:FWLIB/src/stm32f4xx_fsmc.c ****   {
 760:FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected FSMC_Bank2 interrupts */
 761:FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 998              		.loc 1 761 0
 999 0002 1028     		cmp	r0, #16
 1000 0004 07D0     		beq	.L82
 762:FWLIB/src/stm32f4xx_fsmc.c ****     {
 763:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->SR2 |= FSMC_IT;
 764:FWLIB/src/stm32f4xx_fsmc.c ****     }
 765:FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected FSMC_Bank3 interrupts */
 766:FWLIB/src/stm32f4xx_fsmc.c ****     else if (FSMC_Bank == FSMC_Bank3_NAND)
 1001              		.loc 1 766 0
 1002 0006 B0F5807F 		cmp	r0, #256
 1003 000a 09D0     		beq	.L83
 767:FWLIB/src/stm32f4xx_fsmc.c ****     {
 768:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->SR3 |= FSMC_IT;
 769:FWLIB/src/stm32f4xx_fsmc.c ****     }
 770:FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected FSMC_Bank4 interrupts */
 771:FWLIB/src/stm32f4xx_fsmc.c ****     else
 772:FWLIB/src/stm32f4xx_fsmc.c ****     {
 773:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank4->SR4 |= FSMC_IT;    
 1004              		.loc 1 773 0
 1005 000c 124A     		ldr	r2, .L86
ARM GAS  /tmp/ccBbxfVV.s 			page 33


 1006              	.LVL36:
 1007 000e 5368     		ldr	r3, [r2, #4]
 1008 0010 1943     		orrs	r1, r1, r3
 1009              	.LVL37:
 1010 0012 5160     		str	r1, [r2, #4]
 1011 0014 7047     		bx	lr
 1012              	.LVL38:
 1013              	.L82:
 763:FWLIB/src/stm32f4xx_fsmc.c ****     }
 1014              		.loc 1 763 0
 1015 0016 114A     		ldr	r2, .L86+4
 1016              	.LVL39:
 1017 0018 5368     		ldr	r3, [r2, #4]
 1018 001a 1943     		orrs	r1, r1, r3
 1019              	.LVL40:
 1020 001c 5160     		str	r1, [r2, #4]
 1021 001e 7047     		bx	lr
 1022              	.LVL41:
 1023              	.L83:
 768:FWLIB/src/stm32f4xx_fsmc.c ****     }
 1024              		.loc 1 768 0
 1025 0020 0F4A     		ldr	r2, .L86+8
 1026              	.LVL42:
 1027 0022 5368     		ldr	r3, [r2, #4]
 1028 0024 1943     		orrs	r1, r1, r3
 1029              	.LVL43:
 1030 0026 5160     		str	r1, [r2, #4]
 1031 0028 7047     		bx	lr
 1032              	.LVL44:
 1033              	.L76:
 774:FWLIB/src/stm32f4xx_fsmc.c ****     }
 775:FWLIB/src/stm32f4xx_fsmc.c ****   }
 776:FWLIB/src/stm32f4xx_fsmc.c ****   else
 777:FWLIB/src/stm32f4xx_fsmc.c ****   {
 778:FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected FSMC_Bank2 interrupts */
 779:FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 1034              		.loc 1 779 0
 1035 002a 1028     		cmp	r0, #16
 1036 002c 08D0     		beq	.L84
 780:FWLIB/src/stm32f4xx_fsmc.c ****     {
 781:FWLIB/src/stm32f4xx_fsmc.c ****       
 782:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 783:FWLIB/src/stm32f4xx_fsmc.c ****     }
 784:FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected FSMC_Bank3 interrupts */
 785:FWLIB/src/stm32f4xx_fsmc.c ****     else if (FSMC_Bank == FSMC_Bank3_NAND)
 1037              		.loc 1 785 0
 1038 002e B0F5807F 		cmp	r0, #256
 1039 0032 0BD0     		beq	.L85
 786:FWLIB/src/stm32f4xx_fsmc.c ****     {
 787:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 788:FWLIB/src/stm32f4xx_fsmc.c ****     }
 789:FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected FSMC_Bank4 interrupts */
 790:FWLIB/src/stm32f4xx_fsmc.c ****     else
 791:FWLIB/src/stm32f4xx_fsmc.c ****     {
 792:FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 1040              		.loc 1 792 0
 1041 0034 084A     		ldr	r2, .L86
ARM GAS  /tmp/ccBbxfVV.s 			page 34


 1042              	.LVL45:
 1043 0036 5368     		ldr	r3, [r2, #4]
 1044 0038 23EA0101 		bic	r1, r3, r1
 1045              	.LVL46:
 1046 003c 5160     		str	r1, [r2, #4]
 1047 003e 7047     		bx	lr
 1048              	.LVL47:
 1049              	.L84:
 782:FWLIB/src/stm32f4xx_fsmc.c ****     }
 1050              		.loc 1 782 0
 1051 0040 064A     		ldr	r2, .L86+4
 1052              	.LVL48:
 1053 0042 5368     		ldr	r3, [r2, #4]
 1054 0044 23EA0101 		bic	r1, r3, r1
 1055              	.LVL49:
 1056 0048 5160     		str	r1, [r2, #4]
 1057 004a 7047     		bx	lr
 1058              	.LVL50:
 1059              	.L85:
 787:FWLIB/src/stm32f4xx_fsmc.c ****     }
 1060              		.loc 1 787 0
 1061 004c 044A     		ldr	r2, .L86+8
 1062              	.LVL51:
 1063 004e 5368     		ldr	r3, [r2, #4]
 1064 0050 23EA0101 		bic	r1, r3, r1
 1065              	.LVL52:
 1066 0054 5160     		str	r1, [r2, #4]
 1067 0056 7047     		bx	lr
 1068              	.L87:
 1069              		.align	2
 1070              	.L86:
 1071 0058 A00000A0 		.word	-1610612576
 1072 005c 600000A0 		.word	-1610612640
 1073 0060 800000A0 		.word	-1610612608
 1074              		.cfi_endproc
 1075              	.LFE126:
 1077              		.section	.text.FSMC_GetFlagStatus,"ax",%progbits
 1078              		.align	1
 1079              		.global	FSMC_GetFlagStatus
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu softvfp
 1085              	FSMC_GetFlagStatus:
 1086              	.LFB127:
 793:FWLIB/src/stm32f4xx_fsmc.c ****     }
 794:FWLIB/src/stm32f4xx_fsmc.c ****   }
 795:FWLIB/src/stm32f4xx_fsmc.c **** }
 796:FWLIB/src/stm32f4xx_fsmc.c **** 
 797:FWLIB/src/stm32f4xx_fsmc.c **** /**
 798:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Checks whether the specified FSMC flag is set or not.
 799:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 800:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 801:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 802:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 803:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank4_PCCARD: FSMC Bank4 PCCARD
 804:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_FLAG: specifies the flag to check.
ARM GAS  /tmp/ccBbxfVV.s 			page 35


 805:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 806:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_RisingEdge: Rising edge detection Flag.
 807:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_Level: Level detection Flag.
 808:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
 809:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
 810:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval The new state of FSMC_FLAG (SET or RESET).
 811:FWLIB/src/stm32f4xx_fsmc.c ****   */
 812:FWLIB/src/stm32f4xx_fsmc.c **** FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
 813:FWLIB/src/stm32f4xx_fsmc.c **** {
 1087              		.loc 1 813 0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 0
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091              		@ link register save eliminated.
 1092              	.LVL53:
 814:FWLIB/src/stm32f4xx_fsmc.c ****   FlagStatus bitstatus = RESET;
 815:FWLIB/src/stm32f4xx_fsmc.c ****   uint32_t tmpsr = 0x00000000;
 816:FWLIB/src/stm32f4xx_fsmc.c ****   
 817:FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 818:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
 819:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
 820:FWLIB/src/stm32f4xx_fsmc.c ****   
 821:FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
 1093              		.loc 1 821 0
 1094 0000 1028     		cmp	r0, #16
 1095 0002 08D0     		beq	.L94
 822:FWLIB/src/stm32f4xx_fsmc.c ****   {
 823:FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank2->SR2;
 824:FWLIB/src/stm32f4xx_fsmc.c ****   }  
 825:FWLIB/src/stm32f4xx_fsmc.c ****   else if(FSMC_Bank == FSMC_Bank3_NAND)
 1096              		.loc 1 825 0
 1097 0004 B0F5807F 		cmp	r0, #256
 1098 0008 08D0     		beq	.L95
 826:FWLIB/src/stm32f4xx_fsmc.c ****   {
 827:FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank3->SR3;
 828:FWLIB/src/stm32f4xx_fsmc.c ****   }
 829:FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank4_PCCARD*/
 830:FWLIB/src/stm32f4xx_fsmc.c ****   else
 831:FWLIB/src/stm32f4xx_fsmc.c ****   {
 832:FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank4->SR4;
 1099              		.loc 1 832 0
 1100 000a 074B     		ldr	r3, .L97
 1101 000c 5B68     		ldr	r3, [r3, #4]
 1102              	.LVL54:
 1103              	.L90:
 833:FWLIB/src/stm32f4xx_fsmc.c ****   } 
 834:FWLIB/src/stm32f4xx_fsmc.c ****   
 835:FWLIB/src/stm32f4xx_fsmc.c ****   /* Get the flag status */
 836:FWLIB/src/stm32f4xx_fsmc.c ****   if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 1104              		.loc 1 836 0
 1105 000e 0B42     		tst	r3, r1
 1106 0010 07D1     		bne	.L96
 837:FWLIB/src/stm32f4xx_fsmc.c ****   {
 838:FWLIB/src/stm32f4xx_fsmc.c ****     bitstatus = SET;
 839:FWLIB/src/stm32f4xx_fsmc.c ****   }
 840:FWLIB/src/stm32f4xx_fsmc.c ****   else
 841:FWLIB/src/stm32f4xx_fsmc.c ****   {
ARM GAS  /tmp/ccBbxfVV.s 			page 36


 842:FWLIB/src/stm32f4xx_fsmc.c ****     bitstatus = RESET;
 1107              		.loc 1 842 0
 1108 0012 0020     		movs	r0, #0
 1109              	.LVL55:
 843:FWLIB/src/stm32f4xx_fsmc.c ****   }
 844:FWLIB/src/stm32f4xx_fsmc.c ****   /* Return the flag status */
 845:FWLIB/src/stm32f4xx_fsmc.c ****   return bitstatus;
 846:FWLIB/src/stm32f4xx_fsmc.c **** }
 1110              		.loc 1 846 0
 1111 0014 7047     		bx	lr
 1112              	.LVL56:
 1113              	.L94:
 823:FWLIB/src/stm32f4xx_fsmc.c ****   }  
 1114              		.loc 1 823 0
 1115 0016 054B     		ldr	r3, .L97+4
 1116 0018 5B68     		ldr	r3, [r3, #4]
 1117              	.LVL57:
 1118 001a F8E7     		b	.L90
 1119              	.LVL58:
 1120              	.L95:
 827:FWLIB/src/stm32f4xx_fsmc.c ****   }
 1121              		.loc 1 827 0
 1122 001c 044B     		ldr	r3, .L97+8
 1123 001e 5B68     		ldr	r3, [r3, #4]
 1124              	.LVL59:
 1125 0020 F5E7     		b	.L90
 1126              	.L96:
 838:FWLIB/src/stm32f4xx_fsmc.c ****   }
 1127              		.loc 1 838 0
 1128 0022 0120     		movs	r0, #1
 1129              	.LVL60:
 1130 0024 7047     		bx	lr
 1131              	.L98:
 1132 0026 00BF     		.align	2
 1133              	.L97:
 1134 0028 A00000A0 		.word	-1610612576
 1135 002c 600000A0 		.word	-1610612640
 1136 0030 800000A0 		.word	-1610612608
 1137              		.cfi_endproc
 1138              	.LFE127:
 1140              		.section	.text.FSMC_ClearFlag,"ax",%progbits
 1141              		.align	1
 1142              		.global	FSMC_ClearFlag
 1143              		.syntax unified
 1144              		.thumb
 1145              		.thumb_func
 1146              		.fpu softvfp
 1148              	FSMC_ClearFlag:
 1149              	.LFB128:
 847:FWLIB/src/stm32f4xx_fsmc.c **** 
 848:FWLIB/src/stm32f4xx_fsmc.c **** /**
 849:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Clears the FSMC's pending flags.
 850:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 851:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 852:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 853:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 854:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank4_PCCARD: FSMC Bank4 PCCARD
ARM GAS  /tmp/ccBbxfVV.s 			page 37


 855:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_FLAG: specifies the flag to clear.
 856:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be any combination of the following values:
 857:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_RisingEdge: Rising edge detection Flag.
 858:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_Level: Level detection Flag.
 859:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
 860:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 861:FWLIB/src/stm32f4xx_fsmc.c ****   */
 862:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
 863:FWLIB/src/stm32f4xx_fsmc.c **** {
 1150              		.loc 1 863 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 0
 1153              		@ frame_needed = 0, uses_anonymous_args = 0
 1154              		@ link register save eliminated.
 1155              	.LVL61:
 864:FWLIB/src/stm32f4xx_fsmc.c ****  /* Check the parameters */
 865:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
 866:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
 867:FWLIB/src/stm32f4xx_fsmc.c ****     
 868:FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
 1156              		.loc 1 868 0
 1157 0000 1028     		cmp	r0, #16
 1158 0002 08D0     		beq	.L103
 869:FWLIB/src/stm32f4xx_fsmc.c ****   {
 870:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 871:FWLIB/src/stm32f4xx_fsmc.c ****   }  
 872:FWLIB/src/stm32f4xx_fsmc.c ****   else if(FSMC_Bank == FSMC_Bank3_NAND)
 1159              		.loc 1 872 0
 1160 0004 B0F5807F 		cmp	r0, #256
 1161 0008 0BD0     		beq	.L104
 873:FWLIB/src/stm32f4xx_fsmc.c ****   {
 874:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 875:FWLIB/src/stm32f4xx_fsmc.c ****   }
 876:FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank4_PCCARD*/
 877:FWLIB/src/stm32f4xx_fsmc.c ****   else
 878:FWLIB/src/stm32f4xx_fsmc.c ****   {
 879:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 1162              		.loc 1 879 0
 1163 000a 094A     		ldr	r2, .L105
 1164 000c 5368     		ldr	r3, [r2, #4]
 1165 000e 23EA0101 		bic	r1, r3, r1
 1166              	.LVL62:
 1167 0012 5160     		str	r1, [r2, #4]
 1168 0014 7047     		bx	lr
 1169              	.LVL63:
 1170              	.L103:
 870:FWLIB/src/stm32f4xx_fsmc.c ****   }  
 1171              		.loc 1 870 0
 1172 0016 074A     		ldr	r2, .L105+4
 1173 0018 5368     		ldr	r3, [r2, #4]
 1174 001a 23EA0101 		bic	r1, r3, r1
 1175              	.LVL64:
 1176 001e 5160     		str	r1, [r2, #4]
 1177 0020 7047     		bx	lr
 1178              	.LVL65:
 1179              	.L104:
 874:FWLIB/src/stm32f4xx_fsmc.c ****   }
ARM GAS  /tmp/ccBbxfVV.s 			page 38


 1180              		.loc 1 874 0
 1181 0022 054A     		ldr	r2, .L105+8
 1182 0024 5368     		ldr	r3, [r2, #4]
 1183 0026 23EA0101 		bic	r1, r3, r1
 1184              	.LVL66:
 1185 002a 5160     		str	r1, [r2, #4]
 1186 002c 7047     		bx	lr
 1187              	.L106:
 1188 002e 00BF     		.align	2
 1189              	.L105:
 1190 0030 A00000A0 		.word	-1610612576
 1191 0034 600000A0 		.word	-1610612640
 1192 0038 800000A0 		.word	-1610612608
 1193              		.cfi_endproc
 1194              	.LFE128:
 1196              		.section	.text.FSMC_GetITStatus,"ax",%progbits
 1197              		.align	1
 1198              		.global	FSMC_GetITStatus
 1199              		.syntax unified
 1200              		.thumb
 1201              		.thumb_func
 1202              		.fpu softvfp
 1204              	FSMC_GetITStatus:
 1205              	.LFB129:
 880:FWLIB/src/stm32f4xx_fsmc.c ****   }
 881:FWLIB/src/stm32f4xx_fsmc.c **** }
 882:FWLIB/src/stm32f4xx_fsmc.c **** 
 883:FWLIB/src/stm32f4xx_fsmc.c **** /**
 884:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Checks whether the specified FSMC interrupt has occurred or not.
 885:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 886:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 887:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 888:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 889:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank4_PCCARD: FSMC Bank4 PCCARD
 890:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_IT: specifies the FSMC interrupt source to check.
 891:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 892:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_RisingEdge: Rising edge detection interrupt. 
 893:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_Level: Level edge detection interrupt.
 894:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
 895:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval The new state of FSMC_IT (SET or RESET).
 896:FWLIB/src/stm32f4xx_fsmc.c ****   */
 897:FWLIB/src/stm32f4xx_fsmc.c **** ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
 898:FWLIB/src/stm32f4xx_fsmc.c **** {
 1206              		.loc 1 898 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210              		@ link register save eliminated.
 1211              	.LVL67:
 899:FWLIB/src/stm32f4xx_fsmc.c ****   ITStatus bitstatus = RESET;
 900:FWLIB/src/stm32f4xx_fsmc.c ****   uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 901:FWLIB/src/stm32f4xx_fsmc.c ****   
 902:FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 903:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
 904:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_GET_IT(FSMC_IT));
 905:FWLIB/src/stm32f4xx_fsmc.c ****   
 906:FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
ARM GAS  /tmp/ccBbxfVV.s 			page 39


 1212              		.loc 1 906 0
 1213 0000 1028     		cmp	r0, #16
 1214 0002 0BD0     		beq	.L114
 907:FWLIB/src/stm32f4xx_fsmc.c ****   {
 908:FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank2->SR2;
 909:FWLIB/src/stm32f4xx_fsmc.c ****   }  
 910:FWLIB/src/stm32f4xx_fsmc.c ****   else if(FSMC_Bank == FSMC_Bank3_NAND)
 1215              		.loc 1 910 0
 1216 0004 B0F5807F 		cmp	r0, #256
 1217 0008 0BD0     		beq	.L115
 911:FWLIB/src/stm32f4xx_fsmc.c ****   {
 912:FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank3->SR3;
 913:FWLIB/src/stm32f4xx_fsmc.c ****   }
 914:FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank4_PCCARD*/
 915:FWLIB/src/stm32f4xx_fsmc.c ****   else
 916:FWLIB/src/stm32f4xx_fsmc.c ****   {
 917:FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank4->SR4;
 1218              		.loc 1 917 0
 1219 000a 094B     		ldr	r3, .L116
 1220 000c 5B68     		ldr	r3, [r3, #4]
 1221              	.LVL68:
 1222              	.L109:
 918:FWLIB/src/stm32f4xx_fsmc.c ****   } 
 919:FWLIB/src/stm32f4xx_fsmc.c ****   
 920:FWLIB/src/stm32f4xx_fsmc.c ****   itstatus = tmpsr & FSMC_IT;
 921:FWLIB/src/stm32f4xx_fsmc.c ****   
 922:FWLIB/src/stm32f4xx_fsmc.c ****   itenable = tmpsr & (FSMC_IT >> 3);
 1223              		.loc 1 922 0
 1224 000e 03EAD102 		and	r2, r3, r1, lsr #3
 1225              	.LVL69:
 923:FWLIB/src/stm32f4xx_fsmc.c ****   if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 1226              		.loc 1 923 0
 1227 0012 0B42     		tst	r3, r1
 1228 0014 08D0     		beq	.L112
 1229              		.loc 1 923 0 is_stmt 0 discriminator 1
 1230 0016 4AB9     		cbnz	r2, .L113
 924:FWLIB/src/stm32f4xx_fsmc.c ****   {
 925:FWLIB/src/stm32f4xx_fsmc.c ****     bitstatus = SET;
 926:FWLIB/src/stm32f4xx_fsmc.c ****   }
 927:FWLIB/src/stm32f4xx_fsmc.c ****   else
 928:FWLIB/src/stm32f4xx_fsmc.c ****   {
 929:FWLIB/src/stm32f4xx_fsmc.c ****     bitstatus = RESET;
 1231              		.loc 1 929 0 is_stmt 1
 1232 0018 0020     		movs	r0, #0
 1233              	.LVL70:
 1234 001a 7047     		bx	lr
 1235              	.LVL71:
 1236              	.L114:
 908:FWLIB/src/stm32f4xx_fsmc.c ****   }  
 1237              		.loc 1 908 0
 1238 001c 054B     		ldr	r3, .L116+4
 1239 001e 5B68     		ldr	r3, [r3, #4]
 1240              	.LVL72:
 1241 0020 F5E7     		b	.L109
 1242              	.LVL73:
 1243              	.L115:
 912:FWLIB/src/stm32f4xx_fsmc.c ****   }
ARM GAS  /tmp/ccBbxfVV.s 			page 40


 1244              		.loc 1 912 0
 1245 0022 054B     		ldr	r3, .L116+8
 1246 0024 5B68     		ldr	r3, [r3, #4]
 1247              	.LVL74:
 1248 0026 F2E7     		b	.L109
 1249              	.LVL75:
 1250              	.L112:
 1251              		.loc 1 929 0
 1252 0028 0020     		movs	r0, #0
 1253              	.LVL76:
 1254 002a 7047     		bx	lr
 1255              	.LVL77:
 1256              	.L113:
 925:FWLIB/src/stm32f4xx_fsmc.c ****   }
 1257              		.loc 1 925 0
 1258 002c 0120     		movs	r0, #1
 1259              	.LVL78:
 930:FWLIB/src/stm32f4xx_fsmc.c ****   }
 931:FWLIB/src/stm32f4xx_fsmc.c ****   return bitstatus; 
 932:FWLIB/src/stm32f4xx_fsmc.c **** }
 1260              		.loc 1 932 0
 1261 002e 7047     		bx	lr
 1262              	.L117:
 1263              		.align	2
 1264              	.L116:
 1265 0030 A00000A0 		.word	-1610612576
 1266 0034 600000A0 		.word	-1610612640
 1267 0038 800000A0 		.word	-1610612608
 1268              		.cfi_endproc
 1269              	.LFE129:
 1271              		.section	.text.FSMC_ClearITPendingBit,"ax",%progbits
 1272              		.align	1
 1273              		.global	FSMC_ClearITPendingBit
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1277              		.fpu softvfp
 1279              	FSMC_ClearITPendingBit:
 1280              	.LFB130:
 933:FWLIB/src/stm32f4xx_fsmc.c **** 
 934:FWLIB/src/stm32f4xx_fsmc.c **** /**
 935:FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Clears the FSMC's interrupt pending bits.
 936:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 937:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 938:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 939:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 940:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank4_PCCARD: FSMC Bank4 PCCARD
 941:FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_IT: specifies the interrupt pending bit to clear.
 942:FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be any combination of the following values:
 943:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_RisingEdge: Rising edge detection interrupt. 
 944:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_Level: Level edge detection interrupt.
 945:FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
 946:FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 947:FWLIB/src/stm32f4xx_fsmc.c ****   */
 948:FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
 949:FWLIB/src/stm32f4xx_fsmc.c **** {
 1281              		.loc 1 949 0
ARM GAS  /tmp/ccBbxfVV.s 			page 41


 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 0
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
 1285              		@ link register save eliminated.
 1286              	.LVL79:
 950:FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 951:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
 952:FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_IT(FSMC_IT));
 953:FWLIB/src/stm32f4xx_fsmc.c ****     
 954:FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
 1287              		.loc 1 954 0
 1288 0000 1028     		cmp	r0, #16
 1289 0002 08D0     		beq	.L122
 955:FWLIB/src/stm32f4xx_fsmc.c ****   {
 956:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 957:FWLIB/src/stm32f4xx_fsmc.c ****   }  
 958:FWLIB/src/stm32f4xx_fsmc.c ****   else if(FSMC_Bank == FSMC_Bank3_NAND)
 1290              		.loc 1 958 0
 1291 0004 B0F5807F 		cmp	r0, #256
 1292 0008 0BD0     		beq	.L123
 959:FWLIB/src/stm32f4xx_fsmc.c ****   {
 960:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 961:FWLIB/src/stm32f4xx_fsmc.c ****   }
 962:FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank4_PCCARD*/
 963:FWLIB/src/stm32f4xx_fsmc.c ****   else
 964:FWLIB/src/stm32f4xx_fsmc.c ****   {
 965:FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 1293              		.loc 1 965 0
 1294 000a 094A     		ldr	r2, .L124
 1295 000c 5368     		ldr	r3, [r2, #4]
 1296 000e 23EAD101 		bic	r1, r3, r1, lsr #3
 1297              	.LVL80:
 1298 0012 5160     		str	r1, [r2, #4]
 1299 0014 7047     		bx	lr
 1300              	.LVL81:
 1301              	.L122:
 956:FWLIB/src/stm32f4xx_fsmc.c ****   }  
 1302              		.loc 1 956 0
 1303 0016 074A     		ldr	r2, .L124+4
 1304 0018 5368     		ldr	r3, [r2, #4]
 1305 001a 23EAD101 		bic	r1, r3, r1, lsr #3
 1306              	.LVL82:
 1307 001e 5160     		str	r1, [r2, #4]
 1308 0020 7047     		bx	lr
 1309              	.LVL83:
 1310              	.L123:
 960:FWLIB/src/stm32f4xx_fsmc.c ****   }
 1311              		.loc 1 960 0
 1312 0022 054A     		ldr	r2, .L124+8
 1313 0024 5368     		ldr	r3, [r2, #4]
 1314 0026 23EAD101 		bic	r1, r3, r1, lsr #3
 1315              	.LVL84:
 1316 002a 5160     		str	r1, [r2, #4]
 1317 002c 7047     		bx	lr
 1318              	.L125:
 1319 002e 00BF     		.align	2
 1320              	.L124:
ARM GAS  /tmp/ccBbxfVV.s 			page 42


 1321 0030 A00000A0 		.word	-1610612576
 1322 0034 600000A0 		.word	-1610612640
 1323 0038 800000A0 		.word	-1610612608
 1324              		.cfi_endproc
 1325              	.LFE130:
 1327              		.global	FSMC_DefaultTimingStruct
 1328              		.section	.rodata.FSMC_DefaultTimingStruct,"a",%progbits
 1329              		.align	2
 1330              		.set	.LANCHOR0,. + 0
 1333              	FSMC_DefaultTimingStruct:
 1334 0000 0F000000 		.word	15
 1335 0004 0F000000 		.word	15
 1336 0008 FF000000 		.word	255
 1337 000c 0F000000 		.word	15
 1338 0010 0F000000 		.word	15
 1339 0014 0F000000 		.word	15
 1340 0018 00000000 		.word	0
 1341              		.text
 1342              	.Letext0:
 1343              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1344              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1345              		.file 4 "CORE/core_cm4.h"
 1346              		.file 5 "USER/system_stm32f4xx.h"
 1347              		.file 6 "USER/stm32f4xx.h"
 1348              		.file 7 "FWLIB/inc/stm32f4xx_fsmc.h"
ARM GAS  /tmp/ccBbxfVV.s 			page 43


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_fsmc.c
     /tmp/ccBbxfVV.s:16     .text.FSMC_NORSRAMDeInit:0000000000000000 $t
     /tmp/ccBbxfVV.s:23     .text.FSMC_NORSRAMDeInit:0000000000000000 FSMC_NORSRAMDeInit
     /tmp/ccBbxfVV.s:61     .text.FSMC_NORSRAMInit:0000000000000000 $t
     /tmp/ccBbxfVV.s:68     .text.FSMC_NORSRAMInit:0000000000000000 FSMC_NORSRAMInit
     /tmp/ccBbxfVV.s:232    .text.FSMC_NORSRAMInit:00000000000000c8 $d
     /tmp/ccBbxfVV.s:237    .text.FSMC_NORSRAMStructInit:0000000000000000 $t
     /tmp/ccBbxfVV.s:244    .text.FSMC_NORSRAMStructInit:0000000000000000 FSMC_NORSRAMStructInit
     /tmp/ccBbxfVV.s:291    .text.FSMC_NORSRAMStructInit:0000000000000030 $d
     /tmp/ccBbxfVV.s:296    .text.FSMC_NORSRAMCmd:0000000000000000 $t
     /tmp/ccBbxfVV.s:303    .text.FSMC_NORSRAMCmd:0000000000000000 FSMC_NORSRAMCmd
     /tmp/ccBbxfVV.s:332    .text.FSMC_NORSRAMCmd:0000000000000028 $d
     /tmp/ccBbxfVV.s:337    .text.FSMC_NANDDeInit:0000000000000000 $t
     /tmp/ccBbxfVV.s:344    .text.FSMC_NANDDeInit:0000000000000000 FSMC_NANDDeInit
     /tmp/ccBbxfVV.s:385    .text.FSMC_NANDDeInit:000000000000002c $d
     /tmp/ccBbxfVV.s:391    .text.FSMC_NANDInit:0000000000000000 $t
     /tmp/ccBbxfVV.s:398    .text.FSMC_NANDInit:0000000000000000 FSMC_NANDInit
     /tmp/ccBbxfVV.s:504    .text.FSMC_NANDInit:0000000000000068 $d
     /tmp/ccBbxfVV.s:510    .text.FSMC_NANDStructInit:0000000000000000 $t
     /tmp/ccBbxfVV.s:517    .text.FSMC_NANDStructInit:0000000000000000 FSMC_NANDStructInit
     /tmp/ccBbxfVV.s:571    .text.FSMC_NANDCmd:0000000000000000 $t
     /tmp/ccBbxfVV.s:578    .text.FSMC_NANDCmd:0000000000000000 FSMC_NANDCmd
     /tmp/ccBbxfVV.s:629    .text.FSMC_NANDCmd:000000000000003c $d
     /tmp/ccBbxfVV.s:636    .text.FSMC_NANDECCCmd:0000000000000000 $t
     /tmp/ccBbxfVV.s:643    .text.FSMC_NANDECCCmd:0000000000000000 FSMC_NANDECCCmd
     /tmp/ccBbxfVV.s:694    .text.FSMC_NANDECCCmd:000000000000003c $d
     /tmp/ccBbxfVV.s:701    .text.FSMC_GetECC:0000000000000000 $t
     /tmp/ccBbxfVV.s:708    .text.FSMC_GetECC:0000000000000000 FSMC_GetECC
     /tmp/ccBbxfVV.s:735    .text.FSMC_GetECC:0000000000000010 $d
     /tmp/ccBbxfVV.s:741    .text.FSMC_PCCARDDeInit:0000000000000000 $t
     /tmp/ccBbxfVV.s:748    .text.FSMC_PCCARDDeInit:0000000000000000 FSMC_PCCARDDeInit
     /tmp/ccBbxfVV.s:773    .text.FSMC_PCCARDDeInit:0000000000000018 $d
     /tmp/ccBbxfVV.s:778    .text.FSMC_PCCARDInit:0000000000000000 $t
     /tmp/ccBbxfVV.s:785    .text.FSMC_PCCARDInit:0000000000000000 FSMC_PCCARDInit
     /tmp/ccBbxfVV.s:872    .text.FSMC_PCCARDInit:0000000000000064 $d
     /tmp/ccBbxfVV.s:877    .text.FSMC_PCCARDStructInit:0000000000000000 $t
     /tmp/ccBbxfVV.s:884    .text.FSMC_PCCARDStructInit:0000000000000000 FSMC_PCCARDStructInit
     /tmp/ccBbxfVV.s:941    .text.FSMC_PCCARDCmd:0000000000000000 $t
     /tmp/ccBbxfVV.s:948    .text.FSMC_PCCARDCmd:0000000000000000 FSMC_PCCARDCmd
     /tmp/ccBbxfVV.s:975    .text.FSMC_PCCARDCmd:000000000000001c $d
     /tmp/ccBbxfVV.s:981    .text.FSMC_ITConfig:0000000000000000 $t
     /tmp/ccBbxfVV.s:988    .text.FSMC_ITConfig:0000000000000000 FSMC_ITConfig
     /tmp/ccBbxfVV.s:1071   .text.FSMC_ITConfig:0000000000000058 $d
     /tmp/ccBbxfVV.s:1078   .text.FSMC_GetFlagStatus:0000000000000000 $t
     /tmp/ccBbxfVV.s:1085   .text.FSMC_GetFlagStatus:0000000000000000 FSMC_GetFlagStatus
     /tmp/ccBbxfVV.s:1134   .text.FSMC_GetFlagStatus:0000000000000028 $d
     /tmp/ccBbxfVV.s:1141   .text.FSMC_ClearFlag:0000000000000000 $t
     /tmp/ccBbxfVV.s:1148   .text.FSMC_ClearFlag:0000000000000000 FSMC_ClearFlag
     /tmp/ccBbxfVV.s:1190   .text.FSMC_ClearFlag:0000000000000030 $d
     /tmp/ccBbxfVV.s:1197   .text.FSMC_GetITStatus:0000000000000000 $t
     /tmp/ccBbxfVV.s:1204   .text.FSMC_GetITStatus:0000000000000000 FSMC_GetITStatus
     /tmp/ccBbxfVV.s:1265   .text.FSMC_GetITStatus:0000000000000030 $d
     /tmp/ccBbxfVV.s:1272   .text.FSMC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccBbxfVV.s:1279   .text.FSMC_ClearITPendingBit:0000000000000000 FSMC_ClearITPendingBit
     /tmp/ccBbxfVV.s:1321   .text.FSMC_ClearITPendingBit:0000000000000030 $d
     /tmp/ccBbxfVV.s:1333   .rodata.FSMC_DefaultTimingStruct:0000000000000000 FSMC_DefaultTimingStruct
ARM GAS  /tmp/ccBbxfVV.s 			page 44


     /tmp/ccBbxfVV.s:1329   .rodata.FSMC_DefaultTimingStruct:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
