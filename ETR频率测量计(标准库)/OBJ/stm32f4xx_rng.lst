ARM GAS  /tmp/ccQ9I2EZ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f4xx_rng.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.RNG_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	RNG_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	RNG_DeInit:
  24              	.LFB112:
  25              		.file 1 "FWLIB/src/stm32f4xx_rng.c"
   1:FWLIB/src/stm32f4xx_rng.c **** /**
   2:FWLIB/src/stm32f4xx_rng.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_rng.c ****   * @file    stm32f4xx_rng.c
   4:FWLIB/src/stm32f4xx_rng.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_rng.c ****   * @version V1.4.0
   6:FWLIB/src/stm32f4xx_rng.c ****   * @date    04-August-2014
   7:FWLIB/src/stm32f4xx_rng.c ****   * @brief This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_rng.c ****   *          functionalities of the Random Number Generator (RNG) peripheral:           
   9:FWLIB/src/stm32f4xx_rng.c ****   *           + Initialization and Configuration 
  10:FWLIB/src/stm32f4xx_rng.c ****   *           + Get 32 bit Random number      
  11:FWLIB/src/stm32f4xx_rng.c ****   *           + Interrupts and flags management       
  12:FWLIB/src/stm32f4xx_rng.c ****   *         
  13:FWLIB/src/stm32f4xx_rng.c **** @verbatim
  14:FWLIB/src/stm32f4xx_rng.c ****                                  
  15:FWLIB/src/stm32f4xx_rng.c ****  ===================================================================      
  16:FWLIB/src/stm32f4xx_rng.c ****                  ##### How to use this driver #####
  17:FWLIB/src/stm32f4xx_rng.c ****  ===================================================================          
  18:FWLIB/src/stm32f4xx_rng.c ****  [..]
  19:FWLIB/src/stm32f4xx_rng.c ****    (#) Enable The RNG controller clock using 
  20:FWLIB/src/stm32f4xx_rng.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
  21:FWLIB/src/stm32f4xx_rng.c ****                 
  22:FWLIB/src/stm32f4xx_rng.c ****    (#) Activate the RNG peripheral using RNG_Cmd() function.
  23:FWLIB/src/stm32f4xx_rng.c ****             
  24:FWLIB/src/stm32f4xx_rng.c ****    (#) Wait until the 32 bit Random number Generator contains a valid  random data
  25:FWLIB/src/stm32f4xx_rng.c ****       (using polling/interrupt mode). For more details, refer to "Interrupts and 
  26:FWLIB/src/stm32f4xx_rng.c ****       flags management functions" module description.
  27:FWLIB/src/stm32f4xx_rng.c ****              
  28:FWLIB/src/stm32f4xx_rng.c ****    (#) Get the 32 bit Random number using RNG_GetRandomNumber() function
  29:FWLIB/src/stm32f4xx_rng.c ****             
  30:FWLIB/src/stm32f4xx_rng.c ****    (#) To get another 32 bit Random number, go to step 3.       
  31:FWLIB/src/stm32f4xx_rng.c ****          
  32:FWLIB/src/stm32f4xx_rng.c ****                 
  33:FWLIB/src/stm32f4xx_rng.c **** @endverbatim
ARM GAS  /tmp/ccQ9I2EZ.s 			page 2


  34:FWLIB/src/stm32f4xx_rng.c ****   *         
  35:FWLIB/src/stm32f4xx_rng.c ****   ******************************************************************************
  36:FWLIB/src/stm32f4xx_rng.c ****   * @attention
  37:FWLIB/src/stm32f4xx_rng.c ****   *
  38:FWLIB/src/stm32f4xx_rng.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  39:FWLIB/src/stm32f4xx_rng.c ****   *
  40:FWLIB/src/stm32f4xx_rng.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  41:FWLIB/src/stm32f4xx_rng.c ****   * You may not use this file except in compliance with the License.
  42:FWLIB/src/stm32f4xx_rng.c ****   * You may obtain a copy of the License at:
  43:FWLIB/src/stm32f4xx_rng.c ****   *
  44:FWLIB/src/stm32f4xx_rng.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  45:FWLIB/src/stm32f4xx_rng.c ****   *
  46:FWLIB/src/stm32f4xx_rng.c ****   * Unless required by applicable law or agreed to in writing, software 
  47:FWLIB/src/stm32f4xx_rng.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  48:FWLIB/src/stm32f4xx_rng.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  49:FWLIB/src/stm32f4xx_rng.c ****   * See the License for the specific language governing permissions and
  50:FWLIB/src/stm32f4xx_rng.c ****   * limitations under the License.
  51:FWLIB/src/stm32f4xx_rng.c ****   *
  52:FWLIB/src/stm32f4xx_rng.c ****   ******************************************************************************  
  53:FWLIB/src/stm32f4xx_rng.c ****   */
  54:FWLIB/src/stm32f4xx_rng.c **** 
  55:FWLIB/src/stm32f4xx_rng.c **** /* Includes ------------------------------------------------------------------*/
  56:FWLIB/src/stm32f4xx_rng.c **** #include "stm32f4xx_rng.h"
  57:FWLIB/src/stm32f4xx_rng.c **** #include "stm32f4xx_rcc.h"
  58:FWLIB/src/stm32f4xx_rng.c **** 
  59:FWLIB/src/stm32f4xx_rng.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  60:FWLIB/src/stm32f4xx_rng.c ****   * @{
  61:FWLIB/src/stm32f4xx_rng.c ****   */
  62:FWLIB/src/stm32f4xx_rng.c **** 
  63:FWLIB/src/stm32f4xx_rng.c **** /** @defgroup RNG 
  64:FWLIB/src/stm32f4xx_rng.c ****   * @brief RNG driver modules
  65:FWLIB/src/stm32f4xx_rng.c ****   * @{
  66:FWLIB/src/stm32f4xx_rng.c ****   */ 
  67:FWLIB/src/stm32f4xx_rng.c **** 
  68:FWLIB/src/stm32f4xx_rng.c **** /* Private typedef -----------------------------------------------------------*/
  69:FWLIB/src/stm32f4xx_rng.c **** /* Private define ------------------------------------------------------------*/
  70:FWLIB/src/stm32f4xx_rng.c **** /* Private macro -------------------------------------------------------------*/
  71:FWLIB/src/stm32f4xx_rng.c **** /* Private variables ---------------------------------------------------------*/
  72:FWLIB/src/stm32f4xx_rng.c **** /* Private function prototypes -----------------------------------------------*/
  73:FWLIB/src/stm32f4xx_rng.c **** /* Private functions ---------------------------------------------------------*/
  74:FWLIB/src/stm32f4xx_rng.c **** 
  75:FWLIB/src/stm32f4xx_rng.c **** /** @defgroup RNG_Private_Functions
  76:FWLIB/src/stm32f4xx_rng.c ****   * @{
  77:FWLIB/src/stm32f4xx_rng.c ****   */ 
  78:FWLIB/src/stm32f4xx_rng.c **** 
  79:FWLIB/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group1 Initialization and Configuration functions
  80:FWLIB/src/stm32f4xx_rng.c ****  *  @brief    Initialization and Configuration functions 
  81:FWLIB/src/stm32f4xx_rng.c ****  *
  82:FWLIB/src/stm32f4xx_rng.c **** @verbatim    
  83:FWLIB/src/stm32f4xx_rng.c ****  ===============================================================================
  84:FWLIB/src/stm32f4xx_rng.c ****              ##### Initialization and Configuration functions #####
  85:FWLIB/src/stm32f4xx_rng.c ****  ===============================================================================  
  86:FWLIB/src/stm32f4xx_rng.c ****  [..] This section provides functions allowing to 
  87:FWLIB/src/stm32f4xx_rng.c ****    (+) Initialize the RNG peripheral
  88:FWLIB/src/stm32f4xx_rng.c ****    (+) Enable or disable the RNG peripheral
  89:FWLIB/src/stm32f4xx_rng.c ****    
  90:FWLIB/src/stm32f4xx_rng.c **** @endverbatim
ARM GAS  /tmp/ccQ9I2EZ.s 			page 3


  91:FWLIB/src/stm32f4xx_rng.c ****   * @{
  92:FWLIB/src/stm32f4xx_rng.c ****   */
  93:FWLIB/src/stm32f4xx_rng.c **** 
  94:FWLIB/src/stm32f4xx_rng.c **** /**
  95:FWLIB/src/stm32f4xx_rng.c ****   * @brief  De-initializes the RNG peripheral registers to their default reset values.
  96:FWLIB/src/stm32f4xx_rng.c ****   * @param  None
  97:FWLIB/src/stm32f4xx_rng.c ****   * @retval None
  98:FWLIB/src/stm32f4xx_rng.c ****   */
  99:FWLIB/src/stm32f4xx_rng.c **** void RNG_DeInit(void)
 100:FWLIB/src/stm32f4xx_rng.c **** {
  26              		.loc 1 100 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 08B5     		push	{r3, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
 101:FWLIB/src/stm32f4xx_rng.c ****   /* Enable RNG reset state */
 102:FWLIB/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
  35              		.loc 1 102 0
  36 0002 0121     		movs	r1, #1
  37 0004 4020     		movs	r0, #64
  38 0006 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  39              	.LVL0:
 103:FWLIB/src/stm32f4xx_rng.c **** 
 104:FWLIB/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
 105:FWLIB/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
  40              		.loc 1 105 0
  41 000a 0021     		movs	r1, #0
  42 000c 4020     		movs	r0, #64
  43 000e FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  44              	.LVL1:
  45 0012 08BD     		pop	{r3, pc}
  46              		.cfi_endproc
  47              	.LFE112:
  49              		.section	.text.RNG_Cmd,"ax",%progbits
  50              		.align	1
  51              		.global	RNG_Cmd
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  55              		.fpu softvfp
  57              	RNG_Cmd:
  58              	.LFB113:
 106:FWLIB/src/stm32f4xx_rng.c **** }
 107:FWLIB/src/stm32f4xx_rng.c **** 
 108:FWLIB/src/stm32f4xx_rng.c **** /**
 109:FWLIB/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG peripheral.
 110:FWLIB/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG peripheral.
 111:FWLIB/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 112:FWLIB/src/stm32f4xx_rng.c ****   * @retval None
 113:FWLIB/src/stm32f4xx_rng.c ****   */
 114:FWLIB/src/stm32f4xx_rng.c **** void RNG_Cmd(FunctionalState NewState)
 115:FWLIB/src/stm32f4xx_rng.c **** {
  59              		.loc 1 115 0
ARM GAS  /tmp/ccQ9I2EZ.s 			page 4


  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64              	.LVL2:
 116:FWLIB/src/stm32f4xx_rng.c ****   /* Check the parameters */
 117:FWLIB/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 118:FWLIB/src/stm32f4xx_rng.c **** 
 119:FWLIB/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
  65              		.loc 1 119 0
  66 0000 28B9     		cbnz	r0, .L6
 120:FWLIB/src/stm32f4xx_rng.c ****   {
 121:FWLIB/src/stm32f4xx_rng.c ****     /* Enable the RNG */
 122:FWLIB/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_RNGEN;
 123:FWLIB/src/stm32f4xx_rng.c ****   }
 124:FWLIB/src/stm32f4xx_rng.c ****   else
 125:FWLIB/src/stm32f4xx_rng.c ****   {
 126:FWLIB/src/stm32f4xx_rng.c ****     /* Disable the RNG */
 127:FWLIB/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_RNGEN;
  67              		.loc 1 127 0
  68 0002 064A     		ldr	r2, .L7
  69 0004 1368     		ldr	r3, [r2]
  70 0006 23F00403 		bic	r3, r3, #4
  71 000a 1360     		str	r3, [r2]
  72 000c 7047     		bx	lr
  73              	.L6:
 122:FWLIB/src/stm32f4xx_rng.c ****   }
  74              		.loc 1 122 0
  75 000e 034A     		ldr	r2, .L7
  76 0010 1368     		ldr	r3, [r2]
  77 0012 43F00403 		orr	r3, r3, #4
  78 0016 1360     		str	r3, [r2]
  79 0018 7047     		bx	lr
  80              	.L8:
  81 001a 00BF     		.align	2
  82              	.L7:
  83 001c 00080650 		.word	1342572544
  84              		.cfi_endproc
  85              	.LFE113:
  87              		.section	.text.RNG_GetRandomNumber,"ax",%progbits
  88              		.align	1
  89              		.global	RNG_GetRandomNumber
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu softvfp
  95              	RNG_GetRandomNumber:
  96              	.LFB114:
 128:FWLIB/src/stm32f4xx_rng.c ****   }
 129:FWLIB/src/stm32f4xx_rng.c **** }
 130:FWLIB/src/stm32f4xx_rng.c **** /**
 131:FWLIB/src/stm32f4xx_rng.c ****   * @}
 132:FWLIB/src/stm32f4xx_rng.c ****   */
 133:FWLIB/src/stm32f4xx_rng.c **** 
 134:FWLIB/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group2 Get 32 bit Random number function
 135:FWLIB/src/stm32f4xx_rng.c ****  *  @brief    Get 32 bit Random number function 
 136:FWLIB/src/stm32f4xx_rng.c ****  *
ARM GAS  /tmp/ccQ9I2EZ.s 			page 5


 137:FWLIB/src/stm32f4xx_rng.c **** 
 138:FWLIB/src/stm32f4xx_rng.c **** @verbatim    
 139:FWLIB/src/stm32f4xx_rng.c ****  ===============================================================================
 140:FWLIB/src/stm32f4xx_rng.c ****                  ##### Get 32 bit Random number function #####
 141:FWLIB/src/stm32f4xx_rng.c ****  ===============================================================================  
 142:FWLIB/src/stm32f4xx_rng.c ****  [..] This section provides a function allowing to get the 32 bit Random number  
 143:FWLIB/src/stm32f4xx_rng.c ****   
 144:FWLIB/src/stm32f4xx_rng.c ****    (@)  Before to call this function you have to wait till DRDY flag is set,
 145:FWLIB/src/stm32f4xx_rng.c ****         using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
 146:FWLIB/src/stm32f4xx_rng.c ****    
 147:FWLIB/src/stm32f4xx_rng.c **** @endverbatim
 148:FWLIB/src/stm32f4xx_rng.c ****   * @{
 149:FWLIB/src/stm32f4xx_rng.c ****   */
 150:FWLIB/src/stm32f4xx_rng.c **** 
 151:FWLIB/src/stm32f4xx_rng.c **** 
 152:FWLIB/src/stm32f4xx_rng.c **** /**
 153:FWLIB/src/stm32f4xx_rng.c ****   * @brief  Returns a 32-bit random number.
 154:FWLIB/src/stm32f4xx_rng.c ****   *   
 155:FWLIB/src/stm32f4xx_rng.c ****   * @note   Before to call this function you have to wait till DRDY (data ready)
 156:FWLIB/src/stm32f4xx_rng.c ****   *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
 157:FWLIB/src/stm32f4xx_rng.c ****   * @note   Each time the the Random number data is read (using RNG_GetRandomNumber()
 158:FWLIB/src/stm32f4xx_rng.c ****   *         function), the RNG_FLAG_DRDY flag is automatically cleared.
 159:FWLIB/src/stm32f4xx_rng.c ****   * @note   In the case of a seed error, the generation of random numbers is 
 160:FWLIB/src/stm32f4xx_rng.c ****   *         interrupted for as long as the SECS bit is '1'. If a number is 
 161:FWLIB/src/stm32f4xx_rng.c ****   *         available in the RNG_DR register, it must not be used because it may 
 162:FWLIB/src/stm32f4xx_rng.c ****   *         not have enough entropy. In this case, it is recommended to clear the 
 163:FWLIB/src/stm32f4xx_rng.c ****   *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
 164:FWLIB/src/stm32f4xx_rng.c ****   *         and enable the RNG peripheral (using RNG_Cmd() function) to 
 165:FWLIB/src/stm32f4xx_rng.c ****   *         reinitialize and restart the RNG.
 166:FWLIB/src/stm32f4xx_rng.c ****   * @note   In the case of a clock error, the RNG is no more able to generate 
 167:FWLIB/src/stm32f4xx_rng.c ****   *         random numbers because the PLL48CLK clock is not correct. User have 
 168:FWLIB/src/stm32f4xx_rng.c ****   *         to check that the clock controller is correctly configured to provide
 169:FWLIB/src/stm32f4xx_rng.c ****   *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
 170:FWLIB/src/stm32f4xx_rng.c ****   *         function) . The clock error has no impact on the previously generated 
 171:FWLIB/src/stm32f4xx_rng.c ****   *         random numbers, and the RNG_DR register contents can be used.
 172:FWLIB/src/stm32f4xx_rng.c ****   *         
 173:FWLIB/src/stm32f4xx_rng.c ****   * @param  None
 174:FWLIB/src/stm32f4xx_rng.c ****   * @retval 32-bit random number.
 175:FWLIB/src/stm32f4xx_rng.c ****   */
 176:FWLIB/src/stm32f4xx_rng.c **** uint32_t RNG_GetRandomNumber(void)
 177:FWLIB/src/stm32f4xx_rng.c **** {
  97              		.loc 1 177 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 178:FWLIB/src/stm32f4xx_rng.c ****   /* Return the 32 bit random number from the DR register */
 179:FWLIB/src/stm32f4xx_rng.c ****   return RNG->DR;
 102              		.loc 1 179 0
 103 0000 014B     		ldr	r3, .L10
 104 0002 9868     		ldr	r0, [r3, #8]
 180:FWLIB/src/stm32f4xx_rng.c **** }
 105              		.loc 1 180 0
 106 0004 7047     		bx	lr
 107              	.L11:
 108 0006 00BF     		.align	2
 109              	.L10:
ARM GAS  /tmp/ccQ9I2EZ.s 			page 6


 110 0008 00080650 		.word	1342572544
 111              		.cfi_endproc
 112              	.LFE114:
 114              		.section	.text.RNG_ITConfig,"ax",%progbits
 115              		.align	1
 116              		.global	RNG_ITConfig
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu softvfp
 122              	RNG_ITConfig:
 123              	.LFB115:
 181:FWLIB/src/stm32f4xx_rng.c **** 
 182:FWLIB/src/stm32f4xx_rng.c **** 
 183:FWLIB/src/stm32f4xx_rng.c **** /**
 184:FWLIB/src/stm32f4xx_rng.c ****   * @}
 185:FWLIB/src/stm32f4xx_rng.c ****   */
 186:FWLIB/src/stm32f4xx_rng.c **** 
 187:FWLIB/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group3 Interrupts and flags management functions
 188:FWLIB/src/stm32f4xx_rng.c ****  *  @brief   Interrupts and flags management functions
 189:FWLIB/src/stm32f4xx_rng.c ****  *
 190:FWLIB/src/stm32f4xx_rng.c **** @verbatim   
 191:FWLIB/src/stm32f4xx_rng.c ****  ===============================================================================
 192:FWLIB/src/stm32f4xx_rng.c ****              ##### Interrupts and flags management functions #####
 193:FWLIB/src/stm32f4xx_rng.c ****  ===============================================================================  
 194:FWLIB/src/stm32f4xx_rng.c **** 
 195:FWLIB/src/stm32f4xx_rng.c ****  [..] This section provides functions allowing to configure the RNG Interrupts and 
 196:FWLIB/src/stm32f4xx_rng.c ****       to get the status and clear flags and Interrupts pending bits.
 197:FWLIB/src/stm32f4xx_rng.c ****   
 198:FWLIB/src/stm32f4xx_rng.c ****  [..] The RNG provides 3 Interrupts sources and 3 Flags:
 199:FWLIB/src/stm32f4xx_rng.c ****   
 200:FWLIB/src/stm32f4xx_rng.c ****  *** Flags : ***
 201:FWLIB/src/stm32f4xx_rng.c ****  ===============
 202:FWLIB/src/stm32f4xx_rng.c ****  [..] 
 203:FWLIB/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
 204:FWLIB/src/stm32f4xx_rng.c ****         random data. it is cleared by reading the valid data(using 
 205:FWLIB/src/stm32f4xx_rng.c ****         RNG_GetRandomNumber() function).
 206:FWLIB/src/stm32f4xx_rng.c **** 
 207:FWLIB/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_CECS : In the case of a seed error detection. 
 208:FWLIB/src/stm32f4xx_rng.c ****       
 209:FWLIB/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_SECS : In the case of a clock error detection.
 210:FWLIB/src/stm32f4xx_rng.c ****               
 211:FWLIB/src/stm32f4xx_rng.c ****  *** Interrupts ***
 212:FWLIB/src/stm32f4xx_rng.c ****  ==================
 213:FWLIB/src/stm32f4xx_rng.c ****  [..] If enabled, an RNG interrupt is pending :
 214:FWLIB/src/stm32f4xx_rng.c ****     
 215:FWLIB/src/stm32f4xx_rng.c ****    (#) In the case of the RNG_DR register contains valid random data. 
 216:FWLIB/src/stm32f4xx_rng.c ****        This interrupt source is cleared once the RNG_DR register has been read 
 217:FWLIB/src/stm32f4xx_rng.c ****        (using RNG_GetRandomNumber() function) until a new valid value is 
 218:FWLIB/src/stm32f4xx_rng.c ****        computed; or 
 219:FWLIB/src/stm32f4xx_rng.c ****    (#) In the case of a seed error : One of the following faulty sequences has 
 220:FWLIB/src/stm32f4xx_rng.c ****        been detected:
 221:FWLIB/src/stm32f4xx_rng.c ****        (++) More than 64 consecutive bits at the same value (0 or 1)
 222:FWLIB/src/stm32f4xx_rng.c ****        (++) More than 32 consecutive alternance of 0 and 1 (0101010101...01)
 223:FWLIB/src/stm32f4xx_rng.c ****        This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
 224:FWLIB/src/stm32f4xx_rng.c ****        function; or
 225:FWLIB/src/stm32f4xx_rng.c ****    (#) In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
ARM GAS  /tmp/ccQ9I2EZ.s 			page 7


 226:FWLIB/src/stm32f4xx_rng.c ****        was not correctly detected (fPLL48CLK< fHCLK/16). This interrupt source is
 227:FWLIB/src/stm32f4xx_rng.c ****        cleared using RNG_ClearITPendingBit(RNG_IT_CEI) function.
 228:FWLIB/src/stm32f4xx_rng.c ****        -@- note In this case, User have to check that the clock controller is 
 229:FWLIB/src/stm32f4xx_rng.c ****            correctly configured to provide the RNG clock. 
 230:FWLIB/src/stm32f4xx_rng.c **** 
 231:FWLIB/src/stm32f4xx_rng.c ****  *** Managing the RNG controller events : ***
 232:FWLIB/src/stm32f4xx_rng.c ****  ============================================
 233:FWLIB/src/stm32f4xx_rng.c ****  [..] The user should identify which mode will be used in his application to manage 
 234:FWLIB/src/stm32f4xx_rng.c ****       the RNG controller events: Polling mode or Interrupt mode.
 235:FWLIB/src/stm32f4xx_rng.c ****   
 236:FWLIB/src/stm32f4xx_rng.c ****    (#) In the Polling Mode it is advised to use the following functions:
 237:FWLIB/src/stm32f4xx_rng.c ****        (++) RNG_GetFlagStatus() : to check if flags events occur. 
 238:FWLIB/src/stm32f4xx_rng.c ****        (++) RNG_ClearFlag()     : to clear the flags events.
 239:FWLIB/src/stm32f4xx_rng.c ****   
 240:FWLIB/src/stm32f4xx_rng.c ****        -@@- RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
 241:FWLIB/src/stm32f4xx_rng.c ****             by reading the Random number data.      
 242:FWLIB/src/stm32f4xx_rng.c ****   
 243:FWLIB/src/stm32f4xx_rng.c ****    (#)  In the Interrupt Mode it is advised to use the following functions:
 244:FWLIB/src/stm32f4xx_rng.c ****         (++) RNG_ITConfig()       : to enable or disable the interrupt source.
 245:FWLIB/src/stm32f4xx_rng.c ****         (++) RNG_GetITStatus()    : to check if Interrupt occurs.
 246:FWLIB/src/stm32f4xx_rng.c ****         (++) RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
 247:FWLIB/src/stm32f4xx_rng.c ****              (corresponding Flag). 
 248:FWLIB/src/stm32f4xx_rng.c ****   
 249:FWLIB/src/stm32f4xx_rng.c **** @endverbatim
 250:FWLIB/src/stm32f4xx_rng.c ****   * @{
 251:FWLIB/src/stm32f4xx_rng.c ****   */ 
 252:FWLIB/src/stm32f4xx_rng.c **** 
 253:FWLIB/src/stm32f4xx_rng.c **** /**
 254:FWLIB/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG interrupt.
 255:FWLIB/src/stm32f4xx_rng.c ****   * @note   The RNG provides 3 interrupt sources,
 256:FWLIB/src/stm32f4xx_rng.c ****   *           - Computed data is ready event (DRDY), and           
 257:FWLIB/src/stm32f4xx_rng.c ****   *           - Seed error Interrupt (SEI) and 
 258:FWLIB/src/stm32f4xx_rng.c ****   *           - Clock error Interrupt (CEI), 
 259:FWLIB/src/stm32f4xx_rng.c ****   *         all these interrupts sources are enabled by setting the IE bit in 
 260:FWLIB/src/stm32f4xx_rng.c ****   *         CR register. However, each interrupt have its specific status bit
 261:FWLIB/src/stm32f4xx_rng.c ****   *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
 262:FWLIB/src/stm32f4xx_rng.c ****   *         (see RNG_ClearITPendingBit() function).
 263:FWLIB/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG interrupt.
 264:FWLIB/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 265:FWLIB/src/stm32f4xx_rng.c ****   * @retval None
 266:FWLIB/src/stm32f4xx_rng.c ****   */
 267:FWLIB/src/stm32f4xx_rng.c **** void RNG_ITConfig(FunctionalState NewState)
 268:FWLIB/src/stm32f4xx_rng.c **** {
 124              		.loc 1 268 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129              	.LVL3:
 269:FWLIB/src/stm32f4xx_rng.c ****   /* Check the parameters */
 270:FWLIB/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 271:FWLIB/src/stm32f4xx_rng.c **** 
 272:FWLIB/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 130              		.loc 1 272 0
 131 0000 28B9     		cbnz	r0, .L15
 273:FWLIB/src/stm32f4xx_rng.c ****   {
 274:FWLIB/src/stm32f4xx_rng.c ****     /* Enable the RNG interrupt */
ARM GAS  /tmp/ccQ9I2EZ.s 			page 8


 275:FWLIB/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_IE;
 276:FWLIB/src/stm32f4xx_rng.c ****   }
 277:FWLIB/src/stm32f4xx_rng.c ****   else
 278:FWLIB/src/stm32f4xx_rng.c ****   {
 279:FWLIB/src/stm32f4xx_rng.c ****     /* Disable the RNG interrupt */
 280:FWLIB/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_IE;
 132              		.loc 1 280 0
 133 0002 064A     		ldr	r2, .L16
 134 0004 1368     		ldr	r3, [r2]
 135 0006 23F00803 		bic	r3, r3, #8
 136 000a 1360     		str	r3, [r2]
 137 000c 7047     		bx	lr
 138              	.L15:
 275:FWLIB/src/stm32f4xx_rng.c ****   }
 139              		.loc 1 275 0
 140 000e 034A     		ldr	r2, .L16
 141 0010 1368     		ldr	r3, [r2]
 142 0012 43F00803 		orr	r3, r3, #8
 143 0016 1360     		str	r3, [r2]
 144 0018 7047     		bx	lr
 145              	.L17:
 146 001a 00BF     		.align	2
 147              	.L16:
 148 001c 00080650 		.word	1342572544
 149              		.cfi_endproc
 150              	.LFE115:
 152              		.section	.text.RNG_GetFlagStatus,"ax",%progbits
 153              		.align	1
 154              		.global	RNG_GetFlagStatus
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu softvfp
 160              	RNG_GetFlagStatus:
 161              	.LFB116:
 281:FWLIB/src/stm32f4xx_rng.c ****   }
 282:FWLIB/src/stm32f4xx_rng.c **** }
 283:FWLIB/src/stm32f4xx_rng.c **** 
 284:FWLIB/src/stm32f4xx_rng.c **** /**
 285:FWLIB/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG flag is set or not.
 286:FWLIB/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the RNG flag to check.
 287:FWLIB/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 288:FWLIB/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_DRDY: Data Ready flag.
 289:FWLIB/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 290:FWLIB/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 291:FWLIB/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_FLAG (SET or RESET).
 292:FWLIB/src/stm32f4xx_rng.c ****   */
 293:FWLIB/src/stm32f4xx_rng.c **** FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
 294:FWLIB/src/stm32f4xx_rng.c **** {
 162              		.loc 1 294 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 167              	.LVL4:
 295:FWLIB/src/stm32f4xx_rng.c ****   FlagStatus bitstatus = RESET;
 296:FWLIB/src/stm32f4xx_rng.c ****   /* Check the parameters */
ARM GAS  /tmp/ccQ9I2EZ.s 			page 9


 297:FWLIB/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
 298:FWLIB/src/stm32f4xx_rng.c **** 
 299:FWLIB/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG flag */
 300:FWLIB/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 168              		.loc 1 300 0
 169 0000 034B     		ldr	r3, .L22
 170 0002 5B68     		ldr	r3, [r3, #4]
 171 0004 1842     		tst	r0, r3
 172 0006 01D1     		bne	.L21
 301:FWLIB/src/stm32f4xx_rng.c ****   {
 302:FWLIB/src/stm32f4xx_rng.c ****     /* RNG_FLAG is set */
 303:FWLIB/src/stm32f4xx_rng.c ****     bitstatus = SET;
 304:FWLIB/src/stm32f4xx_rng.c ****   }
 305:FWLIB/src/stm32f4xx_rng.c ****   else
 306:FWLIB/src/stm32f4xx_rng.c ****   {
 307:FWLIB/src/stm32f4xx_rng.c ****     /* RNG_FLAG is reset */
 308:FWLIB/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 173              		.loc 1 308 0
 174 0008 0020     		movs	r0, #0
 175              	.LVL5:
 309:FWLIB/src/stm32f4xx_rng.c ****   }
 310:FWLIB/src/stm32f4xx_rng.c ****   /* Return the RNG_FLAG status */
 311:FWLIB/src/stm32f4xx_rng.c ****   return  bitstatus;
 312:FWLIB/src/stm32f4xx_rng.c **** }
 176              		.loc 1 312 0
 177 000a 7047     		bx	lr
 178              	.LVL6:
 179              	.L21:
 303:FWLIB/src/stm32f4xx_rng.c ****   }
 180              		.loc 1 303 0
 181 000c 0120     		movs	r0, #1
 182              	.LVL7:
 183 000e 7047     		bx	lr
 184              	.L23:
 185              		.align	2
 186              	.L22:
 187 0010 00080650 		.word	1342572544
 188              		.cfi_endproc
 189              	.LFE116:
 191              		.section	.text.RNG_ClearFlag,"ax",%progbits
 192              		.align	1
 193              		.global	RNG_ClearFlag
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu softvfp
 199              	RNG_ClearFlag:
 200              	.LFB117:
 313:FWLIB/src/stm32f4xx_rng.c **** 
 314:FWLIB/src/stm32f4xx_rng.c **** 
 315:FWLIB/src/stm32f4xx_rng.c **** /**
 316:FWLIB/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG flags.
 317:FWLIB/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the flag to clear. 
 318:FWLIB/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 319:FWLIB/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 320:FWLIB/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 321:FWLIB/src/stm32f4xx_rng.c ****   * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
ARM GAS  /tmp/ccQ9I2EZ.s 			page 10


 322:FWLIB/src/stm32f4xx_rng.c ****   *         This flag is cleared only by reading the Random number data (using 
 323:FWLIB/src/stm32f4xx_rng.c ****   *         RNG_GetRandomNumber() function).                           
 324:FWLIB/src/stm32f4xx_rng.c ****   * @retval None
 325:FWLIB/src/stm32f4xx_rng.c ****   */
 326:FWLIB/src/stm32f4xx_rng.c **** void RNG_ClearFlag(uint8_t RNG_FLAG)
 327:FWLIB/src/stm32f4xx_rng.c **** {
 201              		.loc 1 327 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206              	.LVL8:
 328:FWLIB/src/stm32f4xx_rng.c ****   /* Check the parameters */
 329:FWLIB/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
 330:FWLIB/src/stm32f4xx_rng.c ****   /* Clear the selected RNG flags */
 331:FWLIB/src/stm32f4xx_rng.c ****   RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 207              		.loc 1 331 0
 208 0000 6FEA0010 		mvn	r0, r0, lsl #4
 209              	.LVL9:
 210 0004 014B     		ldr	r3, .L25
 211 0006 5860     		str	r0, [r3, #4]
 212 0008 7047     		bx	lr
 213              	.L26:
 214 000a 00BF     		.align	2
 215              	.L25:
 216 000c 00080650 		.word	1342572544
 217              		.cfi_endproc
 218              	.LFE117:
 220              		.section	.text.RNG_GetITStatus,"ax",%progbits
 221              		.align	1
 222              		.global	RNG_GetITStatus
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 226              		.fpu softvfp
 228              	RNG_GetITStatus:
 229              	.LFB118:
 332:FWLIB/src/stm32f4xx_rng.c **** }
 333:FWLIB/src/stm32f4xx_rng.c **** 
 334:FWLIB/src/stm32f4xx_rng.c **** /**
 335:FWLIB/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG interrupt has occurred or not.
 336:FWLIB/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt source to check.
 337:FWLIB/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 338:FWLIB/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 339:FWLIB/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
 340:FWLIB/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_IT (SET or RESET).
 341:FWLIB/src/stm32f4xx_rng.c ****   */
 342:FWLIB/src/stm32f4xx_rng.c **** ITStatus RNG_GetITStatus(uint8_t RNG_IT)
 343:FWLIB/src/stm32f4xx_rng.c **** {
 230              		.loc 1 343 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235              	.LVL10:
 344:FWLIB/src/stm32f4xx_rng.c ****   ITStatus bitstatus = RESET;
 345:FWLIB/src/stm32f4xx_rng.c ****   /* Check the parameters */
ARM GAS  /tmp/ccQ9I2EZ.s 			page 11


 346:FWLIB/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_IT(RNG_IT));
 347:FWLIB/src/stm32f4xx_rng.c **** 
 348:FWLIB/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG interrupt */
 349:FWLIB/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 236              		.loc 1 349 0
 237 0000 034B     		ldr	r3, .L31
 238 0002 5B68     		ldr	r3, [r3, #4]
 239 0004 1842     		tst	r0, r3
 240 0006 01D1     		bne	.L30
 350:FWLIB/src/stm32f4xx_rng.c ****   {
 351:FWLIB/src/stm32f4xx_rng.c ****     /* RNG_IT is set */
 352:FWLIB/src/stm32f4xx_rng.c ****     bitstatus = SET;
 353:FWLIB/src/stm32f4xx_rng.c ****   }
 354:FWLIB/src/stm32f4xx_rng.c ****   else
 355:FWLIB/src/stm32f4xx_rng.c ****   {
 356:FWLIB/src/stm32f4xx_rng.c ****     /* RNG_IT is reset */
 357:FWLIB/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 241              		.loc 1 357 0
 242 0008 0020     		movs	r0, #0
 243              	.LVL11:
 358:FWLIB/src/stm32f4xx_rng.c ****   }
 359:FWLIB/src/stm32f4xx_rng.c ****   /* Return the RNG_IT status */
 360:FWLIB/src/stm32f4xx_rng.c ****   return bitstatus;
 361:FWLIB/src/stm32f4xx_rng.c **** }
 244              		.loc 1 361 0
 245 000a 7047     		bx	lr
 246              	.LVL12:
 247              	.L30:
 352:FWLIB/src/stm32f4xx_rng.c ****   }
 248              		.loc 1 352 0
 249 000c 0120     		movs	r0, #1
 250              	.LVL13:
 251 000e 7047     		bx	lr
 252              	.L32:
 253              		.align	2
 254              	.L31:
 255 0010 00080650 		.word	1342572544
 256              		.cfi_endproc
 257              	.LFE118:
 259              		.section	.text.RNG_ClearITPendingBit,"ax",%progbits
 260              		.align	1
 261              		.global	RNG_ClearITPendingBit
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu softvfp
 267              	RNG_ClearITPendingBit:
 268              	.LFB119:
 362:FWLIB/src/stm32f4xx_rng.c **** 
 363:FWLIB/src/stm32f4xx_rng.c **** 
 364:FWLIB/src/stm32f4xx_rng.c **** /**
 365:FWLIB/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG interrupt pending bit(s).
 366:FWLIB/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
 367:FWLIB/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 368:FWLIB/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 369:FWLIB/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.
 370:FWLIB/src/stm32f4xx_rng.c ****   * @retval None
ARM GAS  /tmp/ccQ9I2EZ.s 			page 12


 371:FWLIB/src/stm32f4xx_rng.c ****   */
 372:FWLIB/src/stm32f4xx_rng.c **** void RNG_ClearITPendingBit(uint8_t RNG_IT)
 373:FWLIB/src/stm32f4xx_rng.c **** {
 269              		.loc 1 373 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 274              	.LVL14:
 374:FWLIB/src/stm32f4xx_rng.c ****   /* Check the parameters */
 375:FWLIB/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_IT(RNG_IT));
 376:FWLIB/src/stm32f4xx_rng.c **** 
 377:FWLIB/src/stm32f4xx_rng.c ****   /* Clear the selected RNG interrupt pending bit */
 378:FWLIB/src/stm32f4xx_rng.c ****   RNG->SR = (uint8_t)~RNG_IT;
 275              		.loc 1 378 0
 276 0000 C043     		mvns	r0, r0
 277              	.LVL15:
 278 0002 C0B2     		uxtb	r0, r0
 279 0004 014B     		ldr	r3, .L34
 280 0006 5860     		str	r0, [r3, #4]
 281 0008 7047     		bx	lr
 282              	.L35:
 283 000a 00BF     		.align	2
 284              	.L34:
 285 000c 00080650 		.word	1342572544
 286              		.cfi_endproc
 287              	.LFE119:
 289              		.text
 290              	.Letext0:
 291              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 292              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 293              		.file 4 "CORE/core_cm4.h"
 294              		.file 5 "USER/system_stm32f4xx.h"
 295              		.file 6 "USER/stm32f4xx.h"
 296              		.file 7 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccQ9I2EZ.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rng.c
     /tmp/ccQ9I2EZ.s:16     .text.RNG_DeInit:0000000000000000 $t
     /tmp/ccQ9I2EZ.s:23     .text.RNG_DeInit:0000000000000000 RNG_DeInit
     /tmp/ccQ9I2EZ.s:50     .text.RNG_Cmd:0000000000000000 $t
     /tmp/ccQ9I2EZ.s:57     .text.RNG_Cmd:0000000000000000 RNG_Cmd
     /tmp/ccQ9I2EZ.s:83     .text.RNG_Cmd:000000000000001c $d
     /tmp/ccQ9I2EZ.s:88     .text.RNG_GetRandomNumber:0000000000000000 $t
     /tmp/ccQ9I2EZ.s:95     .text.RNG_GetRandomNumber:0000000000000000 RNG_GetRandomNumber
     /tmp/ccQ9I2EZ.s:110    .text.RNG_GetRandomNumber:0000000000000008 $d
     /tmp/ccQ9I2EZ.s:115    .text.RNG_ITConfig:0000000000000000 $t
     /tmp/ccQ9I2EZ.s:122    .text.RNG_ITConfig:0000000000000000 RNG_ITConfig
     /tmp/ccQ9I2EZ.s:148    .text.RNG_ITConfig:000000000000001c $d
     /tmp/ccQ9I2EZ.s:153    .text.RNG_GetFlagStatus:0000000000000000 $t
     /tmp/ccQ9I2EZ.s:160    .text.RNG_GetFlagStatus:0000000000000000 RNG_GetFlagStatus
     /tmp/ccQ9I2EZ.s:187    .text.RNG_GetFlagStatus:0000000000000010 $d
     /tmp/ccQ9I2EZ.s:192    .text.RNG_ClearFlag:0000000000000000 $t
     /tmp/ccQ9I2EZ.s:199    .text.RNG_ClearFlag:0000000000000000 RNG_ClearFlag
     /tmp/ccQ9I2EZ.s:216    .text.RNG_ClearFlag:000000000000000c $d
     /tmp/ccQ9I2EZ.s:221    .text.RNG_GetITStatus:0000000000000000 $t
     /tmp/ccQ9I2EZ.s:228    .text.RNG_GetITStatus:0000000000000000 RNG_GetITStatus
     /tmp/ccQ9I2EZ.s:255    .text.RNG_GetITStatus:0000000000000010 $d
     /tmp/ccQ9I2EZ.s:260    .text.RNG_ClearITPendingBit:0000000000000000 $t
     /tmp/ccQ9I2EZ.s:267    .text.RNG_ClearITPendingBit:0000000000000000 RNG_ClearITPendingBit
     /tmp/ccQ9I2EZ.s:285    .text.RNG_ClearITPendingBit:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
