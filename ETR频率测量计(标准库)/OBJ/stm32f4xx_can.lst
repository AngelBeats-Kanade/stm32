ARM GAS  /tmp/ccrnvJ70.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f4xx_can.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.CheckITStatus,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	CheckITStatus:
  23              	.LFB136:
  24              		.file 1 "FWLIB/src/stm32f4xx_can.c"
   1:FWLIB/src/stm32f4xx_can.c **** /**
   2:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_can.c ****   * @file    stm32f4xx_can.c
   4:FWLIB/src/stm32f4xx_can.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_can.c ****   * @version V1.4.0
   6:FWLIB/src/stm32f4xx_can.c ****   * @date    04-August-2014
   7:FWLIB/src/stm32f4xx_can.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_can.c ****   *          functionalities of the Controller area network (CAN) peripheral:
   9:FWLIB/src/stm32f4xx_can.c ****   *           + Initialization and Configuration 
  10:FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Transmission
  11:FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Reception
  12:FWLIB/src/stm32f4xx_can.c ****   *           + Operation modes switch
  13:FWLIB/src/stm32f4xx_can.c ****   *           + Error management
  14:FWLIB/src/stm32f4xx_can.c ****   *           + Interrupts and flags
  15:FWLIB/src/stm32f4xx_can.c ****   *
  16:FWLIB/src/stm32f4xx_can.c **** @verbatim
  17:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  18:FWLIB/src/stm32f4xx_can.c ****                         ##### How to use this driver #####
  19:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  20:FWLIB/src/stm32f4xx_can.c ****     [..]
  21:FWLIB/src/stm32f4xx_can.c ****       (#) Enable the CAN controller interface clock using 
  22:FWLIB/src/stm32f4xx_can.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); for CAN1 
  23:FWLIB/src/stm32f4xx_can.c ****           and RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE); for CAN2
  24:FWLIB/src/stm32f4xx_can.c ****       -@- In case you are using CAN2 only, you have to enable the CAN1 clock.
  25:FWLIB/src/stm32f4xx_can.c ****        
  26:FWLIB/src/stm32f4xx_can.c ****       (#) CAN pins configuration
  27:FWLIB/src/stm32f4xx_can.c ****         (++) Enable the clock for the CAN GPIOs using the following function:
  28:FWLIB/src/stm32f4xx_can.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  29:FWLIB/src/stm32f4xx_can.c ****         (++) Connect the involved CAN pins to AF9 using the following function 
  30:FWLIB/src/stm32f4xx_can.c ****              GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_CANx); 
  31:FWLIB/src/stm32f4xx_can.c ****         (++) Configure these CAN pins in alternate function mode by calling
  32:FWLIB/src/stm32f4xx_can.c ****              the function  GPIO_Init();
  33:FWLIB/src/stm32f4xx_can.c ****       
  34:FWLIB/src/stm32f4xx_can.c ****       (#) Initialise and configure the CAN using CAN_Init() and 
ARM GAS  /tmp/ccrnvJ70.s 			page 2


  35:FWLIB/src/stm32f4xx_can.c ****           CAN_FilterInit() functions.   
  36:FWLIB/src/stm32f4xx_can.c ****                  
  37:FWLIB/src/stm32f4xx_can.c ****       (#) Transmit the desired CAN frame using CAN_Transmit() function.
  38:FWLIB/src/stm32f4xx_can.c ****            
  39:FWLIB/src/stm32f4xx_can.c ****       (#) Check the transmission of a CAN frame using CAN_TransmitStatus()
  40:FWLIB/src/stm32f4xx_can.c ****           function.
  41:FWLIB/src/stm32f4xx_can.c ****                  
  42:FWLIB/src/stm32f4xx_can.c ****       (#) Cancel the transmission of a CAN frame using CAN_CancelTransmit()
  43:FWLIB/src/stm32f4xx_can.c ****           function.  
  44:FWLIB/src/stm32f4xx_can.c ****               
  45:FWLIB/src/stm32f4xx_can.c ****       (#) Receive a CAN frame using CAN_Recieve() function.
  46:FWLIB/src/stm32f4xx_can.c ****            
  47:FWLIB/src/stm32f4xx_can.c ****       (#) Release the receive FIFOs using CAN_FIFORelease() function.
  48:FWLIB/src/stm32f4xx_can.c ****                  
  49:FWLIB/src/stm32f4xx_can.c ****       (#) Return the number of pending received frames using 
  50:FWLIB/src/stm32f4xx_can.c ****           CAN_MessagePending() function.            
  51:FWLIB/src/stm32f4xx_can.c ****                      
  52:FWLIB/src/stm32f4xx_can.c ****       (#) To control CAN events you can use one of the following two methods:
  53:FWLIB/src/stm32f4xx_can.c ****         (++) Check on CAN flags using the CAN_GetFlagStatus() function.  
  54:FWLIB/src/stm32f4xx_can.c ****         (++) Use CAN interrupts through the function CAN_ITConfig() at 
  55:FWLIB/src/stm32f4xx_can.c ****              initialization phase and CAN_GetITStatus() function into 
  56:FWLIB/src/stm32f4xx_can.c ****              interrupt routines to check if the event has occurred or not.
  57:FWLIB/src/stm32f4xx_can.c ****              After checking on a flag you should clear it using CAN_ClearFlag()
  58:FWLIB/src/stm32f4xx_can.c ****              function. And after checking on an interrupt event you should 
  59:FWLIB/src/stm32f4xx_can.c ****              clear it using CAN_ClearITPendingBit() function.            
  60:FWLIB/src/stm32f4xx_can.c **** 
  61:FWLIB/src/stm32f4xx_can.c **** @endverbatim
  62:FWLIB/src/stm32f4xx_can.c ****            
  63:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
  64:FWLIB/src/stm32f4xx_can.c ****   * @attention
  65:FWLIB/src/stm32f4xx_can.c ****   *
  66:FWLIB/src/stm32f4xx_can.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  67:FWLIB/src/stm32f4xx_can.c ****   *
  68:FWLIB/src/stm32f4xx_can.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  69:FWLIB/src/stm32f4xx_can.c ****   * You may not use this file except in compliance with the License.
  70:FWLIB/src/stm32f4xx_can.c ****   * You may obtain a copy of the License at:
  71:FWLIB/src/stm32f4xx_can.c ****   *
  72:FWLIB/src/stm32f4xx_can.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  73:FWLIB/src/stm32f4xx_can.c ****   *
  74:FWLIB/src/stm32f4xx_can.c ****   * Unless required by applicable law or agreed to in writing, software 
  75:FWLIB/src/stm32f4xx_can.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  76:FWLIB/src/stm32f4xx_can.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  77:FWLIB/src/stm32f4xx_can.c ****   * See the License for the specific language governing permissions and
  78:FWLIB/src/stm32f4xx_can.c ****   * limitations under the License.
  79:FWLIB/src/stm32f4xx_can.c ****   *
  80:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************  
  81:FWLIB/src/stm32f4xx_can.c ****   */
  82:FWLIB/src/stm32f4xx_can.c **** 
  83:FWLIB/src/stm32f4xx_can.c **** /* Includes ------------------------------------------------------------------*/
  84:FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_can.h"
  85:FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_rcc.h"
  86:FWLIB/src/stm32f4xx_can.c **** 
  87:FWLIB/src/stm32f4xx_can.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  88:FWLIB/src/stm32f4xx_can.c ****   * @{
  89:FWLIB/src/stm32f4xx_can.c ****   */
  90:FWLIB/src/stm32f4xx_can.c **** 
  91:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN 
ARM GAS  /tmp/ccrnvJ70.s 			page 3


  92:FWLIB/src/stm32f4xx_can.c ****   * @brief CAN driver modules
  93:FWLIB/src/stm32f4xx_can.c ****   * @{
  94:FWLIB/src/stm32f4xx_can.c ****   */ 
  95:FWLIB/src/stm32f4xx_can.c **** /* Private typedef -----------------------------------------------------------*/
  96:FWLIB/src/stm32f4xx_can.c **** /* Private define ------------------------------------------------------------*/
  97:FWLIB/src/stm32f4xx_can.c **** 
  98:FWLIB/src/stm32f4xx_can.c **** /* CAN Master Control Register bits */
  99:FWLIB/src/stm32f4xx_can.c **** #define MCR_DBF           ((uint32_t)0x00010000) /* software master reset */
 100:FWLIB/src/stm32f4xx_can.c **** 
 101:FWLIB/src/stm32f4xx_can.c **** /* CAN Mailbox Transmit Request */
 102:FWLIB/src/stm32f4xx_can.c **** #define TMIDxR_TXRQ       ((uint32_t)0x00000001) /* Transmit mailbox request */
 103:FWLIB/src/stm32f4xx_can.c **** 
 104:FWLIB/src/stm32f4xx_can.c **** /* CAN Filter Master Register bits */
 105:FWLIB/src/stm32f4xx_can.c **** #define FMR_FINIT         ((uint32_t)0x00000001) /* Filter init mode */
 106:FWLIB/src/stm32f4xx_can.c **** 
 107:FWLIB/src/stm32f4xx_can.c **** /* Time out for INAK bit */
 108:FWLIB/src/stm32f4xx_can.c **** #define INAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 109:FWLIB/src/stm32f4xx_can.c **** /* Time out for SLAK bit */
 110:FWLIB/src/stm32f4xx_can.c **** #define SLAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 111:FWLIB/src/stm32f4xx_can.c **** 
 112:FWLIB/src/stm32f4xx_can.c **** /* Flags in TSR register */
 113:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_TSR     ((uint32_t)0x08000000) 
 114:FWLIB/src/stm32f4xx_can.c **** /* Flags in RF1R register */
 115:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF1R    ((uint32_t)0x04000000) 
 116:FWLIB/src/stm32f4xx_can.c **** /* Flags in RF0R register */
 117:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF0R    ((uint32_t)0x02000000) 
 118:FWLIB/src/stm32f4xx_can.c **** /* Flags in MSR register */
 119:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_MSR     ((uint32_t)0x01000000) 
 120:FWLIB/src/stm32f4xx_can.c **** /* Flags in ESR register */
 121:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_ESR     ((uint32_t)0x00F00000) 
 122:FWLIB/src/stm32f4xx_can.c **** 
 123:FWLIB/src/stm32f4xx_can.c **** /* Mailboxes definition */
 124:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_0   ((uint8_t)0x00)
 125:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_1   ((uint8_t)0x01)
 126:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_2   ((uint8_t)0x02) 
 127:FWLIB/src/stm32f4xx_can.c **** 
 128:FWLIB/src/stm32f4xx_can.c **** #define CAN_MODE_MASK     ((uint32_t) 0x00000003)
 129:FWLIB/src/stm32f4xx_can.c **** 
 130:FWLIB/src/stm32f4xx_can.c **** /* Private macro -------------------------------------------------------------*/
 131:FWLIB/src/stm32f4xx_can.c **** /* Private variables ---------------------------------------------------------*/
 132:FWLIB/src/stm32f4xx_can.c **** /* Private function prototypes -----------------------------------------------*/
 133:FWLIB/src/stm32f4xx_can.c **** /* Private functions ---------------------------------------------------------*/
 134:FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 135:FWLIB/src/stm32f4xx_can.c **** 
 136:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Private_Functions
 137:FWLIB/src/stm32f4xx_can.c ****   * @{
 138:FWLIB/src/stm32f4xx_can.c ****   */
 139:FWLIB/src/stm32f4xx_can.c **** 
 140:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group1 Initialization and Configuration functions
 141:FWLIB/src/stm32f4xx_can.c ****  *  @brief    Initialization and Configuration functions 
 142:FWLIB/src/stm32f4xx_can.c ****  *
 143:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 144:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 145:FWLIB/src/stm32f4xx_can.c ****               ##### Initialization and Configuration functions #####
 146:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 147:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 148:FWLIB/src/stm32f4xx_can.c ****       (+) Initialize the CAN peripherals : Prescaler, operating mode, the maximum 
ARM GAS  /tmp/ccrnvJ70.s 			page 4


 149:FWLIB/src/stm32f4xx_can.c ****           number of time quanta to perform resynchronization, the number of time 
 150:FWLIB/src/stm32f4xx_can.c ****           quanta in Bit Segment 1 and 2 and many other modes. 
 151:FWLIB/src/stm32f4xx_can.c ****           Refer to  @ref CAN_InitTypeDef  for more details.
 152:FWLIB/src/stm32f4xx_can.c ****       (+) Configures the CAN reception filter.                                      
 153:FWLIB/src/stm32f4xx_can.c ****       (+) Select the start bank filter for slave CAN.
 154:FWLIB/src/stm32f4xx_can.c ****       (+) Enables or disables the Debug Freeze mode for CAN
 155:FWLIB/src/stm32f4xx_can.c ****       (+)Enables or disables the CAN Time Trigger Operation communication mode
 156:FWLIB/src/stm32f4xx_can.c ****    
 157:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 158:FWLIB/src/stm32f4xx_can.c ****   * @{
 159:FWLIB/src/stm32f4xx_can.c ****   */
 160:FWLIB/src/stm32f4xx_can.c ****   
 161:FWLIB/src/stm32f4xx_can.c **** /**
 162:FWLIB/src/stm32f4xx_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 163:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 164:FWLIB/src/stm32f4xx_can.c ****   * @retval None.
 165:FWLIB/src/stm32f4xx_can.c ****   */
 166:FWLIB/src/stm32f4xx_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 167:FWLIB/src/stm32f4xx_can.c **** {
 168:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 169:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 170:FWLIB/src/stm32f4xx_can.c ****  
 171:FWLIB/src/stm32f4xx_can.c ****   if (CANx == CAN1)
 172:FWLIB/src/stm32f4xx_can.c ****   {
 173:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN1 reset state */
 174:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 175:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
 176:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 177:FWLIB/src/stm32f4xx_can.c ****   }
 178:FWLIB/src/stm32f4xx_can.c ****   else
 179:FWLIB/src/stm32f4xx_can.c ****   {  
 180:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
 181:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 182:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 183:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 184:FWLIB/src/stm32f4xx_can.c ****   }
 185:FWLIB/src/stm32f4xx_can.c **** }
 186:FWLIB/src/stm32f4xx_can.c **** 
 187:FWLIB/src/stm32f4xx_can.c **** /**
 188:FWLIB/src/stm32f4xx_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 189:FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_InitStruct.
 190:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 191:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that contains
 192:FWLIB/src/stm32f4xx_can.c ****   *         the configuration information for the CAN peripheral.
 193:FWLIB/src/stm32f4xx_can.c ****   * @retval Constant indicates initialization succeed which will be 
 194:FWLIB/src/stm32f4xx_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 195:FWLIB/src/stm32f4xx_can.c ****   */
 196:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 197:FWLIB/src/stm32f4xx_can.c **** {
 198:FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 199:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_ack = 0x00000000;
 200:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 201:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 202:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 203:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 204:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 205:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
ARM GAS  /tmp/ccrnvJ70.s 			page 5


 206:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 207:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 208:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 209:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 210:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 211:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 212:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 213:FWLIB/src/stm32f4xx_can.c **** 
 214:FWLIB/src/stm32f4xx_can.c ****   /* Exit from sleep mode */
 215:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 216:FWLIB/src/stm32f4xx_can.c **** 
 217:FWLIB/src/stm32f4xx_can.c ****   /* Request initialisation */
 218:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 219:FWLIB/src/stm32f4xx_can.c **** 
 220:FWLIB/src/stm32f4xx_can.c ****   /* Wait the acknowledge */
 221:FWLIB/src/stm32f4xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 222:FWLIB/src/stm32f4xx_can.c ****   {
 223:FWLIB/src/stm32f4xx_can.c ****     wait_ack++;
 224:FWLIB/src/stm32f4xx_can.c ****   }
 225:FWLIB/src/stm32f4xx_can.c **** 
 226:FWLIB/src/stm32f4xx_can.c ****   /* Check acknowledge */
 227:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 228:FWLIB/src/stm32f4xx_can.c ****   {
 229:FWLIB/src/stm32f4xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 230:FWLIB/src/stm32f4xx_can.c ****   }
 231:FWLIB/src/stm32f4xx_can.c ****   else 
 232:FWLIB/src/stm32f4xx_can.c ****   {
 233:FWLIB/src/stm32f4xx_can.c ****     /* Set the time triggered communication mode */
 234:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 235:FWLIB/src/stm32f4xx_can.c ****     {
 236:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 237:FWLIB/src/stm32f4xx_can.c ****     }
 238:FWLIB/src/stm32f4xx_can.c ****     else
 239:FWLIB/src/stm32f4xx_can.c ****     {
 240:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 241:FWLIB/src/stm32f4xx_can.c ****     }
 242:FWLIB/src/stm32f4xx_can.c **** 
 243:FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic bus-off management */
 244:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 245:FWLIB/src/stm32f4xx_can.c ****     {
 246:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 247:FWLIB/src/stm32f4xx_can.c ****     }
 248:FWLIB/src/stm32f4xx_can.c ****     else
 249:FWLIB/src/stm32f4xx_can.c ****     {
 250:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 251:FWLIB/src/stm32f4xx_can.c ****     }
 252:FWLIB/src/stm32f4xx_can.c **** 
 253:FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic wake-up mode */
 254:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 255:FWLIB/src/stm32f4xx_can.c ****     {
 256:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 257:FWLIB/src/stm32f4xx_can.c ****     }
 258:FWLIB/src/stm32f4xx_can.c ****     else
 259:FWLIB/src/stm32f4xx_can.c ****     {
 260:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 261:FWLIB/src/stm32f4xx_can.c ****     }
 262:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /tmp/ccrnvJ70.s 			page 6


 263:FWLIB/src/stm32f4xx_can.c ****     /* Set the no automatic retransmission */
 264:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 265:FWLIB/src/stm32f4xx_can.c ****     {
 266:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 267:FWLIB/src/stm32f4xx_can.c ****     }
 268:FWLIB/src/stm32f4xx_can.c ****     else
 269:FWLIB/src/stm32f4xx_can.c ****     {
 270:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 271:FWLIB/src/stm32f4xx_can.c ****     }
 272:FWLIB/src/stm32f4xx_can.c **** 
 273:FWLIB/src/stm32f4xx_can.c ****     /* Set the receive FIFO locked mode */
 274:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 275:FWLIB/src/stm32f4xx_can.c ****     {
 276:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 277:FWLIB/src/stm32f4xx_can.c ****     }
 278:FWLIB/src/stm32f4xx_can.c ****     else
 279:FWLIB/src/stm32f4xx_can.c ****     {
 280:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 281:FWLIB/src/stm32f4xx_can.c ****     }
 282:FWLIB/src/stm32f4xx_can.c **** 
 283:FWLIB/src/stm32f4xx_can.c ****     /* Set the transmit FIFO priority */
 284:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 285:FWLIB/src/stm32f4xx_can.c ****     {
 286:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 287:FWLIB/src/stm32f4xx_can.c ****     }
 288:FWLIB/src/stm32f4xx_can.c ****     else
 289:FWLIB/src/stm32f4xx_can.c ****     {
 290:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 291:FWLIB/src/stm32f4xx_can.c ****     }
 292:FWLIB/src/stm32f4xx_can.c **** 
 293:FWLIB/src/stm32f4xx_can.c ****     /* Set the bit timing register */
 294:FWLIB/src/stm32f4xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 295:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 296:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 297:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 298:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 299:FWLIB/src/stm32f4xx_can.c **** 
 300:FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation */
 301:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 302:FWLIB/src/stm32f4xx_can.c **** 
 303:FWLIB/src/stm32f4xx_can.c ****    /* Wait the acknowledge */
 304:FWLIB/src/stm32f4xx_can.c ****    wait_ack = 0;
 305:FWLIB/src/stm32f4xx_can.c **** 
 306:FWLIB/src/stm32f4xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 307:FWLIB/src/stm32f4xx_can.c ****    {
 308:FWLIB/src/stm32f4xx_can.c ****      wait_ack++;
 309:FWLIB/src/stm32f4xx_can.c ****    }
 310:FWLIB/src/stm32f4xx_can.c **** 
 311:FWLIB/src/stm32f4xx_can.c ****     /* ...and check acknowledged */
 312:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 313:FWLIB/src/stm32f4xx_can.c ****     {
 314:FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Failed;
 315:FWLIB/src/stm32f4xx_can.c ****     }
 316:FWLIB/src/stm32f4xx_can.c ****     else
 317:FWLIB/src/stm32f4xx_can.c ****     {
 318:FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Success ;
 319:FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  /tmp/ccrnvJ70.s 			page 7


 320:FWLIB/src/stm32f4xx_can.c ****   }
 321:FWLIB/src/stm32f4xx_can.c **** 
 322:FWLIB/src/stm32f4xx_can.c ****   /* At this step, return the status of initialization */
 323:FWLIB/src/stm32f4xx_can.c ****   return InitStatus;
 324:FWLIB/src/stm32f4xx_can.c **** }
 325:FWLIB/src/stm32f4xx_can.c **** 
 326:FWLIB/src/stm32f4xx_can.c **** /**
 327:FWLIB/src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 328:FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 329:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 330:FWLIB/src/stm32f4xx_can.c ****   *         contains the configuration information.
 331:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 332:FWLIB/src/stm32f4xx_can.c ****   */
 333:FWLIB/src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 334:FWLIB/src/stm32f4xx_can.c **** {
 335:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 336:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 337:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 338:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 339:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 340:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 341:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 342:FWLIB/src/stm32f4xx_can.c **** 
 343:FWLIB/src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 344:FWLIB/src/stm32f4xx_can.c **** 
 345:FWLIB/src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 346:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 347:FWLIB/src/stm32f4xx_can.c **** 
 348:FWLIB/src/stm32f4xx_can.c ****   /* Filter Deactivation */
 349:FWLIB/src/stm32f4xx_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 350:FWLIB/src/stm32f4xx_can.c **** 
 351:FWLIB/src/stm32f4xx_can.c ****   /* Filter Scale */
 352:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 353:FWLIB/src/stm32f4xx_can.c ****   {
 354:FWLIB/src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 355:FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 356:FWLIB/src/stm32f4xx_can.c **** 
 357:FWLIB/src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 358:FWLIB/src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 359:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 360:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 361:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 362:FWLIB/src/stm32f4xx_can.c **** 
 363:FWLIB/src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 364:FWLIB/src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 365:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 366:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 367:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 368:FWLIB/src/stm32f4xx_can.c ****   }
 369:FWLIB/src/stm32f4xx_can.c **** 
 370:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 371:FWLIB/src/stm32f4xx_can.c ****   {
 372:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
 373:FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 374:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 375:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 376:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
ARM GAS  /tmp/ccrnvJ70.s 			page 8


 377:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 378:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 379:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 380:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 381:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 382:FWLIB/src/stm32f4xx_can.c ****   }
 383:FWLIB/src/stm32f4xx_can.c **** 
 384:FWLIB/src/stm32f4xx_can.c ****   /* Filter Mode */
 385:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 386:FWLIB/src/stm32f4xx_can.c ****   {
 387:FWLIB/src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 388:FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 389:FWLIB/src/stm32f4xx_can.c ****   }
 390:FWLIB/src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 391:FWLIB/src/stm32f4xx_can.c ****   {
 392:FWLIB/src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 393:FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 394:FWLIB/src/stm32f4xx_can.c ****   }
 395:FWLIB/src/stm32f4xx_can.c **** 
 396:FWLIB/src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 397:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 398:FWLIB/src/stm32f4xx_can.c ****   {
 399:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 400:FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 401:FWLIB/src/stm32f4xx_can.c ****   }
 402:FWLIB/src/stm32f4xx_can.c **** 
 403:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 404:FWLIB/src/stm32f4xx_can.c ****   {
 405:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 406:FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 407:FWLIB/src/stm32f4xx_can.c ****   }
 408:FWLIB/src/stm32f4xx_can.c ****   
 409:FWLIB/src/stm32f4xx_can.c ****   /* Filter activation */
 410:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 411:FWLIB/src/stm32f4xx_can.c ****   {
 412:FWLIB/src/stm32f4xx_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 413:FWLIB/src/stm32f4xx_can.c ****   }
 414:FWLIB/src/stm32f4xx_can.c **** 
 415:FWLIB/src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 416:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 417:FWLIB/src/stm32f4xx_can.c **** }
 418:FWLIB/src/stm32f4xx_can.c **** 
 419:FWLIB/src/stm32f4xx_can.c **** /**
 420:FWLIB/src/stm32f4xx_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 421:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
 422:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 423:FWLIB/src/stm32f4xx_can.c ****   */
 424:FWLIB/src/stm32f4xx_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 425:FWLIB/src/stm32f4xx_can.c **** {
 426:FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 427:FWLIB/src/stm32f4xx_can.c ****   
 428:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the time triggered communication mode */
 429:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 430:FWLIB/src/stm32f4xx_can.c ****   
 431:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic bus-off management */
 432:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 433:FWLIB/src/stm32f4xx_can.c ****   
ARM GAS  /tmp/ccrnvJ70.s 			page 9


 434:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic wake-up mode */
 435:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 436:FWLIB/src/stm32f4xx_can.c ****   
 437:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the no automatic retransmission */
 438:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 439:FWLIB/src/stm32f4xx_can.c ****   
 440:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the receive FIFO locked mode */
 441:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 442:FWLIB/src/stm32f4xx_can.c ****   
 443:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the transmit FIFO priority */
 444:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 445:FWLIB/src/stm32f4xx_can.c ****   
 446:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Mode member */
 447:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 448:FWLIB/src/stm32f4xx_can.c ****   
 449:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_SJW member */
 450:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 451:FWLIB/src/stm32f4xx_can.c ****   
 452:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS1 member */
 453:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 454:FWLIB/src/stm32f4xx_can.c ****   
 455:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS2 member */
 456:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 457:FWLIB/src/stm32f4xx_can.c ****   
 458:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Prescaler member */
 459:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 460:FWLIB/src/stm32f4xx_can.c **** }
 461:FWLIB/src/stm32f4xx_can.c **** 
 462:FWLIB/src/stm32f4xx_can.c **** /**
 463:FWLIB/src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 464:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 465:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 466:FWLIB/src/stm32f4xx_can.c ****   */
 467:FWLIB/src/stm32f4xx_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 468:FWLIB/src/stm32f4xx_can.c **** {
 469:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 470:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 471:FWLIB/src/stm32f4xx_can.c ****   
 472:FWLIB/src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 473:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 474:FWLIB/src/stm32f4xx_can.c ****   
 475:FWLIB/src/stm32f4xx_can.c ****   /* Select the start slave bank */
 476:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 477:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 478:FWLIB/src/stm32f4xx_can.c ****   
 479:FWLIB/src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 480:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 481:FWLIB/src/stm32f4xx_can.c **** }
 482:FWLIB/src/stm32f4xx_can.c **** 
 483:FWLIB/src/stm32f4xx_can.c **** /**
 484:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 485:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 486:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN peripheral. 
 487:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE (CAN reception/transmission is frozen
 488:FWLIB/src/stm32f4xx_can.c ****   *          during debug. Reception FIFOs can still be accessed/controlled normally) 
 489:FWLIB/src/stm32f4xx_can.c ****   *          or DISABLE (CAN is working during debug).
 490:FWLIB/src/stm32f4xx_can.c ****   * @retval None
ARM GAS  /tmp/ccrnvJ70.s 			page 10


 491:FWLIB/src/stm32f4xx_can.c ****   */
 492:FWLIB/src/stm32f4xx_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 493:FWLIB/src/stm32f4xx_can.c **** {
 494:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 495:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 496:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 497:FWLIB/src/stm32f4xx_can.c ****   
 498:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 499:FWLIB/src/stm32f4xx_can.c ****   {
 500:FWLIB/src/stm32f4xx_can.c ****     /* Enable Debug Freeze  */
 501:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= MCR_DBF;
 502:FWLIB/src/stm32f4xx_can.c ****   }
 503:FWLIB/src/stm32f4xx_can.c ****   else
 504:FWLIB/src/stm32f4xx_can.c ****   {
 505:FWLIB/src/stm32f4xx_can.c ****     /* Disable Debug Freeze */
 506:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 507:FWLIB/src/stm32f4xx_can.c ****   }
 508:FWLIB/src/stm32f4xx_can.c **** }
 509:FWLIB/src/stm32f4xx_can.c **** 
 510:FWLIB/src/stm32f4xx_can.c **** 
 511:FWLIB/src/stm32f4xx_can.c **** /**
 512:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the CAN Time TriggerOperation communication mode.
 513:FWLIB/src/stm32f4xx_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 514:FWLIB/src/stm32f4xx_can.c ****   *         sent over the CAN bus.  
 515:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 516:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: Mode new state. This parameter can be: ENABLE or DISABLE.
 517:FWLIB/src/stm32f4xx_can.c ****   *         When enabled, Time stamp (TIME[15:0]) value is  sent in the last two
 518:FWLIB/src/stm32f4xx_can.c ****   *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
 519:FWLIB/src/stm32f4xx_can.c ****   *         in data byte 7. 
 520:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 521:FWLIB/src/stm32f4xx_can.c ****   */
 522:FWLIB/src/stm32f4xx_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 523:FWLIB/src/stm32f4xx_can.c **** {
 524:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 525:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 526:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 527:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 528:FWLIB/src/stm32f4xx_can.c ****   {
 529:FWLIB/src/stm32f4xx_can.c ****     /* Enable the TTCM mode */
 530:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 531:FWLIB/src/stm32f4xx_can.c **** 
 532:FWLIB/src/stm32f4xx_can.c ****     /* Set TGT bits */
 533:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 534:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 535:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 536:FWLIB/src/stm32f4xx_can.c ****   }
 537:FWLIB/src/stm32f4xx_can.c ****   else
 538:FWLIB/src/stm32f4xx_can.c ****   {
 539:FWLIB/src/stm32f4xx_can.c ****     /* Disable the TTCM mode */
 540:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 541:FWLIB/src/stm32f4xx_can.c **** 
 542:FWLIB/src/stm32f4xx_can.c ****     /* Reset TGT bits */
 543:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 544:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 545:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 546:FWLIB/src/stm32f4xx_can.c ****   }
 547:FWLIB/src/stm32f4xx_can.c **** }
ARM GAS  /tmp/ccrnvJ70.s 			page 11


 548:FWLIB/src/stm32f4xx_can.c **** /**
 549:FWLIB/src/stm32f4xx_can.c ****   * @}
 550:FWLIB/src/stm32f4xx_can.c ****   */
 551:FWLIB/src/stm32f4xx_can.c **** 
 552:FWLIB/src/stm32f4xx_can.c **** 
 553:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group2 CAN Frames Transmission functions
 554:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Transmission functions 
 555:FWLIB/src/stm32f4xx_can.c ****  *
 556:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 557:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 558:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Transmission functions #####
 559:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 560:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 561:FWLIB/src/stm32f4xx_can.c ****       (+) Initiate and transmit a CAN frame message (if there is an empty mailbox).
 562:FWLIB/src/stm32f4xx_can.c ****       (+) Check the transmission status of a CAN Frame
 563:FWLIB/src/stm32f4xx_can.c ****       (+) Cancel a transmit request
 564:FWLIB/src/stm32f4xx_can.c ****    
 565:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 566:FWLIB/src/stm32f4xx_can.c ****   * @{
 567:FWLIB/src/stm32f4xx_can.c ****   */
 568:FWLIB/src/stm32f4xx_can.c **** 
 569:FWLIB/src/stm32f4xx_can.c **** /**
 570:FWLIB/src/stm32f4xx_can.c ****   * @brief  Initiates and transmits a CAN frame message.
 571:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 572:FWLIB/src/stm32f4xx_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
 573:FWLIB/src/stm32f4xx_can.c ****   * @retval The number of the mailbox that is used for transmission or
 574:FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
 575:FWLIB/src/stm32f4xx_can.c ****   */
 576:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 577:FWLIB/src/stm32f4xx_can.c **** {
 578:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 579:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 580:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 581:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 582:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 583:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 584:FWLIB/src/stm32f4xx_can.c **** 
 585:FWLIB/src/stm32f4xx_can.c ****   /* Select one empty transmit mailbox */
 586:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 587:FWLIB/src/stm32f4xx_can.c ****   {
 588:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 0;
 589:FWLIB/src/stm32f4xx_can.c ****   }
 590:FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 591:FWLIB/src/stm32f4xx_can.c ****   {
 592:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 1;
 593:FWLIB/src/stm32f4xx_can.c ****   }
 594:FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 595:FWLIB/src/stm32f4xx_can.c ****   {
 596:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 2;
 597:FWLIB/src/stm32f4xx_can.c ****   }
 598:FWLIB/src/stm32f4xx_can.c ****   else
 599:FWLIB/src/stm32f4xx_can.c ****   {
 600:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 601:FWLIB/src/stm32f4xx_can.c ****   }
 602:FWLIB/src/stm32f4xx_can.c **** 
 603:FWLIB/src/stm32f4xx_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 604:FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  /tmp/ccrnvJ70.s 			page 12


 605:FWLIB/src/stm32f4xx_can.c ****     /* Set up the Id */
 606:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 607:FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 608:FWLIB/src/stm32f4xx_can.c ****     {
 609:FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 610:FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 611:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 612:FWLIB/src/stm32f4xx_can.c ****     }
 613:FWLIB/src/stm32f4xx_can.c ****     else
 614:FWLIB/src/stm32f4xx_can.c ****     {
 615:FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 616:FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 617:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 618:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 619:FWLIB/src/stm32f4xx_can.c ****     }
 620:FWLIB/src/stm32f4xx_can.c ****     
 621:FWLIB/src/stm32f4xx_can.c ****     /* Set up the DLC */
 622:FWLIB/src/stm32f4xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 623:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 624:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 625:FWLIB/src/stm32f4xx_can.c **** 
 626:FWLIB/src/stm32f4xx_can.c ****     /* Set up the data field */
 627:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 628:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 629:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 630:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 631:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 632:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 633:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 634:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 635:FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 636:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 637:FWLIB/src/stm32f4xx_can.c ****   }
 638:FWLIB/src/stm32f4xx_can.c ****   return transmit_mailbox;
 639:FWLIB/src/stm32f4xx_can.c **** }
 640:FWLIB/src/stm32f4xx_can.c **** 
 641:FWLIB/src/stm32f4xx_can.c **** /**
 642:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks the transmission status of a CAN Frame.
 643:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 644:FWLIB/src/stm32f4xx_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
 645:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
 646:FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_Failed in an other case.
 647:FWLIB/src/stm32f4xx_can.c ****   */
 648:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 649:FWLIB/src/stm32f4xx_can.c **** {
 650:FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
 651:FWLIB/src/stm32f4xx_can.c **** 
 652:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 653:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 654:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 655:FWLIB/src/stm32f4xx_can.c ****  
 656:FWLIB/src/stm32f4xx_can.c ****   switch (TransmitMailbox)
 657:FWLIB/src/stm32f4xx_can.c ****   {
 658:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): 
 659:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 660:FWLIB/src/stm32f4xx_can.c ****       break;
 661:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): 
ARM GAS  /tmp/ccrnvJ70.s 			page 13


 662:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 663:FWLIB/src/stm32f4xx_can.c ****       break;
 664:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 665:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 666:FWLIB/src/stm32f4xx_can.c ****       break;
 667:FWLIB/src/stm32f4xx_can.c ****     default:
 668:FWLIB/src/stm32f4xx_can.c ****       state = CAN_TxStatus_Failed;
 669:FWLIB/src/stm32f4xx_can.c ****       break;
 670:FWLIB/src/stm32f4xx_can.c ****   }
 671:FWLIB/src/stm32f4xx_can.c ****   switch (state)
 672:FWLIB/src/stm32f4xx_can.c ****   {
 673:FWLIB/src/stm32f4xx_can.c ****       /* transmit pending  */
 674:FWLIB/src/stm32f4xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 675:FWLIB/src/stm32f4xx_can.c ****       break;
 676:FWLIB/src/stm32f4xx_can.c ****       /* transmit failed  */
 677:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 678:FWLIB/src/stm32f4xx_can.c ****       break;
 679:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 680:FWLIB/src/stm32f4xx_can.c ****       break;
 681:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 682:FWLIB/src/stm32f4xx_can.c ****       break;
 683:FWLIB/src/stm32f4xx_can.c ****       /* transmit succeeded  */
 684:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 685:FWLIB/src/stm32f4xx_can.c ****       break;
 686:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 687:FWLIB/src/stm32f4xx_can.c ****       break;
 688:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 689:FWLIB/src/stm32f4xx_can.c ****       break;
 690:FWLIB/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 691:FWLIB/src/stm32f4xx_can.c ****       break;
 692:FWLIB/src/stm32f4xx_can.c ****   }
 693:FWLIB/src/stm32f4xx_can.c ****   return (uint8_t) state;
 694:FWLIB/src/stm32f4xx_can.c **** }
 695:FWLIB/src/stm32f4xx_can.c **** 
 696:FWLIB/src/stm32f4xx_can.c **** /**
 697:FWLIB/src/stm32f4xx_can.c ****   * @brief  Cancels a transmit request.
 698:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 699:FWLIB/src/stm32f4xx_can.c ****   * @param  Mailbox: Mailbox number.
 700:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 701:FWLIB/src/stm32f4xx_can.c ****   */
 702:FWLIB/src/stm32f4xx_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 703:FWLIB/src/stm32f4xx_can.c **** {
 704:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 705:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 706:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 707:FWLIB/src/stm32f4xx_can.c ****   /* abort transmission */
 708:FWLIB/src/stm32f4xx_can.c ****   switch (Mailbox)
 709:FWLIB/src/stm32f4xx_can.c ****   {
 710:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 711:FWLIB/src/stm32f4xx_can.c ****       break;
 712:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 713:FWLIB/src/stm32f4xx_can.c ****       break;
 714:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 715:FWLIB/src/stm32f4xx_can.c ****       break;
 716:FWLIB/src/stm32f4xx_can.c ****     default:
 717:FWLIB/src/stm32f4xx_can.c ****       break;
 718:FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  /tmp/ccrnvJ70.s 			page 14


 719:FWLIB/src/stm32f4xx_can.c **** }
 720:FWLIB/src/stm32f4xx_can.c **** /**
 721:FWLIB/src/stm32f4xx_can.c ****   * @}
 722:FWLIB/src/stm32f4xx_can.c ****   */
 723:FWLIB/src/stm32f4xx_can.c **** 
 724:FWLIB/src/stm32f4xx_can.c **** 
 725:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group3 CAN Frames Reception functions
 726:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Reception functions 
 727:FWLIB/src/stm32f4xx_can.c ****  *
 728:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 729:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 730:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Reception functions #####
 731:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 732:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 733:FWLIB/src/stm32f4xx_can.c ****       (+) Receive a correct CAN frame
 734:FWLIB/src/stm32f4xx_can.c ****       (+) Release a specified receive FIFO (2 FIFOs are available)
 735:FWLIB/src/stm32f4xx_can.c ****       (+) Return the number of the pending received CAN frames
 736:FWLIB/src/stm32f4xx_can.c ****    
 737:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 738:FWLIB/src/stm32f4xx_can.c ****   * @{
 739:FWLIB/src/stm32f4xx_can.c ****   */
 740:FWLIB/src/stm32f4xx_can.c **** 
 741:FWLIB/src/stm32f4xx_can.c **** /**
 742:FWLIB/src/stm32f4xx_can.c ****   * @brief  Receives a correct CAN frame.
 743:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 744:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 745:FWLIB/src/stm32f4xx_can.c ****   * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
 746:FWLIB/src/stm32f4xx_can.c ****   *         CAN DLC, CAN data and FMI number.
 747:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 748:FWLIB/src/stm32f4xx_can.c ****   */
 749:FWLIB/src/stm32f4xx_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 750:FWLIB/src/stm32f4xx_can.c **** {
 751:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 752:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 753:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 754:FWLIB/src/stm32f4xx_can.c ****   /* Get the Id */
 755:FWLIB/src/stm32f4xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 756:FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 757:FWLIB/src/stm32f4xx_can.c ****   {
 758:FWLIB/src/stm32f4xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 759:FWLIB/src/stm32f4xx_can.c ****   }
 760:FWLIB/src/stm32f4xx_can.c ****   else
 761:FWLIB/src/stm32f4xx_can.c ****   {
 762:FWLIB/src/stm32f4xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 763:FWLIB/src/stm32f4xx_can.c ****   }
 764:FWLIB/src/stm32f4xx_can.c ****   
 765:FWLIB/src/stm32f4xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 766:FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 767:FWLIB/src/stm32f4xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 768:FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 769:FWLIB/src/stm32f4xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 770:FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 771:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 772:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 773:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 774:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 775:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
ARM GAS  /tmp/ccrnvJ70.s 			page 15


 776:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 777:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 778:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 779:FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 780:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 781:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 782:FWLIB/src/stm32f4xx_can.c ****   {
 783:FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 784:FWLIB/src/stm32f4xx_can.c ****   }
 785:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 786:FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 787:FWLIB/src/stm32f4xx_can.c ****   {
 788:FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 789:FWLIB/src/stm32f4xx_can.c ****   }
 790:FWLIB/src/stm32f4xx_can.c **** }
 791:FWLIB/src/stm32f4xx_can.c **** 
 792:FWLIB/src/stm32f4xx_can.c **** /**
 793:FWLIB/src/stm32f4xx_can.c ****   * @brief  Releases the specified receive FIFO.
 794:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 795:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 796:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 797:FWLIB/src/stm32f4xx_can.c ****   */
 798:FWLIB/src/stm32f4xx_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 799:FWLIB/src/stm32f4xx_can.c **** {
 800:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 801:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 802:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 803:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 804:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 805:FWLIB/src/stm32f4xx_can.c ****   {
 806:FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 807:FWLIB/src/stm32f4xx_can.c ****   }
 808:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 809:FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 810:FWLIB/src/stm32f4xx_can.c ****   {
 811:FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 812:FWLIB/src/stm32f4xx_can.c ****   }
 813:FWLIB/src/stm32f4xx_can.c **** }
 814:FWLIB/src/stm32f4xx_can.c **** 
 815:FWLIB/src/stm32f4xx_can.c **** /**
 816:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the number of pending received messages.
 817:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 818:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 819:FWLIB/src/stm32f4xx_can.c ****   * @retval NbMessage : which is the number of pending message.
 820:FWLIB/src/stm32f4xx_can.c ****   */
 821:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 822:FWLIB/src/stm32f4xx_can.c **** {
 823:FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 824:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 825:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 826:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 827:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 828:FWLIB/src/stm32f4xx_can.c ****   {
 829:FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 830:FWLIB/src/stm32f4xx_can.c ****   }
 831:FWLIB/src/stm32f4xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 832:FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  /tmp/ccrnvJ70.s 			page 16


 833:FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 834:FWLIB/src/stm32f4xx_can.c ****   }
 835:FWLIB/src/stm32f4xx_can.c ****   else
 836:FWLIB/src/stm32f4xx_can.c ****   {
 837:FWLIB/src/stm32f4xx_can.c ****     message_pending = 0;
 838:FWLIB/src/stm32f4xx_can.c ****   }
 839:FWLIB/src/stm32f4xx_can.c ****   return message_pending;
 840:FWLIB/src/stm32f4xx_can.c **** }
 841:FWLIB/src/stm32f4xx_can.c **** /**
 842:FWLIB/src/stm32f4xx_can.c ****   * @}
 843:FWLIB/src/stm32f4xx_can.c ****   */
 844:FWLIB/src/stm32f4xx_can.c **** 
 845:FWLIB/src/stm32f4xx_can.c **** 
 846:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group4 CAN Operation modes functions
 847:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Operation modes functions 
 848:FWLIB/src/stm32f4xx_can.c ****  *
 849:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 850:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 851:FWLIB/src/stm32f4xx_can.c ****                     ##### CAN Operation modes functions #####
 852:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 853:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to select the CAN Operation modes
 854:FWLIB/src/stm32f4xx_can.c ****       (+) sleep mode
 855:FWLIB/src/stm32f4xx_can.c ****       (+) normal mode 
 856:FWLIB/src/stm32f4xx_can.c ****       (+) initialization mode
 857:FWLIB/src/stm32f4xx_can.c ****    
 858:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 859:FWLIB/src/stm32f4xx_can.c ****   * @{
 860:FWLIB/src/stm32f4xx_can.c ****   */
 861:FWLIB/src/stm32f4xx_can.c ****   
 862:FWLIB/src/stm32f4xx_can.c ****   
 863:FWLIB/src/stm32f4xx_can.c **** /**
 864:FWLIB/src/stm32f4xx_can.c ****   * @brief  Selects the CAN Operation mode.
 865:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_OperatingMode: CAN Operating Mode.
 866:FWLIB/src/stm32f4xx_can.c ****   *         This parameter can be one of @ref CAN_OperatingMode_TypeDef enumeration.
 867:FWLIB/src/stm32f4xx_can.c ****   * @retval status of the requested mode which can be 
 868:FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
 869:FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
 870:FWLIB/src/stm32f4xx_can.c ****   */
 871:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
 872:FWLIB/src/stm32f4xx_can.c **** {
 873:FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 874:FWLIB/src/stm32f4xx_can.c ****   
 875:FWLIB/src/stm32f4xx_can.c ****   /* Timeout for INAK or also for SLAK bits*/
 876:FWLIB/src/stm32f4xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 877:FWLIB/src/stm32f4xx_can.c **** 
 878:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 879:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 880:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 881:FWLIB/src/stm32f4xx_can.c **** 
 882:FWLIB/src/stm32f4xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 883:FWLIB/src/stm32f4xx_can.c ****   {
 884:FWLIB/src/stm32f4xx_can.c ****     /* Request initialisation */
 885:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 886:FWLIB/src/stm32f4xx_can.c **** 
 887:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
 888:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 889:FWLIB/src/stm32f4xx_can.c ****     {
ARM GAS  /tmp/ccrnvJ70.s 			page 17


 890:FWLIB/src/stm32f4xx_can.c ****       timeout--;
 891:FWLIB/src/stm32f4xx_can.c ****     }
 892:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 893:FWLIB/src/stm32f4xx_can.c ****     {
 894:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 895:FWLIB/src/stm32f4xx_can.c ****     }
 896:FWLIB/src/stm32f4xx_can.c ****     else
 897:FWLIB/src/stm32f4xx_can.c ****     {
 898:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 899:FWLIB/src/stm32f4xx_can.c ****     }
 900:FWLIB/src/stm32f4xx_can.c ****   }
 901:FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 902:FWLIB/src/stm32f4xx_can.c ****   {
 903:FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
 904:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 905:FWLIB/src/stm32f4xx_can.c **** 
 906:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
 907:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 908:FWLIB/src/stm32f4xx_can.c ****     {
 909:FWLIB/src/stm32f4xx_can.c ****       timeout--;
 910:FWLIB/src/stm32f4xx_can.c ****     }
 911:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 912:FWLIB/src/stm32f4xx_can.c ****     {
 913:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 914:FWLIB/src/stm32f4xx_can.c ****     }
 915:FWLIB/src/stm32f4xx_can.c ****     else
 916:FWLIB/src/stm32f4xx_can.c ****     {
 917:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 918:FWLIB/src/stm32f4xx_can.c ****     }
 919:FWLIB/src/stm32f4xx_can.c ****   }
 920:FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 921:FWLIB/src/stm32f4xx_can.c ****   {
 922:FWLIB/src/stm32f4xx_can.c ****     /* Request Sleep mode */
 923:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 924:FWLIB/src/stm32f4xx_can.c **** 
 925:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
 926:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 927:FWLIB/src/stm32f4xx_can.c ****     {
 928:FWLIB/src/stm32f4xx_can.c ****       timeout--;
 929:FWLIB/src/stm32f4xx_can.c ****     }
 930:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 931:FWLIB/src/stm32f4xx_can.c ****     {
 932:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 933:FWLIB/src/stm32f4xx_can.c ****     }
 934:FWLIB/src/stm32f4xx_can.c ****     else
 935:FWLIB/src/stm32f4xx_can.c ****     {
 936:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 937:FWLIB/src/stm32f4xx_can.c ****     }
 938:FWLIB/src/stm32f4xx_can.c ****   }
 939:FWLIB/src/stm32f4xx_can.c ****   else
 940:FWLIB/src/stm32f4xx_can.c ****   {
 941:FWLIB/src/stm32f4xx_can.c ****     status = CAN_ModeStatus_Failed;
 942:FWLIB/src/stm32f4xx_can.c ****   }
 943:FWLIB/src/stm32f4xx_can.c **** 
 944:FWLIB/src/stm32f4xx_can.c ****   return  (uint8_t) status;
 945:FWLIB/src/stm32f4xx_can.c **** }
 946:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /tmp/ccrnvJ70.s 			page 18


 947:FWLIB/src/stm32f4xx_can.c **** /**
 948:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enters the Sleep (low power) mode.
 949:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 950:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
 951:FWLIB/src/stm32f4xx_can.c ****   */
 952:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
 953:FWLIB/src/stm32f4xx_can.c **** {
 954:FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 955:FWLIB/src/stm32f4xx_can.c ****   
 956:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 957:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 958:FWLIB/src/stm32f4xx_can.c ****     
 959:FWLIB/src/stm32f4xx_can.c ****   /* Request Sleep mode */
 960:FWLIB/src/stm32f4xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 961:FWLIB/src/stm32f4xx_can.c ****    
 962:FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
 963:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 964:FWLIB/src/stm32f4xx_can.c ****   {
 965:FWLIB/src/stm32f4xx_can.c ****     /* Sleep mode not entered */
 966:FWLIB/src/stm32f4xx_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 967:FWLIB/src/stm32f4xx_can.c ****   }
 968:FWLIB/src/stm32f4xx_can.c ****   /* return sleep mode status */
 969:FWLIB/src/stm32f4xx_can.c ****    return (uint8_t)sleepstatus;
 970:FWLIB/src/stm32f4xx_can.c **** }
 971:FWLIB/src/stm32f4xx_can.c **** 
 972:FWLIB/src/stm32f4xx_can.c **** /**
 973:FWLIB/src/stm32f4xx_can.c ****   * @brief  Wakes up the CAN peripheral from sleep mode .
 974:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 975:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
 976:FWLIB/src/stm32f4xx_can.c ****   */
 977:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
 978:FWLIB/src/stm32f4xx_can.c **** {
 979:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 980:FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 981:FWLIB/src/stm32f4xx_can.c ****   
 982:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 983:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 984:FWLIB/src/stm32f4xx_can.c ****     
 985:FWLIB/src/stm32f4xx_can.c ****   /* Wake up request */
 986:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 987:FWLIB/src/stm32f4xx_can.c ****     
 988:FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
 989:FWLIB/src/stm32f4xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 990:FWLIB/src/stm32f4xx_can.c ****   {
 991:FWLIB/src/stm32f4xx_can.c ****    wait_slak--;
 992:FWLIB/src/stm32f4xx_can.c ****   }
 993:FWLIB/src/stm32f4xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 994:FWLIB/src/stm32f4xx_can.c ****   {
 995:FWLIB/src/stm32f4xx_can.c ****    /* wake up done : Sleep mode exited */
 996:FWLIB/src/stm32f4xx_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 997:FWLIB/src/stm32f4xx_can.c ****   }
 998:FWLIB/src/stm32f4xx_can.c ****   /* return wakeup status */
 999:FWLIB/src/stm32f4xx_can.c ****   return (uint8_t)wakeupstatus;
1000:FWLIB/src/stm32f4xx_can.c **** }
1001:FWLIB/src/stm32f4xx_can.c **** /**
1002:FWLIB/src/stm32f4xx_can.c ****   * @}
1003:FWLIB/src/stm32f4xx_can.c ****   */
ARM GAS  /tmp/ccrnvJ70.s 			page 19


1004:FWLIB/src/stm32f4xx_can.c **** 
1005:FWLIB/src/stm32f4xx_can.c **** 
1006:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group5 CAN Bus Error management functions
1007:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Bus Error management functions 
1008:FWLIB/src/stm32f4xx_can.c ****  *
1009:FWLIB/src/stm32f4xx_can.c **** @verbatim    
1010:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1011:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Bus Error management functions #####
1012:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1013:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
1014:FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx's last error code (LEC)
1015:FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx Receive Error Counter (REC)
1016:FWLIB/src/stm32f4xx_can.c ****       (+) Return the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1017:FWLIB/src/stm32f4xx_can.c ****    
1018:FWLIB/src/stm32f4xx_can.c ****       -@- If TEC is greater than 255, The CAN is in bus-off state.
1019:FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 96, an Error warning flag occurs.
1020:FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 127, an Error Passive Flag occurs.
1021:FWLIB/src/stm32f4xx_can.c ****                         
1022:FWLIB/src/stm32f4xx_can.c **** @endverbatim
1023:FWLIB/src/stm32f4xx_can.c ****   * @{
1024:FWLIB/src/stm32f4xx_can.c ****   */
1025:FWLIB/src/stm32f4xx_can.c ****   
1026:FWLIB/src/stm32f4xx_can.c **** /**
1027:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx's last error code (LEC).
1028:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
1029:FWLIB/src/stm32f4xx_can.c ****   * @retval Error code: 
1030:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_NoErr: No Error  
1031:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_StuffErr: Stuff Error
1032:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_FormErr: Form Error
1033:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_ACKErr : Acknowledgment Error
1034:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitRecessiveErr: Bit Recessive Error
1035:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
1036:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_CRCErr: CRC Error
1037:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
1038:FWLIB/src/stm32f4xx_can.c ****   */
1039:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
1040:FWLIB/src/stm32f4xx_can.c **** {
1041:FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
1042:FWLIB/src/stm32f4xx_can.c ****   
1043:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1044:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1045:FWLIB/src/stm32f4xx_can.c ****   
1046:FWLIB/src/stm32f4xx_can.c ****   /* Get the error code*/
1047:FWLIB/src/stm32f4xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
1048:FWLIB/src/stm32f4xx_can.c ****   
1049:FWLIB/src/stm32f4xx_can.c ****   /* Return the error code*/
1050:FWLIB/src/stm32f4xx_can.c ****   return errorcode;
1051:FWLIB/src/stm32f4xx_can.c **** }
1052:FWLIB/src/stm32f4xx_can.c **** 
1053:FWLIB/src/stm32f4xx_can.c **** /**
1054:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
1055:FWLIB/src/stm32f4xx_can.c ****   * @note   In case of an error during reception, this counter is incremented 
1056:FWLIB/src/stm32f4xx_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
1057:FWLIB/src/stm32f4xx_can.c ****   *         standard. After every successful reception, the counter is 
1058:FWLIB/src/stm32f4xx_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
1059:FWLIB/src/stm32f4xx_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
1060:FWLIB/src/stm32f4xx_can.c ****   *         error passive state.  
ARM GAS  /tmp/ccrnvJ70.s 			page 20


1061:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
1062:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN Receive Error Counter. 
1063:FWLIB/src/stm32f4xx_can.c ****   */
1064:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
1065:FWLIB/src/stm32f4xx_can.c **** {
1066:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1067:FWLIB/src/stm32f4xx_can.c ****   
1068:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1069:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1070:FWLIB/src/stm32f4xx_can.c ****   
1071:FWLIB/src/stm32f4xx_can.c ****   /* Get the Receive Error Counter*/
1072:FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
1073:FWLIB/src/stm32f4xx_can.c ****   
1074:FWLIB/src/stm32f4xx_can.c ****   /* Return the Receive Error Counter*/
1075:FWLIB/src/stm32f4xx_can.c ****   return counter;
1076:FWLIB/src/stm32f4xx_can.c **** }
1077:FWLIB/src/stm32f4xx_can.c **** 
1078:FWLIB/src/stm32f4xx_can.c **** 
1079:FWLIB/src/stm32f4xx_can.c **** /**
1080:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1081:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1082:FWLIB/src/stm32f4xx_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
1083:FWLIB/src/stm32f4xx_can.c ****   */
1084:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
1085:FWLIB/src/stm32f4xx_can.c **** {
1086:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1087:FWLIB/src/stm32f4xx_can.c ****   
1088:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1089:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1090:FWLIB/src/stm32f4xx_can.c ****   
1091:FWLIB/src/stm32f4xx_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1092:FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
1093:FWLIB/src/stm32f4xx_can.c ****   
1094:FWLIB/src/stm32f4xx_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1095:FWLIB/src/stm32f4xx_can.c ****   return counter;
1096:FWLIB/src/stm32f4xx_can.c **** }
1097:FWLIB/src/stm32f4xx_can.c **** /**
1098:FWLIB/src/stm32f4xx_can.c ****   * @}
1099:FWLIB/src/stm32f4xx_can.c ****   */
1100:FWLIB/src/stm32f4xx_can.c **** 
1101:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group6 Interrupts and flags management functions
1102:FWLIB/src/stm32f4xx_can.c ****  *  @brief   Interrupts and flags management functions
1103:FWLIB/src/stm32f4xx_can.c ****  *
1104:FWLIB/src/stm32f4xx_can.c **** @verbatim   
1105:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1106:FWLIB/src/stm32f4xx_can.c ****               ##### Interrupts and flags management functions #####
1107:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1108:FWLIB/src/stm32f4xx_can.c **** 
1109:FWLIB/src/stm32f4xx_can.c ****      [..] This section provides functions allowing to configure the CAN Interrupts 
1110:FWLIB/src/stm32f4xx_can.c ****           and to get the status and clear flags and Interrupts pending bits.
1111:FWLIB/src/stm32f4xx_can.c ****   
1112:FWLIB/src/stm32f4xx_can.c ****           The CAN provides 14 Interrupts sources and 15 Flags:
1113:FWLIB/src/stm32f4xx_can.c **** 
1114:FWLIB/src/stm32f4xx_can.c ****    
1115:FWLIB/src/stm32f4xx_can.c ****   *** Flags ***
1116:FWLIB/src/stm32f4xx_can.c ****   =============
1117:FWLIB/src/stm32f4xx_can.c ****     [..] The 15 flags can be divided on 4 groups: 
ARM GAS  /tmp/ccrnvJ70.s 			page 21


1118:FWLIB/src/stm32f4xx_can.c **** 
1119:FWLIB/src/stm32f4xx_can.c ****       (+) Transmit Flags
1120:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP0, 
1121:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP1, 
1122:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP2  : Request completed MailBoxes 0, 1 and 2  Flags
1123:FWLIB/src/stm32f4xx_can.c ****                                Set when when the last request (transmit or abort)
1124:FWLIB/src/stm32f4xx_can.c ****                                has been performed. 
1125:FWLIB/src/stm32f4xx_can.c **** 
1126:FWLIB/src/stm32f4xx_can.c ****       (+) Receive Flags
1127:FWLIB/src/stm32f4xx_can.c **** 
1128:FWLIB/src/stm32f4xx_can.c **** 
1129:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP0,
1130:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP1   : FIFO 0 and 1 Message Pending Flags 
1131:FWLIB/src/stm32f4xx_can.c ****                                set to signal that messages are pending in the receive 
1132:FWLIB/src/stm32f4xx_can.c ****                                FIFO.
1133:FWLIB/src/stm32f4xx_can.c ****                                These Flags are cleared only by hardware. 
1134:FWLIB/src/stm32f4xx_can.c **** 
1135:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF0,
1136:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF1    : FIFO 0 and 1 Full Flags
1137:FWLIB/src/stm32f4xx_can.c ****                                set when three messages are stored in the selected 
1138:FWLIB/src/stm32f4xx_can.c ****                                FIFO.                        
1139:FWLIB/src/stm32f4xx_can.c **** 
1140:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV0              
1141:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV1   : FIFO 0 and 1 Overrun Flags
1142:FWLIB/src/stm32f4xx_can.c ****                                set when a new message has been received and passed 
1143:FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.         
1144:FWLIB/src/stm32f4xx_can.c **** 
1145:FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Flags
1146:FWLIB/src/stm32f4xx_can.c **** 
1147:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_WKU    : Wake up Flag
1148:FWLIB/src/stm32f4xx_can.c ****                                set to signal that a SOF bit has been detected while 
1149:FWLIB/src/stm32f4xx_can.c ****                                the CAN hardware was in Sleep mode. 
1150:FWLIB/src/stm32f4xx_can.c ****         
1151:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_SLAK   : Sleep acknowledge Flag
1152:FWLIB/src/stm32f4xx_can.c ****                                Set to signal that the CAN has entered Sleep Mode. 
1153:FWLIB/src/stm32f4xx_can.c ****     
1154:FWLIB/src/stm32f4xx_can.c ****       (+) Error Flags
1155:FWLIB/src/stm32f4xx_can.c **** 
1156:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EWG    : Error Warning Flag
1157:FWLIB/src/stm32f4xx_can.c ****                                Set when the warning limit has been reached (Receive 
1158:FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter greater than 96). 
1159:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1160:FWLIB/src/stm32f4xx_can.c ****                             
1161:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EPV    : Error Passive Flag
1162:FWLIB/src/stm32f4xx_can.c ****                                Set when the Error Passive limit has been reached 
1163:FWLIB/src/stm32f4xx_can.c ****                                (Receive Error Counter or Transmit Error Counter 
1164:FWLIB/src/stm32f4xx_can.c ****                                greater than 127).
1165:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1166:FWLIB/src/stm32f4xx_can.c ****                              
1167:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_BOF    : Bus-Off Flag
1168:FWLIB/src/stm32f4xx_can.c ****                                set when CAN enters the bus-off state. The bus-off 
1169:FWLIB/src/stm32f4xx_can.c ****                                state is entered on TEC overflow, greater than 255.
1170:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1171:FWLIB/src/stm32f4xx_can.c ****                                    
1172:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_LEC    : Last error code Flag
1173:FWLIB/src/stm32f4xx_can.c ****                                set If a message has been transferred (reception or
1174:FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.              
ARM GAS  /tmp/ccrnvJ70.s 			page 22


1175:FWLIB/src/stm32f4xx_can.c ****                            
1176:FWLIB/src/stm32f4xx_can.c ****   *** Interrupts ***
1177:FWLIB/src/stm32f4xx_can.c ****   ==================
1178:FWLIB/src/stm32f4xx_can.c ****     [..] The 14 interrupts can be divided on 4 groups: 
1179:FWLIB/src/stm32f4xx_can.c ****   
1180:FWLIB/src/stm32f4xx_can.c ****       (+) Transmit interrupt
1181:FWLIB/src/stm32f4xx_can.c ****   
1182:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_TME   :  Transmit mailbox empty Interrupt
1183:FWLIB/src/stm32f4xx_can.c ****                              if enabled, this interrupt source is pending when 
1184:FWLIB/src/stm32f4xx_can.c ****                              no transmit request are pending for Tx mailboxes.      
1185:FWLIB/src/stm32f4xx_can.c **** 
1186:FWLIB/src/stm32f4xx_can.c ****       (+) Receive Interrupts
1187:FWLIB/src/stm32f4xx_can.c ****          
1188:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP0,
1189:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP1    :  FIFO 0 and FIFO1 message pending Interrupts
1190:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1191:FWLIB/src/stm32f4xx_can.c ****                                when messages are pending in the receive FIFO.
1192:FWLIB/src/stm32f4xx_can.c ****                                The corresponding interrupt pending bits are cleared 
1193:FWLIB/src/stm32f4xx_can.c ****                                only by hardware.
1194:FWLIB/src/stm32f4xx_can.c ****                 
1195:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF0,              
1196:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF1     :  FIFO 0 and FIFO1 full Interrupts
1197:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1198:FWLIB/src/stm32f4xx_can.c ****                                when three messages are stored in the selected FIFO.
1199:FWLIB/src/stm32f4xx_can.c ****         
1200:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV0,        
1201:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV1    :  FIFO 0 and FIFO1 overrun Interrupts        
1202:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1203:FWLIB/src/stm32f4xx_can.c ****                                when a new message has been received and passed 
1204:FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.
1205:FWLIB/src/stm32f4xx_can.c **** 
1206:FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Interrupts
1207:FWLIB/src/stm32f4xx_can.c ****          
1208:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_WKU     :  Wake-up Interrupt
1209:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1210:FWLIB/src/stm32f4xx_can.c ****                                a SOF bit has been detected while the CAN hardware 
1211:FWLIB/src/stm32f4xx_can.c ****                                was in Sleep mode.
1212:FWLIB/src/stm32f4xx_can.c ****                                   
1213:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_SLK     :  Sleep acknowledge Interrupt
1214:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1215:FWLIB/src/stm32f4xx_can.c ****                                the CAN has entered Sleep Mode.       
1216:FWLIB/src/stm32f4xx_can.c **** 
1217:FWLIB/src/stm32f4xx_can.c ****       (+) Error Interrupts 
1218:FWLIB/src/stm32f4xx_can.c ****         
1219:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EWG     :  Error warning Interrupt 
1220:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1221:FWLIB/src/stm32f4xx_can.c ****                                the warning limit has been reached (Receive Error 
1222:FWLIB/src/stm32f4xx_can.c ****                                Counter or Transmit Error Counter=96). 
1223:FWLIB/src/stm32f4xx_can.c ****                                
1224:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EPV     :  Error passive Interrupt        
1225:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1226:FWLIB/src/stm32f4xx_can.c ****                                the Error Passive limit has been reached (Receive 
1227:FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter>127).
1228:FWLIB/src/stm32f4xx_can.c ****                           
1229:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_BOF     :  Bus-off Interrupt
1230:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1231:FWLIB/src/stm32f4xx_can.c ****                                CAN enters the bus-off state. The bus-off state is 
ARM GAS  /tmp/ccrnvJ70.s 			page 23


1232:FWLIB/src/stm32f4xx_can.c ****                                entered on TEC overflow, greater than 255.
1233:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1234:FWLIB/src/stm32f4xx_can.c ****                                   
1235:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_LEC     :  Last error code Interrupt        
1236:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending  when
1237:FWLIB/src/stm32f4xx_can.c ****                                a message has been transferred (reception or
1238:FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.
1239:FWLIB/src/stm32f4xx_can.c ****                           
1240:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_ERR     :  Error Interrupt
1241:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1242:FWLIB/src/stm32f4xx_can.c ****                                an error condition is pending.      
1243:FWLIB/src/stm32f4xx_can.c ****                       
1244:FWLIB/src/stm32f4xx_can.c ****     [..] Managing the CAN controller events :
1245:FWLIB/src/stm32f4xx_can.c ****  
1246:FWLIB/src/stm32f4xx_can.c ****          The user should identify which mode will be used in his application to 
1247:FWLIB/src/stm32f4xx_can.c ****          manage the CAN controller events: Polling mode or Interrupt mode.
1248:FWLIB/src/stm32f4xx_can.c ****   
1249:FWLIB/src/stm32f4xx_can.c ****       (#) In the Polling Mode it is advised to use the following functions:
1250:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetFlagStatus() : to check if flags events occur. 
1251:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearFlag()     : to clear the flags events.
1252:FWLIB/src/stm32f4xx_can.c ****   
1253:FWLIB/src/stm32f4xx_can.c **** 
1254:FWLIB/src/stm32f4xx_can.c ****   
1255:FWLIB/src/stm32f4xx_can.c ****       (#) In the Interrupt Mode it is advised to use the following functions:
1256:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ITConfig()       : to enable or disable the interrupt source.
1257:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetITStatus()    : to check if Interrupt occurs.
1258:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearITPendingBit() : to clear the Interrupt pending Bit 
1259:FWLIB/src/stm32f4xx_can.c ****             (corresponding Flag).
1260:FWLIB/src/stm32f4xx_can.c ****         -@@-  This function has no impact on CAN_IT_FMP0 and CAN_IT_FMP1 Interrupts 
1261:FWLIB/src/stm32f4xx_can.c ****              pending bits since there are cleared only by hardware. 
1262:FWLIB/src/stm32f4xx_can.c ****   
1263:FWLIB/src/stm32f4xx_can.c **** @endverbatim
1264:FWLIB/src/stm32f4xx_can.c ****   * @{
1265:FWLIB/src/stm32f4xx_can.c ****   */ 
1266:FWLIB/src/stm32f4xx_can.c **** /**
1267:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
1268:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1269:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
1270:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: 
1271:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1272:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1273:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1274:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1275:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1276:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1277:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1278:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1279:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1280:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1281:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1282:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1283:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1284:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1285:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN interrupts.
1286:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE or DISABLE.
1287:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1288:FWLIB/src/stm32f4xx_can.c ****   */
ARM GAS  /tmp/ccrnvJ70.s 			page 24


1289:FWLIB/src/stm32f4xx_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1290:FWLIB/src/stm32f4xx_can.c **** {
1291:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1292:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1293:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1294:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1295:FWLIB/src/stm32f4xx_can.c **** 
1296:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
1297:FWLIB/src/stm32f4xx_can.c ****   {
1298:FWLIB/src/stm32f4xx_can.c ****     /* Enable the selected CANx interrupt */
1299:FWLIB/src/stm32f4xx_can.c ****     CANx->IER |= CAN_IT;
1300:FWLIB/src/stm32f4xx_can.c ****   }
1301:FWLIB/src/stm32f4xx_can.c ****   else
1302:FWLIB/src/stm32f4xx_can.c ****   {
1303:FWLIB/src/stm32f4xx_can.c ****     /* Disable the selected CANx interrupt */
1304:FWLIB/src/stm32f4xx_can.c ****     CANx->IER &= ~CAN_IT;
1305:FWLIB/src/stm32f4xx_can.c ****   }
1306:FWLIB/src/stm32f4xx_can.c **** }
1307:FWLIB/src/stm32f4xx_can.c **** /**
1308:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1309:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1310:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1311:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1312:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1313:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1314:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag
1315:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP0: FIFO 0 Message Pending Flag   
1316:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1317:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag 
1318:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP1: FIFO 1 Message Pending Flag   
1319:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1320:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1321:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1322:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag 
1323:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EWG: Error Warning Flag
1324:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EPV: Error Passive Flag  
1325:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_BOF: Bus-Off Flag    
1326:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag      
1327:FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1328:FWLIB/src/stm32f4xx_can.c ****   */
1329:FWLIB/src/stm32f4xx_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1330:FWLIB/src/stm32f4xx_can.c **** {
1331:FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
1332:FWLIB/src/stm32f4xx_can.c ****   
1333:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1334:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1335:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1336:FWLIB/src/stm32f4xx_can.c ****   
1337:FWLIB/src/stm32f4xx_can.c **** 
1338:FWLIB/src/stm32f4xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1339:FWLIB/src/stm32f4xx_can.c ****   { 
1340:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1341:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1342:FWLIB/src/stm32f4xx_can.c ****     { 
1343:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1344:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1345:FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  /tmp/ccrnvJ70.s 			page 25


1346:FWLIB/src/stm32f4xx_can.c ****     else
1347:FWLIB/src/stm32f4xx_can.c ****     { 
1348:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1349:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1350:FWLIB/src/stm32f4xx_can.c ****     }
1351:FWLIB/src/stm32f4xx_can.c ****   }
1352:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1353:FWLIB/src/stm32f4xx_can.c ****   { 
1354:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1355:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1356:FWLIB/src/stm32f4xx_can.c ****     { 
1357:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1358:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1359:FWLIB/src/stm32f4xx_can.c ****     }
1360:FWLIB/src/stm32f4xx_can.c ****     else
1361:FWLIB/src/stm32f4xx_can.c ****     { 
1362:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1363:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1364:FWLIB/src/stm32f4xx_can.c ****     }
1365:FWLIB/src/stm32f4xx_can.c ****   }
1366:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1367:FWLIB/src/stm32f4xx_can.c ****   { 
1368:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1369:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1370:FWLIB/src/stm32f4xx_can.c ****     { 
1371:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1372:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1373:FWLIB/src/stm32f4xx_can.c ****     }
1374:FWLIB/src/stm32f4xx_can.c ****     else
1375:FWLIB/src/stm32f4xx_can.c ****     { 
1376:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1377:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1378:FWLIB/src/stm32f4xx_can.c ****     }
1379:FWLIB/src/stm32f4xx_can.c ****   }
1380:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1381:FWLIB/src/stm32f4xx_can.c ****   { 
1382:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1383:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1384:FWLIB/src/stm32f4xx_can.c ****     { 
1385:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1386:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1387:FWLIB/src/stm32f4xx_can.c ****     }
1388:FWLIB/src/stm32f4xx_can.c ****     else
1389:FWLIB/src/stm32f4xx_can.c ****     { 
1390:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1391:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1392:FWLIB/src/stm32f4xx_can.c ****     }
1393:FWLIB/src/stm32f4xx_can.c ****   }
1394:FWLIB/src/stm32f4xx_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1395:FWLIB/src/stm32f4xx_can.c ****   { 
1396:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1397:FWLIB/src/stm32f4xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1398:FWLIB/src/stm32f4xx_can.c ****     { 
1399:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1400:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1401:FWLIB/src/stm32f4xx_can.c ****     }
1402:FWLIB/src/stm32f4xx_can.c ****     else
ARM GAS  /tmp/ccrnvJ70.s 			page 26


1403:FWLIB/src/stm32f4xx_can.c ****     { 
1404:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1405:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1406:FWLIB/src/stm32f4xx_can.c ****     }
1407:FWLIB/src/stm32f4xx_can.c ****   }
1408:FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_FLAG status */
1409:FWLIB/src/stm32f4xx_can.c ****   return  bitstatus;
1410:FWLIB/src/stm32f4xx_can.c **** }
1411:FWLIB/src/stm32f4xx_can.c **** 
1412:FWLIB/src/stm32f4xx_can.c **** /**
1413:FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CAN's pending flags.
1414:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1415:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1416:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1417:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1418:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1419:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag 
1420:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1421:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag  
1422:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1423:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1424:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1425:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
1426:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag        
1427:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1428:FWLIB/src/stm32f4xx_can.c ****   */
1429:FWLIB/src/stm32f4xx_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1430:FWLIB/src/stm32f4xx_can.c **** {
1431:FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
1432:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1433:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1434:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1435:FWLIB/src/stm32f4xx_can.c ****   
1436:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1437:FWLIB/src/stm32f4xx_can.c ****   {
1438:FWLIB/src/stm32f4xx_can.c ****     /* Clear the selected CAN flags */
1439:FWLIB/src/stm32f4xx_can.c ****     CANx->ESR = (uint32_t)RESET;
1440:FWLIB/src/stm32f4xx_can.c ****   }
1441:FWLIB/src/stm32f4xx_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1442:FWLIB/src/stm32f4xx_can.c ****   {
1443:FWLIB/src/stm32f4xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1444:FWLIB/src/stm32f4xx_can.c **** 
1445:FWLIB/src/stm32f4xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1446:FWLIB/src/stm32f4xx_can.c ****     {
1447:FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1448:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1449:FWLIB/src/stm32f4xx_can.c ****     }
1450:FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1451:FWLIB/src/stm32f4xx_can.c ****     {
1452:FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1453:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1454:FWLIB/src/stm32f4xx_can.c ****     }
1455:FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1456:FWLIB/src/stm32f4xx_can.c ****     {
1457:FWLIB/src/stm32f4xx_can.c ****       /* Transmit Flags */
1458:FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
1459:FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  /tmp/ccrnvJ70.s 			page 27


1460:FWLIB/src/stm32f4xx_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1461:FWLIB/src/stm32f4xx_can.c ****     {
1462:FWLIB/src/stm32f4xx_can.c ****       /* Operating mode Flags */
1463:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1464:FWLIB/src/stm32f4xx_can.c ****     }
1465:FWLIB/src/stm32f4xx_can.c ****   }
1466:FWLIB/src/stm32f4xx_can.c **** }
1467:FWLIB/src/stm32f4xx_can.c **** 
1468:FWLIB/src/stm32f4xx_can.c **** /**
1469:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1470:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1471:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt source to check.
1472:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1473:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1474:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1475:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1476:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1477:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1478:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1479:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1480:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1481:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1482:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1483:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1484:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1485:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1486:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1487:FWLIB/src/stm32f4xx_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1488:FWLIB/src/stm32f4xx_can.c ****   */
1489:FWLIB/src/stm32f4xx_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1490:FWLIB/src/stm32f4xx_can.c **** {
1491:FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
1492:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1493:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1494:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1495:FWLIB/src/stm32f4xx_can.c ****   
1496:FWLIB/src/stm32f4xx_can.c ****   /* check the interrupt enable bit */
1497:FWLIB/src/stm32f4xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1498:FWLIB/src/stm32f4xx_can.c ****  {
1499:FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is enabled, .... */
1500:FWLIB/src/stm32f4xx_can.c ****     switch (CAN_IT)
1501:FWLIB/src/stm32f4xx_can.c ****     {
1502:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_TME:
1503:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_TSR_RQCPx bits */
1504:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1505:FWLIB/src/stm32f4xx_can.c ****         break;
1506:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
1507:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FMP0 bit */
1508:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1509:FWLIB/src/stm32f4xx_can.c ****         break;
1510:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
1511:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FULL0 bit */
1512:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1513:FWLIB/src/stm32f4xx_can.c ****         break;
1514:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
1515:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FOVR0 bit */
1516:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
ARM GAS  /tmp/ccrnvJ70.s 			page 28


1517:FWLIB/src/stm32f4xx_can.c ****         break;
1518:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
1519:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FMP1 bit */
1520:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1521:FWLIB/src/stm32f4xx_can.c ****         break;
1522:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
1523:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FULL1 bit */
1524:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1525:FWLIB/src/stm32f4xx_can.c ****         break;
1526:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
1527:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FOVR1 bit */
1528:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
1529:FWLIB/src/stm32f4xx_can.c ****         break;
1530:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
1531:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_WKUI bit */
1532:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1533:FWLIB/src/stm32f4xx_can.c ****         break;
1534:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
1535:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_SLAKI bit */
1536:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1537:FWLIB/src/stm32f4xx_can.c ****         break;
1538:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
1539:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EWGF bit */
1540:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1541:FWLIB/src/stm32f4xx_can.c ****         break;
1542:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
1543:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EPVF bit */
1544:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1545:FWLIB/src/stm32f4xx_can.c ****         break;
1546:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
1547:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_BOFF bit */
1548:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1549:FWLIB/src/stm32f4xx_can.c ****         break;
1550:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
1551:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_LEC bit */
1552:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1553:FWLIB/src/stm32f4xx_can.c ****         break;
1554:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
1555:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_ERRI bit */ 
1556:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1557:FWLIB/src/stm32f4xx_can.c ****         break;
1558:FWLIB/src/stm32f4xx_can.c ****       default:
1559:FWLIB/src/stm32f4xx_can.c ****         /* in case of error, return RESET */
1560:FWLIB/src/stm32f4xx_can.c ****         itstatus = RESET;
1561:FWLIB/src/stm32f4xx_can.c ****         break;
1562:FWLIB/src/stm32f4xx_can.c ****     }
1563:FWLIB/src/stm32f4xx_can.c ****   }
1564:FWLIB/src/stm32f4xx_can.c ****   else
1565:FWLIB/src/stm32f4xx_can.c ****   {
1566:FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1567:FWLIB/src/stm32f4xx_can.c ****     itstatus  = RESET;
1568:FWLIB/src/stm32f4xx_can.c ****   }
1569:FWLIB/src/stm32f4xx_can.c ****   
1570:FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_IT status */
1571:FWLIB/src/stm32f4xx_can.c ****   return  itstatus;
1572:FWLIB/src/stm32f4xx_can.c **** }
1573:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /tmp/ccrnvJ70.s 			page 29


1574:FWLIB/src/stm32f4xx_can.c **** /**
1575:FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1576:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1577:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1578:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1579:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt
1580:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1581:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1582:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1583:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1584:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1585:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1586:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1587:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1588:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1589:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1590:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt 
1591:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1592:FWLIB/src/stm32f4xx_can.c ****   */
1593:FWLIB/src/stm32f4xx_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1594:FWLIB/src/stm32f4xx_can.c **** {
1595:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1596:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1597:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1598:FWLIB/src/stm32f4xx_can.c **** 
1599:FWLIB/src/stm32f4xx_can.c ****   switch (CAN_IT)
1600:FWLIB/src/stm32f4xx_can.c ****   {
1601:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_TME:
1602:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_TSR_RQCPx (rc_w1)*/
1603:FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1604:FWLIB/src/stm32f4xx_can.c ****       break;
1605:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
1606:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1607:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
1608:FWLIB/src/stm32f4xx_can.c ****       break;
1609:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
1610:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1611:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
1612:FWLIB/src/stm32f4xx_can.c ****       break;
1613:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
1614:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1615:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
1616:FWLIB/src/stm32f4xx_can.c ****       break;
1617:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
1618:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1619:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
1620:FWLIB/src/stm32f4xx_can.c ****       break;
1621:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
1622:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_WKUI (rc_w1)*/
1623:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
1624:FWLIB/src/stm32f4xx_can.c ****       break;
1625:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
1626:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1627:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
1628:FWLIB/src/stm32f4xx_can.c ****       break;
1629:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
1630:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
ARM GAS  /tmp/ccrnvJ70.s 			page 30


1631:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI;
1632:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
1633:FWLIB/src/stm32f4xx_can.c ****       break;
1634:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
1635:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1636:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1637:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1638:FWLIB/src/stm32f4xx_can.c ****       break;
1639:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
1640:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */ 
1641:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1642:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1643:FWLIB/src/stm32f4xx_can.c ****        break;
1644:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
1645:FWLIB/src/stm32f4xx_can.c ****       /*  Clear LEC bits */
1646:FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1647:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1648:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1649:FWLIB/src/stm32f4xx_can.c ****       break;
1650:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
1651:FWLIB/src/stm32f4xx_can.c ****       /*Clear LEC bits */
1652:FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1653:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1654:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1655:FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
1656:FWLIB/src/stm32f4xx_can.c ****        break;
1657:FWLIB/src/stm32f4xx_can.c ****     default:
1658:FWLIB/src/stm32f4xx_can.c ****        break;
1659:FWLIB/src/stm32f4xx_can.c ****    }
1660:FWLIB/src/stm32f4xx_can.c **** }
1661:FWLIB/src/stm32f4xx_can.c ****  /**
1662:FWLIB/src/stm32f4xx_can.c ****   * @}
1663:FWLIB/src/stm32f4xx_can.c ****   */
1664:FWLIB/src/stm32f4xx_can.c **** 
1665:FWLIB/src/stm32f4xx_can.c **** /**
1666:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1667:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1668:FWLIB/src/stm32f4xx_can.c ****   * @param  It_Bit: specifies the interrupt source bit to check.
1669:FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1670:FWLIB/src/stm32f4xx_can.c ****   */
1671:FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1672:FWLIB/src/stm32f4xx_can.c **** {
  25              		.loc 1 1672 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1673:FWLIB/src/stm32f4xx_can.c ****   ITStatus pendingbitstatus = RESET;
1674:FWLIB/src/stm32f4xx_can.c ****   
1675:FWLIB/src/stm32f4xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  31              		.loc 1 1675 0
  32 0000 0842     		tst	r0, r1
  33 0002 01D1     		bne	.L4
1676:FWLIB/src/stm32f4xx_can.c ****   {
1677:FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is set */
1678:FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = SET;
ARM GAS  /tmp/ccrnvJ70.s 			page 31


1679:FWLIB/src/stm32f4xx_can.c ****   }
1680:FWLIB/src/stm32f4xx_can.c ****   else
1681:FWLIB/src/stm32f4xx_can.c ****   {
1682:FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is reset */
1683:FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = RESET;
  34              		.loc 1 1683 0
  35 0004 0020     		movs	r0, #0
  36              	.LVL1:
1684:FWLIB/src/stm32f4xx_can.c ****   }
1685:FWLIB/src/stm32f4xx_can.c ****   return pendingbitstatus;
1686:FWLIB/src/stm32f4xx_can.c **** }
  37              		.loc 1 1686 0
  38 0006 7047     		bx	lr
  39              	.LVL2:
  40              	.L4:
1678:FWLIB/src/stm32f4xx_can.c ****   }
  41              		.loc 1 1678 0
  42 0008 0120     		movs	r0, #1
  43              	.LVL3:
  44 000a 7047     		bx	lr
  45              		.cfi_endproc
  46              	.LFE136:
  48              		.section	.text.CAN_DeInit,"ax",%progbits
  49              		.align	1
  50              		.global	CAN_DeInit
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  54              		.fpu softvfp
  56              	CAN_DeInit:
  57              	.LFB112:
 167:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
  58              		.loc 1 167 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              	.LVL4:
  63 0000 08B5     		push	{r3, lr}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 3, -8
  67              		.cfi_offset 14, -4
 171:FWLIB/src/stm32f4xx_can.c ****   {
  68              		.loc 1 171 0
  69 0002 0C4B     		ldr	r3, .L10
  70 0004 9842     		cmp	r0, r3
  71 0006 0AD0     		beq	.L9
 181:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
  72              		.loc 1 181 0
  73 0008 0121     		movs	r1, #1
  74 000a 4FF08060 		mov	r0, #67108864
  75              	.LVL5:
  76 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  77              	.LVL6:
 183:FWLIB/src/stm32f4xx_can.c ****   }
  78              		.loc 1 183 0
  79 0012 0021     		movs	r1, #0
ARM GAS  /tmp/ccrnvJ70.s 			page 32


  80 0014 4FF08060 		mov	r0, #67108864
  81 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  82              	.LVL7:
  83 001c 08BD     		pop	{r3, pc}
  84              	.LVL8:
  85              	.L9:
 174:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
  86              		.loc 1 174 0
  87 001e 0121     		movs	r1, #1
  88 0020 4FF00070 		mov	r0, #33554432
  89              	.LVL9:
  90 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  91              	.LVL10:
 176:FWLIB/src/stm32f4xx_can.c ****   }
  92              		.loc 1 176 0
  93 0028 0021     		movs	r1, #0
  94 002a 4FF00070 		mov	r0, #33554432
  95 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  96              	.LVL11:
  97 0032 08BD     		pop	{r3, pc}
  98              	.L11:
  99              		.align	2
 100              	.L10:
 101 0034 00640040 		.word	1073767424
 102              		.cfi_endproc
 103              	.LFE112:
 105              		.section	.text.CAN_Init,"ax",%progbits
 106              		.align	1
 107              		.global	CAN_Init
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 111              		.fpu softvfp
 113              	CAN_Init:
 114              	.LFB113:
 197:FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 115              		.loc 1 197 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL12:
 215:FWLIB/src/stm32f4xx_can.c **** 
 121              		.loc 1 215 0
 122 0000 0368     		ldr	r3, [r0]
 123 0002 23F00203 		bic	r3, r3, #2
 124 0006 0360     		str	r3, [r0]
 218:FWLIB/src/stm32f4xx_can.c **** 
 125              		.loc 1 218 0
 126 0008 0368     		ldr	r3, [r0]
 127 000a 43F00103 		orr	r3, r3, #1
 128 000e 0360     		str	r3, [r0]
 199:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 129              		.loc 1 199 0
 130 0010 0023     		movs	r3, #0
 221:FWLIB/src/stm32f4xx_can.c ****   {
 131              		.loc 1 221 0
ARM GAS  /tmp/ccrnvJ70.s 			page 33


 132 0012 00E0     		b	.L13
 133              	.LVL13:
 134              	.L15:
 223:FWLIB/src/stm32f4xx_can.c ****   }
 135              		.loc 1 223 0
 136 0014 0133     		adds	r3, r3, #1
 137              	.LVL14:
 138              	.L13:
 221:FWLIB/src/stm32f4xx_can.c ****   {
 139              		.loc 1 221 0
 140 0016 4268     		ldr	r2, [r0, #4]
 141 0018 12F0010F 		tst	r2, #1
 142 001c 03D1     		bne	.L14
 221:FWLIB/src/stm32f4xx_can.c ****   {
 143              		.loc 1 221 0 is_stmt 0 discriminator 1
 144 001e 4FF6FF72 		movw	r2, #65535
 145 0022 9342     		cmp	r3, r2
 146 0024 F6D1     		bne	.L15
 147              	.L14:
 227:FWLIB/src/stm32f4xx_can.c ****   {
 148              		.loc 1 227 0 is_stmt 1
 149 0026 4368     		ldr	r3, [r0, #4]
 150              	.LVL15:
 151 0028 13F0010F 		tst	r3, #1
 152 002c 6DD0     		beq	.L32
 234:FWLIB/src/stm32f4xx_can.c ****     {
 153              		.loc 1 234 0
 154 002e 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 155 0030 012B     		cmp	r3, #1
 156 0032 3BD0     		beq	.L34
 240:FWLIB/src/stm32f4xx_can.c ****     }
 157              		.loc 1 240 0
 158 0034 0368     		ldr	r3, [r0]
 159 0036 23F08003 		bic	r3, r3, #128
 160 003a 0360     		str	r3, [r0]
 161              	.L18:
 244:FWLIB/src/stm32f4xx_can.c ****     {
 162              		.loc 1 244 0
 163 003c CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 164 003e 012B     		cmp	r3, #1
 165 0040 39D0     		beq	.L35
 250:FWLIB/src/stm32f4xx_can.c ****     }
 166              		.loc 1 250 0
 167 0042 0368     		ldr	r3, [r0]
 168 0044 23F04003 		bic	r3, r3, #64
 169 0048 0360     		str	r3, [r0]
 170              	.L20:
 254:FWLIB/src/stm32f4xx_can.c ****     {
 171              		.loc 1 254 0
 172 004a 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 173 004c 012B     		cmp	r3, #1
 174 004e 37D0     		beq	.L36
 260:FWLIB/src/stm32f4xx_can.c ****     }
 175              		.loc 1 260 0
 176 0050 0368     		ldr	r3, [r0]
 177 0052 23F02003 		bic	r3, r3, #32
 178 0056 0360     		str	r3, [r0]
ARM GAS  /tmp/ccrnvJ70.s 			page 34


 179              	.L22:
 264:FWLIB/src/stm32f4xx_can.c ****     {
 180              		.loc 1 264 0
 181 0058 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 182 005a 012B     		cmp	r3, #1
 183 005c 35D0     		beq	.L37
 270:FWLIB/src/stm32f4xx_can.c ****     }
 184              		.loc 1 270 0
 185 005e 0368     		ldr	r3, [r0]
 186 0060 23F01003 		bic	r3, r3, #16
 187 0064 0360     		str	r3, [r0]
 188              	.L24:
 274:FWLIB/src/stm32f4xx_can.c ****     {
 189              		.loc 1 274 0
 190 0066 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 191 0068 012B     		cmp	r3, #1
 192 006a 33D0     		beq	.L38
 280:FWLIB/src/stm32f4xx_can.c ****     }
 193              		.loc 1 280 0
 194 006c 0368     		ldr	r3, [r0]
 195 006e 23F00803 		bic	r3, r3, #8
 196 0072 0360     		str	r3, [r0]
 197              	.L26:
 284:FWLIB/src/stm32f4xx_can.c ****     {
 198              		.loc 1 284 0
 199 0074 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 200 0076 012B     		cmp	r3, #1
 201 0078 31D0     		beq	.L39
 290:FWLIB/src/stm32f4xx_can.c ****     }
 202              		.loc 1 290 0
 203 007a 0368     		ldr	r3, [r0]
 204 007c 23F00403 		bic	r3, r3, #4
 205 0080 0360     		str	r3, [r0]
 206              	.L28:
 294:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 207              		.loc 1 294 0
 208 0082 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 295:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 209              		.loc 1 295 0
 210 0084 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 211 0086 1B06     		lsls	r3, r3, #24
 294:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 212              		.loc 1 294 0
 213 0088 43EA8273 		orr	r3, r3, r2, lsl #30
 296:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 214              		.loc 1 296 0
 215 008c 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 295:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 216              		.loc 1 295 0
 217 008e 43EA0243 		orr	r3, r3, r2, lsl #16
 297:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 218              		.loc 1 297 0
 219 0092 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 296:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 220              		.loc 1 296 0
 221 0094 43EA0253 		orr	r3, r3, r2, lsl #20
 298:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /tmp/ccrnvJ70.s 			page 35


 222              		.loc 1 298 0
 223 0098 0A88     		ldrh	r2, [r1]
 224 009a 013A     		subs	r2, r2, #1
 297:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 225              		.loc 1 297 0
 226 009c 1343     		orrs	r3, r3, r2
 294:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 227              		.loc 1 294 0
 228 009e C361     		str	r3, [r0, #28]
 301:FWLIB/src/stm32f4xx_can.c **** 
 229              		.loc 1 301 0
 230 00a0 0368     		ldr	r3, [r0]
 231 00a2 23F00103 		bic	r3, r3, #1
 232 00a6 0360     		str	r3, [r0]
 233              	.LVL16:
 304:FWLIB/src/stm32f4xx_can.c **** 
 234              		.loc 1 304 0
 235 00a8 0023     		movs	r3, #0
 306:FWLIB/src/stm32f4xx_can.c ****    {
 236              		.loc 1 306 0
 237 00aa 1EE0     		b	.L29
 238              	.LVL17:
 239              	.L34:
 236:FWLIB/src/stm32f4xx_can.c ****     }
 240              		.loc 1 236 0
 241 00ac 0368     		ldr	r3, [r0]
 242 00ae 43F08003 		orr	r3, r3, #128
 243 00b2 0360     		str	r3, [r0]
 244 00b4 C2E7     		b	.L18
 245              	.L35:
 246:FWLIB/src/stm32f4xx_can.c ****     }
 246              		.loc 1 246 0
 247 00b6 0368     		ldr	r3, [r0]
 248 00b8 43F04003 		orr	r3, r3, #64
 249 00bc 0360     		str	r3, [r0]
 250 00be C4E7     		b	.L20
 251              	.L36:
 256:FWLIB/src/stm32f4xx_can.c ****     }
 252              		.loc 1 256 0
 253 00c0 0368     		ldr	r3, [r0]
 254 00c2 43F02003 		orr	r3, r3, #32
 255 00c6 0360     		str	r3, [r0]
 256 00c8 C6E7     		b	.L22
 257              	.L37:
 266:FWLIB/src/stm32f4xx_can.c ****     }
 258              		.loc 1 266 0
 259 00ca 0368     		ldr	r3, [r0]
 260 00cc 43F01003 		orr	r3, r3, #16
 261 00d0 0360     		str	r3, [r0]
 262 00d2 C8E7     		b	.L24
 263              	.L38:
 276:FWLIB/src/stm32f4xx_can.c ****     }
 264              		.loc 1 276 0
 265 00d4 0368     		ldr	r3, [r0]
 266 00d6 43F00803 		orr	r3, r3, #8
 267 00da 0360     		str	r3, [r0]
 268 00dc CAE7     		b	.L26
ARM GAS  /tmp/ccrnvJ70.s 			page 36


 269              	.L39:
 286:FWLIB/src/stm32f4xx_can.c ****     }
 270              		.loc 1 286 0
 271 00de 0368     		ldr	r3, [r0]
 272 00e0 43F00403 		orr	r3, r3, #4
 273 00e4 0360     		str	r3, [r0]
 274 00e6 CCE7     		b	.L28
 275              	.LVL18:
 276              	.L31:
 308:FWLIB/src/stm32f4xx_can.c ****    }
 277              		.loc 1 308 0
 278 00e8 0133     		adds	r3, r3, #1
 279              	.LVL19:
 280              	.L29:
 306:FWLIB/src/stm32f4xx_can.c ****    {
 281              		.loc 1 306 0
 282 00ea 4268     		ldr	r2, [r0, #4]
 283 00ec 12F0010F 		tst	r2, #1
 284 00f0 03D0     		beq	.L30
 306:FWLIB/src/stm32f4xx_can.c ****    {
 285              		.loc 1 306 0 is_stmt 0 discriminator 1
 286 00f2 4FF6FF72 		movw	r2, #65535
 287 00f6 9342     		cmp	r3, r2
 288 00f8 F6D1     		bne	.L31
 289              	.L30:
 312:FWLIB/src/stm32f4xx_can.c ****     {
 290              		.loc 1 312 0 is_stmt 1
 291 00fa 4368     		ldr	r3, [r0, #4]
 292              	.LVL20:
 293 00fc 13F0010F 		tst	r3, #1
 294 0100 01D1     		bne	.L40
 318:FWLIB/src/stm32f4xx_can.c ****     }
 295              		.loc 1 318 0
 296 0102 0120     		movs	r0, #1
 297              	.LVL21:
 324:FWLIB/src/stm32f4xx_can.c **** 
 298              		.loc 1 324 0
 299 0104 7047     		bx	lr
 300              	.LVL22:
 301              	.L40:
 314:FWLIB/src/stm32f4xx_can.c ****     }
 302              		.loc 1 314 0
 303 0106 0020     		movs	r0, #0
 304              	.LVL23:
 305 0108 7047     		bx	lr
 306              	.LVL24:
 307              	.L32:
 229:FWLIB/src/stm32f4xx_can.c ****   }
 308              		.loc 1 229 0
 309 010a 0020     		movs	r0, #0
 310              	.LVL25:
 311 010c 7047     		bx	lr
 312              		.cfi_endproc
 313              	.LFE113:
 315              		.section	.text.CAN_FilterInit,"ax",%progbits
 316              		.align	1
 317              		.global	CAN_FilterInit
ARM GAS  /tmp/ccrnvJ70.s 			page 37


 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu softvfp
 323              	CAN_FilterInit:
 324              	.LFB114:
 334:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 325              		.loc 1 334 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              		@ link register save eliminated.
 330              	.LVL26:
 331 0000 70B4     		push	{r4, r5, r6}
 332              	.LCFI1:
 333              		.cfi_def_cfa_offset 12
 334              		.cfi_offset 4, -12
 335              		.cfi_offset 5, -8
 336              		.cfi_offset 6, -4
 337              	.LVL27:
 343:FWLIB/src/stm32f4xx_can.c **** 
 338              		.loc 1 343 0
 339 0002 837A     		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 340 0004 0122     		movs	r2, #1
 341 0006 02FA03F3 		lsl	r3, r2, r3
 342              	.LVL28:
 346:FWLIB/src/stm32f4xx_can.c **** 
 343              		.loc 1 346 0
 344 000a 3B4A     		ldr	r2, .L53
 345 000c D2F80012 		ldr	r1, [r2, #512]
 346 0010 41F00101 		orr	r1, r1, #1
 347 0014 C2F80012 		str	r1, [r2, #512]
 349:FWLIB/src/stm32f4xx_can.c **** 
 348              		.loc 1 349 0
 349 0018 D2F81C42 		ldr	r4, [r2, #540]
 350 001c D943     		mvns	r1, r3
 351 001e 0C40     		ands	r4, r4, r1
 352 0020 C2F81C42 		str	r4, [r2, #540]
 352:FWLIB/src/stm32f4xx_can.c ****   {
 353              		.loc 1 352 0
 354 0024 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 355 0026 B2B9     		cbnz	r2, .L42
 355:FWLIB/src/stm32f4xx_can.c **** 
 356              		.loc 1 355 0
 357 0028 334A     		ldr	r2, .L53
 358 002a D2F80C42 		ldr	r4, [r2, #524]
 359 002e 0C40     		ands	r4, r4, r1
 360 0030 C2F80C42 		str	r4, [r2, #524]
 359:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 361              		.loc 1 359 0
 362 0034 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 360:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 363              		.loc 1 360 0
 364 0036 C688     		ldrh	r6, [r0, #6]
 361:FWLIB/src/stm32f4xx_can.c **** 
 365              		.loc 1 361 0
 366 0038 4588     		ldrh	r5, [r0, #2]
ARM GAS  /tmp/ccrnvJ70.s 			page 38


 360:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 367              		.loc 1 360 0
 368 003a 45EA0645 		orr	r5, r5, r6, lsl #16
 359:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 369              		.loc 1 359 0
 370 003e 4834     		adds	r4, r4, #72
 371 0040 42F83450 		str	r5, [r2, r4, lsl #3]
 365:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 372              		.loc 1 365 0
 373 0044 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 366:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 374              		.loc 1 366 0
 375 0046 8688     		ldrh	r6, [r0, #4]
 367:FWLIB/src/stm32f4xx_can.c ****   }
 376              		.loc 1 367 0
 377 0048 0488     		ldrh	r4, [r0]
 366:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 378              		.loc 1 366 0
 379 004a 44EA0644 		orr	r4, r4, r6, lsl #16
 365:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 380              		.loc 1 365 0
 381 004e 4835     		adds	r5, r5, #72
 382 0050 02EBC502 		add	r2, r2, r5, lsl #3
 383 0054 5460     		str	r4, [r2, #4]
 384              	.L42:
 370:FWLIB/src/stm32f4xx_can.c ****   {
 385              		.loc 1 370 0
 386 0056 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 387 0058 012A     		cmp	r2, #1
 388 005a 1FD0     		beq	.L50
 389              	.L43:
 385:FWLIB/src/stm32f4xx_can.c ****   {
 390              		.loc 1 385 0
 391 005c C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 392 005e 002A     		cmp	r2, #0
 393 0060 34D1     		bne	.L44
 388:FWLIB/src/stm32f4xx_can.c ****   }
 394              		.loc 1 388 0
 395 0062 254C     		ldr	r4, .L53
 396 0064 D4F80422 		ldr	r2, [r4, #516]
 397 0068 0A40     		ands	r2, r2, r1
 398 006a C4F80422 		str	r2, [r4, #516]
 399              	.L45:
 397:FWLIB/src/stm32f4xx_can.c ****   {
 400              		.loc 1 397 0
 401 006e 0289     		ldrh	r2, [r0, #8]
 402 0070 2AB9     		cbnz	r2, .L46
 400:FWLIB/src/stm32f4xx_can.c ****   }
 403              		.loc 1 400 0
 404 0072 214A     		ldr	r2, .L53
 405 0074 D2F81442 		ldr	r4, [r2, #532]
 406 0078 2140     		ands	r1, r1, r4
 407 007a C2F81412 		str	r1, [r2, #532]
 408              	.L46:
 403:FWLIB/src/stm32f4xx_can.c ****   {
 409              		.loc 1 403 0
 410 007e 0289     		ldrh	r2, [r0, #8]
ARM GAS  /tmp/ccrnvJ70.s 			page 39


 411 0080 012A     		cmp	r2, #1
 412 0082 2AD0     		beq	.L51
 413              	.L47:
 410:FWLIB/src/stm32f4xx_can.c ****   {
 414              		.loc 1 410 0
 415 0084 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 416 0086 012A     		cmp	r2, #1
 417 0088 2ED0     		beq	.L52
 418              	.LVL29:
 419              	.L48:
 416:FWLIB/src/stm32f4xx_can.c **** }
 420              		.loc 1 416 0
 421 008a 1B4A     		ldr	r2, .L53
 422 008c D2F80032 		ldr	r3, [r2, #512]
 423 0090 23F00103 		bic	r3, r3, #1
 424 0094 C2F80032 		str	r3, [r2, #512]
 417:FWLIB/src/stm32f4xx_can.c **** 
 425              		.loc 1 417 0
 426 0098 70BC     		pop	{r4, r5, r6}
 427              	.LCFI2:
 428              		.cfi_remember_state
 429              		.cfi_restore 6
 430              		.cfi_restore 5
 431              		.cfi_restore 4
 432              		.cfi_def_cfa_offset 0
 433 009a 7047     		bx	lr
 434              	.LVL30:
 435              	.L50:
 436              	.LCFI3:
 437              		.cfi_restore_state
 373:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 438              		.loc 1 373 0
 439 009c 164A     		ldr	r2, .L53
 440 009e D2F80C42 		ldr	r4, [r2, #524]
 441 00a2 1C43     		orrs	r4, r4, r3
 442 00a4 C2F80C42 		str	r4, [r2, #524]
 375:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 443              		.loc 1 375 0
 444 00a8 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 376:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 445              		.loc 1 376 0
 446 00aa 0688     		ldrh	r6, [r0]
 377:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 447              		.loc 1 377 0
 448 00ac 4588     		ldrh	r5, [r0, #2]
 376:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 449              		.loc 1 376 0
 450 00ae 45EA0645 		orr	r5, r5, r6, lsl #16
 375:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 451              		.loc 1 375 0
 452 00b2 4834     		adds	r4, r4, #72
 453 00b4 42F83450 		str	r5, [r2, r4, lsl #3]
 379:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 454              		.loc 1 379 0
 455 00b8 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 380:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 456              		.loc 1 380 0
ARM GAS  /tmp/ccrnvJ70.s 			page 40


 457 00ba 8688     		ldrh	r6, [r0, #4]
 381:FWLIB/src/stm32f4xx_can.c ****   }
 458              		.loc 1 381 0
 459 00bc C488     		ldrh	r4, [r0, #6]
 380:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 460              		.loc 1 380 0
 461 00be 44EA0644 		orr	r4, r4, r6, lsl #16
 379:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 462              		.loc 1 379 0
 463 00c2 4835     		adds	r5, r5, #72
 464 00c4 02EBC502 		add	r2, r2, r5, lsl #3
 465 00c8 5460     		str	r4, [r2, #4]
 466 00ca C7E7     		b	.L43
 467              	.L44:
 393:FWLIB/src/stm32f4xx_can.c ****   }
 468              		.loc 1 393 0
 469 00cc 0A4C     		ldr	r4, .L53
 470 00ce D4F80422 		ldr	r2, [r4, #516]
 471 00d2 1A43     		orrs	r2, r2, r3
 472 00d4 C4F80422 		str	r2, [r4, #516]
 473 00d8 C9E7     		b	.L45
 474              	.L51:
 406:FWLIB/src/stm32f4xx_can.c ****   }
 475              		.loc 1 406 0
 476 00da 0749     		ldr	r1, .L53
 477 00dc D1F81422 		ldr	r2, [r1, #532]
 478 00e0 1A43     		orrs	r2, r2, r3
 479 00e2 C1F81422 		str	r2, [r1, #532]
 480 00e6 CDE7     		b	.L47
 481              	.L52:
 412:FWLIB/src/stm32f4xx_can.c ****   }
 482              		.loc 1 412 0
 483 00e8 034A     		ldr	r2, .L53
 484 00ea D2F81C12 		ldr	r1, [r2, #540]
 485 00ee 0B43     		orrs	r3, r3, r1
 486              	.LVL31:
 487 00f0 C2F81C32 		str	r3, [r2, #540]
 488 00f4 C9E7     		b	.L48
 489              	.L54:
 490 00f6 00BF     		.align	2
 491              	.L53:
 492 00f8 00640040 		.word	1073767424
 493              		.cfi_endproc
 494              	.LFE114:
 496              		.section	.text.CAN_StructInit,"ax",%progbits
 497              		.align	1
 498              		.global	CAN_StructInit
 499              		.syntax unified
 500              		.thumb
 501              		.thumb_func
 502              		.fpu softvfp
 504              	CAN_StructInit:
 505              	.LFB115:
 425:FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 506              		.loc 1 425 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrnvJ70.s 			page 41


 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 511              	.LVL32:
 429:FWLIB/src/stm32f4xx_can.c ****   
 512              		.loc 1 429 0
 513 0000 0023     		movs	r3, #0
 514 0002 8371     		strb	r3, [r0, #6]
 432:FWLIB/src/stm32f4xx_can.c ****   
 515              		.loc 1 432 0
 516 0004 C371     		strb	r3, [r0, #7]
 435:FWLIB/src/stm32f4xx_can.c ****   
 517              		.loc 1 435 0
 518 0006 0372     		strb	r3, [r0, #8]
 438:FWLIB/src/stm32f4xx_can.c ****   
 519              		.loc 1 438 0
 520 0008 4372     		strb	r3, [r0, #9]
 441:FWLIB/src/stm32f4xx_can.c ****   
 521              		.loc 1 441 0
 522 000a 8372     		strb	r3, [r0, #10]
 444:FWLIB/src/stm32f4xx_can.c ****   
 523              		.loc 1 444 0
 524 000c C372     		strb	r3, [r0, #11]
 447:FWLIB/src/stm32f4xx_can.c ****   
 525              		.loc 1 447 0
 526 000e 8370     		strb	r3, [r0, #2]
 450:FWLIB/src/stm32f4xx_can.c ****   
 527              		.loc 1 450 0
 528 0010 C370     		strb	r3, [r0, #3]
 453:FWLIB/src/stm32f4xx_can.c ****   
 529              		.loc 1 453 0
 530 0012 0323     		movs	r3, #3
 531 0014 0371     		strb	r3, [r0, #4]
 456:FWLIB/src/stm32f4xx_can.c ****   
 532              		.loc 1 456 0
 533 0016 0223     		movs	r3, #2
 534 0018 4371     		strb	r3, [r0, #5]
 459:FWLIB/src/stm32f4xx_can.c **** }
 535              		.loc 1 459 0
 536 001a 0123     		movs	r3, #1
 537 001c 0380     		strh	r3, [r0]	@ movhi
 538 001e 7047     		bx	lr
 539              		.cfi_endproc
 540              	.LFE115:
 542              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 543              		.align	1
 544              		.global	CAN_SlaveStartBank
 545              		.syntax unified
 546              		.thumb
 547              		.thumb_func
 548              		.fpu softvfp
 550              	CAN_SlaveStartBank:
 551              	.LFB116:
 468:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 552              		.loc 1 468 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccrnvJ70.s 			page 42


 556              		@ link register save eliminated.
 557              	.LVL33:
 473:FWLIB/src/stm32f4xx_can.c ****   
 558              		.loc 1 473 0
 559 0000 0D4B     		ldr	r3, .L57
 560 0002 D3F80022 		ldr	r2, [r3, #512]
 561 0006 42F00102 		orr	r2, r2, #1
 562 000a C3F80022 		str	r2, [r3, #512]
 476:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 563              		.loc 1 476 0
 564 000e D3F80022 		ldr	r2, [r3, #512]
 565 0012 22F47C52 		bic	r2, r2, #16128
 566 0016 22F00E02 		bic	r2, r2, #14
 567 001a C3F80022 		str	r2, [r3, #512]
 477:FWLIB/src/stm32f4xx_can.c ****   
 568              		.loc 1 477 0
 569 001e D3F80022 		ldr	r2, [r3, #512]
 570 0022 42EA0020 		orr	r0, r2, r0, lsl #8
 571              	.LVL34:
 572 0026 C3F80002 		str	r0, [r3, #512]
 480:FWLIB/src/stm32f4xx_can.c **** }
 573              		.loc 1 480 0
 574 002a D3F80022 		ldr	r2, [r3, #512]
 575 002e 22F00102 		bic	r2, r2, #1
 576 0032 C3F80022 		str	r2, [r3, #512]
 577 0036 7047     		bx	lr
 578              	.L58:
 579              		.align	2
 580              	.L57:
 581 0038 00640040 		.word	1073767424
 582              		.cfi_endproc
 583              	.LFE116:
 585              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 586              		.align	1
 587              		.global	CAN_DBGFreeze
 588              		.syntax unified
 589              		.thumb
 590              		.thumb_func
 591              		.fpu softvfp
 593              	CAN_DBGFreeze:
 594              	.LFB117:
 493:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 595              		.loc 1 493 0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 0
 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599              		@ link register save eliminated.
 600              	.LVL35:
 498:FWLIB/src/stm32f4xx_can.c ****   {
 601              		.loc 1 498 0
 602 0000 21B9     		cbnz	r1, .L62
 506:FWLIB/src/stm32f4xx_can.c ****   }
 603              		.loc 1 506 0
 604 0002 0368     		ldr	r3, [r0]
 605 0004 23F48033 		bic	r3, r3, #65536
 606 0008 0360     		str	r3, [r0]
 607 000a 7047     		bx	lr
ARM GAS  /tmp/ccrnvJ70.s 			page 43


 608              	.L62:
 501:FWLIB/src/stm32f4xx_can.c ****   }
 609              		.loc 1 501 0
 610 000c 0368     		ldr	r3, [r0]
 611 000e 43F48033 		orr	r3, r3, #65536
 612 0012 0360     		str	r3, [r0]
 613 0014 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE117:
 617              		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 618              		.align	1
 619              		.global	CAN_TTComModeCmd
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu softvfp
 625              	CAN_TTComModeCmd:
 626              	.LFB118:
 523:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 627              		.loc 1 523 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 632              	.LVL36:
 527:FWLIB/src/stm32f4xx_can.c ****   {
 633              		.loc 1 527 0
 634 0000 B1B9     		cbnz	r1, .L66
 540:FWLIB/src/stm32f4xx_can.c **** 
 635              		.loc 1 540 0
 636 0002 0368     		ldr	r3, [r0]
 637 0004 23F08003 		bic	r3, r3, #128
 638 0008 0360     		str	r3, [r0]
 543:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 639              		.loc 1 543 0
 640 000a D0F88431 		ldr	r3, [r0, #388]
 641 000e 23F48073 		bic	r3, r3, #256
 642 0012 C0F88431 		str	r3, [r0, #388]
 544:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 643              		.loc 1 544 0
 644 0016 D0F89431 		ldr	r3, [r0, #404]
 645 001a 23F48073 		bic	r3, r3, #256
 646 001e C0F89431 		str	r3, [r0, #404]
 545:FWLIB/src/stm32f4xx_can.c ****   }
 647              		.loc 1 545 0
 648 0022 D0F8A431 		ldr	r3, [r0, #420]
 649 0026 23F48073 		bic	r3, r3, #256
 650 002a C0F8A431 		str	r3, [r0, #420]
 651 002e 7047     		bx	lr
 652              	.L66:
 530:FWLIB/src/stm32f4xx_can.c **** 
 653              		.loc 1 530 0
 654 0030 0368     		ldr	r3, [r0]
 655 0032 43F08003 		orr	r3, r3, #128
 656 0036 0360     		str	r3, [r0]
 533:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 657              		.loc 1 533 0
ARM GAS  /tmp/ccrnvJ70.s 			page 44


 658 0038 D0F88431 		ldr	r3, [r0, #388]
 659 003c 43F48073 		orr	r3, r3, #256
 660 0040 C0F88431 		str	r3, [r0, #388]
 534:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 661              		.loc 1 534 0
 662 0044 D0F89431 		ldr	r3, [r0, #404]
 663 0048 43F48073 		orr	r3, r3, #256
 664 004c C0F89431 		str	r3, [r0, #404]
 535:FWLIB/src/stm32f4xx_can.c ****   }
 665              		.loc 1 535 0
 666 0050 D0F8A431 		ldr	r3, [r0, #420]
 667 0054 43F48073 		orr	r3, r3, #256
 668 0058 C0F8A431 		str	r3, [r0, #420]
 669 005c 7047     		bx	lr
 670              		.cfi_endproc
 671              	.LFE118:
 673              		.section	.text.CAN_Transmit,"ax",%progbits
 674              		.align	1
 675              		.global	CAN_Transmit
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 679              		.fpu softvfp
 681              	CAN_Transmit:
 682              	.LFB119:
 577:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 683              		.loc 1 577 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 688              	.LVL37:
 689 0000 0346     		mov	r3, r0
 690              	.LVL38:
 586:FWLIB/src/stm32f4xx_can.c ****   {
 691              		.loc 1 586 0
 692 0002 8268     		ldr	r2, [r0, #8]
 693 0004 12F0806F 		tst	r2, #67108864
 694 0008 09D1     		bne	.L72
 590:FWLIB/src/stm32f4xx_can.c ****   {
 695              		.loc 1 590 0
 696 000a 8268     		ldr	r2, [r0, #8]
 697 000c 12F0006F 		tst	r2, #134217728
 698 0010 4ED1     		bne	.L73
 594:FWLIB/src/stm32f4xx_can.c ****   {
 699              		.loc 1 594 0
 700 0012 8268     		ldr	r2, [r0, #8]
 701 0014 12F0805F 		tst	r2, #268435456
 702 0018 4CD0     		beq	.L74
 596:FWLIB/src/stm32f4xx_can.c ****   }
 703              		.loc 1 596 0
 704 001a 0220     		movs	r0, #2
 705              	.LVL39:
 706 001c 00E0     		b	.L68
 707              	.LVL40:
 708              	.L72:
 588:FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  /tmp/ccrnvJ70.s 			page 45


 709              		.loc 1 588 0
 710 001e 0020     		movs	r0, #0
 711              	.LVL41:
 712              	.L68:
 603:FWLIB/src/stm32f4xx_can.c ****   {
 713              		.loc 1 603 0
 714 0020 0428     		cmp	r0, #4
 715 0022 44D0     		beq	.L79
 577:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 716              		.loc 1 577 0
 717 0024 F0B4     		push	{r4, r5, r6, r7}
 718              	.LCFI4:
 719              		.cfi_def_cfa_offset 16
 720              		.cfi_offset 4, -16
 721              		.cfi_offset 5, -12
 722              		.cfi_offset 6, -8
 723              		.cfi_offset 7, -4
 606:FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 724              		.loc 1 606 0
 725 0026 0546     		mov	r5, r0
 726 0028 00F11802 		add	r2, r0, #24
 727 002c 1201     		lsls	r2, r2, #4
 728 002e 9C58     		ldr	r4, [r3, r2]
 729 0030 04F00104 		and	r4, r4, #1
 730 0034 9C50     		str	r4, [r3, r2]
 607:FWLIB/src/stm32f4xx_can.c ****     {
 731              		.loc 1 607 0
 732 0036 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 733 0038 002A     		cmp	r2, #0
 734 003a 3DD1     		bne	.L70
 610:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 735              		.loc 1 610 0
 736 003c 00F11802 		add	r2, r0, #24
 737 0040 1201     		lsls	r2, r2, #4
 738 0042 9C58     		ldr	r4, [r3, r2]
 739 0044 0F68     		ldr	r7, [r1]
 611:FWLIB/src/stm32f4xx_can.c ****     }
 740              		.loc 1 611 0
 741 0046 4E7A     		ldrb	r6, [r1, #9]	@ zero_extendqisi2
 610:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 742              		.loc 1 610 0
 743 0048 46EA4756 		orr	r6, r6, r7, lsl #21
 744 004c 3443     		orrs	r4, r4, r6
 745 004e 9C50     		str	r4, [r3, r2]
 746              	.L71:
 622:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 747              		.loc 1 622 0
 748 0050 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 749 0052 02F00F02 		and	r2, r2, #15
 750 0056 8A72     		strb	r2, [r1, #10]
 623:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 751              		.loc 1 623 0
 752 0058 05F11804 		add	r4, r5, #24
 753 005c 2401     		lsls	r4, r4, #4
 754 005e 1A19     		adds	r2, r3, r4
 755 0060 5668     		ldr	r6, [r2, #4]
 756 0062 26F00F06 		bic	r6, r6, #15
ARM GAS  /tmp/ccrnvJ70.s 			page 46


 757 0066 5660     		str	r6, [r2, #4]
 624:FWLIB/src/stm32f4xx_can.c **** 
 758              		.loc 1 624 0
 759 0068 5668     		ldr	r6, [r2, #4]
 760 006a 8F7A     		ldrb	r7, [r1, #10]	@ zero_extendqisi2
 761 006c 3E43     		orrs	r6, r6, r7
 762 006e 5660     		str	r6, [r2, #4]
 627:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 763              		.loc 1 627 0
 764 0070 8E7B     		ldrb	r6, [r1, #14]	@ zero_extendqisi2
 628:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 765              		.loc 1 628 0
 766 0072 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
 767 0074 1204     		lsls	r2, r2, #16
 627:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 768              		.loc 1 627 0
 769 0076 42EA0662 		orr	r2, r2, r6, lsl #24
 629:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 770              		.loc 1 629 0
 771 007a 0E7B     		ldrb	r6, [r1, #12]	@ zero_extendqisi2
 628:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 772              		.loc 1 628 0
 773 007c 42EA0622 		orr	r2, r2, r6, lsl #8
 630:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 774              		.loc 1 630 0
 775 0080 CE7A     		ldrb	r6, [r1, #11]	@ zero_extendqisi2
 629:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 776              		.loc 1 629 0
 777 0082 3243     		orrs	r2, r2, r6
 627:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 778              		.loc 1 627 0
 779 0084 03EB0515 		add	r5, r3, r5, lsl #4
 780 0088 C5F88821 		str	r2, [r5, #392]
 631:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 781              		.loc 1 631 0
 782 008c 8E7C     		ldrb	r6, [r1, #18]	@ zero_extendqisi2
 632:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 783              		.loc 1 632 0
 784 008e 4A7C     		ldrb	r2, [r1, #17]	@ zero_extendqisi2
 785 0090 1204     		lsls	r2, r2, #16
 631:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 786              		.loc 1 631 0
 787 0092 42EA0662 		orr	r2, r2, r6, lsl #24
 633:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 788              		.loc 1 633 0
 789 0096 0E7C     		ldrb	r6, [r1, #16]	@ zero_extendqisi2
 632:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 790              		.loc 1 632 0
 791 0098 42EA0622 		orr	r2, r2, r6, lsl #8
 634:FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 792              		.loc 1 634 0
 793 009c C97B     		ldrb	r1, [r1, #15]	@ zero_extendqisi2
 794              	.LVL42:
 633:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 795              		.loc 1 633 0
 796 009e 0A43     		orrs	r2, r2, r1
 631:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
ARM GAS  /tmp/ccrnvJ70.s 			page 47


 797              		.loc 1 631 0
 798 00a0 C5F88C21 		str	r2, [r5, #396]
 636:FWLIB/src/stm32f4xx_can.c ****   }
 799              		.loc 1 636 0
 800 00a4 1A59     		ldr	r2, [r3, r4]
 801 00a6 42F00102 		orr	r2, r2, #1
 802 00aa 1A51     		str	r2, [r3, r4]
 639:FWLIB/src/stm32f4xx_can.c **** 
 803              		.loc 1 639 0
 804 00ac F0BC     		pop	{r4, r5, r6, r7}
 805              	.LCFI5:
 806              		.cfi_restore 7
 807              		.cfi_restore 6
 808              		.cfi_restore 5
 809              		.cfi_restore 4
 810              		.cfi_def_cfa_offset 0
 811              	.L79:
 812 00ae 7047     		bx	lr
 813              	.LVL43:
 814              	.L73:
 592:FWLIB/src/stm32f4xx_can.c ****   }
 815              		.loc 1 592 0
 816 00b0 0120     		movs	r0, #1
 817              	.LVL44:
 818 00b2 B5E7     		b	.L68
 819              	.LVL45:
 820              	.L74:
 600:FWLIB/src/stm32f4xx_can.c ****   }
 821              		.loc 1 600 0
 822 00b4 0420     		movs	r0, #4
 823              	.LVL46:
 824 00b6 B3E7     		b	.L68
 825              	.LVL47:
 826              	.L70:
 827              	.LCFI6:
 828              		.cfi_def_cfa_offset 16
 829              		.cfi_offset 4, -16
 830              		.cfi_offset 5, -12
 831              		.cfi_offset 6, -8
 832              		.cfi_offset 7, -4
 616:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 833              		.loc 1 616 0
 834 00b8 00F11804 		add	r4, r0, #24
 835 00bc 2401     		lsls	r4, r4, #4
 836 00be 1E59     		ldr	r6, [r3, r4]
 837 00c0 4F68     		ldr	r7, [r1, #4]
 838 00c2 42EAC702 		orr	r2, r2, r7, lsl #3
 618:FWLIB/src/stm32f4xx_can.c ****     }
 839              		.loc 1 618 0
 840 00c6 4F7A     		ldrb	r7, [r1, #9]	@ zero_extendqisi2
 617:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 841              		.loc 1 617 0
 842 00c8 3A43     		orrs	r2, r2, r7
 616:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 843              		.loc 1 616 0
 844 00ca 3243     		orrs	r2, r2, r6
 845 00cc 1A51     		str	r2, [r3, r4]
ARM GAS  /tmp/ccrnvJ70.s 			page 48


 846 00ce BFE7     		b	.L71
 847              		.cfi_endproc
 848              	.LFE119:
 850              		.section	.text.CAN_TransmitStatus,"ax",%progbits
 851              		.align	1
 852              		.global	CAN_TransmitStatus
 853              		.syntax unified
 854              		.thumb
 855              		.thumb_func
 856              		.fpu softvfp
 858              	CAN_TransmitStatus:
 859              	.LFB120:
 649:FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
 860              		.loc 1 649 0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 0
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 864              		@ link register save eliminated.
 865              	.LVL48:
 656:FWLIB/src/stm32f4xx_can.c ****   {
 866              		.loc 1 656 0
 867 0000 0129     		cmp	r1, #1
 868 0002 19D0     		beq	.L82
 869 0004 19B1     		cbz	r1, .L83
 870 0006 0229     		cmp	r1, #2
 871 0008 1AD0     		beq	.L84
 668:FWLIB/src/stm32f4xx_can.c ****       break;
 872              		.loc 1 668 0
 873 000a 0023     		movs	r3, #0
 874 000c 08E0     		b	.L81
 875              	.L83:
 659:FWLIB/src/stm32f4xx_can.c ****       break;
 876              		.loc 1 659 0
 877 000e 8368     		ldr	r3, [r0, #8]
 878 0010 23F07B43 		bic	r3, r3, #-83886080
 879 0014 23F47F03 		bic	r3, r3, #16711680
 880 0018 23F47F43 		bic	r3, r3, #65280
 881 001c 23F0FC03 		bic	r3, r3, #252
 882              	.LVL49:
 883              	.L81:
 671:FWLIB/src/stm32f4xx_can.c ****   {
 884              		.loc 1 671 0
 885 0020 104A     		ldr	r2, .L95
 886 0022 9342     		cmp	r3, r2
 887 0024 17D0     		beq	.L86
 888 0026 13D9     		bls	.L94
 889 0028 0F4A     		ldr	r2, .L95+4
 890 002a 9342     		cmp	r3, r2
 891 002c 15D0     		beq	.L89
 892 002e 0F4A     		ldr	r2, .L95+8
 893 0030 9342     		cmp	r3, r2
 894 0032 14D1     		bne	.L92
 895              	.LVL50:
 688:FWLIB/src/stm32f4xx_can.c ****       break;
 896              		.loc 1 688 0
 897 0034 0120     		movs	r0, #1
 898              	.LVL51:
ARM GAS  /tmp/ccrnvJ70.s 			page 49


 689:FWLIB/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 899              		.loc 1 689 0
 900 0036 7047     		bx	lr
 901              	.LVL52:
 902              	.L82:
 662:FWLIB/src/stm32f4xx_can.c ****       break;
 903              		.loc 1 662 0
 904 0038 8268     		ldr	r2, [r0, #8]
 905 003a 0B4B     		ldr	r3, .L95+4
 906 003c 1340     		ands	r3, r3, r2
 907              	.LVL53:
 663:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 908              		.loc 1 663 0
 909 003e EFE7     		b	.L81
 910              	.LVL54:
 911              	.L84:
 665:FWLIB/src/stm32f4xx_can.c ****       break;
 912              		.loc 1 665 0
 913 0040 8368     		ldr	r3, [r0, #8]
 914 0042 23F06F43 		bic	r3, r3, #-285212672
 915 0046 23F47C03 		bic	r3, r3, #16515072
 916 004a 1B0C     		lsrs	r3, r3, #16
 917 004c 1B04     		lsls	r3, r3, #16
 918              	.LVL55:
 666:FWLIB/src/stm32f4xx_can.c ****     default:
 919              		.loc 1 666 0
 920 004e E7E7     		b	.L81
 921              	.L94:
 671:FWLIB/src/stm32f4xx_can.c ****   {
 922              		.loc 1 671 0
 923 0050 2BB9     		cbnz	r3, .L92
 674:FWLIB/src/stm32f4xx_can.c ****       break;
 924              		.loc 1 674 0
 925 0052 0220     		movs	r0, #2
 926              	.LVL56:
 927 0054 7047     		bx	lr
 928              	.LVL57:
 929              	.L86:
 684:FWLIB/src/stm32f4xx_can.c ****       break;
 930              		.loc 1 684 0
 931 0056 0120     		movs	r0, #1
 932              	.LVL58:
 685:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 933              		.loc 1 685 0
 934 0058 7047     		bx	lr
 935              	.LVL59:
 936              	.L89:
 686:FWLIB/src/stm32f4xx_can.c ****       break;
 937              		.loc 1 686 0
 938 005a 0120     		movs	r0, #1
 939              	.LVL60:
 687:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 940              		.loc 1 687 0
 941 005c 7047     		bx	lr
 942              	.LVL61:
 943              	.L92:
 677:FWLIB/src/stm32f4xx_can.c ****       break;
ARM GAS  /tmp/ccrnvJ70.s 			page 50


 944              		.loc 1 677 0
 945 005e 0020     		movs	r0, #0
 946              	.LVL62:
 694:FWLIB/src/stm32f4xx_can.c **** 
 947              		.loc 1 694 0
 948 0060 7047     		bx	lr
 949              	.L96:
 950 0062 00BF     		.align	2
 951              	.L95:
 952 0064 03000004 		.word	67108867
 953 0068 00030008 		.word	134218496
 954 006c 00000310 		.word	268632064
 955              		.cfi_endproc
 956              	.LFE120:
 958              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 959              		.align	1
 960              		.global	CAN_CancelTransmit
 961              		.syntax unified
 962              		.thumb
 963              		.thumb_func
 964              		.fpu softvfp
 966              	CAN_CancelTransmit:
 967              	.LFB121:
 703:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 968              		.loc 1 703 0
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 0
 971              		@ frame_needed = 0, uses_anonymous_args = 0
 972              		@ link register save eliminated.
 973              	.LVL63:
 708:FWLIB/src/stm32f4xx_can.c ****   {
 974              		.loc 1 708 0
 975 0000 0129     		cmp	r1, #1
 976 0002 08D0     		beq	.L99
 977 0004 11B1     		cbz	r1, .L100
 978 0006 0229     		cmp	r1, #2
 979 0008 0AD0     		beq	.L101
 980 000a 7047     		bx	lr
 981              	.L100:
 710:FWLIB/src/stm32f4xx_can.c ****       break;
 982              		.loc 1 710 0
 983 000c 8368     		ldr	r3, [r0, #8]
 984 000e 43F08003 		orr	r3, r3, #128
 985 0012 8360     		str	r3, [r0, #8]
 711:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 986              		.loc 1 711 0
 987 0014 7047     		bx	lr
 988              	.L99:
 712:FWLIB/src/stm32f4xx_can.c ****       break;
 989              		.loc 1 712 0
 990 0016 8368     		ldr	r3, [r0, #8]
 991 0018 43F40043 		orr	r3, r3, #32768
 992 001c 8360     		str	r3, [r0, #8]
 713:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 993              		.loc 1 713 0
 994 001e 7047     		bx	lr
 995              	.L101:
ARM GAS  /tmp/ccrnvJ70.s 			page 51


 714:FWLIB/src/stm32f4xx_can.c ****       break;
 996              		.loc 1 714 0
 997 0020 8368     		ldr	r3, [r0, #8]
 998 0022 43F40003 		orr	r3, r3, #8388608
 999 0026 8360     		str	r3, [r0, #8]
 1000 0028 7047     		bx	lr
 1001              		.cfi_endproc
 1002              	.LFE121:
 1004              		.section	.text.CAN_Receive,"ax",%progbits
 1005              		.align	1
 1006              		.global	CAN_Receive
 1007              		.syntax unified
 1008              		.thumb
 1009              		.thumb_func
 1010              		.fpu softvfp
 1012              	CAN_Receive:
 1013              	.LFB122:
 750:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1014              		.loc 1 750 0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 0
 1017              		@ frame_needed = 0, uses_anonymous_args = 0
 1018              		@ link register save eliminated.
 1019              	.LVL64:
 1020 0000 10B4     		push	{r4}
 1021              	.LCFI7:
 1022              		.cfi_def_cfa_offset 4
 1023              		.cfi_offset 4, -4
 755:FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1024              		.loc 1 755 0
 1025 0002 01F11B03 		add	r3, r1, #27
 1026 0006 1B01     		lsls	r3, r3, #4
 1027 0008 C358     		ldr	r3, [r0, r3]
 1028 000a 03F00403 		and	r3, r3, #4
 1029 000e 1372     		strb	r3, [r2, #8]
 756:FWLIB/src/stm32f4xx_can.c ****   {
 1030              		.loc 1 756 0
 1031 0010 002B     		cmp	r3, #0
 1032 0012 3BD1     		bne	.L103
 758:FWLIB/src/stm32f4xx_can.c ****   }
 1033              		.loc 1 758 0
 1034 0014 01F11B03 		add	r3, r1, #27
 1035 0018 1B01     		lsls	r3, r3, #4
 1036 001a C358     		ldr	r3, [r0, r3]
 1037 001c 5B0D     		lsrs	r3, r3, #21
 1038 001e 1360     		str	r3, [r2]
 1039              	.L104:
 765:FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 1040              		.loc 1 765 0
 1041 0020 01F11B03 		add	r3, r1, #27
 1042 0024 1B01     		lsls	r3, r3, #4
 1043 0026 C418     		adds	r4, r0, r3
 1044 0028 C358     		ldr	r3, [r0, r3]
 1045 002a 03F00203 		and	r3, r3, #2
 1046 002e 5372     		strb	r3, [r2, #9]
 767:FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 1047              		.loc 1 767 0
ARM GAS  /tmp/ccrnvJ70.s 			page 52


 1048 0030 6368     		ldr	r3, [r4, #4]
 1049 0032 03F00F03 		and	r3, r3, #15
 1050 0036 9372     		strb	r3, [r2, #10]
 769:FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 1051              		.loc 1 769 0
 1052 0038 6368     		ldr	r3, [r4, #4]
 1053 003a 1B0A     		lsrs	r3, r3, #8
 1054 003c D374     		strb	r3, [r2, #19]
 771:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1055              		.loc 1 771 0
 1056 003e 00EB0113 		add	r3, r0, r1, lsl #4
 1057 0042 D3F8B841 		ldr	r4, [r3, #440]
 1058 0046 D472     		strb	r4, [r2, #11]
 772:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1059              		.loc 1 772 0
 1060 0048 D3F8B841 		ldr	r4, [r3, #440]
 1061 004c 240A     		lsrs	r4, r4, #8
 1062 004e 1473     		strb	r4, [r2, #12]
 773:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1063              		.loc 1 773 0
 1064 0050 D3F8B841 		ldr	r4, [r3, #440]
 1065 0054 240C     		lsrs	r4, r4, #16
 1066 0056 5473     		strb	r4, [r2, #13]
 774:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1067              		.loc 1 774 0
 1068 0058 D3F8B841 		ldr	r4, [r3, #440]
 1069 005c 240E     		lsrs	r4, r4, #24
 1070 005e 9473     		strb	r4, [r2, #14]
 775:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1071              		.loc 1 775 0
 1072 0060 D3F8BC41 		ldr	r4, [r3, #444]
 1073 0064 D473     		strb	r4, [r2, #15]
 776:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1074              		.loc 1 776 0
 1075 0066 D3F8BC41 		ldr	r4, [r3, #444]
 1076 006a 240A     		lsrs	r4, r4, #8
 1077 006c 1474     		strb	r4, [r2, #16]
 777:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1078              		.loc 1 777 0
 1079 006e D3F8BC41 		ldr	r4, [r3, #444]
 1080 0072 240C     		lsrs	r4, r4, #16
 1081 0074 5474     		strb	r4, [r2, #17]
 778:FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 1082              		.loc 1 778 0
 1083 0076 D3F8BC31 		ldr	r3, [r3, #444]
 1084 007a 1B0E     		lsrs	r3, r3, #24
 1085 007c 9374     		strb	r3, [r2, #18]
 781:FWLIB/src/stm32f4xx_can.c ****   {
 1086              		.loc 1 781 0
 1087 007e 61B1     		cbz	r1, .L108
 788:FWLIB/src/stm32f4xx_can.c ****   }
 1088              		.loc 1 788 0
 1089 0080 0369     		ldr	r3, [r0, #16]
 1090 0082 43F02003 		orr	r3, r3, #32
 1091 0086 0361     		str	r3, [r0, #16]
 1092              	.L102:
 790:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /tmp/ccrnvJ70.s 			page 53


 1093              		.loc 1 790 0
 1094 0088 10BC     		pop	{r4}
 1095              	.LCFI8:
 1096              		.cfi_remember_state
 1097              		.cfi_restore 4
 1098              		.cfi_def_cfa_offset 0
 1099 008a 7047     		bx	lr
 1100              	.L103:
 1101              	.LCFI9:
 1102              		.cfi_restore_state
 762:FWLIB/src/stm32f4xx_can.c ****   }
 1103              		.loc 1 762 0
 1104 008c 01F11B03 		add	r3, r1, #27
 1105 0090 1B01     		lsls	r3, r3, #4
 1106 0092 C358     		ldr	r3, [r0, r3]
 1107 0094 DB08     		lsrs	r3, r3, #3
 1108 0096 5360     		str	r3, [r2, #4]
 1109 0098 C2E7     		b	.L104
 1110              	.L108:
 783:FWLIB/src/stm32f4xx_can.c ****   }
 1111              		.loc 1 783 0
 1112 009a C368     		ldr	r3, [r0, #12]
 1113 009c 43F02003 		orr	r3, r3, #32
 1114 00a0 C360     		str	r3, [r0, #12]
 1115 00a2 F1E7     		b	.L102
 1116              		.cfi_endproc
 1117              	.LFE122:
 1119              		.section	.text.CAN_FIFORelease,"ax",%progbits
 1120              		.align	1
 1121              		.global	CAN_FIFORelease
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu softvfp
 1127              	CAN_FIFORelease:
 1128              	.LFB123:
 799:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1129              		.loc 1 799 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133              		@ link register save eliminated.
 1134              	.LVL65:
 804:FWLIB/src/stm32f4xx_can.c ****   {
 1135              		.loc 1 804 0
 1136 0000 21B1     		cbz	r1, .L112
 811:FWLIB/src/stm32f4xx_can.c ****   }
 1137              		.loc 1 811 0
 1138 0002 0369     		ldr	r3, [r0, #16]
 1139 0004 43F02003 		orr	r3, r3, #32
 1140 0008 0361     		str	r3, [r0, #16]
 1141 000a 7047     		bx	lr
 1142              	.L112:
 806:FWLIB/src/stm32f4xx_can.c ****   }
 1143              		.loc 1 806 0
 1144 000c C368     		ldr	r3, [r0, #12]
 1145 000e 43F02003 		orr	r3, r3, #32
ARM GAS  /tmp/ccrnvJ70.s 			page 54


 1146 0012 C360     		str	r3, [r0, #12]
 1147 0014 7047     		bx	lr
 1148              		.cfi_endproc
 1149              	.LFE123:
 1151              		.section	.text.CAN_MessagePending,"ax",%progbits
 1152              		.align	1
 1153              		.global	CAN_MessagePending
 1154              		.syntax unified
 1155              		.thumb
 1156              		.thumb_func
 1157              		.fpu softvfp
 1159              	CAN_MessagePending:
 1160              	.LFB124:
 822:FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 1161              		.loc 1 822 0
 1162              		.cfi_startproc
 1163              		@ args = 0, pretend = 0, frame = 0
 1164              		@ frame_needed = 0, uses_anonymous_args = 0
 1165              		@ link register save eliminated.
 1166              	.LVL66:
 827:FWLIB/src/stm32f4xx_can.c ****   {
 1167              		.loc 1 827 0
 1168 0000 19B1     		cbz	r1, .L117
 831:FWLIB/src/stm32f4xx_can.c ****   {
 1169              		.loc 1 831 0
 1170 0002 0129     		cmp	r1, #1
 1171 0004 05D0     		beq	.L118
 837:FWLIB/src/stm32f4xx_can.c ****   }
 1172              		.loc 1 837 0
 1173 0006 0020     		movs	r0, #0
 1174              	.LVL67:
 840:FWLIB/src/stm32f4xx_can.c **** /**
 1175              		.loc 1 840 0
 1176 0008 7047     		bx	lr
 1177              	.LVL68:
 1178              	.L117:
 829:FWLIB/src/stm32f4xx_can.c ****   }
 1179              		.loc 1 829 0
 1180 000a C068     		ldr	r0, [r0, #12]
 1181              	.LVL69:
 1182 000c 00F00300 		and	r0, r0, #3
 1183              	.LVL70:
 1184 0010 7047     		bx	lr
 1185              	.LVL71:
 1186              	.L118:
 833:FWLIB/src/stm32f4xx_can.c ****   }
 1187              		.loc 1 833 0
 1188 0012 0069     		ldr	r0, [r0, #16]
 1189              	.LVL72:
 1190 0014 00F00300 		and	r0, r0, #3
 1191              	.LVL73:
 1192 0018 7047     		bx	lr
 1193              		.cfi_endproc
 1194              	.LFE124:
 1196              		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1197              		.align	1
 1198              		.global	CAN_OperatingModeRequest
ARM GAS  /tmp/ccrnvJ70.s 			page 55


 1199              		.syntax unified
 1200              		.thumb
 1201              		.thumb_func
 1202              		.fpu softvfp
 1204              	CAN_OperatingModeRequest:
 1205              	.LFB125:
 872:FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 1206              		.loc 1 872 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210              		@ link register save eliminated.
 1211              	.LVL74:
 882:FWLIB/src/stm32f4xx_can.c ****   {
 1212              		.loc 1 882 0
 1213 0000 B9B9     		cbnz	r1, .L120
 885:FWLIB/src/stm32f4xx_can.c **** 
 1214              		.loc 1 885 0
 1215 0002 0368     		ldr	r3, [r0]
 1216 0004 23F00303 		bic	r3, r3, #3
 1217 0008 43F00103 		orr	r3, r3, #1
 1218 000c 0360     		str	r3, [r0]
 876:FWLIB/src/stm32f4xx_can.c **** 
 1219              		.loc 1 876 0
 1220 000e 4FF6FF72 		movw	r2, #65535
 888:FWLIB/src/stm32f4xx_can.c ****     {
 1221              		.loc 1 888 0
 1222 0012 00E0     		b	.L121
 1223              	.LVL75:
 1224              	.L123:
 890:FWLIB/src/stm32f4xx_can.c ****     }
 1225              		.loc 1 890 0
 1226 0014 013A     		subs	r2, r2, #1
 1227              	.LVL76:
 1228              	.L121:
 888:FWLIB/src/stm32f4xx_can.c ****     {
 1229              		.loc 1 888 0
 1230 0016 4368     		ldr	r3, [r0, #4]
 1231 0018 03F00303 		and	r3, r3, #3
 1232 001c 012B     		cmp	r3, #1
 1233 001e 01D0     		beq	.L122
 888:FWLIB/src/stm32f4xx_can.c ****     {
 1234              		.loc 1 888 0 is_stmt 0 discriminator 1
 1235 0020 002A     		cmp	r2, #0
 1236 0022 F7D1     		bne	.L123
 1237              	.L122:
 892:FWLIB/src/stm32f4xx_can.c ****     {
 1238              		.loc 1 892 0 is_stmt 1
 1239 0024 4368     		ldr	r3, [r0, #4]
 1240 0026 03F00303 		and	r3, r3, #3
 1241 002a 012B     		cmp	r3, #1
 1242 002c 32D0     		beq	.L132
 894:FWLIB/src/stm32f4xx_can.c ****     }
 1243              		.loc 1 894 0
 1244 002e 0020     		movs	r0, #0
 1245              	.LVL77:
 1246 0030 7047     		bx	lr
ARM GAS  /tmp/ccrnvJ70.s 			page 56


 1247              	.LVL78:
 1248              	.L120:
 901:FWLIB/src/stm32f4xx_can.c ****   {
 1249              		.loc 1 901 0
 1250 0032 0129     		cmp	r1, #1
 1251 0034 03D0     		beq	.L136
 920:FWLIB/src/stm32f4xx_can.c ****   {
 1252              		.loc 1 920 0
 1253 0036 0229     		cmp	r1, #2
 1254 0038 15D0     		beq	.L137
 941:FWLIB/src/stm32f4xx_can.c ****   }
 1255              		.loc 1 941 0
 1256 003a 0020     		movs	r0, #0
 1257              	.LVL79:
 1258 003c 7047     		bx	lr
 1259              	.LVL80:
 1260              	.L136:
 904:FWLIB/src/stm32f4xx_can.c **** 
 1261              		.loc 1 904 0
 1262 003e 0368     		ldr	r3, [r0]
 1263 0040 23F00303 		bic	r3, r3, #3
 1264 0044 0360     		str	r3, [r0]
 876:FWLIB/src/stm32f4xx_can.c **** 
 1265              		.loc 1 876 0
 1266 0046 4FF6FF73 		movw	r3, #65535
 907:FWLIB/src/stm32f4xx_can.c ****     {
 1267              		.loc 1 907 0
 1268 004a 00E0     		b	.L126
 1269              	.LVL81:
 1270              	.L128:
 909:FWLIB/src/stm32f4xx_can.c ****     }
 1271              		.loc 1 909 0
 1272 004c 013B     		subs	r3, r3, #1
 1273              	.LVL82:
 1274              	.L126:
 907:FWLIB/src/stm32f4xx_can.c ****     {
 1275              		.loc 1 907 0
 1276 004e 4268     		ldr	r2, [r0, #4]
 1277 0050 12F0030F 		tst	r2, #3
 1278 0054 01D0     		beq	.L127
 907:FWLIB/src/stm32f4xx_can.c ****     {
 1279              		.loc 1 907 0 is_stmt 0 discriminator 1
 1280 0056 002B     		cmp	r3, #0
 1281 0058 F8D1     		bne	.L128
 1282              	.L127:
 911:FWLIB/src/stm32f4xx_can.c ****     {
 1283              		.loc 1 911 0 is_stmt 1
 1284 005a 4368     		ldr	r3, [r0, #4]
 1285              	.LVL83:
 1286 005c 13F0030F 		tst	r3, #3
 1287 0060 1AD0     		beq	.L133
 913:FWLIB/src/stm32f4xx_can.c ****     }
 1288              		.loc 1 913 0
 1289 0062 0020     		movs	r0, #0
 1290              	.LVL84:
 1291 0064 7047     		bx	lr
 1292              	.LVL85:
ARM GAS  /tmp/ccrnvJ70.s 			page 57


 1293              	.L137:
 923:FWLIB/src/stm32f4xx_can.c **** 
 1294              		.loc 1 923 0
 1295 0066 0368     		ldr	r3, [r0]
 1296 0068 23F00303 		bic	r3, r3, #3
 1297 006c 43F00203 		orr	r3, r3, #2
 1298 0070 0360     		str	r3, [r0]
 876:FWLIB/src/stm32f4xx_can.c **** 
 1299              		.loc 1 876 0
 1300 0072 4FF6FF72 		movw	r2, #65535
 1301              	.LVL86:
 1302              	.L129:
 926:FWLIB/src/stm32f4xx_can.c ****     {
 1303              		.loc 1 926 0
 1304 0076 4368     		ldr	r3, [r0, #4]
 1305 0078 03F00303 		and	r3, r3, #3
 1306 007c 022B     		cmp	r3, #2
 1307 007e 02D0     		beq	.L130
 926:FWLIB/src/stm32f4xx_can.c ****     {
 1308              		.loc 1 926 0 is_stmt 0 discriminator 1
 1309 0080 0AB1     		cbz	r2, .L130
 928:FWLIB/src/stm32f4xx_can.c ****     }
 1310              		.loc 1 928 0 is_stmt 1
 1311 0082 013A     		subs	r2, r2, #1
 1312              	.LVL87:
 1313 0084 F7E7     		b	.L129
 1314              	.L130:
 930:FWLIB/src/stm32f4xx_can.c ****     {
 1315              		.loc 1 930 0
 1316 0086 4368     		ldr	r3, [r0, #4]
 1317 0088 03F00303 		and	r3, r3, #3
 1318 008c 022B     		cmp	r3, #2
 1319 008e 05D0     		beq	.L135
 932:FWLIB/src/stm32f4xx_can.c ****     }
 1320              		.loc 1 932 0
 1321 0090 0020     		movs	r0, #0
 1322              	.LVL88:
 1323 0092 7047     		bx	lr
 1324              	.LVL89:
 1325              	.L132:
 898:FWLIB/src/stm32f4xx_can.c ****     }
 1326              		.loc 1 898 0
 1327 0094 0120     		movs	r0, #1
 1328              	.LVL90:
 1329 0096 7047     		bx	lr
 1330              	.LVL91:
 1331              	.L133:
 917:FWLIB/src/stm32f4xx_can.c ****     }
 1332              		.loc 1 917 0
 1333 0098 0120     		movs	r0, #1
 1334              	.LVL92:
 1335 009a 7047     		bx	lr
 1336              	.LVL93:
 1337              	.L135:
 936:FWLIB/src/stm32f4xx_can.c ****     }
 1338              		.loc 1 936 0
 1339 009c 0120     		movs	r0, #1
ARM GAS  /tmp/ccrnvJ70.s 			page 58


 1340              	.LVL94:
 945:FWLIB/src/stm32f4xx_can.c **** 
 1341              		.loc 1 945 0
 1342 009e 7047     		bx	lr
 1343              		.cfi_endproc
 1344              	.LFE125:
 1346              		.section	.text.CAN_Sleep,"ax",%progbits
 1347              		.align	1
 1348              		.global	CAN_Sleep
 1349              		.syntax unified
 1350              		.thumb
 1351              		.thumb_func
 1352              		.fpu softvfp
 1354              	CAN_Sleep:
 1355              	.LFB126:
 953:FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1356              		.loc 1 953 0
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 0
 1359              		@ frame_needed = 0, uses_anonymous_args = 0
 1360              		@ link register save eliminated.
 1361              	.LVL95:
 960:FWLIB/src/stm32f4xx_can.c ****    
 1362              		.loc 1 960 0
 1363 0000 0368     		ldr	r3, [r0]
 1364 0002 23F00303 		bic	r3, r3, #3
 1365 0006 43F00203 		orr	r3, r3, #2
 1366 000a 0360     		str	r3, [r0]
 963:FWLIB/src/stm32f4xx_can.c ****   {
 1367              		.loc 1 963 0
 1368 000c 4368     		ldr	r3, [r0, #4]
 1369 000e 03F00303 		and	r3, r3, #3
 1370 0012 022B     		cmp	r3, #2
 1371 0014 01D0     		beq	.L140
 954:FWLIB/src/stm32f4xx_can.c ****   
 1372              		.loc 1 954 0
 1373 0016 0020     		movs	r0, #0
 1374              	.LVL96:
 1375 0018 7047     		bx	lr
 1376              	.LVL97:
 1377              	.L140:
 966:FWLIB/src/stm32f4xx_can.c ****   }
 1378              		.loc 1 966 0
 1379 001a 0120     		movs	r0, #1
 1380              	.LVL98:
 970:FWLIB/src/stm32f4xx_can.c **** 
 1381              		.loc 1 970 0
 1382 001c 7047     		bx	lr
 1383              		.cfi_endproc
 1384              	.LFE126:
 1386              		.section	.text.CAN_WakeUp,"ax",%progbits
 1387              		.align	1
 1388              		.global	CAN_WakeUp
 1389              		.syntax unified
 1390              		.thumb
 1391              		.thumb_func
 1392              		.fpu softvfp
ARM GAS  /tmp/ccrnvJ70.s 			page 59


 1394              	CAN_WakeUp:
 1395              	.LFB127:
 978:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 1396              		.loc 1 978 0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 0
 1399              		@ frame_needed = 0, uses_anonymous_args = 0
 1400              		@ link register save eliminated.
 1401              	.LVL99:
 986:FWLIB/src/stm32f4xx_can.c ****     
 1402              		.loc 1 986 0
 1403 0000 0368     		ldr	r3, [r0]
 1404 0002 23F00203 		bic	r3, r3, #2
 1405 0006 0360     		str	r3, [r0]
 979:FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1406              		.loc 1 979 0
 1407 0008 4FF6FF73 		movw	r3, #65535
 989:FWLIB/src/stm32f4xx_can.c ****   {
 1408              		.loc 1 989 0
 1409 000c 00E0     		b	.L142
 1410              	.LVL100:
 1411              	.L144:
 991:FWLIB/src/stm32f4xx_can.c ****   }
 1412              		.loc 1 991 0
 1413 000e 013B     		subs	r3, r3, #1
 1414              	.LVL101:
 1415              	.L142:
 989:FWLIB/src/stm32f4xx_can.c ****   {
 1416              		.loc 1 989 0
 1417 0010 4268     		ldr	r2, [r0, #4]
 1418 0012 12F0020F 		tst	r2, #2
 1419 0016 01D0     		beq	.L143
 989:FWLIB/src/stm32f4xx_can.c ****   {
 1420              		.loc 1 989 0 is_stmt 0 discriminator 1
 1421 0018 002B     		cmp	r3, #0
 1422 001a F8D1     		bne	.L144
 1423              	.L143:
 993:FWLIB/src/stm32f4xx_can.c ****   {
 1424              		.loc 1 993 0 is_stmt 1
 1425 001c 4368     		ldr	r3, [r0, #4]
 1426              	.LVL102:
 1427 001e 13F0020F 		tst	r3, #2
 1428 0022 01D1     		bne	.L147
 996:FWLIB/src/stm32f4xx_can.c ****   }
 1429              		.loc 1 996 0
 1430 0024 0120     		movs	r0, #1
 1431              	.LVL103:
1000:FWLIB/src/stm32f4xx_can.c **** /**
 1432              		.loc 1 1000 0
 1433 0026 7047     		bx	lr
 1434              	.LVL104:
 1435              	.L147:
 980:FWLIB/src/stm32f4xx_can.c ****   
 1436              		.loc 1 980 0
 1437 0028 0020     		movs	r0, #0
 1438              	.LVL105:
 1439 002a 7047     		bx	lr
ARM GAS  /tmp/ccrnvJ70.s 			page 60


 1440              		.cfi_endproc
 1441              	.LFE127:
 1443              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1444              		.align	1
 1445              		.global	CAN_GetLastErrorCode
 1446              		.syntax unified
 1447              		.thumb
 1448              		.thumb_func
 1449              		.fpu softvfp
 1451              	CAN_GetLastErrorCode:
 1452              	.LFB128:
1040:FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
 1453              		.loc 1 1040 0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 0
 1456              		@ frame_needed = 0, uses_anonymous_args = 0
 1457              		@ link register save eliminated.
 1458              	.LVL106:
1047:FWLIB/src/stm32f4xx_can.c ****   
 1459              		.loc 1 1047 0
 1460 0000 8069     		ldr	r0, [r0, #24]
 1461              	.LVL107:
1051:FWLIB/src/stm32f4xx_can.c **** 
 1462              		.loc 1 1051 0
 1463 0002 00F07000 		and	r0, r0, #112
 1464              	.LVL108:
 1465 0006 7047     		bx	lr
 1466              		.cfi_endproc
 1467              	.LFE128:
 1469              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1470              		.align	1
 1471              		.global	CAN_GetReceiveErrorCounter
 1472              		.syntax unified
 1473              		.thumb
 1474              		.thumb_func
 1475              		.fpu softvfp
 1477              	CAN_GetReceiveErrorCounter:
 1478              	.LFB129:
1065:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1479              		.loc 1 1065 0
 1480              		.cfi_startproc
 1481              		@ args = 0, pretend = 0, frame = 0
 1482              		@ frame_needed = 0, uses_anonymous_args = 0
 1483              		@ link register save eliminated.
 1484              	.LVL109:
1072:FWLIB/src/stm32f4xx_can.c ****   
 1485              		.loc 1 1072 0
 1486 0000 8069     		ldr	r0, [r0, #24]
 1487              	.LVL110:
1076:FWLIB/src/stm32f4xx_can.c **** 
 1488              		.loc 1 1076 0
 1489 0002 000E     		lsrs	r0, r0, #24
 1490              	.LVL111:
 1491 0004 7047     		bx	lr
 1492              		.cfi_endproc
 1493              	.LFE129:
 1495              		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
ARM GAS  /tmp/ccrnvJ70.s 			page 61


 1496              		.align	1
 1497              		.global	CAN_GetLSBTransmitErrorCounter
 1498              		.syntax unified
 1499              		.thumb
 1500              		.thumb_func
 1501              		.fpu softvfp
 1503              	CAN_GetLSBTransmitErrorCounter:
 1504              	.LFB130:
1085:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1505              		.loc 1 1085 0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 0
 1508              		@ frame_needed = 0, uses_anonymous_args = 0
 1509              		@ link register save eliminated.
 1510              	.LVL112:
1092:FWLIB/src/stm32f4xx_can.c ****   
 1511              		.loc 1 1092 0
 1512 0000 8069     		ldr	r0, [r0, #24]
 1513              	.LVL113:
1096:FWLIB/src/stm32f4xx_can.c **** /**
 1514              		.loc 1 1096 0
 1515 0002 C0F30740 		ubfx	r0, r0, #16, #8
 1516              	.LVL114:
 1517 0006 7047     		bx	lr
 1518              		.cfi_endproc
 1519              	.LFE130:
 1521              		.section	.text.CAN_ITConfig,"ax",%progbits
 1522              		.align	1
 1523              		.global	CAN_ITConfig
 1524              		.syntax unified
 1525              		.thumb
 1526              		.thumb_func
 1527              		.fpu softvfp
 1529              	CAN_ITConfig:
 1530              	.LFB131:
1290:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1531              		.loc 1 1290 0
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 0
 1534              		@ frame_needed = 0, uses_anonymous_args = 0
 1535              		@ link register save eliminated.
 1536              	.LVL115:
1296:FWLIB/src/stm32f4xx_can.c ****   {
 1537              		.loc 1 1296 0
 1538 0000 22B9     		cbnz	r2, .L154
1304:FWLIB/src/stm32f4xx_can.c ****   }
 1539              		.loc 1 1304 0
 1540 0002 4369     		ldr	r3, [r0, #20]
 1541 0004 23EA0101 		bic	r1, r3, r1
 1542              	.LVL116:
 1543 0008 4161     		str	r1, [r0, #20]
 1544 000a 7047     		bx	lr
 1545              	.LVL117:
 1546              	.L154:
1299:FWLIB/src/stm32f4xx_can.c ****   }
 1547              		.loc 1 1299 0
 1548 000c 4369     		ldr	r3, [r0, #20]
ARM GAS  /tmp/ccrnvJ70.s 			page 62


 1549 000e 1943     		orrs	r1, r1, r3
 1550              	.LVL118:
 1551 0010 4161     		str	r1, [r0, #20]
 1552 0012 7047     		bx	lr
 1553              		.cfi_endproc
 1554              	.LFE131:
 1556              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 1557              		.align	1
 1558              		.global	CAN_GetFlagStatus
 1559              		.syntax unified
 1560              		.thumb
 1561              		.thumb_func
 1562              		.fpu softvfp
 1564              	CAN_GetFlagStatus:
 1565              	.LFB132:
1330:FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
 1566              		.loc 1 1330 0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              		@ link register save eliminated.
 1571              	.LVL119:
1338:FWLIB/src/stm32f4xx_can.c ****   { 
 1572              		.loc 1 1338 0
 1573 0000 11F4700F 		tst	r1, #15728640
 1574 0004 06D0     		beq	.L156
1341:FWLIB/src/stm32f4xx_can.c ****     { 
 1575              		.loc 1 1341 0
 1576 0006 8369     		ldr	r3, [r0, #24]
 1577 0008 1940     		ands	r1, r1, r3
 1578              	.LVL120:
 1579 000a C1F31301 		ubfx	r1, r1, #0, #20
 1580 000e 41B3     		cbz	r1, .L161
1344:FWLIB/src/stm32f4xx_can.c ****     }
 1581              		.loc 1 1344 0
 1582 0010 0120     		movs	r0, #1
 1583              	.LVL121:
 1584 0012 7047     		bx	lr
 1585              	.LVL122:
 1586              	.L156:
1352:FWLIB/src/stm32f4xx_can.c ****   { 
 1587              		.loc 1 1352 0
 1588 0014 11F0807F 		tst	r1, #16777216
 1589 0018 06D0     		beq	.L158
1355:FWLIB/src/stm32f4xx_can.c ****     { 
 1590              		.loc 1 1355 0
 1591 001a 4368     		ldr	r3, [r0, #4]
 1592 001c 1940     		ands	r1, r1, r3
 1593              	.LVL123:
 1594 001e C1F31301 		ubfx	r1, r1, #0, #20
 1595 0022 01B3     		cbz	r1, .L162
1358:FWLIB/src/stm32f4xx_can.c ****     }
 1596              		.loc 1 1358 0
 1597 0024 0120     		movs	r0, #1
 1598              	.LVL124:
 1599 0026 7047     		bx	lr
 1600              	.LVL125:
ARM GAS  /tmp/ccrnvJ70.s 			page 63


 1601              	.L158:
1366:FWLIB/src/stm32f4xx_can.c ****   { 
 1602              		.loc 1 1366 0
 1603 0028 11F0006F 		tst	r1, #134217728
 1604 002c 06D0     		beq	.L159
1369:FWLIB/src/stm32f4xx_can.c ****     { 
 1605              		.loc 1 1369 0
 1606 002e 8368     		ldr	r3, [r0, #8]
 1607 0030 1940     		ands	r1, r1, r3
 1608              	.LVL126:
 1609 0032 C1F31301 		ubfx	r1, r1, #0, #20
 1610 0036 C1B1     		cbz	r1, .L163
1372:FWLIB/src/stm32f4xx_can.c ****     }
 1611              		.loc 1 1372 0
 1612 0038 0120     		movs	r0, #1
 1613              	.LVL127:
 1614 003a 7047     		bx	lr
 1615              	.LVL128:
 1616              	.L159:
1380:FWLIB/src/stm32f4xx_can.c ****   { 
 1617              		.loc 1 1380 0
 1618 003c 11F0007F 		tst	r1, #33554432
 1619 0040 06D0     		beq	.L160
1383:FWLIB/src/stm32f4xx_can.c ****     { 
 1620              		.loc 1 1383 0
 1621 0042 C368     		ldr	r3, [r0, #12]
 1622 0044 1940     		ands	r1, r1, r3
 1623              	.LVL129:
 1624 0046 C1F31301 		ubfx	r1, r1, #0, #20
 1625 004a 81B1     		cbz	r1, .L164
1386:FWLIB/src/stm32f4xx_can.c ****     }
 1626              		.loc 1 1386 0
 1627 004c 0120     		movs	r0, #1
 1628              	.LVL130:
 1629 004e 7047     		bx	lr
 1630              	.LVL131:
 1631              	.L160:
1397:FWLIB/src/stm32f4xx_can.c ****     { 
 1632              		.loc 1 1397 0
 1633 0050 0369     		ldr	r3, [r0, #16]
 1634 0052 1940     		ands	r1, r1, r3
 1635              	.LVL132:
 1636 0054 C1F31301 		ubfx	r1, r1, #0, #20
 1637 0058 09B9     		cbnz	r1, .L166
1405:FWLIB/src/stm32f4xx_can.c ****     }
 1638              		.loc 1 1405 0
 1639 005a 0020     		movs	r0, #0
 1640              	.LVL133:
1410:FWLIB/src/stm32f4xx_can.c **** 
 1641              		.loc 1 1410 0
 1642 005c 7047     		bx	lr
 1643              	.LVL134:
 1644              	.L166:
1400:FWLIB/src/stm32f4xx_can.c ****     }
 1645              		.loc 1 1400 0
 1646 005e 0120     		movs	r0, #1
 1647              	.LVL135:
ARM GAS  /tmp/ccrnvJ70.s 			page 64


 1648 0060 7047     		bx	lr
 1649              	.LVL136:
 1650              	.L161:
1349:FWLIB/src/stm32f4xx_can.c ****     }
 1651              		.loc 1 1349 0
 1652 0062 0020     		movs	r0, #0
 1653              	.LVL137:
 1654 0064 7047     		bx	lr
 1655              	.LVL138:
 1656              	.L162:
1363:FWLIB/src/stm32f4xx_can.c ****     }
 1657              		.loc 1 1363 0
 1658 0066 0020     		movs	r0, #0
 1659              	.LVL139:
 1660 0068 7047     		bx	lr
 1661              	.LVL140:
 1662              	.L163:
1377:FWLIB/src/stm32f4xx_can.c ****     }
 1663              		.loc 1 1377 0
 1664 006a 0020     		movs	r0, #0
 1665              	.LVL141:
 1666 006c 7047     		bx	lr
 1667              	.LVL142:
 1668              	.L164:
1391:FWLIB/src/stm32f4xx_can.c ****     }
 1669              		.loc 1 1391 0
 1670 006e 0020     		movs	r0, #0
 1671              	.LVL143:
 1672 0070 7047     		bx	lr
 1673              		.cfi_endproc
 1674              	.LFE132:
 1676              		.section	.text.CAN_ClearFlag,"ax",%progbits
 1677              		.align	1
 1678              		.global	CAN_ClearFlag
 1679              		.syntax unified
 1680              		.thumb
 1681              		.thumb_func
 1682              		.fpu softvfp
 1684              	CAN_ClearFlag:
 1685              	.LFB133:
1430:FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
 1686              		.loc 1 1430 0
 1687              		.cfi_startproc
 1688              		@ args = 0, pretend = 0, frame = 0
 1689              		@ frame_needed = 0, uses_anonymous_args = 0
 1690              		@ link register save eliminated.
 1691              	.LVL144:
1436:FWLIB/src/stm32f4xx_can.c ****   {
 1692              		.loc 1 1436 0
 1693 0000 0C4B     		ldr	r3, .L177
 1694 0002 9942     		cmp	r1, r3
 1695 0004 0CD0     		beq	.L173
1443:FWLIB/src/stm32f4xx_can.c **** 
 1696              		.loc 1 1443 0
 1697 0006 C1F31303 		ubfx	r3, r1, #0, #20
 1698              	.LVL145:
1445:FWLIB/src/stm32f4xx_can.c ****     {
ARM GAS  /tmp/ccrnvJ70.s 			page 65


 1699              		.loc 1 1445 0
 1700 000a 11F0007F 		tst	r1, #33554432
 1701 000e 0AD1     		bne	.L174
1450:FWLIB/src/stm32f4xx_can.c ****     {
 1702              		.loc 1 1450 0
 1703 0010 11F0806F 		tst	r1, #67108864
 1704 0014 09D1     		bne	.L175
1455:FWLIB/src/stm32f4xx_can.c ****     {
 1705              		.loc 1 1455 0
 1706 0016 11F0006F 		tst	r1, #134217728
 1707 001a 08D1     		bne	.L176
1463:FWLIB/src/stm32f4xx_can.c ****     }
 1708              		.loc 1 1463 0
 1709 001c 4360     		str	r3, [r0, #4]
 1710 001e 7047     		bx	lr
 1711              	.LVL146:
 1712              	.L173:
1439:FWLIB/src/stm32f4xx_can.c ****   }
 1713              		.loc 1 1439 0
 1714 0020 0023     		movs	r3, #0
 1715 0022 8361     		str	r3, [r0, #24]
 1716 0024 7047     		bx	lr
 1717              	.LVL147:
 1718              	.L174:
1448:FWLIB/src/stm32f4xx_can.c ****     }
 1719              		.loc 1 1448 0
 1720 0026 C360     		str	r3, [r0, #12]
 1721 0028 7047     		bx	lr
 1722              	.L175:
1453:FWLIB/src/stm32f4xx_can.c ****     }
 1723              		.loc 1 1453 0
 1724 002a 0361     		str	r3, [r0, #16]
 1725 002c 7047     		bx	lr
 1726              	.L176:
1458:FWLIB/src/stm32f4xx_can.c ****     }
 1727              		.loc 1 1458 0
 1728 002e 8360     		str	r3, [r0, #8]
 1729 0030 7047     		bx	lr
 1730              	.L178:
 1731 0032 00BF     		.align	2
 1732              	.L177:
 1733 0034 7000F030 		.word	821035120
 1734              		.cfi_endproc
 1735              	.LFE133:
 1737              		.section	.text.CAN_GetITStatus,"ax",%progbits
 1738              		.align	1
 1739              		.global	CAN_GetITStatus
 1740              		.syntax unified
 1741              		.thumb
 1742              		.thumb_func
 1743              		.fpu softvfp
 1745              	CAN_GetITStatus:
 1746              	.LFB134:
1490:FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
 1747              		.loc 1 1490 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrnvJ70.s 			page 66


 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 1751              	.LVL148:
 1752 0000 08B5     		push	{r3, lr}
 1753              	.LCFI10:
 1754              		.cfi_def_cfa_offset 8
 1755              		.cfi_offset 3, -8
 1756              		.cfi_offset 14, -4
 1757              	.LVL149:
1497:FWLIB/src/stm32f4xx_can.c ****  {
 1758              		.loc 1 1497 0
 1759 0002 4369     		ldr	r3, [r0, #20]
 1760 0004 0B42     		tst	r3, r1
 1761 0006 6DD0     		beq	.L198
1500:FWLIB/src/stm32f4xx_can.c ****     {
 1762              		.loc 1 1500 0
 1763 0008 4029     		cmp	r1, #64
 1764 000a 4DD0     		beq	.L181
 1765 000c 11D9     		bls	.L201
 1766 000e B1F5006F 		cmp	r1, #2048
 1767 0012 62D0     		beq	.L190
 1768 0014 21D8     		bhi	.L191
 1769 0016 B1F5007F 		cmp	r1, #512
 1770 001a 54D0     		beq	.L192
 1771 001c B1F5806F 		cmp	r1, #1024
 1772 0020 56D0     		beq	.L193
 1773 0022 B1F5807F 		cmp	r1, #256
 1774 0026 0DD1     		bne	.L199
1540:FWLIB/src/stm32f4xx_can.c ****         break;
 1775              		.loc 1 1540 0
 1776 0028 8069     		ldr	r0, [r0, #24]
 1777              	.LVL150:
 1778 002a 0121     		movs	r1, #1
 1779              	.LVL151:
 1780 002c FFF7FEFF 		bl	CheckITStatus
 1781              	.LVL152:
1541:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
 1782              		.loc 1 1541 0
 1783 0030 08BD     		pop	{r3, pc}
 1784              	.LVL153:
 1785              	.L201:
1500:FWLIB/src/stm32f4xx_can.c ****     {
 1786              		.loc 1 1500 0
 1787 0032 0429     		cmp	r1, #4
 1788 0034 24D0     		beq	.L183
 1789 0036 07D9     		bls	.L202
 1790 0038 1029     		cmp	r1, #16
 1791 003a 2BD0     		beq	.L187
 1792 003c 2029     		cmp	r1, #32
 1793 003e 2ED0     		beq	.L188
 1794 0040 0829     		cmp	r1, #8
 1795 0042 22D0     		beq	.L203
 1796              	.L199:
1560:FWLIB/src/stm32f4xx_can.c ****         break;
 1797              		.loc 1 1560 0
 1798 0044 0020     		movs	r0, #0
 1799              	.LVL154:
1572:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /tmp/ccrnvJ70.s 			page 67


 1800              		.loc 1 1572 0
 1801 0046 08BD     		pop	{r3, pc}
 1802              	.LVL155:
 1803              	.L202:
1500:FWLIB/src/stm32f4xx_can.c ****     {
 1804              		.loc 1 1500 0
 1805 0048 0129     		cmp	r1, #1
 1806 004a 14D0     		beq	.L185
 1807 004c 0229     		cmp	r1, #2
 1808 004e F9D1     		bne	.L199
1508:FWLIB/src/stm32f4xx_can.c ****         break;
 1809              		.loc 1 1508 0
 1810 0050 C068     		ldr	r0, [r0, #12]
 1811              	.LVL156:
 1812 0052 0321     		movs	r1, #3
 1813              	.LVL157:
 1814 0054 FFF7FEFF 		bl	CheckITStatus
 1815              	.LVL158:
1509:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
 1816              		.loc 1 1509 0
 1817 0058 08BD     		pop	{r3, pc}
 1818              	.LVL159:
 1819              	.L191:
1500:FWLIB/src/stm32f4xx_can.c ****     {
 1820              		.loc 1 1500 0
 1821 005a B1F5803F 		cmp	r1, #65536
 1822 005e 28D0     		beq	.L195
 1823 0060 B1F5003F 		cmp	r1, #131072
 1824 0064 2AD0     		beq	.L196
 1825 0066 B1F5004F 		cmp	r1, #32768
 1826 006a EBD1     		bne	.L199
1556:FWLIB/src/stm32f4xx_can.c ****         break;
 1827              		.loc 1 1556 0
 1828 006c 4068     		ldr	r0, [r0, #4]
 1829              	.LVL160:
 1830 006e 0421     		movs	r1, #4
 1831              	.LVL161:
 1832 0070 FFF7FEFF 		bl	CheckITStatus
 1833              	.LVL162:
1557:FWLIB/src/stm32f4xx_can.c ****       default:
 1834              		.loc 1 1557 0
 1835 0074 08BD     		pop	{r3, pc}
 1836              	.LVL163:
 1837              	.L185:
1504:FWLIB/src/stm32f4xx_can.c ****         break;
 1838              		.loc 1 1504 0
 1839 0076 8068     		ldr	r0, [r0, #8]
 1840              	.LVL164:
 1841 0078 1B49     		ldr	r1, .L204
 1842              	.LVL165:
 1843 007a FFF7FEFF 		bl	CheckITStatus
 1844              	.LVL166:
1505:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
 1845              		.loc 1 1505 0
 1846 007e 08BD     		pop	{r3, pc}
 1847              	.LVL167:
 1848              	.L183:
ARM GAS  /tmp/ccrnvJ70.s 			page 68


1512:FWLIB/src/stm32f4xx_can.c ****         break;
 1849              		.loc 1 1512 0
 1850 0080 C068     		ldr	r0, [r0, #12]
 1851              	.LVL168:
 1852 0082 0821     		movs	r1, #8
 1853              	.LVL169:
 1854 0084 FFF7FEFF 		bl	CheckITStatus
 1855              	.LVL170:
1513:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
 1856              		.loc 1 1513 0
 1857 0088 08BD     		pop	{r3, pc}
 1858              	.LVL171:
 1859              	.L203:
1516:FWLIB/src/stm32f4xx_can.c ****         break;
 1860              		.loc 1 1516 0
 1861 008a C068     		ldr	r0, [r0, #12]
 1862              	.LVL172:
 1863 008c 1021     		movs	r1, #16
 1864              	.LVL173:
 1865 008e FFF7FEFF 		bl	CheckITStatus
 1866              	.LVL174:
1517:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
 1867              		.loc 1 1517 0
 1868 0092 08BD     		pop	{r3, pc}
 1869              	.LVL175:
 1870              	.L187:
1520:FWLIB/src/stm32f4xx_can.c ****         break;
 1871              		.loc 1 1520 0
 1872 0094 0069     		ldr	r0, [r0, #16]
 1873              	.LVL176:
 1874 0096 0321     		movs	r1, #3
 1875              	.LVL177:
 1876 0098 FFF7FEFF 		bl	CheckITStatus
 1877              	.LVL178:
1521:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
 1878              		.loc 1 1521 0
 1879 009c 08BD     		pop	{r3, pc}
 1880              	.LVL179:
 1881              	.L188:
1524:FWLIB/src/stm32f4xx_can.c ****         break;
 1882              		.loc 1 1524 0
 1883 009e 0069     		ldr	r0, [r0, #16]
 1884              	.LVL180:
 1885 00a0 0821     		movs	r1, #8
 1886              	.LVL181:
 1887 00a2 FFF7FEFF 		bl	CheckITStatus
 1888              	.LVL182:
1525:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
 1889              		.loc 1 1525 0
 1890 00a6 08BD     		pop	{r3, pc}
 1891              	.LVL183:
 1892              	.L181:
1528:FWLIB/src/stm32f4xx_can.c ****         break;
 1893              		.loc 1 1528 0
 1894 00a8 0069     		ldr	r0, [r0, #16]
 1895              	.LVL184:
 1896 00aa 1021     		movs	r1, #16
ARM GAS  /tmp/ccrnvJ70.s 			page 69


 1897              	.LVL185:
 1898 00ac FFF7FEFF 		bl	CheckITStatus
 1899              	.LVL186:
1529:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
 1900              		.loc 1 1529 0
 1901 00b0 08BD     		pop	{r3, pc}
 1902              	.LVL187:
 1903              	.L195:
1532:FWLIB/src/stm32f4xx_can.c ****         break;
 1904              		.loc 1 1532 0
 1905 00b2 4068     		ldr	r0, [r0, #4]
 1906              	.LVL188:
 1907 00b4 0821     		movs	r1, #8
 1908              	.LVL189:
 1909 00b6 FFF7FEFF 		bl	CheckITStatus
 1910              	.LVL190:
1533:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
 1911              		.loc 1 1533 0
 1912 00ba 08BD     		pop	{r3, pc}
 1913              	.LVL191:
 1914              	.L196:
1536:FWLIB/src/stm32f4xx_can.c ****         break;
 1915              		.loc 1 1536 0
 1916 00bc 4068     		ldr	r0, [r0, #4]
 1917              	.LVL192:
 1918 00be 1021     		movs	r1, #16
 1919              	.LVL193:
 1920 00c0 FFF7FEFF 		bl	CheckITStatus
 1921              	.LVL194:
1537:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
 1922              		.loc 1 1537 0
 1923 00c4 08BD     		pop	{r3, pc}
 1924              	.LVL195:
 1925              	.L192:
1544:FWLIB/src/stm32f4xx_can.c ****         break;
 1926              		.loc 1 1544 0
 1927 00c6 8069     		ldr	r0, [r0, #24]
 1928              	.LVL196:
 1929 00c8 0221     		movs	r1, #2
 1930              	.LVL197:
 1931 00ca FFF7FEFF 		bl	CheckITStatus
 1932              	.LVL198:
1545:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
 1933              		.loc 1 1545 0
 1934 00ce 08BD     		pop	{r3, pc}
 1935              	.LVL199:
 1936              	.L193:
1548:FWLIB/src/stm32f4xx_can.c ****         break;
 1937              		.loc 1 1548 0
 1938 00d0 8069     		ldr	r0, [r0, #24]
 1939              	.LVL200:
 1940 00d2 0421     		movs	r1, #4
 1941              	.LVL201:
 1942 00d4 FFF7FEFF 		bl	CheckITStatus
 1943              	.LVL202:
1549:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
 1944              		.loc 1 1549 0
ARM GAS  /tmp/ccrnvJ70.s 			page 70


 1945 00d8 08BD     		pop	{r3, pc}
 1946              	.LVL203:
 1947              	.L190:
1552:FWLIB/src/stm32f4xx_can.c ****         break;
 1948              		.loc 1 1552 0
 1949 00da 8069     		ldr	r0, [r0, #24]
 1950              	.LVL204:
 1951 00dc 7021     		movs	r1, #112
 1952              	.LVL205:
 1953 00de FFF7FEFF 		bl	CheckITStatus
 1954              	.LVL206:
1553:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
 1955              		.loc 1 1553 0
 1956 00e2 08BD     		pop	{r3, pc}
 1957              	.LVL207:
 1958              	.L198:
1567:FWLIB/src/stm32f4xx_can.c ****   }
 1959              		.loc 1 1567 0
 1960 00e4 0020     		movs	r0, #0
 1961              	.LVL208:
 1962 00e6 08BD     		pop	{r3, pc}
 1963              	.L205:
 1964              		.align	2
 1965              	.L204:
 1966 00e8 01010100 		.word	65793
 1967              		.cfi_endproc
 1968              	.LFE134:
 1970              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 1971              		.align	1
 1972              		.global	CAN_ClearITPendingBit
 1973              		.syntax unified
 1974              		.thumb
 1975              		.thumb_func
 1976              		.fpu softvfp
 1978              	CAN_ClearITPendingBit:
 1979              	.LFB135:
1594:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1980              		.loc 1 1594 0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 0
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 1984              		@ link register save eliminated.
 1985              	.LVL209:
1599:FWLIB/src/stm32f4xx_can.c ****   {
 1986              		.loc 1 1599 0
 1987 0000 B1F5807F 		cmp	r1, #256
 1988 0004 3ED0     		beq	.L208
 1989 0006 11D9     		bls	.L223
 1990 0008 B1F5006F 		cmp	r1, #2048
 1991 000c 40D0     		beq	.L216
 1992 000e 20D9     		bls	.L224
 1993 0010 B1F5803F 		cmp	r1, #65536
 1994 0014 30D0     		beq	.L220
 1995 0016 B1F5003F 		cmp	r1, #131072
 1996 001a 30D0     		beq	.L221
 1997 001c B1F5004F 		cmp	r1, #32768
 1998 0020 03D1     		bne	.L206
ARM GAS  /tmp/ccrnvJ70.s 			page 71


1652:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 1999              		.loc 1 1652 0
 2000 0022 0023     		movs	r3, #0
 2001 0024 8361     		str	r3, [r0, #24]
1654:FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
 2002              		.loc 1 1654 0
 2003 0026 0423     		movs	r3, #4
 2004 0028 4360     		str	r3, [r0, #4]
 2005              	.L206:
 2006 002a 7047     		bx	lr
 2007              	.L223:
1599:FWLIB/src/stm32f4xx_can.c ****   {
 2008              		.loc 1 1599 0
 2009 002c 0829     		cmp	r1, #8
 2010 002e 1DD0     		beq	.L210
 2011 0030 07D8     		bhi	.L211
 2012 0032 0129     		cmp	r1, #1
 2013 0034 17D0     		beq	.L212
 2014 0036 0429     		cmp	r1, #4
 2015 0038 02D1     		bne	.L225
1607:FWLIB/src/stm32f4xx_can.c ****       break;
 2016              		.loc 1 1607 0
 2017 003a 0823     		movs	r3, #8
 2018 003c C360     		str	r3, [r0, #12]
1608:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
 2019              		.loc 1 1608 0
 2020 003e 7047     		bx	lr
 2021              	.L225:
 2022 0040 7047     		bx	lr
 2023              	.L211:
1599:FWLIB/src/stm32f4xx_can.c ****   {
 2024              		.loc 1 1599 0
 2025 0042 2029     		cmp	r1, #32
 2026 0044 15D0     		beq	.L214
 2027 0046 4029     		cmp	r1, #64
 2028 0048 02D1     		bne	.L226
1619:FWLIB/src/stm32f4xx_can.c ****       break;
 2029              		.loc 1 1619 0
 2030 004a 1023     		movs	r3, #16
 2031 004c 0361     		str	r3, [r0, #16]
1620:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
 2032              		.loc 1 1620 0
 2033 004e 7047     		bx	lr
 2034              	.L226:
 2035 0050 7047     		bx	lr
 2036              	.L224:
1599:FWLIB/src/stm32f4xx_can.c ****   {
 2037              		.loc 1 1599 0
 2038 0052 B1F5007F 		cmp	r1, #512
 2039 0056 18D0     		beq	.L218
 2040 0058 B1F5806F 		cmp	r1, #1024
 2041 005c 02D1     		bne	.L227
1641:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2042              		.loc 1 1641 0
 2043 005e 0423     		movs	r3, #4
 2044 0060 4360     		str	r3, [r0, #4]
1643:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
ARM GAS  /tmp/ccrnvJ70.s 			page 72


 2045              		.loc 1 1643 0
 2046 0062 7047     		bx	lr
 2047              	.L227:
 2048 0064 7047     		bx	lr
 2049              	.L212:
1603:FWLIB/src/stm32f4xx_can.c ****       break;
 2050              		.loc 1 1603 0
 2051 0066 0D4B     		ldr	r3, .L228
 2052 0068 8360     		str	r3, [r0, #8]
1604:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
 2053              		.loc 1 1604 0
 2054 006a 7047     		bx	lr
 2055              	.L210:
1611:FWLIB/src/stm32f4xx_can.c ****       break;
 2056              		.loc 1 1611 0
 2057 006c 1023     		movs	r3, #16
 2058 006e C360     		str	r3, [r0, #12]
1612:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
 2059              		.loc 1 1612 0
 2060 0070 7047     		bx	lr
 2061              	.L214:
1615:FWLIB/src/stm32f4xx_can.c ****       break;
 2062              		.loc 1 1615 0
 2063 0072 0823     		movs	r3, #8
 2064 0074 0361     		str	r3, [r0, #16]
1616:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
 2065              		.loc 1 1616 0
 2066 0076 7047     		bx	lr
 2067              	.L220:
1623:FWLIB/src/stm32f4xx_can.c ****       break;
 2068              		.loc 1 1623 0
 2069 0078 0823     		movs	r3, #8
 2070 007a 4360     		str	r3, [r0, #4]
1624:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
 2071              		.loc 1 1624 0
 2072 007c 7047     		bx	lr
 2073              	.L221:
1627:FWLIB/src/stm32f4xx_can.c ****       break;
 2074              		.loc 1 1627 0
 2075 007e 1023     		movs	r3, #16
 2076 0080 4360     		str	r3, [r0, #4]
1628:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
 2077              		.loc 1 1628 0
 2078 0082 7047     		bx	lr
 2079              	.L208:
1631:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
 2080              		.loc 1 1631 0
 2081 0084 0423     		movs	r3, #4
 2082 0086 4360     		str	r3, [r0, #4]
1633:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
 2083              		.loc 1 1633 0
 2084 0088 7047     		bx	lr
 2085              	.L218:
1636:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2086              		.loc 1 1636 0
 2087 008a 0423     		movs	r3, #4
 2088 008c 4360     		str	r3, [r0, #4]
ARM GAS  /tmp/ccrnvJ70.s 			page 73


1638:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
 2089              		.loc 1 1638 0
 2090 008e 7047     		bx	lr
 2091              	.L216:
1646:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2092              		.loc 1 1646 0
 2093 0090 0023     		movs	r3, #0
 2094 0092 8361     		str	r3, [r0, #24]
1648:FWLIB/src/stm32f4xx_can.c ****       break;
 2095              		.loc 1 1648 0
 2096 0094 0423     		movs	r3, #4
 2097 0096 4360     		str	r3, [r0, #4]
1649:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
 2098              		.loc 1 1649 0
 2099 0098 7047     		bx	lr
 2100              	.L229:
 2101 009a 00BF     		.align	2
 2102              	.L228:
 2103 009c 01010100 		.word	65793
 2104              		.cfi_endproc
 2105              	.LFE135:
 2107              		.text
 2108              	.Letext0:
 2109              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2110              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2111              		.file 4 "CORE/core_cm4.h"
 2112              		.file 5 "USER/system_stm32f4xx.h"
 2113              		.file 6 "USER/stm32f4xx.h"
 2114              		.file 7 "FWLIB/inc/stm32f4xx_can.h"
 2115              		.file 8 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccrnvJ70.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_can.c
     /tmp/ccrnvJ70.s:16     .text.CheckITStatus:0000000000000000 $t
     /tmp/ccrnvJ70.s:22     .text.CheckITStatus:0000000000000000 CheckITStatus
     /tmp/ccrnvJ70.s:49     .text.CAN_DeInit:0000000000000000 $t
     /tmp/ccrnvJ70.s:56     .text.CAN_DeInit:0000000000000000 CAN_DeInit
     /tmp/ccrnvJ70.s:101    .text.CAN_DeInit:0000000000000034 $d
     /tmp/ccrnvJ70.s:106    .text.CAN_Init:0000000000000000 $t
     /tmp/ccrnvJ70.s:113    .text.CAN_Init:0000000000000000 CAN_Init
     /tmp/ccrnvJ70.s:316    .text.CAN_FilterInit:0000000000000000 $t
     /tmp/ccrnvJ70.s:323    .text.CAN_FilterInit:0000000000000000 CAN_FilterInit
     /tmp/ccrnvJ70.s:492    .text.CAN_FilterInit:00000000000000f8 $d
     /tmp/ccrnvJ70.s:497    .text.CAN_StructInit:0000000000000000 $t
     /tmp/ccrnvJ70.s:504    .text.CAN_StructInit:0000000000000000 CAN_StructInit
     /tmp/ccrnvJ70.s:543    .text.CAN_SlaveStartBank:0000000000000000 $t
     /tmp/ccrnvJ70.s:550    .text.CAN_SlaveStartBank:0000000000000000 CAN_SlaveStartBank
     /tmp/ccrnvJ70.s:581    .text.CAN_SlaveStartBank:0000000000000038 $d
     /tmp/ccrnvJ70.s:586    .text.CAN_DBGFreeze:0000000000000000 $t
     /tmp/ccrnvJ70.s:593    .text.CAN_DBGFreeze:0000000000000000 CAN_DBGFreeze
     /tmp/ccrnvJ70.s:618    .text.CAN_TTComModeCmd:0000000000000000 $t
     /tmp/ccrnvJ70.s:625    .text.CAN_TTComModeCmd:0000000000000000 CAN_TTComModeCmd
     /tmp/ccrnvJ70.s:674    .text.CAN_Transmit:0000000000000000 $t
     /tmp/ccrnvJ70.s:681    .text.CAN_Transmit:0000000000000000 CAN_Transmit
     /tmp/ccrnvJ70.s:851    .text.CAN_TransmitStatus:0000000000000000 $t
     /tmp/ccrnvJ70.s:858    .text.CAN_TransmitStatus:0000000000000000 CAN_TransmitStatus
     /tmp/ccrnvJ70.s:952    .text.CAN_TransmitStatus:0000000000000064 $d
     /tmp/ccrnvJ70.s:959    .text.CAN_CancelTransmit:0000000000000000 $t
     /tmp/ccrnvJ70.s:966    .text.CAN_CancelTransmit:0000000000000000 CAN_CancelTransmit
     /tmp/ccrnvJ70.s:1005   .text.CAN_Receive:0000000000000000 $t
     /tmp/ccrnvJ70.s:1012   .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/ccrnvJ70.s:1120   .text.CAN_FIFORelease:0000000000000000 $t
     /tmp/ccrnvJ70.s:1127   .text.CAN_FIFORelease:0000000000000000 CAN_FIFORelease
     /tmp/ccrnvJ70.s:1152   .text.CAN_MessagePending:0000000000000000 $t
     /tmp/ccrnvJ70.s:1159   .text.CAN_MessagePending:0000000000000000 CAN_MessagePending
     /tmp/ccrnvJ70.s:1197   .text.CAN_OperatingModeRequest:0000000000000000 $t
     /tmp/ccrnvJ70.s:1204   .text.CAN_OperatingModeRequest:0000000000000000 CAN_OperatingModeRequest
     /tmp/ccrnvJ70.s:1347   .text.CAN_Sleep:0000000000000000 $t
     /tmp/ccrnvJ70.s:1354   .text.CAN_Sleep:0000000000000000 CAN_Sleep
     /tmp/ccrnvJ70.s:1387   .text.CAN_WakeUp:0000000000000000 $t
     /tmp/ccrnvJ70.s:1394   .text.CAN_WakeUp:0000000000000000 CAN_WakeUp
     /tmp/ccrnvJ70.s:1444   .text.CAN_GetLastErrorCode:0000000000000000 $t
     /tmp/ccrnvJ70.s:1451   .text.CAN_GetLastErrorCode:0000000000000000 CAN_GetLastErrorCode
     /tmp/ccrnvJ70.s:1470   .text.CAN_GetReceiveErrorCounter:0000000000000000 $t
     /tmp/ccrnvJ70.s:1477   .text.CAN_GetReceiveErrorCounter:0000000000000000 CAN_GetReceiveErrorCounter
     /tmp/ccrnvJ70.s:1496   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 $t
     /tmp/ccrnvJ70.s:1503   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 CAN_GetLSBTransmitErrorCounter
     /tmp/ccrnvJ70.s:1522   .text.CAN_ITConfig:0000000000000000 $t
     /tmp/ccrnvJ70.s:1529   .text.CAN_ITConfig:0000000000000000 CAN_ITConfig
     /tmp/ccrnvJ70.s:1557   .text.CAN_GetFlagStatus:0000000000000000 $t
     /tmp/ccrnvJ70.s:1564   .text.CAN_GetFlagStatus:0000000000000000 CAN_GetFlagStatus
     /tmp/ccrnvJ70.s:1677   .text.CAN_ClearFlag:0000000000000000 $t
     /tmp/ccrnvJ70.s:1684   .text.CAN_ClearFlag:0000000000000000 CAN_ClearFlag
     /tmp/ccrnvJ70.s:1733   .text.CAN_ClearFlag:0000000000000034 $d
     /tmp/ccrnvJ70.s:1738   .text.CAN_GetITStatus:0000000000000000 $t
     /tmp/ccrnvJ70.s:1745   .text.CAN_GetITStatus:0000000000000000 CAN_GetITStatus
     /tmp/ccrnvJ70.s:1966   .text.CAN_GetITStatus:00000000000000e8 $d
     /tmp/ccrnvJ70.s:1971   .text.CAN_ClearITPendingBit:0000000000000000 $t
ARM GAS  /tmp/ccrnvJ70.s 			page 75


     /tmp/ccrnvJ70.s:1978   .text.CAN_ClearITPendingBit:0000000000000000 CAN_ClearITPendingBit
     /tmp/ccrnvJ70.s:2103   .text.CAN_ClearITPendingBit:000000000000009c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
